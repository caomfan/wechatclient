// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: SearchContact.proto

package micromsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	UserName    *SKBuiltinStringT `protobuf:"bytes,2,req,name=userName" json:"userName,omitempty"`
	OpCode      *uint32           `protobuf:"varint,3,opt,name=opCode" json:"opCode,omitempty"`
	ReqBuf      *SKBuiltinBufferT `protobuf:"bytes,4,opt,name=reqBuf" json:"reqBuf,omitempty"`
	FromScene   *uint32           `protobuf:"varint,5,opt,name=fromScene" json:"fromScene,omitempty"`
	SearchScene *uint32           `protobuf:"varint,6,opt,name=searchScene" json:"searchScene,omitempty"`
}

func (x *SearchContactRequest) Reset() {
	*x = SearchContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SearchContact_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchContactRequest) ProtoMessage() {}

func (x *SearchContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_SearchContact_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchContactRequest.ProtoReflect.Descriptor instead.
func (*SearchContactRequest) Descriptor() ([]byte, []int) {
	return file_SearchContact_proto_rawDescGZIP(), []int{0}
}

func (x *SearchContactRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SearchContactRequest) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *SearchContactRequest) GetOpCode() uint32 {
	if x != nil && x.OpCode != nil {
		return *x.OpCode
	}
	return 0
}

func (x *SearchContactRequest) GetReqBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ReqBuf
	}
	return nil
}

func (x *SearchContactRequest) GetFromScene() uint32 {
	if x != nil && x.FromScene != nil {
		return *x.FromScene
	}
	return 0
}

func (x *SearchContactRequest) GetSearchScene() uint32 {
	if x != nil && x.SearchScene != nil {
		return *x.SearchScene
	}
	return 0
}

type SearchContactItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName        *SKBuiltinStringT `protobuf:"bytes,1,req,name=userName" json:"userName,omitempty"`
	NickName        *SKBuiltinStringT `protobuf:"bytes,2,req,name=nickName" json:"nickName,omitempty"`
	Pyinitial       *SKBuiltinStringT `protobuf:"bytes,3,req,name=pyinitial" json:"pyinitial,omitempty"`
	QuanPin         *SKBuiltinStringT `protobuf:"bytes,4,req,name=quanPin" json:"quanPin,omitempty"`
	Sex             *int32            `protobuf:"varint,5,req,name=sex" json:"sex,omitempty"`
	ImgBuf          *SKBuiltinBufferT `protobuf:"bytes,6,req,name=imgBuf" json:"imgBuf,omitempty"`
	Province        *string           `protobuf:"bytes,7,opt,name=province" json:"province,omitempty"`
	City            *string           `protobuf:"bytes,8,opt,name=city" json:"city,omitempty"`
	Signature       *string           `protobuf:"bytes,9,opt,name=signature" json:"signature,omitempty"`
	PersonalCard    *uint32           `protobuf:"varint,10,opt,name=personalCard" json:"personalCard,omitempty"`
	VerifyFlag      *uint32           `protobuf:"varint,11,opt,name=verifyFlag" json:"verifyFlag,omitempty"`
	VerifyInfo      *string           `protobuf:"bytes,12,opt,name=verifyInfo" json:"verifyInfo,omitempty"`
	Weibo           *string           `protobuf:"bytes,13,opt,name=weibo" json:"weibo,omitempty"`
	Alias           *string           `protobuf:"bytes,14,opt,name=alias" json:"alias,omitempty"`
	WeiboNickname   *string           `protobuf:"bytes,15,opt,name=weiboNickname" json:"weiboNickname,omitempty"`
	WeiboFlag       *uint32           `protobuf:"varint,16,opt,name=weiboFlag" json:"weiboFlag,omitempty"`
	AlbumStyle      *int32            `protobuf:"varint,17,opt,name=albumStyle" json:"albumStyle,omitempty"`
	AlbumFlag       *int32            `protobuf:"varint,18,opt,name=albumFlag" json:"albumFlag,omitempty"`
	AlbumBgImgId    *string           `protobuf:"bytes,19,opt,name=albumBgImgId" json:"albumBgImgId,omitempty"`
	SnsUserInfo     *SnsUserInfo      `protobuf:"bytes,20,opt,name=snsUserInfo" json:"snsUserInfo,omitempty"`
	Country         *string           `protobuf:"bytes,21,opt,name=country" json:"country,omitempty"`
	MyBrandList     *string           `protobuf:"bytes,22,opt,name=myBrandList" json:"myBrandList,omitempty"`
	CustomizedInfo  *CustomizedInfo   `protobuf:"bytes,23,opt,name=customizedInfo" json:"customizedInfo,omitempty"`
	BigHeadImgUrl   *string           `protobuf:"bytes,24,opt,name=bigHeadImgUrl" json:"bigHeadImgUrl,omitempty"`
	SmallHeadImgUrl *string           `protobuf:"bytes,25,opt,name=smallHeadImgUrl" json:"smallHeadImgUrl,omitempty"`
	AntispamTicket  *string           `protobuf:"bytes,26,opt,name=antispamTicket" json:"antispamTicket,omitempty"`
	MatchType       *uint32           `protobuf:"varint,27,opt,name=matchType" json:"matchType,omitempty"`
}

func (x *SearchContactItem) Reset() {
	*x = SearchContactItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SearchContact_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchContactItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchContactItem) ProtoMessage() {}

func (x *SearchContactItem) ProtoReflect() protoreflect.Message {
	mi := &file_SearchContact_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchContactItem.ProtoReflect.Descriptor instead.
func (*SearchContactItem) Descriptor() ([]byte, []int) {
	return file_SearchContact_proto_rawDescGZIP(), []int{1}
}

func (x *SearchContactItem) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *SearchContactItem) GetNickName() *SKBuiltinStringT {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *SearchContactItem) GetPyinitial() *SKBuiltinStringT {
	if x != nil {
		return x.Pyinitial
	}
	return nil
}

func (x *SearchContactItem) GetQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.QuanPin
	}
	return nil
}

func (x *SearchContactItem) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *SearchContactItem) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *SearchContactItem) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *SearchContactItem) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *SearchContactItem) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *SearchContactItem) GetPersonalCard() uint32 {
	if x != nil && x.PersonalCard != nil {
		return *x.PersonalCard
	}
	return 0
}

func (x *SearchContactItem) GetVerifyFlag() uint32 {
	if x != nil && x.VerifyFlag != nil {
		return *x.VerifyFlag
	}
	return 0
}

func (x *SearchContactItem) GetVerifyInfo() string {
	if x != nil && x.VerifyInfo != nil {
		return *x.VerifyInfo
	}
	return ""
}

func (x *SearchContactItem) GetWeibo() string {
	if x != nil && x.Weibo != nil {
		return *x.Weibo
	}
	return ""
}

func (x *SearchContactItem) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *SearchContactItem) GetWeiboNickname() string {
	if x != nil && x.WeiboNickname != nil {
		return *x.WeiboNickname
	}
	return ""
}

func (x *SearchContactItem) GetWeiboFlag() uint32 {
	if x != nil && x.WeiboFlag != nil {
		return *x.WeiboFlag
	}
	return 0
}

func (x *SearchContactItem) GetAlbumStyle() int32 {
	if x != nil && x.AlbumStyle != nil {
		return *x.AlbumStyle
	}
	return 0
}

func (x *SearchContactItem) GetAlbumFlag() int32 {
	if x != nil && x.AlbumFlag != nil {
		return *x.AlbumFlag
	}
	return 0
}

func (x *SearchContactItem) GetAlbumBgImgId() string {
	if x != nil && x.AlbumBgImgId != nil {
		return *x.AlbumBgImgId
	}
	return ""
}

func (x *SearchContactItem) GetSnsUserInfo() *SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *SearchContactItem) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *SearchContactItem) GetMyBrandList() string {
	if x != nil && x.MyBrandList != nil {
		return *x.MyBrandList
	}
	return ""
}

func (x *SearchContactItem) GetCustomizedInfo() *CustomizedInfo {
	if x != nil {
		return x.CustomizedInfo
	}
	return nil
}

func (x *SearchContactItem) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *SearchContactItem) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *SearchContactItem) GetAntispamTicket() string {
	if x != nil && x.AntispamTicket != nil {
		return *x.AntispamTicket
	}
	return ""
}

func (x *SearchContactItem) GetMatchType() uint32 {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return 0
}

type SearchContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse        `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	UserName        *SKBuiltinStringT    `protobuf:"bytes,2,req,name=userName" json:"userName,omitempty"`
	NickName        *SKBuiltinStringT    `protobuf:"bytes,3,req,name=nickName" json:"nickName,omitempty"`
	PyInitial       *SKBuiltinStringT    `protobuf:"bytes,4,req,name=pyInitial" json:"pyInitial,omitempty"`
	QuanPin         *SKBuiltinStringT    `protobuf:"bytes,5,req,name=quanPin" json:"quanPin,omitempty"`
	Sex             *int32               `protobuf:"varint,6,req,name=sex" json:"sex,omitempty"`
	ImgBuf          *SKBuiltinBufferT    `protobuf:"bytes,7,req,name=imgBuf" json:"imgBuf,omitempty"`
	Province        *string              `protobuf:"bytes,8,opt,name=province" json:"province,omitempty"`
	City            *string              `protobuf:"bytes,9,opt,name=city" json:"city,omitempty"`
	Signature       *string              `protobuf:"bytes,10,opt,name=signature" json:"signature,omitempty"`
	PersonalCard    *uint32              `protobuf:"varint,11,opt,name=personalCard" json:"personalCard,omitempty"`
	VerifyFlag      *uint32              `protobuf:"varint,12,opt,name=verifyFlag" json:"verifyFlag,omitempty"`
	VerifyInfo      *string              `protobuf:"bytes,13,opt,name=verifyInfo" json:"verifyInfo,omitempty"`
	Weibo           *string              `protobuf:"bytes,14,opt,name=weibo" json:"weibo,omitempty"`
	Alias           *string              `protobuf:"bytes,15,opt,name=alias" json:"alias,omitempty"`
	WeiboNickname   *string              `protobuf:"bytes,16,opt,name=weiboNickname" json:"weiboNickname,omitempty"`
	WeiboFlag       *uint32              `protobuf:"varint,17,opt,name=weiboFlag" json:"weiboFlag,omitempty"`
	AlbumStyle      *int32               `protobuf:"varint,18,opt,name=albumStyle" json:"albumStyle,omitempty"`
	AlbumFlag       *int32               `protobuf:"varint,19,opt,name=albumFlag" json:"albumFlag,omitempty"`
	AlbumBgImgId    *string              `protobuf:"bytes,20,opt,name=albumBgImgId" json:"albumBgImgId,omitempty"`
	SnsUserInfo     *SnsUserInfo         `protobuf:"bytes,21,opt,name=snsUserInfo" json:"snsUserInfo,omitempty"`
	Country         *string              `protobuf:"bytes,22,opt,name=country" json:"country,omitempty"`
	MyBrandList     *string              `protobuf:"bytes,23,opt,name=myBrandList" json:"myBrandList,omitempty"`
	CustomizedInfo  *CustomizedInfo      `protobuf:"bytes,24,opt,name=customizedInfo" json:"customizedInfo,omitempty"`
	ContactCount    *uint32              `protobuf:"varint,25,opt,name=contactCount" json:"contactCount,omitempty"`
	ContactList     []*SearchContactItem `protobuf:"bytes,26,rep,name=contactList" json:"contactList,omitempty"`
	BigHeadImgUrl   *string              `protobuf:"bytes,27,opt,name=bigHeadImgUrl" json:"bigHeadImgUrl,omitempty"`
	SmallHeadImgUrl *string              `protobuf:"bytes,28,opt,name=smallHeadImgUrl" json:"smallHeadImgUrl,omitempty"`
	ResBuf          *SKBuiltinBufferT    `protobuf:"bytes,29,opt,name=resBuf" json:"resBuf,omitempty"`
	AntispamTicket  *string              `protobuf:"bytes,30,opt,name=antispamTicket" json:"antispamTicket,omitempty"`
	KfWorkerId      *string              `protobuf:"bytes,31,opt,name=kfWorkerId" json:"kfWorkerId,omitempty"`
	MatchType       *uint32              `protobuf:"varint,32,opt,name=matchType" json:"matchType,omitempty"`
}

func (x *SearchContactResponse) Reset() {
	*x = SearchContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SearchContact_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchContactResponse) ProtoMessage() {}

func (x *SearchContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_SearchContact_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchContactResponse.ProtoReflect.Descriptor instead.
func (*SearchContactResponse) Descriptor() ([]byte, []int) {
	return file_SearchContact_proto_rawDescGZIP(), []int{2}
}

func (x *SearchContactResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SearchContactResponse) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *SearchContactResponse) GetNickName() *SKBuiltinStringT {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *SearchContactResponse) GetPyInitial() *SKBuiltinStringT {
	if x != nil {
		return x.PyInitial
	}
	return nil
}

func (x *SearchContactResponse) GetQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.QuanPin
	}
	return nil
}

func (x *SearchContactResponse) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *SearchContactResponse) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *SearchContactResponse) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *SearchContactResponse) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *SearchContactResponse) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *SearchContactResponse) GetPersonalCard() uint32 {
	if x != nil && x.PersonalCard != nil {
		return *x.PersonalCard
	}
	return 0
}

func (x *SearchContactResponse) GetVerifyFlag() uint32 {
	if x != nil && x.VerifyFlag != nil {
		return *x.VerifyFlag
	}
	return 0
}

func (x *SearchContactResponse) GetVerifyInfo() string {
	if x != nil && x.VerifyInfo != nil {
		return *x.VerifyInfo
	}
	return ""
}

func (x *SearchContactResponse) GetWeibo() string {
	if x != nil && x.Weibo != nil {
		return *x.Weibo
	}
	return ""
}

func (x *SearchContactResponse) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *SearchContactResponse) GetWeiboNickname() string {
	if x != nil && x.WeiboNickname != nil {
		return *x.WeiboNickname
	}
	return ""
}

func (x *SearchContactResponse) GetWeiboFlag() uint32 {
	if x != nil && x.WeiboFlag != nil {
		return *x.WeiboFlag
	}
	return 0
}

func (x *SearchContactResponse) GetAlbumStyle() int32 {
	if x != nil && x.AlbumStyle != nil {
		return *x.AlbumStyle
	}
	return 0
}

func (x *SearchContactResponse) GetAlbumFlag() int32 {
	if x != nil && x.AlbumFlag != nil {
		return *x.AlbumFlag
	}
	return 0
}

func (x *SearchContactResponse) GetAlbumBgImgId() string {
	if x != nil && x.AlbumBgImgId != nil {
		return *x.AlbumBgImgId
	}
	return ""
}

func (x *SearchContactResponse) GetSnsUserInfo() *SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *SearchContactResponse) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *SearchContactResponse) GetMyBrandList() string {
	if x != nil && x.MyBrandList != nil {
		return *x.MyBrandList
	}
	return ""
}

func (x *SearchContactResponse) GetCustomizedInfo() *CustomizedInfo {
	if x != nil {
		return x.CustomizedInfo
	}
	return nil
}

func (x *SearchContactResponse) GetContactCount() uint32 {
	if x != nil && x.ContactCount != nil {
		return *x.ContactCount
	}
	return 0
}

func (x *SearchContactResponse) GetContactList() []*SearchContactItem {
	if x != nil {
		return x.ContactList
	}
	return nil
}

func (x *SearchContactResponse) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *SearchContactResponse) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *SearchContactResponse) GetResBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ResBuf
	}
	return nil
}

func (x *SearchContactResponse) GetAntispamTicket() string {
	if x != nil && x.AntispamTicket != nil {
		return *x.AntispamTicket
	}
	return ""
}

func (x *SearchContactResponse) GetKfWorkerId() string {
	if x != nil && x.KfWorkerId != nil {
		return *x.KfWorkerId
	}
	return ""
}

func (x *SearchContactResponse) GetMatchType() uint32 {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return 0
}

var File_SearchContact_proto protoreflect.FileDescriptor

var file_SearchContact_proto_rawDesc = []byte{
	0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x4d, 0x73, 0x67, 0x42,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x14, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65,
	0x71, 0x42, 0x75, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x71, 0x42, 0x75, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0xd0, 0x07, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09,
	0x70, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x52, 0x09, 0x70, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2c,
	0x0a, 0x07, 0x71, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x78, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x2a,
	0x0a, 0x06, 0x69, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x65, 0x69,
	0x62, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x65, 0x69, 0x62,
	0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c,
	0x62, 0x75, 0x6d, 0x42, 0x67, 0x49, 0x6d, 0x67, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x67, 0x49, 0x6d, 0x67, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x0b, 0x73, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x73, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x48,
	0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x74,
	0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0xad, 0x09, 0x0a, 0x15, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x79, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x09, 0x70,
	0x79, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6e,
	0x50, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x42,
	0x75, 0x66, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x42, 0x75, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61,
	0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x69, 0x62, 0x6f,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x69, 0x62,
	0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x65, 0x69,
	0x62, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x67, 0x49,
	0x6d, 0x67, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x42, 0x67, 0x49, 0x6d, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x6e, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x6e, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x42, 0x75,
	0x66, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x42, 0x75, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x74,
	0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6b,
	0x66, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6b, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x6d, 0x73, 0x67,
}

var (
	file_SearchContact_proto_rawDescOnce sync.Once
	file_SearchContact_proto_rawDescData = file_SearchContact_proto_rawDesc
)

func file_SearchContact_proto_rawDescGZIP() []byte {
	file_SearchContact_proto_rawDescOnce.Do(func() {
		file_SearchContact_proto_rawDescData = protoimpl.X.CompressGZIP(file_SearchContact_proto_rawDescData)
	})
	return file_SearchContact_proto_rawDescData
}

var file_SearchContact_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_SearchContact_proto_goTypes = []interface{}{
	(*SearchContactRequest)(nil),  // 0: SearchContactRequest
	(*SearchContactItem)(nil),     // 1: SearchContactItem
	(*SearchContactResponse)(nil), // 2: SearchContactResponse
	(*BaseRequest)(nil),           // 3: BaseRequest
	(*SKBuiltinStringT)(nil),      // 4: SKBuiltinString_t
	(*SKBuiltinBufferT)(nil),      // 5: SKBuiltinBuffer_t
	(*SnsUserInfo)(nil),           // 6: SnsUserInfo
	(*CustomizedInfo)(nil),        // 7: CustomizedInfo
	(*BaseResponse)(nil),          // 8: BaseResponse
}
var file_SearchContact_proto_depIdxs = []int32{
	3,  // 0: SearchContactRequest.baseRequest:type_name -> BaseRequest
	4,  // 1: SearchContactRequest.userName:type_name -> SKBuiltinString_t
	5,  // 2: SearchContactRequest.reqBuf:type_name -> SKBuiltinBuffer_t
	4,  // 3: SearchContactItem.userName:type_name -> SKBuiltinString_t
	4,  // 4: SearchContactItem.nickName:type_name -> SKBuiltinString_t
	4,  // 5: SearchContactItem.pyinitial:type_name -> SKBuiltinString_t
	4,  // 6: SearchContactItem.quanPin:type_name -> SKBuiltinString_t
	5,  // 7: SearchContactItem.imgBuf:type_name -> SKBuiltinBuffer_t
	6,  // 8: SearchContactItem.snsUserInfo:type_name -> SnsUserInfo
	7,  // 9: SearchContactItem.customizedInfo:type_name -> CustomizedInfo
	8,  // 10: SearchContactResponse.baseResponse:type_name -> BaseResponse
	4,  // 11: SearchContactResponse.userName:type_name -> SKBuiltinString_t
	4,  // 12: SearchContactResponse.nickName:type_name -> SKBuiltinString_t
	4,  // 13: SearchContactResponse.pyInitial:type_name -> SKBuiltinString_t
	4,  // 14: SearchContactResponse.quanPin:type_name -> SKBuiltinString_t
	5,  // 15: SearchContactResponse.imgBuf:type_name -> SKBuiltinBuffer_t
	6,  // 16: SearchContactResponse.snsUserInfo:type_name -> SnsUserInfo
	7,  // 17: SearchContactResponse.customizedInfo:type_name -> CustomizedInfo
	1,  // 18: SearchContactResponse.contactList:type_name -> SearchContactItem
	5,  // 19: SearchContactResponse.resBuf:type_name -> SKBuiltinBuffer_t
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_SearchContact_proto_init() }
func file_SearchContact_proto_init() {
	if File_SearchContact_proto != nil {
		return
	}
	file_MicroMsgBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SearchContact_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SearchContact_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchContactItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SearchContact_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SearchContact_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SearchContact_proto_goTypes,
		DependencyIndexes: file_SearchContact_proto_depIdxs,
		MessageInfos:      file_SearchContact_proto_msgTypes,
	}.Build()
	File_SearchContact_proto = out.File
	file_SearchContact_proto_rawDesc = nil
	file_SearchContact_proto_goTypes = nil
	file_SearchContact_proto_depIdxs = nil
}
