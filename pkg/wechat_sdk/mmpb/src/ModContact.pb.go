// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: ModContact.proto

package micromsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName              *SKBuiltinStringT      `protobuf:"bytes,1,req,name=userName" json:"userName,omitempty"`
	NickName              *SKBuiltinStringT      `protobuf:"bytes,2,req,name=nickName" json:"nickName,omitempty"`
	PyInitial             *SKBuiltinStringT      `protobuf:"bytes,3,req,name=pyInitial" json:"pyInitial,omitempty"`
	QuanPin               *SKBuiltinStringT      `protobuf:"bytes,4,req,name=quanPin" json:"quanPin,omitempty"`
	Sex                   *int32                 `protobuf:"varint,5,req,name=sex" json:"sex,omitempty"`
	ImgBuf                *SKBuiltinBufferT      `protobuf:"bytes,6,req,name=imgBuf" json:"imgBuf,omitempty"`
	BitMask               *uint32                `protobuf:"varint,7,req,name=bitMask" json:"bitMask,omitempty"`
	BitVal                *uint32                `protobuf:"varint,8,req,name=bitVal" json:"bitVal,omitempty"`
	ImgFlag               *uint32                `protobuf:"varint,9,req,name=imgFlag" json:"imgFlag,omitempty"`
	Remark                *SKBuiltinStringT      `protobuf:"bytes,10,opt,name=remark" json:"remark,omitempty"`
	RemarkPYInitial       *SKBuiltinStringT      `protobuf:"bytes,11,opt,name=remarkPYInitial" json:"remarkPYInitial,omitempty"`
	RemarkQuanPin         *SKBuiltinStringT      `protobuf:"bytes,12,opt,name=remarkQuanPin" json:"remarkQuanPin,omitempty"`
	ContactType           *uint32                `protobuf:"varint,13,opt,name=contactType" json:"contactType,omitempty"`
	RoomInfoCount         *uint32                `protobuf:"varint,14,opt,name=roomInfoCount" json:"roomInfoCount,omitempty"`
	RoomInfoList          []*RoomInfo            `protobuf:"bytes,15,rep,name=roomInfoList" json:"roomInfoList,omitempty"`
	DomainList            *SKBuiltinStringT      `protobuf:"bytes,16,opt,name=domainList" json:"domainList,omitempty"`
	ChatRoomNotify        *uint32                `protobuf:"varint,17,opt,name=chatRoomNotify" json:"chatRoomNotify,omitempty"`
	AddContactScene       *uint32                `protobuf:"varint,18,opt,name=addContactScene" json:"addContactScene,omitempty"`
	Province              *string                `protobuf:"bytes,19,opt,name=province" json:"province,omitempty"`
	City                  *string                `protobuf:"bytes,20,opt,name=city" json:"city,omitempty"`
	Signature             *string                `protobuf:"bytes,21,opt,name=signature" json:"signature,omitempty"`
	PersonalCard          *uint32                `protobuf:"varint,22,opt,name=personalCard" json:"personalCard,omitempty"`
	HasWeiXinHdHeadImg    *uint32                `protobuf:"varint,23,opt,name=hasWeiXinHdHeadImg" json:"hasWeiXinHdHeadImg,omitempty"`
	VerifyFlag            *uint32                `protobuf:"varint,24,opt,name=verifyFlag" json:"verifyFlag,omitempty"`
	VerifyInfo            *string                `protobuf:"bytes,25,opt,name=verifyInfo" json:"verifyInfo,omitempty"`
	Level                 *int32                 `protobuf:"varint,26,opt,name=level" json:"level,omitempty"`
	Source                *uint32                `protobuf:"varint,27,opt,name=source" json:"source,omitempty"`
	Weibo                 *string                `protobuf:"bytes,28,opt,name=weibo" json:"weibo,omitempty"`
	VerifyContent         *string                `protobuf:"bytes,29,opt,name=verifyContent" json:"verifyContent,omitempty"`
	Alias                 *string                `protobuf:"bytes,30,opt,name=alias" json:"alias,omitempty"`
	ChatRoomOwner         *string                `protobuf:"bytes,31,opt,name=chatRoomOwner" json:"chatRoomOwner,omitempty"`
	WeiboNickname         *string                `protobuf:"bytes,32,opt,name=weiboNickname" json:"weiboNickname,omitempty"`
	WeiboFlag             *uint32                `protobuf:"varint,33,opt,name=weiboFlag" json:"weiboFlag,omitempty"`
	AlbumStyle            *int32                 `protobuf:"varint,34,opt,name=albumStyle" json:"albumStyle,omitempty"`
	AlbumFlag             *int32                 `protobuf:"varint,35,opt,name=albumFlag" json:"albumFlag,omitempty"`
	AlbumBgImgId          *string                `protobuf:"bytes,36,opt,name=albumBgImgId" json:"albumBgImgId,omitempty"`
	SnsUserInfo           *SnsUserInfo           `protobuf:"bytes,37,opt,name=snsUserInfo" json:"snsUserInfo,omitempty"`
	Country               *string                `protobuf:"bytes,38,opt,name=country" json:"country,omitempty"`
	BigHeadImgUrl         *string                `protobuf:"bytes,39,opt,name=bigHeadImgUrl" json:"bigHeadImgUrl,omitempty"`
	SmallHeadImgUrl       *string                `protobuf:"bytes,40,opt,name=smallHeadImgUrl" json:"smallHeadImgUrl,omitempty"`
	MyBrandList           *string                `protobuf:"bytes,41,opt,name=myBrandList" json:"myBrandList,omitempty"`
	CustomizedInfo        *CustomizedInfo        `protobuf:"bytes,42,opt,name=customizedInfo" json:"customizedInfo,omitempty"`
	ChatRoomData          *string                `protobuf:"bytes,43,opt,name=chatRoomData" json:"chatRoomData,omitempty"`
	HeadImgMd5            *string                `protobuf:"bytes,44,opt,name=headImgMd5" json:"headImgMd5,omitempty"`
	EncryptUserName       *string                `protobuf:"bytes,45,opt,name=encryptUserName" json:"encryptUserName,omitempty"`
	IdcardNum             *string                `protobuf:"bytes,46,opt,name=idcardNum" json:"idcardNum,omitempty"`
	RealName              *string                `protobuf:"bytes,47,opt,name=realName" json:"realName,omitempty"`
	MobileHash            *string                `protobuf:"bytes,48,opt,name=mobileHash" json:"mobileHash,omitempty"`
	MobileFullHash        *string                `protobuf:"bytes,49,opt,name=mobileFullHash" json:"mobileFullHash,omitempty"`
	AdditionalContactList *AdditionalContactList `protobuf:"bytes,50,opt,name=additionalContactList" json:"additionalContactList,omitempty"`
	ChatroomVersion       *uint32                `protobuf:"varint,53,opt,name=chatroomVersion" json:"chatroomVersion,omitempty"`
	ExtInfo               *string                `protobuf:"bytes,54,opt,name=extInfo" json:"extInfo,omitempty"`
	ChatroomMaxCount      *uint32                `protobuf:"varint,55,opt,name=chatroomMaxCount" json:"chatroomMaxCount,omitempty"`
	ChatroomType          *uint32                `protobuf:"varint,56,opt,name=chatroomType" json:"chatroomType,omitempty"`
	NewChatroomData       *ChatRoomMemberData    `protobuf:"bytes,57,opt,name=newChatroomData" json:"newChatroomData,omitempty"`
	DeleteFlag            *int32                 `protobuf:"varint,58,opt,name=deleteFlag" json:"deleteFlag,omitempty"`
	Description           *string                `protobuf:"bytes,59,opt,name=description" json:"description,omitempty"`
	CardImgUrl            *string                `protobuf:"bytes,60,opt,name=cardImgUrl" json:"cardImgUrl,omitempty"`
	LabelIdList           *string                `protobuf:"bytes,61,opt,name=labelIdList" json:"labelIdList,omitempty"`
	PhoneNumListInfo      *PhoneNumListInfo      `protobuf:"bytes,62,opt,name=phoneNumListInfo" json:"phoneNumListInfo,omitempty"`
	WeiDianInfo           *string                `protobuf:"bytes,63,opt,name=weiDianInfo" json:"weiDianInfo,omitempty"`
	ChatroomInfoVersion   *uint32                `protobuf:"varint,64,opt,name=chatroomInfoVersion" json:"chatroomInfoVersion,omitempty"`
}

func (x *ModContact) Reset() {
	*x = ModContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModContact) ProtoMessage() {}

func (x *ModContact) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModContact.ProtoReflect.Descriptor instead.
func (*ModContact) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{0}
}

func (x *ModContact) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ModContact) GetNickName() *SKBuiltinStringT {
	if x != nil {
		return x.NickName
	}
	return nil
}

func (x *ModContact) GetPyInitial() *SKBuiltinStringT {
	if x != nil {
		return x.PyInitial
	}
	return nil
}

func (x *ModContact) GetQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.QuanPin
	}
	return nil
}

func (x *ModContact) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *ModContact) GetImgBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *ModContact) GetBitMask() uint32 {
	if x != nil && x.BitMask != nil {
		return *x.BitMask
	}
	return 0
}

func (x *ModContact) GetBitVal() uint32 {
	if x != nil && x.BitVal != nil {
		return *x.BitVal
	}
	return 0
}

func (x *ModContact) GetImgFlag() uint32 {
	if x != nil && x.ImgFlag != nil {
		return *x.ImgFlag
	}
	return 0
}

func (x *ModContact) GetRemark() *SKBuiltinStringT {
	if x != nil {
		return x.Remark
	}
	return nil
}

func (x *ModContact) GetRemarkPYInitial() *SKBuiltinStringT {
	if x != nil {
		return x.RemarkPYInitial
	}
	return nil
}

func (x *ModContact) GetRemarkQuanPin() *SKBuiltinStringT {
	if x != nil {
		return x.RemarkQuanPin
	}
	return nil
}

func (x *ModContact) GetContactType() uint32 {
	if x != nil && x.ContactType != nil {
		return *x.ContactType
	}
	return 0
}

func (x *ModContact) GetRoomInfoCount() uint32 {
	if x != nil && x.RoomInfoCount != nil {
		return *x.RoomInfoCount
	}
	return 0
}

func (x *ModContact) GetRoomInfoList() []*RoomInfo {
	if x != nil {
		return x.RoomInfoList
	}
	return nil
}

func (x *ModContact) GetDomainList() *SKBuiltinStringT {
	if x != nil {
		return x.DomainList
	}
	return nil
}

func (x *ModContact) GetChatRoomNotify() uint32 {
	if x != nil && x.ChatRoomNotify != nil {
		return *x.ChatRoomNotify
	}
	return 0
}

func (x *ModContact) GetAddContactScene() uint32 {
	if x != nil && x.AddContactScene != nil {
		return *x.AddContactScene
	}
	return 0
}

func (x *ModContact) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *ModContact) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *ModContact) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *ModContact) GetPersonalCard() uint32 {
	if x != nil && x.PersonalCard != nil {
		return *x.PersonalCard
	}
	return 0
}

func (x *ModContact) GetHasWeiXinHdHeadImg() uint32 {
	if x != nil && x.HasWeiXinHdHeadImg != nil {
		return *x.HasWeiXinHdHeadImg
	}
	return 0
}

func (x *ModContact) GetVerifyFlag() uint32 {
	if x != nil && x.VerifyFlag != nil {
		return *x.VerifyFlag
	}
	return 0
}

func (x *ModContact) GetVerifyInfo() string {
	if x != nil && x.VerifyInfo != nil {
		return *x.VerifyInfo
	}
	return ""
}

func (x *ModContact) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ModContact) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *ModContact) GetWeibo() string {
	if x != nil && x.Weibo != nil {
		return *x.Weibo
	}
	return ""
}

func (x *ModContact) GetVerifyContent() string {
	if x != nil && x.VerifyContent != nil {
		return *x.VerifyContent
	}
	return ""
}

func (x *ModContact) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *ModContact) GetChatRoomOwner() string {
	if x != nil && x.ChatRoomOwner != nil {
		return *x.ChatRoomOwner
	}
	return ""
}

func (x *ModContact) GetWeiboNickname() string {
	if x != nil && x.WeiboNickname != nil {
		return *x.WeiboNickname
	}
	return ""
}

func (x *ModContact) GetWeiboFlag() uint32 {
	if x != nil && x.WeiboFlag != nil {
		return *x.WeiboFlag
	}
	return 0
}

func (x *ModContact) GetAlbumStyle() int32 {
	if x != nil && x.AlbumStyle != nil {
		return *x.AlbumStyle
	}
	return 0
}

func (x *ModContact) GetAlbumFlag() int32 {
	if x != nil && x.AlbumFlag != nil {
		return *x.AlbumFlag
	}
	return 0
}

func (x *ModContact) GetAlbumBgImgId() string {
	if x != nil && x.AlbumBgImgId != nil {
		return *x.AlbumBgImgId
	}
	return ""
}

func (x *ModContact) GetSnsUserInfo() *SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *ModContact) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *ModContact) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *ModContact) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *ModContact) GetMyBrandList() string {
	if x != nil && x.MyBrandList != nil {
		return *x.MyBrandList
	}
	return ""
}

func (x *ModContact) GetCustomizedInfo() *CustomizedInfo {
	if x != nil {
		return x.CustomizedInfo
	}
	return nil
}

func (x *ModContact) GetChatRoomData() string {
	if x != nil && x.ChatRoomData != nil {
		return *x.ChatRoomData
	}
	return ""
}

func (x *ModContact) GetHeadImgMd5() string {
	if x != nil && x.HeadImgMd5 != nil {
		return *x.HeadImgMd5
	}
	return ""
}

func (x *ModContact) GetEncryptUserName() string {
	if x != nil && x.EncryptUserName != nil {
		return *x.EncryptUserName
	}
	return ""
}

func (x *ModContact) GetIdcardNum() string {
	if x != nil && x.IdcardNum != nil {
		return *x.IdcardNum
	}
	return ""
}

func (x *ModContact) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *ModContact) GetMobileHash() string {
	if x != nil && x.MobileHash != nil {
		return *x.MobileHash
	}
	return ""
}

func (x *ModContact) GetMobileFullHash() string {
	if x != nil && x.MobileFullHash != nil {
		return *x.MobileFullHash
	}
	return ""
}

func (x *ModContact) GetAdditionalContactList() *AdditionalContactList {
	if x != nil {
		return x.AdditionalContactList
	}
	return nil
}

func (x *ModContact) GetChatroomVersion() uint32 {
	if x != nil && x.ChatroomVersion != nil {
		return *x.ChatroomVersion
	}
	return 0
}

func (x *ModContact) GetExtInfo() string {
	if x != nil && x.ExtInfo != nil {
		return *x.ExtInfo
	}
	return ""
}

func (x *ModContact) GetChatroomMaxCount() uint32 {
	if x != nil && x.ChatroomMaxCount != nil {
		return *x.ChatroomMaxCount
	}
	return 0
}

func (x *ModContact) GetChatroomType() uint32 {
	if x != nil && x.ChatroomType != nil {
		return *x.ChatroomType
	}
	return 0
}

func (x *ModContact) GetNewChatroomData() *ChatRoomMemberData {
	if x != nil {
		return x.NewChatroomData
	}
	return nil
}

func (x *ModContact) GetDeleteFlag() int32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

func (x *ModContact) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ModContact) GetCardImgUrl() string {
	if x != nil && x.CardImgUrl != nil {
		return *x.CardImgUrl
	}
	return ""
}

func (x *ModContact) GetLabelIdList() string {
	if x != nil && x.LabelIdList != nil {
		return *x.LabelIdList
	}
	return ""
}

func (x *ModContact) GetPhoneNumListInfo() *PhoneNumListInfo {
	if x != nil {
		return x.PhoneNumListInfo
	}
	return nil
}

func (x *ModContact) GetWeiDianInfo() string {
	if x != nil && x.WeiDianInfo != nil {
		return *x.WeiDianInfo
	}
	return ""
}

func (x *ModContact) GetChatroomInfoVersion() uint32 {
	if x != nil && x.ChatroomInfoVersion != nil {
		return *x.ChatroomInfoVersion
	}
	return 0
}

type DelContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *SKBuiltinStringT `protobuf:"bytes,1,req,name=userName" json:"userName,omitempty"`
}

func (x *DelContact) Reset() {
	*x = DelContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContact) ProtoMessage() {}

func (x *DelContact) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContact.ProtoReflect.Descriptor instead.
func (*DelContact) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{1}
}

func (x *DelContact) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

type DelChatContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *SKBuiltinStringT `protobuf:"bytes,1,req,name=userName" json:"userName,omitempty"`
}

func (x *DelChatContact) Reset() {
	*x = DelChatContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelChatContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelChatContact) ProtoMessage() {}

func (x *DelChatContact) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelChatContact.ProtoReflect.Descriptor instead.
func (*DelChatContact) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{2}
}

func (x *DelChatContact) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

type ModNotifyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *SKBuiltinStringT `protobuf:"bytes,1,req,name=userName" json:"userName,omitempty"`
	Status   *uint32           `protobuf:"varint,2,req,name=Status" json:"Status,omitempty"`
}

func (x *ModNotifyStatus) Reset() {
	*x = ModNotifyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModNotifyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModNotifyStatus) ProtoMessage() {}

func (x *ModNotifyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModNotifyStatus.ProtoReflect.Descriptor instead.
func (*ModNotifyStatus) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{3}
}

func (x *ModNotifyStatus) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ModNotifyStatus) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type ModMicroBlogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName      *SKBuiltinStringT `protobuf:"bytes,1,req,name=userName" json:"userName,omitempty"`
	MicroBlogType *uint32           `protobuf:"varint,2,req,name=microBlogType" json:"microBlogType,omitempty"`
	NotifyStatus  *uint32           `protobuf:"varint,3,req,name=notifyStatus" json:"notifyStatus,omitempty"`
	DeleteFlag    *uint32           `protobuf:"varint,4,req,name=deleteFlag" json:"deleteFlag,omitempty"`
}

func (x *ModMicroBlogInfo) Reset() {
	*x = ModMicroBlogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModMicroBlogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModMicroBlogInfo) ProtoMessage() {}

func (x *ModMicroBlogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModMicroBlogInfo.ProtoReflect.Descriptor instead.
func (*ModMicroBlogInfo) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{4}
}

func (x *ModMicroBlogInfo) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *ModMicroBlogInfo) GetMicroBlogType() uint32 {
	if x != nil && x.MicroBlogType != nil {
		return *x.MicroBlogType
	}
	return 0
}

func (x *ModMicroBlogInfo) GetNotifyStatus() uint32 {
	if x != nil && x.NotifyStatus != nil {
		return *x.NotifyStatus
	}
	return 0
}

func (x *ModMicroBlogInfo) GetDeleteFlag() uint32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

type ModDisturbSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisturbSetting *DisturbSetting `protobuf:"bytes,1,req,name=disturbSetting" json:"disturbSetting,omitempty"`
}

func (x *ModDisturbSetting) Reset() {
	*x = ModDisturbSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModDisturbSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModDisturbSetting) ProtoMessage() {}

func (x *ModDisturbSetting) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModDisturbSetting.ProtoReflect.Descriptor instead.
func (*ModDisturbSetting) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{5}
}

func (x *ModDisturbSetting) GetDisturbSetting() *DisturbSetting {
	if x != nil {
		return x.DisturbSetting
	}
	return nil
}

type InviteFriendOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName   *string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	FriendType *uint32 `protobuf:"varint,2,req,name=friendType" json:"friendType,omitempty"`
}

func (x *InviteFriendOpen) Reset() {
	*x = InviteFriendOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteFriendOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteFriendOpen) ProtoMessage() {}

func (x *InviteFriendOpen) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteFriendOpen.ProtoReflect.Descriptor instead.
func (*InviteFriendOpen) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{6}
}

func (x *InviteFriendOpen) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *InviteFriendOpen) GetFriendType() uint32 {
	if x != nil && x.FriendType != nil {
		return *x.FriendType
	}
	return 0
}

type ModUserDomainEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *uint32           `protobuf:"varint,1,req,name=status" json:"status,omitempty"`
	Email  *SKBuiltinStringT `protobuf:"bytes,2,req,name=email" json:"email,omitempty"`
}

func (x *ModUserDomainEmail) Reset() {
	*x = ModUserDomainEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModUserDomainEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModUserDomainEmail) ProtoMessage() {}

func (x *ModUserDomainEmail) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModUserDomainEmail.ProtoReflect.Descriptor instead.
func (*ModUserDomainEmail) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{7}
}

func (x *ModUserDomainEmail) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ModUserDomainEmail) GetEmail() *SKBuiltinStringT {
	if x != nil {
		return x.Email
	}
	return nil
}

type DelUserDomainEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *SKBuiltinStringT `protobuf:"bytes,1,req,name=userName" json:"userName,omitempty"`
	Email    *SKBuiltinStringT `protobuf:"bytes,2,req,name=email" json:"email,omitempty"`
}

func (x *DelUserDomainEmail) Reset() {
	*x = DelUserDomainEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserDomainEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserDomainEmail) ProtoMessage() {}

func (x *DelUserDomainEmail) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserDomainEmail.ProtoReflect.Descriptor instead.
func (*DelUserDomainEmail) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{8}
}

func (x *DelUserDomainEmail) GetUserName() *SKBuiltinStringT {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *DelUserDomainEmail) GetEmail() *SKBuiltinStringT {
	if x != nil {
		return x.Email
	}
	return nil
}

type ModDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactUsername *string `protobuf:"bytes,1,opt,name=contactUsername" json:"contactUsername,omitempty"`
	Desc            *string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (x *ModDescription) Reset() {
	*x = ModDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModDescription) ProtoMessage() {}

func (x *ModDescription) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModDescription.ProtoReflect.Descriptor instead.
func (*ModDescription) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{9}
}

func (x *ModDescription) GetContactUsername() string {
	if x != nil && x.ContactUsername != nil {
		return *x.ContactUsername
	}
	return ""
}

func (x *ModDescription) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type ModUserImg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgType         *uint32 `protobuf:"varint,1,req,name=imgType" json:"imgType,omitempty"`
	ImgLen          *uint32 `protobuf:"varint,2,req,name=imgLen" json:"imgLen,omitempty"`
	ImgBuf          []byte  `protobuf:"bytes,3,opt,name=imgBuf" json:"imgBuf,omitempty"`
	ImgMd5          *string `protobuf:"bytes,4,opt,name=imgMd5" json:"imgMd5,omitempty"`
	BigHeadImgUrl   *string `protobuf:"bytes,5,opt,name=bigHeadImgUrl" json:"bigHeadImgUrl,omitempty"`
	SmallHeadImgUrl *string `protobuf:"bytes,6,opt,name=smallHeadImgUrl" json:"smallHeadImgUrl,omitempty"`
}

func (x *ModUserImg) Reset() {
	*x = ModUserImg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModUserImg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModUserImg) ProtoMessage() {}

func (x *ModUserImg) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModUserImg.ProtoReflect.Descriptor instead.
func (*ModUserImg) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{10}
}

func (x *ModUserImg) GetImgType() uint32 {
	if x != nil && x.ImgType != nil {
		return *x.ImgType
	}
	return 0
}

func (x *ModUserImg) GetImgLen() uint32 {
	if x != nil && x.ImgLen != nil {
		return *x.ImgLen
	}
	return 0
}

func (x *ModUserImg) GetImgBuf() []byte {
	if x != nil {
		return x.ImgBuf
	}
	return nil
}

func (x *ModUserImg) GetImgMd5() string {
	if x != nil && x.ImgMd5 != nil {
		return *x.ImgMd5
	}
	return ""
}

func (x *ModUserImg) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *ModUserImg) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

type ModUserInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Content *string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (x *ModUserInfoItem) Reset() {
	*x = ModUserInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ModContact_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModUserInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModUserInfoItem) ProtoMessage() {}

func (x *ModUserInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_ModContact_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModUserInfoItem.ProtoReflect.Descriptor instead.
func (*ModUserInfoItem) Descriptor() ([]byte, []int) {
	return file_ModContact_proto_rawDescGZIP(), []int{11}
}

func (x *ModUserInfoItem) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ModUserInfoItem) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

var File_ModContact_proto protoreflect.FileDescriptor

var file_ModContact_proto_rawDesc = []byte{
	0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x4d, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x12, 0x0a, 0x0a, 0x4d, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x79, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52,
	0x09, 0x70, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x71, 0x75,
	0x61, 0x6e, 0x50, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52,
	0x07, 0x71, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x06, 0x69, 0x6d,
	0x67, 0x42, 0x75, 0x66, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06,
	0x69, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x4d, 0x61, 0x73,
	0x6b, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x06, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3c,
	0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x59, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x50, 0x59, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0d,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x51,
	0x75, 0x61, 0x6e, 0x50, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x57, 0x65, 0x69, 0x58,
	0x69, 0x6e, 0x48, 0x64, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x68, 0x61, 0x73, 0x57, 0x65, 0x69, 0x58, 0x69, 0x6e, 0x48, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x77,
	0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x65, 0x69, 0x62, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x67, 0x49, 0x6d, 0x67, 0x49, 0x64, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x67, 0x49, 0x6d, 0x67, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x4d, 0x64, 0x35, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x4d, 0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x46, 0x75,
	0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4c, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x15, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x74,
	0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74,
	0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x43,
	0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x72,
	0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72,
	0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x10, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65,
	0x69, 0x44, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x65, 0x69, 0x44, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13,
	0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x61, 0x74, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2e,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x59,
	0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x4d, 0x6f,
	0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x6c, 0x6f, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x4c, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x44,
	0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x4e, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x6e,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x4e,
	0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xbe,
	0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07,
	0x69, 0x6d, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x4c, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x4c, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x69, 0x6d, 0x67, 0x42, 0x75, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x4d, 0x64,
	0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x4d, 0x64, 0x35, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x22,
	0x3f, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6d, 0x73, 0x67,
}

var (
	file_ModContact_proto_rawDescOnce sync.Once
	file_ModContact_proto_rawDescData = file_ModContact_proto_rawDesc
)

func file_ModContact_proto_rawDescGZIP() []byte {
	file_ModContact_proto_rawDescOnce.Do(func() {
		file_ModContact_proto_rawDescData = protoimpl.X.CompressGZIP(file_ModContact_proto_rawDescData)
	})
	return file_ModContact_proto_rawDescData
}

var file_ModContact_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ModContact_proto_goTypes = []interface{}{
	(*ModContact)(nil),            // 0: ModContact
	(*DelContact)(nil),            // 1: DelContact
	(*DelChatContact)(nil),        // 2: DelChatContact
	(*ModNotifyStatus)(nil),       // 3: ModNotifyStatus
	(*ModMicroBlogInfo)(nil),      // 4: ModMicroBlogInfo
	(*ModDisturbSetting)(nil),     // 5: ModDisturbSetting
	(*InviteFriendOpen)(nil),      // 6: InviteFriendOpen
	(*ModUserDomainEmail)(nil),    // 7: ModUserDomainEmail
	(*DelUserDomainEmail)(nil),    // 8: DelUserDomainEmail
	(*ModDescription)(nil),        // 9: ModDescription
	(*ModUserImg)(nil),            // 10: ModUserImg
	(*ModUserInfoItem)(nil),       // 11: ModUserInfoItem
	(*SKBuiltinStringT)(nil),      // 12: SKBuiltinString_t
	(*SKBuiltinBufferT)(nil),      // 13: SKBuiltinBuffer_t
	(*RoomInfo)(nil),              // 14: RoomInfo
	(*SnsUserInfo)(nil),           // 15: SnsUserInfo
	(*CustomizedInfo)(nil),        // 16: CustomizedInfo
	(*AdditionalContactList)(nil), // 17: AdditionalContactList
	(*ChatRoomMemberData)(nil),    // 18: ChatRoomMemberData
	(*PhoneNumListInfo)(nil),      // 19: PhoneNumListInfo
	(*DisturbSetting)(nil),        // 20: DisturbSetting
}
var file_ModContact_proto_depIdxs = []int32{
	12, // 0: ModContact.userName:type_name -> SKBuiltinString_t
	12, // 1: ModContact.nickName:type_name -> SKBuiltinString_t
	12, // 2: ModContact.pyInitial:type_name -> SKBuiltinString_t
	12, // 3: ModContact.quanPin:type_name -> SKBuiltinString_t
	13, // 4: ModContact.imgBuf:type_name -> SKBuiltinBuffer_t
	12, // 5: ModContact.remark:type_name -> SKBuiltinString_t
	12, // 6: ModContact.remarkPYInitial:type_name -> SKBuiltinString_t
	12, // 7: ModContact.remarkQuanPin:type_name -> SKBuiltinString_t
	14, // 8: ModContact.roomInfoList:type_name -> RoomInfo
	12, // 9: ModContact.domainList:type_name -> SKBuiltinString_t
	15, // 10: ModContact.snsUserInfo:type_name -> SnsUserInfo
	16, // 11: ModContact.customizedInfo:type_name -> CustomizedInfo
	17, // 12: ModContact.additionalContactList:type_name -> AdditionalContactList
	18, // 13: ModContact.newChatroomData:type_name -> ChatRoomMemberData
	19, // 14: ModContact.phoneNumListInfo:type_name -> PhoneNumListInfo
	12, // 15: DelContact.userName:type_name -> SKBuiltinString_t
	12, // 16: DelChatContact.userName:type_name -> SKBuiltinString_t
	12, // 17: ModNotifyStatus.userName:type_name -> SKBuiltinString_t
	12, // 18: ModMicroBlogInfo.userName:type_name -> SKBuiltinString_t
	20, // 19: ModDisturbSetting.disturbSetting:type_name -> DisturbSetting
	12, // 20: ModUserDomainEmail.email:type_name -> SKBuiltinString_t
	12, // 21: DelUserDomainEmail.userName:type_name -> SKBuiltinString_t
	12, // 22: DelUserDomainEmail.email:type_name -> SKBuiltinString_t
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_ModContact_proto_init() }
func file_ModContact_proto_init() {
	if File_ModContact_proto != nil {
		return
	}
	file_MicroMsgBase_proto_init()
	file_ModUserInfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ModContact_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelChatContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModNotifyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModMicroBlogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModDisturbSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteFriendOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModUserDomainEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserDomainEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModUserImg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ModContact_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModUserInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ModContact_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ModContact_proto_goTypes,
		DependencyIndexes: file_ModContact_proto_depIdxs,
		MessageInfos:      file_ModContact_proto_msgTypes,
	}.Build()
	File_ModContact_proto = out.File
	file_ModContact_proto_rawDesc = nil
	file_ModContact_proto_goTypes = nil
	file_ModContact_proto_depIdxs = nil
}
