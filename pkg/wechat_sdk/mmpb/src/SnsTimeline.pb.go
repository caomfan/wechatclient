// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: SnsTimeline.proto

package micromsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnsTimeLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest              *BaseRequest      `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	FirstPageMd5             *string           `protobuf:"bytes,2,opt,name=firstPageMd5" json:"firstPageMd5,omitempty"`
	MaxId                    *uint64           `protobuf:"varint,3,req,name=maxId" json:"maxId,omitempty"`
	MinFilterId              *uint64           `protobuf:"varint,4,opt,name=minFilterId" json:"minFilterId,omitempty"`
	LastRequestTime          *uint32           `protobuf:"varint,5,opt,name=lastRequestTime" json:"lastRequestTime,omitempty"`
	ClientLatestId           *uint64           `protobuf:"varint,6,opt,name=clientLatestId" json:"clientLatestId,omitempty"`
	Session                  *SKBuiltinBufferT `protobuf:"bytes,7,opt,name=session" json:"session,omitempty"`
	NetworkType              *uint32           `protobuf:"varint,8,opt,name=networkType" json:"networkType,omitempty"`
	Adexpinfo                *SnsAdExpInfo     `protobuf:"bytes,10,opt,name=adexpinfo" json:"adexpinfo,omitempty"`
	RealFeedExposureIdsCount *uint32           `protobuf:"varint,11,opt,name=realFeedExposureIdsCount" json:"realFeedExposureIdsCount,omitempty"`
	RealFeedExposureIds      []uint64          `protobuf:"varint,12,rep,packed,name=realFeedExposureIds" json:"realFeedExposureIds,omitempty"`
	UpdateTimelineScene      *uint32           `protobuf:"varint,13,opt,name=updateTimelineScene" json:"updateTimelineScene,omitempty"`
	PullType                 *uint32           `protobuf:"varint,14,opt,name=pullType" json:"pullType,omitempty"`
	MinIdForGetPrePage       *uint64           `protobuf:"varint,15,opt,name=minIdForGetPrePage" json:"minIdForGetPrePage,omitempty"`
	MinIdForCheckUnread      *uint64           `protobuf:"varint,16,opt,name=minIdForCheckUnread" json:"minIdForCheckUnread,omitempty"`
	NearbyFoldId             *uint64           `protobuf:"varint,17,opt,name=nearbyFoldId" json:"nearbyFoldId,omitempty"`
	FoldSectionSize          *uint32           `protobuf:"varint,18,opt,name=foldSectionSize" json:"foldSectionSize,omitempty"`
	GetTimeLineIdxMinId      *uint64           `protobuf:"varint,19,opt,name=getTimeLineIdxMinId" json:"getTimeLineIdxMinId,omitempty"`
	AdPassThroughInfo        *SKBuiltinBufferT `protobuf:"bytes,20,opt,name=adPassThroughInfo" json:"adPassThroughInfo,omitempty"`
}

func (x *SnsTimeLineRequest) Reset() {
	*x = SnsTimeLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SnsTimeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsTimeLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsTimeLineRequest) ProtoMessage() {}

func (x *SnsTimeLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_SnsTimeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsTimeLineRequest.ProtoReflect.Descriptor instead.
func (*SnsTimeLineRequest) Descriptor() ([]byte, []int) {
	return file_SnsTimeline_proto_rawDescGZIP(), []int{0}
}

func (x *SnsTimeLineRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SnsTimeLineRequest) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *SnsTimeLineRequest) GetMaxId() uint64 {
	if x != nil && x.MaxId != nil {
		return *x.MaxId
	}
	return 0
}

func (x *SnsTimeLineRequest) GetMinFilterId() uint64 {
	if x != nil && x.MinFilterId != nil {
		return *x.MinFilterId
	}
	return 0
}

func (x *SnsTimeLineRequest) GetLastRequestTime() uint32 {
	if x != nil && x.LastRequestTime != nil {
		return *x.LastRequestTime
	}
	return 0
}

func (x *SnsTimeLineRequest) GetClientLatestId() uint64 {
	if x != nil && x.ClientLatestId != nil {
		return *x.ClientLatestId
	}
	return 0
}

func (x *SnsTimeLineRequest) GetSession() *SKBuiltinBufferT {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *SnsTimeLineRequest) GetNetworkType() uint32 {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return 0
}

func (x *SnsTimeLineRequest) GetAdexpinfo() *SnsAdExpInfo {
	if x != nil {
		return x.Adexpinfo
	}
	return nil
}

func (x *SnsTimeLineRequest) GetRealFeedExposureIdsCount() uint32 {
	if x != nil && x.RealFeedExposureIdsCount != nil {
		return *x.RealFeedExposureIdsCount
	}
	return 0
}

func (x *SnsTimeLineRequest) GetRealFeedExposureIds() []uint64 {
	if x != nil {
		return x.RealFeedExposureIds
	}
	return nil
}

func (x *SnsTimeLineRequest) GetUpdateTimelineScene() uint32 {
	if x != nil && x.UpdateTimelineScene != nil {
		return *x.UpdateTimelineScene
	}
	return 0
}

func (x *SnsTimeLineRequest) GetPullType() uint32 {
	if x != nil && x.PullType != nil {
		return *x.PullType
	}
	return 0
}

func (x *SnsTimeLineRequest) GetMinIdForGetPrePage() uint64 {
	if x != nil && x.MinIdForGetPrePage != nil {
		return *x.MinIdForGetPrePage
	}
	return 0
}

func (x *SnsTimeLineRequest) GetMinIdForCheckUnread() uint64 {
	if x != nil && x.MinIdForCheckUnread != nil {
		return *x.MinIdForCheckUnread
	}
	return 0
}

func (x *SnsTimeLineRequest) GetNearbyFoldId() uint64 {
	if x != nil && x.NearbyFoldId != nil {
		return *x.NearbyFoldId
	}
	return 0
}

func (x *SnsTimeLineRequest) GetFoldSectionSize() uint32 {
	if x != nil && x.FoldSectionSize != nil {
		return *x.FoldSectionSize
	}
	return 0
}

func (x *SnsTimeLineRequest) GetGetTimeLineIdxMinId() uint64 {
	if x != nil && x.GetTimeLineIdxMinId != nil {
		return *x.GetTimeLineIdxMinId
	}
	return 0
}

func (x *SnsTimeLineRequest) GetAdPassThroughInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.AdPassThroughInfo
	}
	return nil
}

type SnsTimeLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse             *BaseResponse         `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	FirstPageMd5             *string               `protobuf:"bytes,2,opt,name=firstPageMd5" json:"firstPageMd5,omitempty"`
	ObjectCount              *uint32               `protobuf:"varint,3,req,name=objectCount" json:"objectCount,omitempty"`
	ObjectList               []*SnsObject          `protobuf:"bytes,4,rep,name=objectList" json:"objectList,omitempty"`
	NewRequestTime           *uint32               `protobuf:"varint,5,opt,name=newRequestTime" json:"newRequestTime,omitempty"`
	ObjectCountForSameMd5    *uint32               `protobuf:"varint,6,opt,name=objectCountForSameMd5" json:"objectCountForSameMd5,omitempty"`
	ControlFlag              *uint32               `protobuf:"varint,7,opt,name=controlFlag" json:"controlFlag,omitempty"`
	ServerConfig             *SnsServerConfig      `protobuf:"bytes,8,opt,name=serverConfig" json:"serverConfig,omitempty"`
	AdvertiseCount           *uint32               `protobuf:"varint,9,opt,name=advertiseCount" json:"advertiseCount,omitempty"`
	AdvertiseList            []*AdvertiseObject    `protobuf:"bytes,10,rep,name=advertiseList" json:"advertiseList,omitempty"`
	Session                  *SKBuiltinBufferT     `protobuf:"bytes,11,opt,name=session" json:"session,omitempty"`
	RecCount                 *uint32               `protobuf:"varint,12,opt,name=recCount" json:"recCount,omitempty"`
	RecList                  []*RecObject          `protobuf:"bytes,13,rep,name=recList" json:"recList,omitempty"`
	DelAdvertiseCount        *uint32               `protobuf:"varint,14,opt,name=delAdvertiseCount" json:"delAdvertiseCount,omitempty"`
	DelAdvertiseList         []*DelAdvertiseObject `protobuf:"bytes,15,rep,name=delAdvertiseList" json:"delAdvertiseList,omitempty"`
	CountForCheckUnread      *uint32               `protobuf:"varint,16,opt,name=countForCheckUnread" json:"countForCheckUnread,omitempty"`
	IdListForCheckUnread     []uint64              `protobuf:"varint,17,rep,packed,name=idListForCheckUnread" json:"idListForCheckUnread,omitempty"`
	IdFlagListForCheckUnread []uint32              `protobuf:"varint,18,rep,packed,name=idFlagListForCheckUnread" json:"idFlagListForCheckUnread,omitempty"`
	WeiShangInfo             *SKBuiltinBufferT     `protobuf:"bytes,19,opt,name=weiShangInfo" json:"weiShangInfo,omitempty"`
}

func (x *SnsTimeLineResponse) Reset() {
	*x = SnsTimeLineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SnsTimeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsTimeLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsTimeLineResponse) ProtoMessage() {}

func (x *SnsTimeLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_SnsTimeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsTimeLineResponse.ProtoReflect.Descriptor instead.
func (*SnsTimeLineResponse) Descriptor() ([]byte, []int) {
	return file_SnsTimeline_proto_rawDescGZIP(), []int{1}
}

func (x *SnsTimeLineResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SnsTimeLineResponse) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *SnsTimeLineResponse) GetObjectCount() uint32 {
	if x != nil && x.ObjectCount != nil {
		return *x.ObjectCount
	}
	return 0
}

func (x *SnsTimeLineResponse) GetObjectList() []*SnsObject {
	if x != nil {
		return x.ObjectList
	}
	return nil
}

func (x *SnsTimeLineResponse) GetNewRequestTime() uint32 {
	if x != nil && x.NewRequestTime != nil {
		return *x.NewRequestTime
	}
	return 0
}

func (x *SnsTimeLineResponse) GetObjectCountForSameMd5() uint32 {
	if x != nil && x.ObjectCountForSameMd5 != nil {
		return *x.ObjectCountForSameMd5
	}
	return 0
}

func (x *SnsTimeLineResponse) GetControlFlag() uint32 {
	if x != nil && x.ControlFlag != nil {
		return *x.ControlFlag
	}
	return 0
}

func (x *SnsTimeLineResponse) GetServerConfig() *SnsServerConfig {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

func (x *SnsTimeLineResponse) GetAdvertiseCount() uint32 {
	if x != nil && x.AdvertiseCount != nil {
		return *x.AdvertiseCount
	}
	return 0
}

func (x *SnsTimeLineResponse) GetAdvertiseList() []*AdvertiseObject {
	if x != nil {
		return x.AdvertiseList
	}
	return nil
}

func (x *SnsTimeLineResponse) GetSession() *SKBuiltinBufferT {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *SnsTimeLineResponse) GetRecCount() uint32 {
	if x != nil && x.RecCount != nil {
		return *x.RecCount
	}
	return 0
}

func (x *SnsTimeLineResponse) GetRecList() []*RecObject {
	if x != nil {
		return x.RecList
	}
	return nil
}

func (x *SnsTimeLineResponse) GetDelAdvertiseCount() uint32 {
	if x != nil && x.DelAdvertiseCount != nil {
		return *x.DelAdvertiseCount
	}
	return 0
}

func (x *SnsTimeLineResponse) GetDelAdvertiseList() []*DelAdvertiseObject {
	if x != nil {
		return x.DelAdvertiseList
	}
	return nil
}

func (x *SnsTimeLineResponse) GetCountForCheckUnread() uint32 {
	if x != nil && x.CountForCheckUnread != nil {
		return *x.CountForCheckUnread
	}
	return 0
}

func (x *SnsTimeLineResponse) GetIdListForCheckUnread() []uint64 {
	if x != nil {
		return x.IdListForCheckUnread
	}
	return nil
}

func (x *SnsTimeLineResponse) GetIdFlagListForCheckUnread() []uint32 {
	if x != nil {
		return x.IdFlagListForCheckUnread
	}
	return nil
}

func (x *SnsTimeLineResponse) GetWeiShangInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.WeiShangInfo
	}
	return nil
}

var File_SnsTimeline_proto protoreflect.FileDescriptor

var file_SnsTimeline_proto_rawDesc = []byte{
	0x0a, 0x11, 0x53, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x6e,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x06, 0x0a, 0x12,
	0x53, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d,
	0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x09, 0x61, 0x64, 0x65, 0x78, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6e, 0x73, 0x41, 0x64, 0x45, 0x78, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x61, 0x64, 0x65, 0x78, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a,
	0x18, 0x72, 0x65, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x72, 0x65, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x61,
	0x6c, 0x46, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x13, 0x72, 0x65, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x49, 0x64,
	0x46, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x49,
	0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x46, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x46, 0x6f, 0x6c,
	0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6f,
	0x6c, 0x64, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x78, 0x4d,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x67, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x78, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x11, 0x61, 0x64, 0x50, 0x61, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x11,
	0x61, 0x64, 0x50, 0x61, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x91, 0x07, 0x0a, 0x13, 0x53, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x34,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x52, 0x65, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44,
	0x65, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x14, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x14, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x3e, 0x0a,
	0x18, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0d, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x18, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x36, 0x0a,
	0x0c, 0x77, 0x65, 0x69, 0x53, 0x68, 0x61, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0c, 0x77, 0x65, 0x69, 0x53, 0x68, 0x61, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x6d, 0x73, 0x67,
}

var (
	file_SnsTimeline_proto_rawDescOnce sync.Once
	file_SnsTimeline_proto_rawDescData = file_SnsTimeline_proto_rawDesc
)

func file_SnsTimeline_proto_rawDescGZIP() []byte {
	file_SnsTimeline_proto_rawDescOnce.Do(func() {
		file_SnsTimeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_SnsTimeline_proto_rawDescData)
	})
	return file_SnsTimeline_proto_rawDescData
}

var file_SnsTimeline_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_SnsTimeline_proto_goTypes = []interface{}{
	(*SnsTimeLineRequest)(nil),  // 0: SnsTimeLineRequest
	(*SnsTimeLineResponse)(nil), // 1: SnsTimeLineResponse
	(*BaseRequest)(nil),         // 2: BaseRequest
	(*SKBuiltinBufferT)(nil),    // 3: SKBuiltinBuffer_t
	(*SnsAdExpInfo)(nil),        // 4: SnsAdExpInfo
	(*BaseResponse)(nil),        // 5: BaseResponse
	(*SnsObject)(nil),           // 6: SnsObject
	(*SnsServerConfig)(nil),     // 7: SnsServerConfig
	(*AdvertiseObject)(nil),     // 8: AdvertiseObject
	(*RecObject)(nil),           // 9: RecObject
	(*DelAdvertiseObject)(nil),  // 10: DelAdvertiseObject
}
var file_SnsTimeline_proto_depIdxs = []int32{
	2,  // 0: SnsTimeLineRequest.baseRequest:type_name -> BaseRequest
	3,  // 1: SnsTimeLineRequest.session:type_name -> SKBuiltinBuffer_t
	4,  // 2: SnsTimeLineRequest.adexpinfo:type_name -> SnsAdExpInfo
	3,  // 3: SnsTimeLineRequest.adPassThroughInfo:type_name -> SKBuiltinBuffer_t
	5,  // 4: SnsTimeLineResponse.baseResponse:type_name -> BaseResponse
	6,  // 5: SnsTimeLineResponse.objectList:type_name -> SnsObject
	7,  // 6: SnsTimeLineResponse.serverConfig:type_name -> SnsServerConfig
	8,  // 7: SnsTimeLineResponse.advertiseList:type_name -> AdvertiseObject
	3,  // 8: SnsTimeLineResponse.session:type_name -> SKBuiltinBuffer_t
	9,  // 9: SnsTimeLineResponse.recList:type_name -> RecObject
	10, // 10: SnsTimeLineResponse.delAdvertiseList:type_name -> DelAdvertiseObject
	3,  // 11: SnsTimeLineResponse.weiShangInfo:type_name -> SKBuiltinBuffer_t
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_SnsTimeline_proto_init() }
func file_SnsTimeline_proto_init() {
	if File_SnsTimeline_proto != nil {
		return
	}
	file_MicroMsgBase_proto_init()
	file_MicroSnsBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SnsTimeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsTimeLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SnsTimeline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsTimeLineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SnsTimeline_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SnsTimeline_proto_goTypes,
		DependencyIndexes: file_SnsTimeline_proto_depIdxs,
		MessageInfos:      file_SnsTimeline_proto_msgTypes,
	}.Build()
	File_SnsTimeline_proto = out.File
	file_SnsTimeline_proto_rawDesc = nil
	file_SnsTimeline_proto_goTypes = nil
	file_SnsTimeline_proto_depIdxs = nil
}
