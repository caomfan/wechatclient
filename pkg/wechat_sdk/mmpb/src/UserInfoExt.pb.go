// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: UserInfoExt.proto

package micromsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PatternLockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatternVersion *uint32           `protobuf:"varint,1,opt,name=patternVersion" json:"patternVersion,omitempty"`
	Sign           *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=sign" json:"sign,omitempty"`
	LockStatus     *uint32           `protobuf:"varint,3,opt,name=lockStatus" json:"lockStatus,omitempty"`
}

func (x *PatternLockInfo) Reset() {
	*x = PatternLockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserInfoExt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternLockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternLockInfo) ProtoMessage() {}

func (x *PatternLockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserInfoExt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternLockInfo.ProtoReflect.Descriptor instead.
func (*PatternLockInfo) Descriptor() ([]byte, []int) {
	return file_UserInfoExt_proto_rawDescGZIP(), []int{0}
}

func (x *PatternLockInfo) GetPatternVersion() uint32 {
	if x != nil && x.PatternVersion != nil {
		return *x.PatternVersion
	}
	return 0
}

func (x *PatternLockInfo) GetSign() *SKBuiltinBufferT {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *PatternLockInfo) GetLockStatus() uint32 {
	if x != nil && x.LockStatus != nil {
		return *x.LockStatus
	}
	return 0
}

type UserInfoExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnsUserInfo         *SnsUserInfo         `protobuf:"bytes,1,req,name=snsUserInfo" json:"snsUserInfo,omitempty"`
	MyBrandList         *string              `protobuf:"bytes,2,opt,name=myBrandList" json:"myBrandList,omitempty"`
	MsgPushSound        *string              `protobuf:"bytes,3,opt,name=msgPushSound" json:"msgPushSound,omitempty"`
	VoipPushSound       *string              `protobuf:"bytes,4,opt,name=voipPushSound" json:"voipPushSound,omitempty"`
	BigChatRoomSize     *uint32              `protobuf:"varint,5,opt,name=bigChatRoomSize" json:"bigChatRoomSize,omitempty"`
	BigChatRoomQuota    *uint32              `protobuf:"varint,6,opt,name=bigChatRoomQuota" json:"bigChatRoomQuota,omitempty"`
	BigChatRoomInvite   *uint32              `protobuf:"varint,7,opt,name=bigChatRoomInvite" json:"bigChatRoomInvite,omitempty"`
	SafeMobile          *string              `protobuf:"bytes,8,opt,name=safeMobile" json:"safeMobile,omitempty"`
	BigHeadImgUrl       *string              `protobuf:"bytes,9,opt,name=bigHeadImgUrl" json:"bigHeadImgUrl,omitempty"`
	SmallHeadImgUrl     *string              `protobuf:"bytes,10,opt,name=smallHeadImgUrl" json:"smallHeadImgUrl,omitempty"`
	MainAcctType        *uint32              `protobuf:"varint,11,opt,name=mainAcctType" json:"mainAcctType,omitempty"`
	ExtXml              *SKBuiltinStringT    `protobuf:"bytes,12,opt,name=extXml" json:"extXml,omitempty"`
	SafeDeviceList      *SafeDeviceList      `protobuf:"bytes,13,opt,name=safeDeviceList" json:"safeDeviceList,omitempty"`
	SafeDevice          *uint32              `protobuf:"varint,14,opt,name=safeDevice" json:"safeDevice,omitempty"`
	GrayscaleFlag       *uint32              `protobuf:"varint,15,opt,name=grayscaleFlag" json:"grayscaleFlag,omitempty"`
	GoogleContactName   *string              `protobuf:"bytes,16,opt,name=googleContactName" json:"googleContactName,omitempty"`
	IdcardNum           *string              `protobuf:"bytes,17,opt,name=idcardNum" json:"idcardNum,omitempty"`
	RealName            *string              `protobuf:"bytes,18,opt,name=realName" json:"realName,omitempty"`
	RegCountry          *string              `protobuf:"bytes,19,opt,name=regCountry" json:"regCountry,omitempty"`
	BbppId              *string              `protobuf:"bytes,20,opt,name=bbppId" json:"bbppId,omitempty"`
	BbPin               *string              `protobuf:"bytes,21,opt,name=bbPin" json:"bbPin,omitempty"`
	BbmNickName         *string              `protobuf:"bytes,22,opt,name=bbmNickName" json:"bbmNickName,omitempty"`
	LinkedinContactItem *LinkedinContactItem `protobuf:"bytes,23,opt,name=linkedinContactItem" json:"linkedinContactItem,omitempty"`
	KfInfo              *string              `protobuf:"bytes,24,opt,name=kfInfo" json:"kfInfo,omitempty"`
	PatternLockInfo     *PatternLockInfo     `protobuf:"bytes,25,opt,name=patternLockInfo" json:"patternLockInfo,omitempty"`
	SecurityDeviceId    *string              `protobuf:"bytes,26,opt,name=securityDeviceId" json:"securityDeviceId,omitempty"`
	PayWalletType       *uint32              `protobuf:"varint,27,opt,name=payWalletType" json:"payWalletType,omitempty"`
}

func (x *UserInfoExt) Reset() {
	*x = UserInfoExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserInfoExt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoExt) ProtoMessage() {}

func (x *UserInfoExt) ProtoReflect() protoreflect.Message {
	mi := &file_UserInfoExt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoExt.ProtoReflect.Descriptor instead.
func (*UserInfoExt) Descriptor() ([]byte, []int) {
	return file_UserInfoExt_proto_rawDescGZIP(), []int{1}
}

func (x *UserInfoExt) GetSnsUserInfo() *SnsUserInfo {
	if x != nil {
		return x.SnsUserInfo
	}
	return nil
}

func (x *UserInfoExt) GetMyBrandList() string {
	if x != nil && x.MyBrandList != nil {
		return *x.MyBrandList
	}
	return ""
}

func (x *UserInfoExt) GetMsgPushSound() string {
	if x != nil && x.MsgPushSound != nil {
		return *x.MsgPushSound
	}
	return ""
}

func (x *UserInfoExt) GetVoipPushSound() string {
	if x != nil && x.VoipPushSound != nil {
		return *x.VoipPushSound
	}
	return ""
}

func (x *UserInfoExt) GetBigChatRoomSize() uint32 {
	if x != nil && x.BigChatRoomSize != nil {
		return *x.BigChatRoomSize
	}
	return 0
}

func (x *UserInfoExt) GetBigChatRoomQuota() uint32 {
	if x != nil && x.BigChatRoomQuota != nil {
		return *x.BigChatRoomQuota
	}
	return 0
}

func (x *UserInfoExt) GetBigChatRoomInvite() uint32 {
	if x != nil && x.BigChatRoomInvite != nil {
		return *x.BigChatRoomInvite
	}
	return 0
}

func (x *UserInfoExt) GetSafeMobile() string {
	if x != nil && x.SafeMobile != nil {
		return *x.SafeMobile
	}
	return ""
}

func (x *UserInfoExt) GetBigHeadImgUrl() string {
	if x != nil && x.BigHeadImgUrl != nil {
		return *x.BigHeadImgUrl
	}
	return ""
}

func (x *UserInfoExt) GetSmallHeadImgUrl() string {
	if x != nil && x.SmallHeadImgUrl != nil {
		return *x.SmallHeadImgUrl
	}
	return ""
}

func (x *UserInfoExt) GetMainAcctType() uint32 {
	if x != nil && x.MainAcctType != nil {
		return *x.MainAcctType
	}
	return 0
}

func (x *UserInfoExt) GetExtXml() *SKBuiltinStringT {
	if x != nil {
		return x.ExtXml
	}
	return nil
}

func (x *UserInfoExt) GetSafeDeviceList() *SafeDeviceList {
	if x != nil {
		return x.SafeDeviceList
	}
	return nil
}

func (x *UserInfoExt) GetSafeDevice() uint32 {
	if x != nil && x.SafeDevice != nil {
		return *x.SafeDevice
	}
	return 0
}

func (x *UserInfoExt) GetGrayscaleFlag() uint32 {
	if x != nil && x.GrayscaleFlag != nil {
		return *x.GrayscaleFlag
	}
	return 0
}

func (x *UserInfoExt) GetGoogleContactName() string {
	if x != nil && x.GoogleContactName != nil {
		return *x.GoogleContactName
	}
	return ""
}

func (x *UserInfoExt) GetIdcardNum() string {
	if x != nil && x.IdcardNum != nil {
		return *x.IdcardNum
	}
	return ""
}

func (x *UserInfoExt) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *UserInfoExt) GetRegCountry() string {
	if x != nil && x.RegCountry != nil {
		return *x.RegCountry
	}
	return ""
}

func (x *UserInfoExt) GetBbppId() string {
	if x != nil && x.BbppId != nil {
		return *x.BbppId
	}
	return ""
}

func (x *UserInfoExt) GetBbPin() string {
	if x != nil && x.BbPin != nil {
		return *x.BbPin
	}
	return ""
}

func (x *UserInfoExt) GetBbmNickName() string {
	if x != nil && x.BbmNickName != nil {
		return *x.BbmNickName
	}
	return ""
}

func (x *UserInfoExt) GetLinkedinContactItem() *LinkedinContactItem {
	if x != nil {
		return x.LinkedinContactItem
	}
	return nil
}

func (x *UserInfoExt) GetKfInfo() string {
	if x != nil && x.KfInfo != nil {
		return *x.KfInfo
	}
	return ""
}

func (x *UserInfoExt) GetPatternLockInfo() *PatternLockInfo {
	if x != nil {
		return x.PatternLockInfo
	}
	return nil
}

func (x *UserInfoExt) GetSecurityDeviceId() string {
	if x != nil && x.SecurityDeviceId != nil {
		return *x.SecurityDeviceId
	}
	return ""
}

func (x *UserInfoExt) GetPayWalletType() uint32 {
	if x != nil && x.PayWalletType != nil {
		return *x.PayWalletType
	}
	return 0
}

var File_UserInfoExt_proto protoreflect.FileDescriptor

var file_UserInfoExt_proto_rawDesc = []byte{
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x08, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x73,
	0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x53, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x73, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x73, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x50, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x70, 0x50, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x69, 0x70, 0x50, 0x75,
	0x73, 0x68, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x69, 0x67, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x62, 0x69, 0x67, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69, 0x67, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x69, 0x67,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2c, 0x0a,
	0x11, 0x62, 0x69, 0x67, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x69, 0x67, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x61, 0x66, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x61, 0x66, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x58, 0x6d, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x52, 0x06, 0x65, 0x78, 0x74, 0x58, 0x6d, 0x6c, 0x12, 0x37, 0x0a, 0x0e, 0x73,
	0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x79, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x72, 0x61,
	0x79, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x64, 0x63, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x64, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x62, 0x70, 0x70, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x62, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x62,
	0x50, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x62, 0x50, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x62, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x62, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x66, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61,
	0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6d, 0x73, 0x67,
}

var (
	file_UserInfoExt_proto_rawDescOnce sync.Once
	file_UserInfoExt_proto_rawDescData = file_UserInfoExt_proto_rawDesc
)

func file_UserInfoExt_proto_rawDescGZIP() []byte {
	file_UserInfoExt_proto_rawDescOnce.Do(func() {
		file_UserInfoExt_proto_rawDescData = protoimpl.X.CompressGZIP(file_UserInfoExt_proto_rawDescData)
	})
	return file_UserInfoExt_proto_rawDescData
}

var file_UserInfoExt_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_UserInfoExt_proto_goTypes = []interface{}{
	(*PatternLockInfo)(nil),     // 0: PatternLockInfo
	(*UserInfoExt)(nil),         // 1: UserInfoExt
	(*SKBuiltinBufferT)(nil),    // 2: SKBuiltinBuffer_t
	(*SnsUserInfo)(nil),         // 3: SnsUserInfo
	(*SKBuiltinStringT)(nil),    // 4: SKBuiltinString_t
	(*SafeDeviceList)(nil),      // 5: SafeDeviceList
	(*LinkedinContactItem)(nil), // 6: LinkedinContactItem
}
var file_UserInfoExt_proto_depIdxs = []int32{
	2, // 0: PatternLockInfo.sign:type_name -> SKBuiltinBuffer_t
	3, // 1: UserInfoExt.snsUserInfo:type_name -> SnsUserInfo
	4, // 2: UserInfoExt.extXml:type_name -> SKBuiltinString_t
	5, // 3: UserInfoExt.safeDeviceList:type_name -> SafeDeviceList
	6, // 4: UserInfoExt.linkedinContactItem:type_name -> LinkedinContactItem
	0, // 5: UserInfoExt.patternLockInfo:type_name -> PatternLockInfo
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_UserInfoExt_proto_init() }
func file_UserInfoExt_proto_init() {
	if File_UserInfoExt_proto != nil {
		return
	}
	file_MicroMsgBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_UserInfoExt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternLockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserInfoExt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_UserInfoExt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_UserInfoExt_proto_goTypes,
		DependencyIndexes: file_UserInfoExt_proto_depIdxs,
		MessageInfos:      file_UserInfoExt_proto_msgTypes,
	}.Build()
	File_UserInfoExt_proto = out.File
	file_UserInfoExt_proto_rawDesc = nil
	file_UserInfoExt_proto_goTypes = nil
	file_UserInfoExt_proto_depIdxs = nil
}
