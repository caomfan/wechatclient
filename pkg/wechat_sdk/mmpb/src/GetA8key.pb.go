// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: GetA8key.proto

package micromsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetA8KeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest      `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	OpCode         *uint32           `protobuf:"varint,2,req,name=opCode" json:"opCode,omitempty"`
	A2Key          *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=a2Key" json:"a2Key,omitempty"`
	AppId          *SKBuiltinStringT `protobuf:"bytes,4,opt,name=appId" json:"appId,omitempty"`
	Scope          *SKBuiltinStringT `protobuf:"bytes,5,opt,name=scope" json:"scope,omitempty"`
	State          *SKBuiltinStringT `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	ReqUrl         *SKBuiltinStringT `protobuf:"bytes,7,opt,name=reqUrl" json:"reqUrl,omitempty"`
	FriendUserName *string           `protobuf:"bytes,8,opt,name=friendUserName" json:"friendUserName,omitempty"`
	FriendQQ       *uint32           `protobuf:"varint,9,opt,name=friendQQ" json:"friendQQ,omitempty"`
	Scene          *uint32           `protobuf:"varint,10,opt,name=scene" json:"scene,omitempty"`
	UserName       *string           `protobuf:"bytes,11,opt,name=userName" json:"userName,omitempty"`
	BundleId       *string           `protobuf:"bytes,12,opt,name=bundleId" json:"bundleId,omitempty"`
	A2KeyNew       *SKBuiltinBufferT `protobuf:"bytes,13,opt,name=a2KeyNew" json:"a2KeyNew,omitempty"`
	Reason         *uint32           `protobuf:"varint,14,opt,name=reason" json:"reason,omitempty"`
	FontScale      *uint32           `protobuf:"varint,15,opt,name=fontScale" json:"fontScale,omitempty"`
	Flag           *uint32           `protobuf:"varint,16,opt,name=flag" json:"flag,omitempty"`
	NetType        *string           `protobuf:"bytes,17,opt,name=netType" json:"netType,omitempty"`
	CodeType       *uint32           `protobuf:"varint,18,opt,name=codeType" json:"codeType,omitempty"`
	CodeVersion    *uint32           `protobuf:"varint,19,opt,name=codeVersion" json:"codeVersion,omitempty"`
	RequestId      *uint32           `protobuf:"varint,20,opt,name=requestId" json:"requestId,omitempty"`
	FunctionId     *string           `protobuf:"bytes,21,opt,name=functionId" json:"functionId,omitempty"`
	WalletRegion   *uint32           `protobuf:"varint,22,opt,name=walletRegion" json:"walletRegion,omitempty"`
	Cookie         *SKBuiltinBufferT `protobuf:"bytes,23,opt,name=cookie" json:"cookie,omitempty"`
	OuterUrl       *string           `protobuf:"bytes,24,opt,name=outerUrl" json:"outerUrl,omitempty"`
	SubScene       *uint32           `protobuf:"varint,25,opt,name=subScene" json:"subScene,omitempty"`
}

func (x *GetA8KeyReq) Reset() {
	*x = GetA8KeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetA8key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetA8KeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetA8KeyReq) ProtoMessage() {}

func (x *GetA8KeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_GetA8key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetA8KeyReq.ProtoReflect.Descriptor instead.
func (*GetA8KeyReq) Descriptor() ([]byte, []int) {
	return file_GetA8key_proto_rawDescGZIP(), []int{0}
}

func (x *GetA8KeyReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetA8KeyReq) GetOpCode() uint32 {
	if x != nil && x.OpCode != nil {
		return *x.OpCode
	}
	return 0
}

func (x *GetA8KeyReq) GetA2Key() *SKBuiltinBufferT {
	if x != nil {
		return x.A2Key
	}
	return nil
}

func (x *GetA8KeyReq) GetAppId() *SKBuiltinStringT {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *GetA8KeyReq) GetScope() *SKBuiltinStringT {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GetA8KeyReq) GetState() *SKBuiltinStringT {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GetA8KeyReq) GetReqUrl() *SKBuiltinStringT {
	if x != nil {
		return x.ReqUrl
	}
	return nil
}

func (x *GetA8KeyReq) GetFriendUserName() string {
	if x != nil && x.FriendUserName != nil {
		return *x.FriendUserName
	}
	return ""
}

func (x *GetA8KeyReq) GetFriendQQ() uint32 {
	if x != nil && x.FriendQQ != nil {
		return *x.FriendQQ
	}
	return 0
}

func (x *GetA8KeyReq) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *GetA8KeyReq) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *GetA8KeyReq) GetBundleId() string {
	if x != nil && x.BundleId != nil {
		return *x.BundleId
	}
	return ""
}

func (x *GetA8KeyReq) GetA2KeyNew() *SKBuiltinBufferT {
	if x != nil {
		return x.A2KeyNew
	}
	return nil
}

func (x *GetA8KeyReq) GetReason() uint32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

func (x *GetA8KeyReq) GetFontScale() uint32 {
	if x != nil && x.FontScale != nil {
		return *x.FontScale
	}
	return 0
}

func (x *GetA8KeyReq) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *GetA8KeyReq) GetNetType() string {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return ""
}

func (x *GetA8KeyReq) GetCodeType() uint32 {
	if x != nil && x.CodeType != nil {
		return *x.CodeType
	}
	return 0
}

func (x *GetA8KeyReq) GetCodeVersion() uint32 {
	if x != nil && x.CodeVersion != nil {
		return *x.CodeVersion
	}
	return 0
}

func (x *GetA8KeyReq) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *GetA8KeyReq) GetFunctionId() string {
	if x != nil && x.FunctionId != nil {
		return *x.FunctionId
	}
	return ""
}

func (x *GetA8KeyReq) GetWalletRegion() uint32 {
	if x != nil && x.WalletRegion != nil {
		return *x.WalletRegion
	}
	return 0
}

func (x *GetA8KeyReq) GetCookie() *SKBuiltinBufferT {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *GetA8KeyReq) GetOuterUrl() string {
	if x != nil && x.OuterUrl != nil {
		return *x.OuterUrl
	}
	return ""
}

func (x *GetA8KeyReq) GetSubScene() uint32 {
	if x != nil && x.SubScene != nil {
		return *x.SubScene
	}
	return 0
}

type JSAPIPermissionBitSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitValue  *uint32 `protobuf:"varint,1,req,name=bitValue" json:"bitValue,omitempty"`
	BitValue2 *uint32 `protobuf:"varint,2,opt,name=bitValue2" json:"bitValue2,omitempty"`
	BitValue3 *uint32 `protobuf:"varint,3,opt,name=bitValue3" json:"bitValue3,omitempty"`
	BitValue4 *uint32 `protobuf:"varint,4,opt,name=bitValue4" json:"bitValue4,omitempty"`
}

func (x *JSAPIPermissionBitSet) Reset() {
	*x = JSAPIPermissionBitSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetA8key_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSAPIPermissionBitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSAPIPermissionBitSet) ProtoMessage() {}

func (x *JSAPIPermissionBitSet) ProtoReflect() protoreflect.Message {
	mi := &file_GetA8key_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSAPIPermissionBitSet.ProtoReflect.Descriptor instead.
func (*JSAPIPermissionBitSet) Descriptor() ([]byte, []int) {
	return file_GetA8key_proto_rawDescGZIP(), []int{1}
}

func (x *JSAPIPermissionBitSet) GetBitValue() uint32 {
	if x != nil && x.BitValue != nil {
		return *x.BitValue
	}
	return 0
}

func (x *JSAPIPermissionBitSet) GetBitValue2() uint32 {
	if x != nil && x.BitValue2 != nil {
		return *x.BitValue2
	}
	return 0
}

func (x *JSAPIPermissionBitSet) GetBitValue3() uint32 {
	if x != nil && x.BitValue3 != nil {
		return *x.BitValue3
	}
	return 0
}

func (x *JSAPIPermissionBitSet) GetBitValue4() uint32 {
	if x != nil && x.BitValue4 != nil {
		return *x.BitValue4
	}
	return 0
}

type GeneralControlBitSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitValue *uint32 `protobuf:"varint,1,req,name=bitValue" json:"bitValue,omitempty"`
}

func (x *GeneralControlBitSet) Reset() {
	*x = GeneralControlBitSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetA8key_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralControlBitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralControlBitSet) ProtoMessage() {}

func (x *GeneralControlBitSet) ProtoReflect() protoreflect.Message {
	mi := &file_GetA8key_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralControlBitSet.ProtoReflect.Descriptor instead.
func (*GeneralControlBitSet) Descriptor() ([]byte, []int) {
	return file_GetA8key_proto_rawDescGZIP(), []int{2}
}

func (x *GeneralControlBitSet) GetBitValue() uint32 {
	if x != nil && x.BitValue != nil {
		return *x.BitValue
	}
	return 0
}

type DeepLinkBitSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitValue *uint64 `protobuf:"varint,1,req,name=bitValue" json:"bitValue,omitempty"`
}

func (x *DeepLinkBitSet) Reset() {
	*x = DeepLinkBitSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetA8key_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepLinkBitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepLinkBitSet) ProtoMessage() {}

func (x *DeepLinkBitSet) ProtoReflect() protoreflect.Message {
	mi := &file_GetA8key_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepLinkBitSet.ProtoReflect.Descriptor instead.
func (*DeepLinkBitSet) Descriptor() ([]byte, []int) {
	return file_GetA8key_proto_rawDescGZIP(), []int{3}
}

func (x *DeepLinkBitSet) GetBitValue() uint64 {
	if x != nil && x.BitValue != nil {
		return *x.BitValue
	}
	return 0
}

type BizApiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiName *string `protobuf:"bytes,1,opt,name=apiName" json:"apiName,omitempty"`
}

func (x *BizApiInfo) Reset() {
	*x = BizApiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetA8key_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizApiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizApiInfo) ProtoMessage() {}

func (x *BizApiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GetA8key_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizApiInfo.ProtoReflect.Descriptor instead.
func (*BizApiInfo) Descriptor() ([]byte, []int) {
	return file_GetA8key_proto_rawDescGZIP(), []int{4}
}

func (x *BizApiInfo) GetApiName() string {
	if x != nil && x.ApiName != nil {
		return *x.ApiName
	}
	return ""
}

type BizScopeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope       *string       `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	ScopeStatus *uint32       `protobuf:"varint,2,req,name=scopeStatus" json:"scopeStatus,omitempty"`
	ScopeDesc   *string       `protobuf:"bytes,3,opt,name=scopeDesc" json:"scopeDesc,omitempty"`
	ApiCount    *uint32       `protobuf:"varint,4,req,name=apiCount" json:"apiCount,omitempty"`
	ApiList     []*BizApiInfo `protobuf:"bytes,5,rep,name=apiList" json:"apiList,omitempty"`
}

func (x *BizScopeInfo) Reset() {
	*x = BizScopeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetA8key_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BizScopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BizScopeInfo) ProtoMessage() {}

func (x *BizScopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GetA8key_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BizScopeInfo.ProtoReflect.Descriptor instead.
func (*BizScopeInfo) Descriptor() ([]byte, []int) {
	return file_GetA8key_proto_rawDescGZIP(), []int{5}
}

func (x *BizScopeInfo) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *BizScopeInfo) GetScopeStatus() uint32 {
	if x != nil && x.ScopeStatus != nil {
		return *x.ScopeStatus
	}
	return 0
}

func (x *BizScopeInfo) GetScopeDesc() string {
	if x != nil && x.ScopeDesc != nil {
		return *x.ScopeDesc
	}
	return ""
}

func (x *BizScopeInfo) GetApiCount() uint32 {
	if x != nil && x.ApiCount != nil {
		return *x.ApiCount
	}
	return 0
}

func (x *BizScopeInfo) GetApiList() []*BizApiInfo {
	if x != nil {
		return x.ApiList
	}
	return nil
}

type HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetA8key_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_GetA8key_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_GetA8key_proto_rawDescGZIP(), []int{6}
}

func (x *HttpHeader) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *HttpHeader) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type GetA8KeyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse         *BaseResponse          `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	FullUrl              *string                `protobuf:"bytes,2,opt,name=fullUrl" json:"fullUrl,omitempty"`
	A8Key                *string                `protobuf:"bytes,3,opt,name=a8Key" json:"a8Key,omitempty"`
	ActionCode           *uint32                `protobuf:"varint,4,opt,name=actionCode" json:"actionCode,omitempty"`
	Title                *string                `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Content              *string                `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Jsapipermission      *JSAPIPermissionBitSet `protobuf:"bytes,7,opt,name=jsapipermission" json:"jsapipermission,omitempty"`
	GeneralControlBitSet *GeneralControlBitSet  `protobuf:"bytes,8,opt,name=generalControlBitSet" json:"generalControlBitSet,omitempty"`
	UserName             *string                `protobuf:"bytes,9,opt,name=userName" json:"userName,omitempty"`
	ShareUrl             *string                `protobuf:"bytes,15,opt,name=shareUrl" json:"shareUrl,omitempty"`
	ScopeCount           *uint32                `protobuf:"varint,16,opt,name=scopeCount" json:"scopeCount,omitempty"`
	ScopeList            []*BizScopeInfo        `protobuf:"bytes,17,rep,name=scopeList" json:"scopeList,omitempty"`
	AntispamTicket       *string                `protobuf:"bytes,18,opt,name=antispamTicket" json:"antispamTicket,omitempty"`
	Ssid                 *string                `protobuf:"bytes,20,opt,name=ssid" json:"ssid,omitempty"`
	Mid                  *string                `protobuf:"bytes,21,opt,name=mid" json:"mid,omitempty"`
	DeepLinkBitSet       *DeepLinkBitSet        `protobuf:"bytes,22,opt,name=deepLinkBitSet" json:"deepLinkBitSet,omitempty"`
	JsapicontrolBytes    *SKBuiltinBufferT      `protobuf:"bytes,23,opt,name=jsapicontrolBytes" json:"jsapicontrolBytes,omitempty"`
	HttpHeaderCount      *uint32                `protobuf:"varint,24,opt,name=httpHeaderCount" json:"httpHeaderCount,omitempty"`
	HttpHeaderList       []*HttpHeader          `protobuf:"bytes,25,rep,name=httpHeaderList" json:"httpHeaderList,omitempty"`
	Wording              *string                `protobuf:"bytes,26,opt,name=wording" json:"wording,omitempty"`
	HeadImg              *string                `protobuf:"bytes,27,opt,name=headImg" json:"headImg,omitempty"`
	Cookie               *SKBuiltinBufferT      `protobuf:"bytes,28,opt,name=cookie" json:"cookie,omitempty"`
	MenuWording          *string                `protobuf:"bytes,29,opt,name=menuWording" json:"menuWording,omitempty"`
}

func (x *GetA8KeyResp) Reset() {
	*x = GetA8KeyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetA8key_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetA8KeyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetA8KeyResp) ProtoMessage() {}

func (x *GetA8KeyResp) ProtoReflect() protoreflect.Message {
	mi := &file_GetA8key_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetA8KeyResp.ProtoReflect.Descriptor instead.
func (*GetA8KeyResp) Descriptor() ([]byte, []int) {
	return file_GetA8key_proto_rawDescGZIP(), []int{7}
}

func (x *GetA8KeyResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetA8KeyResp) GetFullUrl() string {
	if x != nil && x.FullUrl != nil {
		return *x.FullUrl
	}
	return ""
}

func (x *GetA8KeyResp) GetA8Key() string {
	if x != nil && x.A8Key != nil {
		return *x.A8Key
	}
	return ""
}

func (x *GetA8KeyResp) GetActionCode() uint32 {
	if x != nil && x.ActionCode != nil {
		return *x.ActionCode
	}
	return 0
}

func (x *GetA8KeyResp) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *GetA8KeyResp) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *GetA8KeyResp) GetJsapipermission() *JSAPIPermissionBitSet {
	if x != nil {
		return x.Jsapipermission
	}
	return nil
}

func (x *GetA8KeyResp) GetGeneralControlBitSet() *GeneralControlBitSet {
	if x != nil {
		return x.GeneralControlBitSet
	}
	return nil
}

func (x *GetA8KeyResp) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *GetA8KeyResp) GetShareUrl() string {
	if x != nil && x.ShareUrl != nil {
		return *x.ShareUrl
	}
	return ""
}

func (x *GetA8KeyResp) GetScopeCount() uint32 {
	if x != nil && x.ScopeCount != nil {
		return *x.ScopeCount
	}
	return 0
}

func (x *GetA8KeyResp) GetScopeList() []*BizScopeInfo {
	if x != nil {
		return x.ScopeList
	}
	return nil
}

func (x *GetA8KeyResp) GetAntispamTicket() string {
	if x != nil && x.AntispamTicket != nil {
		return *x.AntispamTicket
	}
	return ""
}

func (x *GetA8KeyResp) GetSsid() string {
	if x != nil && x.Ssid != nil {
		return *x.Ssid
	}
	return ""
}

func (x *GetA8KeyResp) GetMid() string {
	if x != nil && x.Mid != nil {
		return *x.Mid
	}
	return ""
}

func (x *GetA8KeyResp) GetDeepLinkBitSet() *DeepLinkBitSet {
	if x != nil {
		return x.DeepLinkBitSet
	}
	return nil
}

func (x *GetA8KeyResp) GetJsapicontrolBytes() *SKBuiltinBufferT {
	if x != nil {
		return x.JsapicontrolBytes
	}
	return nil
}

func (x *GetA8KeyResp) GetHttpHeaderCount() uint32 {
	if x != nil && x.HttpHeaderCount != nil {
		return *x.HttpHeaderCount
	}
	return 0
}

func (x *GetA8KeyResp) GetHttpHeaderList() []*HttpHeader {
	if x != nil {
		return x.HttpHeaderList
	}
	return nil
}

func (x *GetA8KeyResp) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *GetA8KeyResp) GetHeadImg() string {
	if x != nil && x.HeadImg != nil {
		return *x.HeadImg
	}
	return ""
}

func (x *GetA8KeyResp) GetCookie() *SKBuiltinBufferT {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *GetA8KeyResp) GetMenuWording() string {
	if x != nil && x.MenuWording != nil {
		return *x.MenuWording
	}
	return ""
}

var File_GetA8key_proto protoreflect.FileDescriptor

var file_GetA8key_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x38, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x06, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x38, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x05,
	0x61, 0x32, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x05, 0x61, 0x32, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x55, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x06, 0x72, 0x65, 0x71, 0x55, 0x72, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x51, 0x51, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x51, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x32, 0x4b, 0x65, 0x79, 0x4e, 0x65, 0x77, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x08, 0x61, 0x32, 0x4b, 0x65, 0x79, 0x4e,
	0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f,
	0x6e, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66,
	0x6f, 0x6e, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x4a,
	0x53, 0x41, 0x50, 0x49, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69,
	0x74, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x22, 0x32, 0x0a, 0x14, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c,
	0x0a, 0x0e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x08, 0x62, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0a,
	0x42, 0x69, 0x7a, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x42, 0x69, 0x7a, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x70, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x61,
	0x70, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x42, 0x69, 0x7a, 0x41, 0x70,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x34,
	0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xfd, 0x06, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x38, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6c, 0x6c,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x6c, 0x6c, 0x55,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x38, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x38, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x6a, 0x73, 0x61, 0x70,
	0x69, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x4a, 0x53, 0x41, 0x50, 0x49, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0f, 0x6a, 0x73, 0x61, 0x70, 0x69,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x14, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x69, 0x74, 0x53,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42,
	0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x42, 0x69, 0x7a, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e,
	0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x64, 0x65, 0x65, 0x70,
	0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69, 0x74, 0x53, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x0e, 0x64, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x69, 0x74, 0x53, 0x65,
	0x74, 0x12, 0x40, 0x0a, 0x11, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x52, 0x11, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x74,
	0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x0e, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6e, 0x75, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x75, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6d,
	0x73, 0x67,
}

var (
	file_GetA8key_proto_rawDescOnce sync.Once
	file_GetA8key_proto_rawDescData = file_GetA8key_proto_rawDesc
)

func file_GetA8key_proto_rawDescGZIP() []byte {
	file_GetA8key_proto_rawDescOnce.Do(func() {
		file_GetA8key_proto_rawDescData = protoimpl.X.CompressGZIP(file_GetA8key_proto_rawDescData)
	})
	return file_GetA8key_proto_rawDescData
}

var file_GetA8key_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_GetA8key_proto_goTypes = []interface{}{
	(*GetA8KeyReq)(nil),           // 0: GetA8KeyReq
	(*JSAPIPermissionBitSet)(nil), // 1: JSAPIPermissionBitSet
	(*GeneralControlBitSet)(nil),  // 2: GeneralControlBitSet
	(*DeepLinkBitSet)(nil),        // 3: DeepLinkBitSet
	(*BizApiInfo)(nil),            // 4: BizApiInfo
	(*BizScopeInfo)(nil),          // 5: BizScopeInfo
	(*HttpHeader)(nil),            // 6: HttpHeader
	(*GetA8KeyResp)(nil),          // 7: GetA8KeyResp
	(*BaseRequest)(nil),           // 8: BaseRequest
	(*SKBuiltinBufferT)(nil),      // 9: SKBuiltinBuffer_t
	(*SKBuiltinStringT)(nil),      // 10: SKBuiltinString_t
	(*BaseResponse)(nil),          // 11: BaseResponse
}
var file_GetA8key_proto_depIdxs = []int32{
	8,  // 0: GetA8KeyReq.baseRequest:type_name -> BaseRequest
	9,  // 1: GetA8KeyReq.a2Key:type_name -> SKBuiltinBuffer_t
	10, // 2: GetA8KeyReq.appId:type_name -> SKBuiltinString_t
	10, // 3: GetA8KeyReq.scope:type_name -> SKBuiltinString_t
	10, // 4: GetA8KeyReq.state:type_name -> SKBuiltinString_t
	10, // 5: GetA8KeyReq.reqUrl:type_name -> SKBuiltinString_t
	9,  // 6: GetA8KeyReq.a2KeyNew:type_name -> SKBuiltinBuffer_t
	9,  // 7: GetA8KeyReq.cookie:type_name -> SKBuiltinBuffer_t
	4,  // 8: BizScopeInfo.apiList:type_name -> BizApiInfo
	11, // 9: GetA8KeyResp.baseResponse:type_name -> BaseResponse
	1,  // 10: GetA8KeyResp.jsapipermission:type_name -> JSAPIPermissionBitSet
	2,  // 11: GetA8KeyResp.generalControlBitSet:type_name -> GeneralControlBitSet
	5,  // 12: GetA8KeyResp.scopeList:type_name -> BizScopeInfo
	3,  // 13: GetA8KeyResp.deepLinkBitSet:type_name -> DeepLinkBitSet
	9,  // 14: GetA8KeyResp.jsapicontrolBytes:type_name -> SKBuiltinBuffer_t
	6,  // 15: GetA8KeyResp.httpHeaderList:type_name -> HttpHeader
	9,  // 16: GetA8KeyResp.cookie:type_name -> SKBuiltinBuffer_t
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_GetA8key_proto_init() }
func file_GetA8key_proto_init() {
	if File_GetA8key_proto != nil {
		return
	}
	file_MicroMsgBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GetA8key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetA8KeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetA8key_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSAPIPermissionBitSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetA8key_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralControlBitSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetA8key_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepLinkBitSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetA8key_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizApiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetA8key_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BizScopeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetA8key_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetA8key_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetA8KeyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GetA8key_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GetA8key_proto_goTypes,
		DependencyIndexes: file_GetA8key_proto_depIdxs,
		MessageInfos:      file_GetA8key_proto_msgTypes,
	}.Build()
	File_GetA8key_proto = out.File
	file_GetA8key_proto_rawDesc = nil
	file_GetA8key_proto_goTypes = nil
	file_GetA8key_proto_depIdxs = nil
}
