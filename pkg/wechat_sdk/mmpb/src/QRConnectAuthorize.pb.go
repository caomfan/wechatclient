// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: QRConnectAuthorize.proto

package micromsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OauthScopeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     *string `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	Desc      *string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
	AuthState *uint32 `protobuf:"varint,3,opt,name=authState" json:"authState,omitempty"`
}

func (x *OauthScopeInfo) Reset() {
	*x = OauthScopeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_QRConnectAuthorize_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthScopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthScopeInfo) ProtoMessage() {}

func (x *OauthScopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_QRConnectAuthorize_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthScopeInfo.ProtoReflect.Descriptor instead.
func (*OauthScopeInfo) Descriptor() ([]byte, []int) {
	return file_QRConnectAuthorize_proto_rawDescGZIP(), []int{0}
}

func (x *OauthScopeInfo) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *OauthScopeInfo) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *OauthScopeInfo) GetAuthState() uint32 {
	if x != nil && x.AuthState != nil {
		return *x.AuthState
	}
	return 0
}

type OauthAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Nickname  *string `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Avatarurl *string `protobuf:"bytes,3,opt,name=avatarurl" json:"avatarurl,omitempty"`
	Desc      *string `protobuf:"bytes,4,opt,name=desc" json:"desc,omitempty"`
}

func (x *OauthAvatarInfo) Reset() {
	*x = OauthAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_QRConnectAuthorize_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthAvatarInfo) ProtoMessage() {}

func (x *OauthAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_QRConnectAuthorize_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthAvatarInfo.ProtoReflect.Descriptor instead.
func (*OauthAvatarInfo) Descriptor() ([]byte, []int) {
	return file_QRConnectAuthorize_proto_rawDescGZIP(), []int{1}
}

func (x *OauthAvatarInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *OauthAvatarInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *OauthAvatarInfo) GetAvatarurl() string {
	if x != nil && x.Avatarurl != nil {
		return *x.Avatarurl
	}
	return ""
}

func (x *OauthAvatarInfo) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type QRConnectAuthorizeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	OauthUrl    *string      `protobuf:"bytes,2,opt,name=oauthUrl" json:"oauthUrl,omitempty"`
}

func (x *QRConnectAuthorizeReq) Reset() {
	*x = QRConnectAuthorizeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_QRConnectAuthorize_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRConnectAuthorizeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRConnectAuthorizeReq) ProtoMessage() {}

func (x *QRConnectAuthorizeReq) ProtoReflect() protoreflect.Message {
	mi := &file_QRConnectAuthorize_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRConnectAuthorizeReq.ProtoReflect.Descriptor instead.
func (*QRConnectAuthorizeReq) Descriptor() ([]byte, []int) {
	return file_QRConnectAuthorize_proto_rawDescGZIP(), []int{2}
}

func (x *QRConnectAuthorizeReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *QRConnectAuthorizeReq) GetOauthUrl() string {
	if x != nil && x.OauthUrl != nil {
		return *x.OauthUrl
	}
	return ""
}

type QRConnectAuthorizeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse         *BaseResponse      `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	IsReturnH5           *bool              `protobuf:"varint,2,opt,name=isReturnH5" json:"isReturnH5,omitempty"`
	ScopeList            []*OauthScopeInfo  `protobuf:"bytes,3,rep,name=scopeList" json:"scopeList,omitempty"`
	Appid                *string            `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	Appname              *string            `protobuf:"bytes,5,opt,name=appname" json:"appname,omitempty"`
	AppiconUrl           *string            `protobuf:"bytes,6,opt,name=appiconUrl" json:"appiconUrl,omitempty"`
	AvatarList           []*OauthAvatarInfo `protobuf:"bytes,7,rep,name=avatarList" json:"avatarList,omitempty"`
	IsBanModifyAvatar    *bool              `protobuf:"varint,8,opt,name=isBanModifyAvatar" json:"isBanModifyAvatar,omitempty"`
	AvatarLimit          *uint32            `protobuf:"varint,9,opt,name=avatarLimit" json:"avatarLimit,omitempty"`
	DefaultAvatarId      *uint32            `protobuf:"varint,10,opt,name=defaultAvatarId" json:"defaultAvatarId,omitempty"`
	DefaultHeadimgUrl    *string            `protobuf:"bytes,11,opt,name=defaultHeadimgUrl" json:"defaultHeadimgUrl,omitempty"`
	DefaultHeadimgFileid *string            `protobuf:"bytes,12,opt,name=defaultHeadimgFileid" json:"defaultHeadimgFileid,omitempty"`
}

func (x *QRConnectAuthorizeResp) Reset() {
	*x = QRConnectAuthorizeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_QRConnectAuthorize_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRConnectAuthorizeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRConnectAuthorizeResp) ProtoMessage() {}

func (x *QRConnectAuthorizeResp) ProtoReflect() protoreflect.Message {
	mi := &file_QRConnectAuthorize_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRConnectAuthorizeResp.ProtoReflect.Descriptor instead.
func (*QRConnectAuthorizeResp) Descriptor() ([]byte, []int) {
	return file_QRConnectAuthorize_proto_rawDescGZIP(), []int{3}
}

func (x *QRConnectAuthorizeResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *QRConnectAuthorizeResp) GetIsReturnH5() bool {
	if x != nil && x.IsReturnH5 != nil {
		return *x.IsReturnH5
	}
	return false
}

func (x *QRConnectAuthorizeResp) GetScopeList() []*OauthScopeInfo {
	if x != nil {
		return x.ScopeList
	}
	return nil
}

func (x *QRConnectAuthorizeResp) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *QRConnectAuthorizeResp) GetAppname() string {
	if x != nil && x.Appname != nil {
		return *x.Appname
	}
	return ""
}

func (x *QRConnectAuthorizeResp) GetAppiconUrl() string {
	if x != nil && x.AppiconUrl != nil {
		return *x.AppiconUrl
	}
	return ""
}

func (x *QRConnectAuthorizeResp) GetAvatarList() []*OauthAvatarInfo {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

func (x *QRConnectAuthorizeResp) GetIsBanModifyAvatar() bool {
	if x != nil && x.IsBanModifyAvatar != nil {
		return *x.IsBanModifyAvatar
	}
	return false
}

func (x *QRConnectAuthorizeResp) GetAvatarLimit() uint32 {
	if x != nil && x.AvatarLimit != nil {
		return *x.AvatarLimit
	}
	return 0
}

func (x *QRConnectAuthorizeResp) GetDefaultAvatarId() uint32 {
	if x != nil && x.DefaultAvatarId != nil {
		return *x.DefaultAvatarId
	}
	return 0
}

func (x *QRConnectAuthorizeResp) GetDefaultHeadimgUrl() string {
	if x != nil && x.DefaultHeadimgUrl != nil {
		return *x.DefaultHeadimgUrl
	}
	return ""
}

func (x *QRConnectAuthorizeResp) GetDefaultHeadimgFileid() string {
	if x != nil && x.DefaultHeadimgFileid != nil {
		return *x.DefaultHeadimgFileid
	}
	return ""
}

type QRConnectAuthorizeConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	OauthUrl    *string      `protobuf:"bytes,2,opt,name=oauthUrl" json:"oauthUrl,omitempty"`
	Opt         *uint32      `protobuf:"varint,3,opt,name=opt" json:"opt,omitempty"`
	Scope       []string     `protobuf:"bytes,4,rep,name=scope" json:"scope,omitempty"`
	AvatarId    *uint32      `protobuf:"varint,5,opt,name=avatarId" json:"avatarId,omitempty"`
}

func (x *QRConnectAuthorizeConfirmReq) Reset() {
	*x = QRConnectAuthorizeConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_QRConnectAuthorize_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRConnectAuthorizeConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRConnectAuthorizeConfirmReq) ProtoMessage() {}

func (x *QRConnectAuthorizeConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_QRConnectAuthorize_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRConnectAuthorizeConfirmReq.ProtoReflect.Descriptor instead.
func (*QRConnectAuthorizeConfirmReq) Descriptor() ([]byte, []int) {
	return file_QRConnectAuthorize_proto_rawDescGZIP(), []int{4}
}

func (x *QRConnectAuthorizeConfirmReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *QRConnectAuthorizeConfirmReq) GetOauthUrl() string {
	if x != nil && x.OauthUrl != nil {
		return *x.OauthUrl
	}
	return ""
}

func (x *QRConnectAuthorizeConfirmReq) GetOpt() uint32 {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return 0
}

func (x *QRConnectAuthorizeConfirmReq) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *QRConnectAuthorizeConfirmReq) GetAvatarId() uint32 {
	if x != nil && x.AvatarId != nil {
		return *x.AvatarId
	}
	return 0
}

type QRConnectAuthorizeConfirmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
}

func (x *QRConnectAuthorizeConfirmResp) Reset() {
	*x = QRConnectAuthorizeConfirmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_QRConnectAuthorize_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRConnectAuthorizeConfirmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRConnectAuthorizeConfirmResp) ProtoMessage() {}

func (x *QRConnectAuthorizeConfirmResp) ProtoReflect() protoreflect.Message {
	mi := &file_QRConnectAuthorize_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRConnectAuthorizeConfirmResp.ProtoReflect.Descriptor instead.
func (*QRConnectAuthorizeConfirmResp) Descriptor() ([]byte, []int) {
	return file_QRConnectAuthorize_proto_rawDescGZIP(), []int{5}
}

func (x *QRConnectAuthorizeConfirmResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

var File_QRConnectAuthorize_proto protoreflect.FileDescriptor

var file_QRConnectAuthorize_proto_rawDesc = []byte{
	0x0a, 0x18, 0x51, 0x52, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58,
	0x0a, 0x0e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6f, 0x0a, 0x0f, 0x4f, 0x61, 0x75, 0x74,
	0x68, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x63, 0x0a, 0x15, 0x51, 0x52, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x22, 0xf8,
	0x03, 0x0a, 0x16, 0x51, 0x52, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x35, 0x12, 0x2d, 0x0a, 0x09,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x0a, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x64, 0x69,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x69, 0x6d, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1c, 0x51, 0x52,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x1d, 0x51, 0x52,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0c,
	0x5a, 0x0a, 0x2e, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6d, 0x73, 0x67,
}

var (
	file_QRConnectAuthorize_proto_rawDescOnce sync.Once
	file_QRConnectAuthorize_proto_rawDescData = file_QRConnectAuthorize_proto_rawDesc
)

func file_QRConnectAuthorize_proto_rawDescGZIP() []byte {
	file_QRConnectAuthorize_proto_rawDescOnce.Do(func() {
		file_QRConnectAuthorize_proto_rawDescData = protoimpl.X.CompressGZIP(file_QRConnectAuthorize_proto_rawDescData)
	})
	return file_QRConnectAuthorize_proto_rawDescData
}

var file_QRConnectAuthorize_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_QRConnectAuthorize_proto_goTypes = []interface{}{
	(*OauthScopeInfo)(nil),                // 0: OauthScopeInfo
	(*OauthAvatarInfo)(nil),               // 1: OauthAvatarInfo
	(*QRConnectAuthorizeReq)(nil),         // 2: QRConnectAuthorizeReq
	(*QRConnectAuthorizeResp)(nil),        // 3: QRConnectAuthorizeResp
	(*QRConnectAuthorizeConfirmReq)(nil),  // 4: QRConnectAuthorizeConfirmReq
	(*QRConnectAuthorizeConfirmResp)(nil), // 5: QRConnectAuthorizeConfirmResp
	(*BaseRequest)(nil),                   // 6: BaseRequest
	(*BaseResponse)(nil),                  // 7: BaseResponse
}
var file_QRConnectAuthorize_proto_depIdxs = []int32{
	6, // 0: QRConnectAuthorizeReq.baseRequest:type_name -> BaseRequest
	7, // 1: QRConnectAuthorizeResp.baseResponse:type_name -> BaseResponse
	0, // 2: QRConnectAuthorizeResp.scopeList:type_name -> OauthScopeInfo
	1, // 3: QRConnectAuthorizeResp.avatarList:type_name -> OauthAvatarInfo
	6, // 4: QRConnectAuthorizeConfirmReq.baseRequest:type_name -> BaseRequest
	7, // 5: QRConnectAuthorizeConfirmResp.baseResponse:type_name -> BaseResponse
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_QRConnectAuthorize_proto_init() }
func file_QRConnectAuthorize_proto_init() {
	if File_QRConnectAuthorize_proto != nil {
		return
	}
	file_MicroMsgBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_QRConnectAuthorize_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OauthScopeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_QRConnectAuthorize_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OauthAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_QRConnectAuthorize_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRConnectAuthorizeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_QRConnectAuthorize_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRConnectAuthorizeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_QRConnectAuthorize_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRConnectAuthorizeConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_QRConnectAuthorize_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRConnectAuthorizeConfirmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_QRConnectAuthorize_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_QRConnectAuthorize_proto_goTypes,
		DependencyIndexes: file_QRConnectAuthorize_proto_depIdxs,
		MessageInfos:      file_QRConnectAuthorize_proto_msgTypes,
	}.Build()
	File_QRConnectAuthorize_proto = out.File
	file_QRConnectAuthorize_proto_rawDesc = nil
	file_QRConnectAuthorize_proto_goTypes = nil
	file_QRConnectAuthorize_proto_depIdxs = nil
}
