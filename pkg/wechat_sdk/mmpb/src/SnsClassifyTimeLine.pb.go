// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: SnsClassifyTimeLine.proto

package micromsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnsClassifyTimeLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest  *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	FirstPageMd5 *string      `protobuf:"bytes,2,opt,name=firstPageMd5" json:"firstPageMd5,omitempty"`
	MaxId        *uint64      `protobuf:"varint,3,req,name=maxId" json:"maxId,omitempty"`
	ClassifyId   *string      `protobuf:"bytes,4,opt,name=classifyId" json:"classifyId,omitempty"`
	ClassifyType *uint32      `protobuf:"varint,5,req,name=classifyType" json:"classifyType,omitempty"`
}

func (x *SnsClassifyTimeLineRequest) Reset() {
	*x = SnsClassifyTimeLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SnsClassifyTimeLine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsClassifyTimeLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsClassifyTimeLineRequest) ProtoMessage() {}

func (x *SnsClassifyTimeLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_SnsClassifyTimeLine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsClassifyTimeLineRequest.ProtoReflect.Descriptor instead.
func (*SnsClassifyTimeLineRequest) Descriptor() ([]byte, []int) {
	return file_SnsClassifyTimeLine_proto_rawDescGZIP(), []int{0}
}

func (x *SnsClassifyTimeLineRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *SnsClassifyTimeLineRequest) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *SnsClassifyTimeLineRequest) GetMaxId() uint64 {
	if x != nil && x.MaxId != nil {
		return *x.MaxId
	}
	return 0
}

func (x *SnsClassifyTimeLineRequest) GetClassifyId() string {
	if x != nil && x.ClassifyId != nil {
		return *x.ClassifyId
	}
	return ""
}

func (x *SnsClassifyTimeLineRequest) GetClassifyType() uint32 {
	if x != nil && x.ClassifyType != nil {
		return *x.ClassifyType
	}
	return 0
}

type SnsClassifyTimeLineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse          *BaseResponse    `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	FirstPageMd5          *string          `protobuf:"bytes,2,opt,name=firstPageMd5" json:"firstPageMd5,omitempty"`
	ObjectCount           *uint32          `protobuf:"varint,3,req,name=objectCount" json:"objectCount,omitempty"`
	ObjectList            []*SnsObject     `protobuf:"bytes,4,rep,name=objectList" json:"objectList,omitempty"`
	ObjectCountForSameMd5 *uint32          `protobuf:"varint,5,req,name=objectCountForSameMd5" json:"objectCountForSameMd5,omitempty"`
	Description           *string          `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	ControlFlag           *uint32          `protobuf:"varint,7,req,name=controlFlag" json:"controlFlag,omitempty"`
	ServerConfig          *SnsServerConfig `protobuf:"bytes,8,req,name=serverConfig" json:"serverConfig,omitempty"`
}

func (x *SnsClassifyTimeLineResponse) Reset() {
	*x = SnsClassifyTimeLineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SnsClassifyTimeLine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsClassifyTimeLineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsClassifyTimeLineResponse) ProtoMessage() {}

func (x *SnsClassifyTimeLineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_SnsClassifyTimeLine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsClassifyTimeLineResponse.ProtoReflect.Descriptor instead.
func (*SnsClassifyTimeLineResponse) Descriptor() ([]byte, []int) {
	return file_SnsClassifyTimeLine_proto_rawDescGZIP(), []int{1}
}

func (x *SnsClassifyTimeLineResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *SnsClassifyTimeLineResponse) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *SnsClassifyTimeLineResponse) GetObjectCount() uint32 {
	if x != nil && x.ObjectCount != nil {
		return *x.ObjectCount
	}
	return 0
}

func (x *SnsClassifyTimeLineResponse) GetObjectList() []*SnsObject {
	if x != nil {
		return x.ObjectList
	}
	return nil
}

func (x *SnsClassifyTimeLineResponse) GetObjectCountForSameMd5() uint32 {
	if x != nil && x.ObjectCountForSameMd5 != nil {
		return *x.ObjectCountForSameMd5
	}
	return 0
}

func (x *SnsClassifyTimeLineResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SnsClassifyTimeLineResponse) GetControlFlag() uint32 {
	if x != nil && x.ControlFlag != nil {
		return *x.ControlFlag
	}
	return 0
}

func (x *SnsClassifyTimeLineResponse) GetServerConfig() *SnsServerConfig {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

var File_SnsClassifyTimeLine_proto protoreflect.FileDescriptor

var file_SnsClassifyTimeLine_proto_rawDesc = []byte{
	0x0a, 0x19, 0x53, 0x6e, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x6e, 0x73, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x53, 0x6e, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d,
	0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xf2, 0x02, 0x0a, 0x1b, 0x53, 0x6e, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x34, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x6d, 0x73, 0x67,
}

var (
	file_SnsClassifyTimeLine_proto_rawDescOnce sync.Once
	file_SnsClassifyTimeLine_proto_rawDescData = file_SnsClassifyTimeLine_proto_rawDesc
)

func file_SnsClassifyTimeLine_proto_rawDescGZIP() []byte {
	file_SnsClassifyTimeLine_proto_rawDescOnce.Do(func() {
		file_SnsClassifyTimeLine_proto_rawDescData = protoimpl.X.CompressGZIP(file_SnsClassifyTimeLine_proto_rawDescData)
	})
	return file_SnsClassifyTimeLine_proto_rawDescData
}

var file_SnsClassifyTimeLine_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_SnsClassifyTimeLine_proto_goTypes = []interface{}{
	(*SnsClassifyTimeLineRequest)(nil),  // 0: SnsClassifyTimeLineRequest
	(*SnsClassifyTimeLineResponse)(nil), // 1: SnsClassifyTimeLineResponse
	(*BaseRequest)(nil),                 // 2: BaseRequest
	(*BaseResponse)(nil),                // 3: BaseResponse
	(*SnsObject)(nil),                   // 4: SnsObject
	(*SnsServerConfig)(nil),             // 5: SnsServerConfig
}
var file_SnsClassifyTimeLine_proto_depIdxs = []int32{
	2, // 0: SnsClassifyTimeLineRequest.baseRequest:type_name -> BaseRequest
	3, // 1: SnsClassifyTimeLineResponse.baseResponse:type_name -> BaseResponse
	4, // 2: SnsClassifyTimeLineResponse.objectList:type_name -> SnsObject
	5, // 3: SnsClassifyTimeLineResponse.serverConfig:type_name -> SnsServerConfig
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_SnsClassifyTimeLine_proto_init() }
func file_SnsClassifyTimeLine_proto_init() {
	if File_SnsClassifyTimeLine_proto != nil {
		return
	}
	file_MicroMsgBase_proto_init()
	file_MicroSnsBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SnsClassifyTimeLine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsClassifyTimeLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SnsClassifyTimeLine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsClassifyTimeLineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SnsClassifyTimeLine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SnsClassifyTimeLine_proto_goTypes,
		DependencyIndexes: file_SnsClassifyTimeLine_proto_depIdxs,
		MessageInfos:      file_SnsClassifyTimeLine_proto_msgTypes,
	}.Build()
	File_SnsClassifyTimeLine_proto = out.File
	file_SnsClassifyTimeLine_proto_rawDesc = nil
	file_SnsClassifyTimeLine_proto_goTypes = nil
	file_SnsClassifyTimeLine_proto_depIdxs = nil
}
