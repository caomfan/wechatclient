// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: GetCDNDns.proto

package micromsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CDNClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C2CshowErrorDelayMs *int32 `protobuf:"varint,1,req,name=c2CshowErrorDelayMs" json:"c2CshowErrorDelayMs,omitempty"`
	SnsshowErrorDelayMs *int32 `protobuf:"varint,2,req,name=snsshowErrorDelayMs" json:"snsshowErrorDelayMs,omitempty"`
	C2CretryInterval    *int32 `protobuf:"varint,3,req,name=c2CretryInterval" json:"c2CretryInterval,omitempty"`
	SnsretryInterval    *int32 `protobuf:"varint,4,req,name=snsretryInterval" json:"snsretryInterval,omitempty"`
	C2Crwtimeout        *int32 `protobuf:"varint,5,req,name=c2Crwtimeout" json:"c2Crwtimeout,omitempty"`
	Snsrwtimeout        *int32 `protobuf:"varint,6,req,name=snsrwtimeout" json:"snsrwtimeout,omitempty"`
}

func (x *CDNClientConfig) Reset() {
	*x = CDNClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetCDNDns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDNClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDNClientConfig) ProtoMessage() {}

func (x *CDNClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_GetCDNDns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDNClientConfig.ProtoReflect.Descriptor instead.
func (*CDNClientConfig) Descriptor() ([]byte, []int) {
	return file_GetCDNDns_proto_rawDescGZIP(), []int{0}
}

func (x *CDNClientConfig) GetC2CshowErrorDelayMs() int32 {
	if x != nil && x.C2CshowErrorDelayMs != nil {
		return *x.C2CshowErrorDelayMs
	}
	return 0
}

func (x *CDNClientConfig) GetSnsshowErrorDelayMs() int32 {
	if x != nil && x.SnsshowErrorDelayMs != nil {
		return *x.SnsshowErrorDelayMs
	}
	return 0
}

func (x *CDNClientConfig) GetC2CretryInterval() int32 {
	if x != nil && x.C2CretryInterval != nil {
		return *x.C2CretryInterval
	}
	return 0
}

func (x *CDNClientConfig) GetSnsretryInterval() int32 {
	if x != nil && x.SnsretryInterval != nil {
		return *x.SnsretryInterval
	}
	return 0
}

func (x *CDNClientConfig) GetC2Crwtimeout() int32 {
	if x != nil && x.C2Crwtimeout != nil {
		return *x.C2Crwtimeout
	}
	return 0
}

func (x *CDNClientConfig) GetSnsrwtimeout() int32 {
	if x != nil && x.Snsrwtimeout != nil {
		return *x.Snsrwtimeout
	}
	return 0
}

type GetCDNDnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	ClientIp    *string      `protobuf:"bytes,2,opt,name=clientIp" json:"clientIp,omitempty"`
	Scene       *uint32      `protobuf:"varint,3,opt,name=scene" json:"scene,omitempty"`
}

func (x *GetCDNDnsRequest) Reset() {
	*x = GetCDNDnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetCDNDns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCDNDnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDNDnsRequest) ProtoMessage() {}

func (x *GetCDNDnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_GetCDNDns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDNDnsRequest.ProtoReflect.Descriptor instead.
func (*GetCDNDnsRequest) Descriptor() ([]byte, []int) {
	return file_GetCDNDns_proto_rawDescGZIP(), []int{1}
}

func (x *GetCDNDnsRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetCDNDnsRequest) GetClientIp() string {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return ""
}

func (x *GetCDNDnsRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type WxUserIdcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid    *string           `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	ExtInfo *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=extInfo" json:"extInfo,omitempty"`
}

func (x *WxUserIdcInfo) Reset() {
	*x = WxUserIdcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetCDNDns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxUserIdcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxUserIdcInfo) ProtoMessage() {}

func (x *WxUserIdcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GetCDNDns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxUserIdcInfo.ProtoReflect.Descriptor instead.
func (*WxUserIdcInfo) Descriptor() ([]byte, []int) {
	return file_GetCDNDns_proto_rawDescGZIP(), []int{2}
}

func (x *WxUserIdcInfo) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *WxUserIdcInfo) GetExtInfo() *SKBuiltinBufferT {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

type GetCDNDnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse        *BaseResponse     `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	DnsInfo             *CDNDnsInfo       `protobuf:"bytes,2,req,name=dnsInfo" json:"dnsInfo,omitempty"`
	SnsDnsInfo          *CDNDnsInfo       `protobuf:"bytes,3,opt,name=snsDnsInfo" json:"snsDnsInfo,omitempty"`
	AppDnsInfo          *CDNDnsInfo       `protobuf:"bytes,4,opt,name=appDnsInfo" json:"appDnsInfo,omitempty"`
	CdndnsRuleBuf       *SKBuiltinBufferT `protobuf:"bytes,5,opt,name=cdndnsRuleBuf" json:"cdndnsRuleBuf,omitempty"`
	FakeCdndnsRuleBuf   *SKBuiltinBufferT `protobuf:"bytes,6,opt,name=fakeCdndnsRuleBuf" json:"fakeCdndnsRuleBuf,omitempty"`
	FakeDnsInfo         *CDNDnsInfo       `protobuf:"bytes,7,opt,name=fakeDnsInfo" json:"fakeDnsInfo,omitempty"`
	GetCdnDnsIntervalMs *int32            `protobuf:"varint,8,req,name=getCdnDnsIntervalMs" json:"getCdnDnsIntervalMs,omitempty"`
	DefaultConfig       *CDNClientConfig  `protobuf:"bytes,9,opt,name=defaultConfig" json:"defaultConfig,omitempty"`
	DisasterConfig      *CDNClientConfig  `protobuf:"bytes,10,opt,name=disasterConfig" json:"disasterConfig,omitempty"`
	NextIpv6            *int32            `protobuf:"varint,11,opt,name=nextIpv6" json:"nextIpv6,omitempty"`
	C2CRoamDnsInfo      *CDNDnsInfo       `protobuf:"bytes,12,opt,name=c2CRoamDnsInfo" json:"c2CRoamDnsInfo,omitempty"`
	CdnUserIdcInfo      *WxUserIdcInfo    `protobuf:"bytes,13,opt,name=cdnUserIdcInfo" json:"cdnUserIdcInfo,omitempty"`
	Vcodec1Limit        *int32            `protobuf:"varint,14,opt,name=vcodec1Limit" json:"vcodec1Limit,omitempty"`
}

func (x *GetCDNDnsResponse) Reset() {
	*x = GetCDNDnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GetCDNDns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCDNDnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDNDnsResponse) ProtoMessage() {}

func (x *GetCDNDnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_GetCDNDns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDNDnsResponse.ProtoReflect.Descriptor instead.
func (*GetCDNDnsResponse) Descriptor() ([]byte, []int) {
	return file_GetCDNDns_proto_rawDescGZIP(), []int{3}
}

func (x *GetCDNDnsResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetCDNDnsResponse) GetDnsInfo() *CDNDnsInfo {
	if x != nil {
		return x.DnsInfo
	}
	return nil
}

func (x *GetCDNDnsResponse) GetSnsDnsInfo() *CDNDnsInfo {
	if x != nil {
		return x.SnsDnsInfo
	}
	return nil
}

func (x *GetCDNDnsResponse) GetAppDnsInfo() *CDNDnsInfo {
	if x != nil {
		return x.AppDnsInfo
	}
	return nil
}

func (x *GetCDNDnsResponse) GetCdndnsRuleBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.CdndnsRuleBuf
	}
	return nil
}

func (x *GetCDNDnsResponse) GetFakeCdndnsRuleBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.FakeCdndnsRuleBuf
	}
	return nil
}

func (x *GetCDNDnsResponse) GetFakeDnsInfo() *CDNDnsInfo {
	if x != nil {
		return x.FakeDnsInfo
	}
	return nil
}

func (x *GetCDNDnsResponse) GetGetCdnDnsIntervalMs() int32 {
	if x != nil && x.GetCdnDnsIntervalMs != nil {
		return *x.GetCdnDnsIntervalMs
	}
	return 0
}

func (x *GetCDNDnsResponse) GetDefaultConfig() *CDNClientConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *GetCDNDnsResponse) GetDisasterConfig() *CDNClientConfig {
	if x != nil {
		return x.DisasterConfig
	}
	return nil
}

func (x *GetCDNDnsResponse) GetNextIpv6() int32 {
	if x != nil && x.NextIpv6 != nil {
		return *x.NextIpv6
	}
	return 0
}

func (x *GetCDNDnsResponse) GetC2CRoamDnsInfo() *CDNDnsInfo {
	if x != nil {
		return x.C2CRoamDnsInfo
	}
	return nil
}

func (x *GetCDNDnsResponse) GetCdnUserIdcInfo() *WxUserIdcInfo {
	if x != nil {
		return x.CdnUserIdcInfo
	}
	return nil
}

func (x *GetCDNDnsResponse) GetVcodec1Limit() int32 {
	if x != nil && x.Vcodec1Limit != nil {
		return *x.Vcodec1Limit
	}
	return 0
}

var File_GetCDNDns_proto protoreflect.FileDescriptor

var file_GetCDNDns_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x02, 0x0a, 0x0f, 0x43, 0x44, 0x4e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x32, 0x43,
	0x73, 0x68, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x13, 0x63, 0x32, 0x43, 0x73, 0x68, 0x6f, 0x77, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73,
	0x6e, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x13, 0x73, 0x6e, 0x73, 0x73, 0x68, 0x6f,
	0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x32, 0x43, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x63, 0x32, 0x43, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x6e, 0x73,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6e, 0x73, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x32, 0x43, 0x72, 0x77, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x32, 0x43,
	0x72, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x73,
	0x72, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x6e, 0x73, 0x72, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x74, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x57, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc3, 0x05, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x44,
	0x4e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64,
	0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x6e, 0x73, 0x44, 0x6e, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x44, 0x4e,
	0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6e, 0x73, 0x44, 0x6e, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x38, 0x0a, 0x0d, 0x63, 0x64, 0x6e, 0x64, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x75,
	0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0d, 0x63, 0x64, 0x6e,
	0x64, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x61,
	0x6b, 0x65, 0x43, 0x64, 0x6e, 0x64, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x11, 0x66, 0x61, 0x6b, 0x65, 0x43,
	0x64, 0x6e, 0x64, 0x6e, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x12, 0x2d, 0x0a, 0x0b,
	0x66, 0x61, 0x6b, 0x65, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x66, 0x61, 0x6b, 0x65, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x67,
	0x65, 0x74, 0x43, 0x64, 0x6e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4d, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x13, 0x67, 0x65, 0x74, 0x43, 0x64, 0x6e,
	0x44, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x36, 0x0a,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x44, 0x4e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x43, 0x44, 0x4e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0e, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x70, 0x76, 0x36, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x70, 0x76, 0x36, 0x12, 0x33, 0x0a, 0x0e, 0x63,
	0x32, 0x43, 0x52, 0x6f, 0x61, 0x6d, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x44, 0x4e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x63, 0x32, 0x43, 0x52, 0x6f, 0x61, 0x6d, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x36, 0x0a, 0x0e, 0x63, 0x64, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x57, 0x78, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x64, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x31, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x76, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x31, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6d, 0x73, 0x67,
}

var (
	file_GetCDNDns_proto_rawDescOnce sync.Once
	file_GetCDNDns_proto_rawDescData = file_GetCDNDns_proto_rawDesc
)

func file_GetCDNDns_proto_rawDescGZIP() []byte {
	file_GetCDNDns_proto_rawDescOnce.Do(func() {
		file_GetCDNDns_proto_rawDescData = protoimpl.X.CompressGZIP(file_GetCDNDns_proto_rawDescData)
	})
	return file_GetCDNDns_proto_rawDescData
}

var file_GetCDNDns_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_GetCDNDns_proto_goTypes = []interface{}{
	(*CDNClientConfig)(nil),   // 0: CDNClientConfig
	(*GetCDNDnsRequest)(nil),  // 1: GetCDNDnsRequest
	(*WxUserIdcInfo)(nil),     // 2: WxUserIdcInfo
	(*GetCDNDnsResponse)(nil), // 3: GetCDNDnsResponse
	(*BaseRequest)(nil),       // 4: BaseRequest
	(*SKBuiltinBufferT)(nil),  // 5: SKBuiltinBuffer_t
	(*BaseResponse)(nil),      // 6: BaseResponse
	(*CDNDnsInfo)(nil),        // 7: CDNDnsInfo
}
var file_GetCDNDns_proto_depIdxs = []int32{
	4,  // 0: GetCDNDnsRequest.baseRequest:type_name -> BaseRequest
	5,  // 1: WxUserIdcInfo.extInfo:type_name -> SKBuiltinBuffer_t
	6,  // 2: GetCDNDnsResponse.baseResponse:type_name -> BaseResponse
	7,  // 3: GetCDNDnsResponse.dnsInfo:type_name -> CDNDnsInfo
	7,  // 4: GetCDNDnsResponse.snsDnsInfo:type_name -> CDNDnsInfo
	7,  // 5: GetCDNDnsResponse.appDnsInfo:type_name -> CDNDnsInfo
	5,  // 6: GetCDNDnsResponse.cdndnsRuleBuf:type_name -> SKBuiltinBuffer_t
	5,  // 7: GetCDNDnsResponse.fakeCdndnsRuleBuf:type_name -> SKBuiltinBuffer_t
	7,  // 8: GetCDNDnsResponse.fakeDnsInfo:type_name -> CDNDnsInfo
	0,  // 9: GetCDNDnsResponse.defaultConfig:type_name -> CDNClientConfig
	0,  // 10: GetCDNDnsResponse.disasterConfig:type_name -> CDNClientConfig
	7,  // 11: GetCDNDnsResponse.c2CRoamDnsInfo:type_name -> CDNDnsInfo
	2,  // 12: GetCDNDnsResponse.cdnUserIdcInfo:type_name -> WxUserIdcInfo
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_GetCDNDns_proto_init() }
func file_GetCDNDns_proto_init() {
	if File_GetCDNDns_proto != nil {
		return
	}
	file_MicroMsgBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GetCDNDns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDNClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetCDNDns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCDNDnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetCDNDns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxUserIdcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GetCDNDns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCDNDnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GetCDNDns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GetCDNDns_proto_goTypes,
		DependencyIndexes: file_GetCDNDns_proto_depIdxs,
		MessageInfos:      file_GetCDNDns_proto_msgTypes,
	}.Build()
	File_GetCDNDns_proto = out.File
	file_GetCDNDns_proto_rawDesc = nil
	file_GetCDNDns_proto_goTypes = nil
	file_GetCDNDns_proto_depIdxs = nil
}
