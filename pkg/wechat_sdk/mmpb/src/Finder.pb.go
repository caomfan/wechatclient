// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: Finder.proto

package micromsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubType    *uint32 `protobuf:"varint,1,req,name=subType" json:"subType,omitempty"`
	ResVersion *uint32 `protobuf:"varint,2,opt,name=resVersion" json:"resVersion,omitempty"`
	KeyVersion *uint32 `protobuf:"varint,3,opt,name=keyVersion" json:"keyVersion,omitempty"`
	Eid        *uint32 `protobuf:"varint,4,opt,name=eid" json:"eid,omitempty"`
}

func (x *ResourceReq) Reset() {
	*x = ResourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceReq) ProtoMessage() {}

func (x *ResourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceReq.ProtoReflect.Descriptor instead.
func (*ResourceReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceReq) GetSubType() uint32 {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return 0
}

func (x *ResourceReq) GetResVersion() uint32 {
	if x != nil && x.ResVersion != nil {
		return *x.ResVersion
	}
	return 0
}

func (x *ResourceReq) GetKeyVersion() uint32 {
	if x != nil && x.KeyVersion != nil {
		return *x.KeyVersion
	}
	return 0
}

func (x *ResourceReq) GetEid() uint32 {
	if x != nil && x.Eid != nil {
		return *x.Eid
	}
	return 0
}

type ResourceTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *uint32        `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	SubTypeVector []*ResourceReq `protobuf:"bytes,2,rep,name=subTypeVector" json:"subTypeVector,omitempty"`
}

func (x *ResourceTypeReq) Reset() {
	*x = ResourceTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTypeReq) ProtoMessage() {}

func (x *ResourceTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTypeReq.ProtoReflect.Descriptor instead.
func (*ResourceTypeReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceTypeReq) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ResourceTypeReq) GetSubTypeVector() []*ResourceReq {
	if x != nil {
		return x.SubTypeVector
	}
	return nil
}

type CheckResUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResId   []*ResourceTypeReq `protobuf:"bytes,1,rep,name=resId" json:"resId,omitempty"`
	Scene   *uint32            `protobuf:"varint,2,opt,name=scene" json:"scene,omitempty"`
	Context []byte             `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
}

func (x *CheckResUpdateRequest) Reset() {
	*x = CheckResUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResUpdateRequest) ProtoMessage() {}

func (x *CheckResUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResUpdateRequest.ProtoReflect.Descriptor instead.
func (*CheckResUpdateRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{2}
}

func (x *CheckResUpdateRequest) GetResId() []*ResourceTypeReq {
	if x != nil {
		return x.ResId
	}
	return nil
}

func (x *CheckResUpdateRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *CheckResUpdateRequest) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

type SignatureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *uint32 `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	Signature []byte  `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`
}

func (x *SignatureInfo) Reset() {
	*x = SignatureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureInfo) ProtoMessage() {}

func (x *SignatureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureInfo.ProtoReflect.Descriptor instead.
func (*SignatureInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{3}
}

func (x *SignatureInfo) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SignatureInfo) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ResourceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5                 *string          `protobuf:"bytes,1,req,name=md5" json:"md5,omitempty"`
	ResVersion          *uint32          `protobuf:"varint,2,req,name=resVersion" json:"resVersion,omitempty"`
	Url                 *string          `protobuf:"bytes,3,req,name=url" json:"url,omitempty"`
	FileFlag            *uint32          `protobuf:"varint,4,req,name=fileFlag" json:"fileFlag,omitempty"`
	Eccmd5SignatureList []*SignatureInfo `protobuf:"bytes,5,rep,name=eccmd5SignatureList" json:"eccmd5SignatureList,omitempty"`
	Data                []byte           `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	OriginalMd5         *string          `protobuf:"bytes,7,req,name=originalMd5" json:"originalMd5,omitempty"`
	FileSize            *uint32          `protobuf:"varint,8,req,name=fileSize" json:"fileSize,omitempty"`
	Desc                *string          `protobuf:"bytes,9,opt,name=desc" json:"desc,omitempty"`
	OriginalSha1        *string          `protobuf:"bytes,10,opt,name=originalSha1" json:"originalSha1,omitempty"`
}

func (x *ResourceMeta) Reset() {
	*x = ResourceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMeta) ProtoMessage() {}

func (x *ResourceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMeta.ProtoReflect.Descriptor instead.
func (*ResourceMeta) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceMeta) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *ResourceMeta) GetResVersion() uint32 {
	if x != nil && x.ResVersion != nil {
		return *x.ResVersion
	}
	return 0
}

func (x *ResourceMeta) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *ResourceMeta) GetFileFlag() uint32 {
	if x != nil && x.FileFlag != nil {
		return *x.FileFlag
	}
	return 0
}

func (x *ResourceMeta) GetEccmd5SignatureList() []*SignatureInfo {
	if x != nil {
		return x.Eccmd5SignatureList
	}
	return nil
}

func (x *ResourceMeta) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResourceMeta) GetOriginalMd5() string {
	if x != nil && x.OriginalMd5 != nil {
		return *x.OriginalMd5
	}
	return ""
}

func (x *ResourceMeta) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *ResourceMeta) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *ResourceMeta) GetOriginalSha1() string {
	if x != nil && x.OriginalSha1 != nil {
		return *x.OriginalSha1
	}
	return ""
}

type ResourceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyVersion *uint32 `protobuf:"varint,1,req,name=keyVersion" json:"keyVersion,omitempty"`
	ResKey     *string `protobuf:"bytes,2,req,name=resKey" json:"resKey,omitempty"`
}

func (x *ResourceKey) Reset() {
	*x = ResourceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceKey) ProtoMessage() {}

func (x *ResourceKey) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceKey.ProtoReflect.Descriptor instead.
func (*ResourceKey) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceKey) GetKeyVersion() uint32 {
	if x != nil && x.KeyVersion != nil {
		return *x.KeyVersion
	}
	return 0
}

func (x *ResourceKey) GetResKey() string {
	if x != nil && x.ResKey != nil {
		return *x.ResKey
	}
	return ""
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubType         *uint32       `protobuf:"varint,1,req,name=subType" json:"subType,omitempty"`
	Info            *ResourceMeta `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Key             *ResourceKey  `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Oper            *uint32       `protobuf:"varint,4,req,name=oper" json:"oper,omitempty"`
	ReportId        *uint32       `protobuf:"varint,5,req,name=reportId" json:"reportId,omitempty"`
	SampleId        *string       `protobuf:"bytes,6,req,name=sampleId" json:"sampleId,omitempty"`
	ExpireTime      *uint32       `protobuf:"varint,7,req,name=expireTime" json:"expireTime,omitempty"`
	RetryTime       *uint32       `protobuf:"varint,8,req,name=retryTime" json:"retryTime,omitempty"`
	Eid             *uint32       `protobuf:"varint,9,opt,name=eid" json:"eid,omitempty"`
	DownloadNetType *uint32       `protobuf:"varint,10,req,name=downloadNetType" json:"downloadNetType,omitempty"`
	RetryInterval   *uint32       `protobuf:"varint,11,opt,name=retryInterval" json:"retryInterval,omitempty"`
	Priority        *uint32       `protobuf:"varint,12,opt,name=priority" json:"priority,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{6}
}

func (x *Resource) GetSubType() uint32 {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return 0
}

func (x *Resource) GetInfo() *ResourceMeta {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Resource) GetKey() *ResourceKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Resource) GetOper() uint32 {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return 0
}

func (x *Resource) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *Resource) GetSampleId() string {
	if x != nil && x.SampleId != nil {
		return *x.SampleId
	}
	return ""
}

func (x *Resource) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

func (x *Resource) GetRetryTime() uint32 {
	if x != nil && x.RetryTime != nil {
		return *x.RetryTime
	}
	return 0
}

func (x *Resource) GetEid() uint32 {
	if x != nil && x.Eid != nil {
		return *x.Eid
	}
	return 0
}

func (x *Resource) GetDownloadNetType() uint32 {
	if x != nil && x.DownloadNetType != nil {
		return *x.DownloadNetType
	}
	return 0
}

func (x *Resource) GetRetryInterval() uint32 {
	if x != nil && x.RetryInterval != nil {
		return *x.RetryInterval
	}
	return 0
}

func (x *Resource) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type ResourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *uint32     `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Resources []*Resource `protobuf:"bytes,2,rep,name=resources" json:"resources,omitempty"`
}

func (x *ResourceType) Reset() {
	*x = ResourceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceType) ProtoMessage() {}

func (x *ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceType.ProtoReflect.Descriptor instead.
func (*ResourceType) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{7}
}

func (x *ResourceType) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ResourceType) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type CheckResUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse   `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Res          []*ResourceType `protobuf:"bytes,2,rep,name=res" json:"res,omitempty"`
	Context      []byte          `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	NextTime     *uint32         `protobuf:"varint,4,opt,name=nextTime" json:"nextTime,omitempty"`
}

func (x *CheckResUpdateResponse) Reset() {
	*x = CheckResUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResUpdateResponse) ProtoMessage() {}

func (x *CheckResUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResUpdateResponse.ProtoReflect.Descriptor instead.
func (*CheckResUpdateResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{8}
}

func (x *CheckResUpdateResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *CheckResUpdateResponse) GetRes() []*ResourceType {
	if x != nil {
		return x.Res
	}
	return nil
}

func (x *CheckResUpdateResponse) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CheckResUpdateResponse) GetNextTime() uint32 {
	if x != nil && x.NextTime != nil {
		return *x.NextTime
	}
	return 0
}

type FinderAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealName           *string        `protobuf:"bytes,1,opt,name=realName" json:"realName,omitempty"`
	AuthIconType       *uint32        `protobuf:"varint,2,opt,name=authIconType" json:"authIconType,omitempty"`
	AuthProfession     *string        `protobuf:"bytes,3,opt,name=authProfession" json:"authProfession,omitempty"`
	AuthGuarantor      *FinderContact `protobuf:"bytes,4,opt,name=authGuarantor" json:"authGuarantor,omitempty"`
	DetailLink         *string        `protobuf:"bytes,5,opt,name=detailLink" json:"detailLink,omitempty"`
	AppName            *string        `protobuf:"bytes,6,opt,name=appName" json:"appName,omitempty"`
	AuthIconUrl        *string        `protobuf:"bytes,7,opt,name=authIconUrl" json:"authIconUrl,omitempty"`
	CustomerType       *uint32        `protobuf:"varint,8,opt,name=customerType" json:"customerType,omitempty"`
	AuthVerifyIdentity *uint32        `protobuf:"varint,9,opt,name=authVerifyIdentity" json:"authVerifyIdentity,omitempty"`
	VerifyStatus       *uint32        `protobuf:"varint,10,opt,name=verifyStatus" json:"verifyStatus,omitempty"`
}

func (x *FinderAuthInfo) Reset() {
	*x = FinderAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderAuthInfo) ProtoMessage() {}

func (x *FinderAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderAuthInfo.ProtoReflect.Descriptor instead.
func (*FinderAuthInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{9}
}

func (x *FinderAuthInfo) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *FinderAuthInfo) GetAuthIconType() uint32 {
	if x != nil && x.AuthIconType != nil {
		return *x.AuthIconType
	}
	return 0
}

func (x *FinderAuthInfo) GetAuthProfession() string {
	if x != nil && x.AuthProfession != nil {
		return *x.AuthProfession
	}
	return ""
}

func (x *FinderAuthInfo) GetAuthGuarantor() *FinderContact {
	if x != nil {
		return x.AuthGuarantor
	}
	return nil
}

func (x *FinderAuthInfo) GetDetailLink() string {
	if x != nil && x.DetailLink != nil {
		return *x.DetailLink
	}
	return ""
}

func (x *FinderAuthInfo) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *FinderAuthInfo) GetAuthIconUrl() string {
	if x != nil && x.AuthIconUrl != nil {
		return *x.AuthIconUrl
	}
	return ""
}

func (x *FinderAuthInfo) GetCustomerType() uint32 {
	if x != nil && x.CustomerType != nil {
		return *x.CustomerType
	}
	return 0
}

func (x *FinderAuthInfo) GetAuthVerifyIdentity() uint32 {
	if x != nil && x.AuthVerifyIdentity != nil {
		return *x.AuthVerifyIdentity
	}
	return 0
}

func (x *FinderAuthInfo) GetVerifyStatus() uint32 {
	if x != nil && x.VerifyStatus != nil {
		return *x.VerifyStatus
	}
	return 0
}

type FinderContactExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country    *string `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	Province   *string `protobuf:"bytes,2,opt,name=province" json:"province,omitempty"`
	City       *string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	Sex        *int32  `protobuf:"varint,4,opt,name=sex" json:"sex,omitempty"`
	BirthYear  *uint32 `protobuf:"varint,5,opt,name=birthYear" json:"birthYear,omitempty"`
	BirthMonth *uint32 `protobuf:"varint,6,opt,name=birthMonth" json:"birthMonth,omitempty"`
	BirthDay   *uint32 `protobuf:"varint,7,opt,name=birthDay" json:"birthDay,omitempty"`
}

func (x *FinderContactExtInfo) Reset() {
	*x = FinderContactExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactExtInfo) ProtoMessage() {}

func (x *FinderContactExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactExtInfo.ProtoReflect.Descriptor instead.
func (*FinderContactExtInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{10}
}

func (x *FinderContactExtInfo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *FinderContactExtInfo) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *FinderContactExtInfo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *FinderContactExtInfo) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *FinderContactExtInfo) GetBirthYear() uint32 {
	if x != nil && x.BirthYear != nil {
		return *x.BirthYear
	}
	return 0
}

func (x *FinderContactExtInfo) GetBirthMonth() uint32 {
	if x != nil && x.BirthMonth != nil {
		return *x.BirthMonth
	}
	return 0
}

func (x *FinderContactExtInfo) GetBirthDay() uint32 {
	if x != nil && x.BirthDay != nil {
		return *x.BirthDay
	}
	return 0
}

type FinderOriginalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RestRepostCount        *uint32 `protobuf:"varint,1,opt,name=restRepostCount" json:"restRepostCount,omitempty"`
	RestApplyOriginalCount *uint32 `protobuf:"varint,2,opt,name=restApplyOriginalCount" json:"restApplyOriginalCount,omitempty"`
	RestPunishDay          *uint32 `protobuf:"varint,3,opt,name=restPunishDay" json:"restPunishDay,omitempty"`
	PunishYearFlag         *uint32 `protobuf:"varint,4,opt,name=punishYearFlag" json:"punishYearFlag,omitempty"`
	PostNeedCheckFlag      *uint32 `protobuf:"varint,5,opt,name=postNeedCheckFlag" json:"postNeedCheckFlag,omitempty"`
}

func (x *FinderOriginalInfo) Reset() {
	*x = FinderOriginalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderOriginalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderOriginalInfo) ProtoMessage() {}

func (x *FinderOriginalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderOriginalInfo.ProtoReflect.Descriptor instead.
func (*FinderOriginalInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{11}
}

func (x *FinderOriginalInfo) GetRestRepostCount() uint32 {
	if x != nil && x.RestRepostCount != nil {
		return *x.RestRepostCount
	}
	return 0
}

func (x *FinderOriginalInfo) GetRestApplyOriginalCount() uint32 {
	if x != nil && x.RestApplyOriginalCount != nil {
		return *x.RestApplyOriginalCount
	}
	return 0
}

func (x *FinderOriginalInfo) GetRestPunishDay() uint32 {
	if x != nil && x.RestPunishDay != nil {
		return *x.RestPunishDay
	}
	return 0
}

func (x *FinderOriginalInfo) GetPunishYearFlag() uint32 {
	if x != nil && x.PunishYearFlag != nil {
		return *x.PunishYearFlag
	}
	return 0
}

func (x *FinderOriginalInfo) GetPostNeedCheckFlag() uint32 {
	if x != nil && x.PostNeedCheckFlag != nil {
		return *x.PostNeedCheckFlag
	}
	return 0
}

type FinderContactMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgUsername *string `protobuf:"bytes,1,opt,name=msgUsername" json:"msgUsername,omitempty"`
	SessionId   *string `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (x *FinderContactMsgInfo) Reset() {
	*x = FinderContactMsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactMsgInfo) ProtoMessage() {}

func (x *FinderContactMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactMsgInfo.ProtoReflect.Descriptor instead.
func (*FinderContactMsgInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{12}
}

func (x *FinderContactMsgInfo) GetMsgUsername() string {
	if x != nil && x.MsgUsername != nil {
		return *x.MsgUsername
	}
	return ""
}

func (x *FinderContactMsgInfo) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type FinderLiveNoticeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime        *uint32 `protobuf:"varint,1,opt,name=startTime" json:"startTime,omitempty"`
	Status           *uint32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	CoverImgUrl      *string `protobuf:"bytes,3,opt,name=coverImgUrl" json:"coverImgUrl,omitempty"`
	Introduction     *string `protobuf:"bytes,4,opt,name=introduction" json:"introduction,omitempty"`
	NoticeId         *string `protobuf:"bytes,5,opt,name=noticeId" json:"noticeId,omitempty"`
	ReservationCount *uint32 `protobuf:"varint,6,opt,name=reservationCount" json:"reservationCount,omitempty"`
	NoticeFlag       *uint32 `protobuf:"varint,7,opt,name=noticeFlag" json:"noticeFlag,omitempty"`
	NoticeStatus     *uint32 `protobuf:"varint,8,opt,name=noticeStatus" json:"noticeStatus,omitempty"`
}

func (x *FinderLiveNoticeInfo) Reset() {
	*x = FinderLiveNoticeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveNoticeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveNoticeInfo) ProtoMessage() {}

func (x *FinderLiveNoticeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveNoticeInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveNoticeInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{13}
}

func (x *FinderLiveNoticeInfo) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *FinderLiveNoticeInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *FinderLiveNoticeInfo) GetCoverImgUrl() string {
	if x != nil && x.CoverImgUrl != nil {
		return *x.CoverImgUrl
	}
	return ""
}

func (x *FinderLiveNoticeInfo) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

func (x *FinderLiveNoticeInfo) GetNoticeId() string {
	if x != nil && x.NoticeId != nil {
		return *x.NoticeId
	}
	return ""
}

func (x *FinderLiveNoticeInfo) GetReservationCount() uint32 {
	if x != nil && x.ReservationCount != nil {
		return *x.ReservationCount
	}
	return 0
}

func (x *FinderLiveNoticeInfo) GetNoticeFlag() uint32 {
	if x != nil && x.NoticeFlag != nil {
		return *x.NoticeFlag
	}
	return 0
}

func (x *FinderLiveNoticeInfo) GetNoticeStatus() uint32 {
	if x != nil && x.NoticeStatus != nil {
		return *x.NoticeStatus
	}
	return 0
}

type MicSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingFlag       *uint64 `protobuf:"varint,1,opt,name=settingFlag" json:"settingFlag,omitempty"`
	SettingSwitchFlag *uint64 `protobuf:"varint,2,opt,name=settingSwitchFlag" json:"settingSwitchFlag,omitempty"`
}

func (x *MicSetting) Reset() {
	*x = MicSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicSetting) ProtoMessage() {}

func (x *MicSetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicSetting.ProtoReflect.Descriptor instead.
func (*MicSetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{14}
}

func (x *MicSetting) GetSettingFlag() uint64 {
	if x != nil && x.SettingFlag != nil {
		return *x.SettingFlag
	}
	return 0
}

func (x *MicSetting) GetSettingSwitchFlag() uint64 {
	if x != nil && x.SettingSwitchFlag != nil {
		return *x.SettingSwitchFlag
	}
	return 0
}

type LiveLotterySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingFlag *uint64 `protobuf:"varint,1,opt,name=settingFlag" json:"settingFlag,omitempty"`
	AttendType  *uint32 `protobuf:"varint,2,opt,name=attendType" json:"attendType,omitempty"`
}

func (x *LiveLotterySetting) Reset() {
	*x = LiveLotterySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveLotterySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveLotterySetting) ProtoMessage() {}

func (x *LiveLotterySetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveLotterySetting.ProtoReflect.Descriptor instead.
func (*LiveLotterySetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{15}
}

func (x *LiveLotterySetting) GetSettingFlag() uint64 {
	if x != nil && x.SettingFlag != nil {
		return *x.SettingFlag
	}
	return 0
}

func (x *LiveLotterySetting) GetAttendType() uint32 {
	if x != nil && x.AttendType != nil {
		return *x.AttendType
	}
	return 0
}

type FinderContactLiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorStatusFlag *uint64             `protobuf:"varint,1,opt,name=anchorStatusFlag" json:"anchorStatusFlag,omitempty"`
	SwitchFlag       *uint32             `protobuf:"varint,2,opt,name=switchFlag" json:"switchFlag,omitempty"`
	MicSetting       *MicSetting         `protobuf:"bytes,4,opt,name=micSetting" json:"micSetting,omitempty"`
	LotterySetting   *LiveLotterySetting `protobuf:"bytes,5,opt,name=lotterySetting" json:"lotterySetting,omitempty"`
}

func (x *FinderContactLiveInfo) Reset() {
	*x = FinderContactLiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactLiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactLiveInfo) ProtoMessage() {}

func (x *FinderContactLiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactLiveInfo.ProtoReflect.Descriptor instead.
func (*FinderContactLiveInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{16}
}

func (x *FinderContactLiveInfo) GetAnchorStatusFlag() uint64 {
	if x != nil && x.AnchorStatusFlag != nil {
		return *x.AnchorStatusFlag
	}
	return 0
}

func (x *FinderContactLiveInfo) GetSwitchFlag() uint32 {
	if x != nil && x.SwitchFlag != nil {
		return *x.SwitchFlag
	}
	return 0
}

func (x *FinderContactLiveInfo) GetMicSetting() *MicSetting {
	if x != nil {
		return x.MicSetting
	}
	return nil
}

func (x *FinderContactLiveInfo) GetLotterySetting() *LiveLotterySetting {
	if x != nil {
		return x.LotterySetting
	}
	return nil
}

type FinderGuestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuestType *uint32 `protobuf:"varint,1,opt,name=guestType" json:"guestType,omitempty"`
	ShowType  *uint32 `protobuf:"varint,2,opt,name=showType" json:"showType,omitempty"`
}

func (x *FinderGuestInfo) Reset() {
	*x = FinderGuestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGuestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGuestInfo) ProtoMessage() {}

func (x *FinderGuestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGuestInfo.ProtoReflect.Descriptor instead.
func (*FinderGuestInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{17}
}

func (x *FinderGuestInfo) GetGuestType() uint32 {
	if x != nil && x.GuestType != nil {
		return *x.GuestType
	}
	return 0
}

func (x *FinderGuestInfo) GetShowType() uint32 {
	if x != nil && x.ShowType != nil {
		return *x.ShowType
	}
	return 0
}

type FinderBizInfo_BizAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthIconType *uint32 `protobuf:"varint,1,opt,name=authIconType" json:"authIconType,omitempty"`
	AuthIconUrl  *string `protobuf:"bytes,2,opt,name=authIconUrl" json:"authIconUrl,omitempty"`
}

func (x *FinderBizInfo_BizAuthInfo) Reset() {
	*x = FinderBizInfo_BizAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBizInfo_BizAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBizInfo_BizAuthInfo) ProtoMessage() {}

func (x *FinderBizInfo_BizAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBizInfo_BizAuthInfo.ProtoReflect.Descriptor instead.
func (*FinderBizInfo_BizAuthInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{18}
}

func (x *FinderBizInfo_BizAuthInfo) GetAuthIconType() uint32 {
	if x != nil && x.AuthIconType != nil {
		return *x.AuthIconType
	}
	return 0
}

func (x *FinderBizInfo_BizAuthInfo) GetAuthIconUrl() string {
	if x != nil && x.AuthIconUrl != nil {
		return *x.AuthIconUrl
	}
	return ""
}

type FinderBizInfo_BizInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizUsername       *string                    `protobuf:"bytes,1,opt,name=bizUsername" json:"bizUsername,omitempty"`
	BizNickname       *string                    `protobuf:"bytes,2,opt,name=bizNickname" json:"bizNickname,omitempty"`
	HeadImgUrl        *string                    `protobuf:"bytes,3,opt,name=headImgUrl" json:"headImgUrl,omitempty"`
	BizUin            *uint32                    `protobuf:"varint,4,opt,name=bizUin" json:"bizUin,omitempty"`
	FriendFollowCount *uint32                    `protobuf:"varint,5,opt,name=friendFollowCount" json:"friendFollowCount,omitempty"`
	AuthInfo          *FinderBizInfo_BizAuthInfo `protobuf:"bytes,6,opt,name=authInfo" json:"authInfo,omitempty"`
}

func (x *FinderBizInfo_BizInfo) Reset() {
	*x = FinderBizInfo_BizInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBizInfo_BizInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBizInfo_BizInfo) ProtoMessage() {}

func (x *FinderBizInfo_BizInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBizInfo_BizInfo.ProtoReflect.Descriptor instead.
func (*FinderBizInfo_BizInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{19}
}

func (x *FinderBizInfo_BizInfo) GetBizUsername() string {
	if x != nil && x.BizUsername != nil {
		return *x.BizUsername
	}
	return ""
}

func (x *FinderBizInfo_BizInfo) GetBizNickname() string {
	if x != nil && x.BizNickname != nil {
		return *x.BizNickname
	}
	return ""
}

func (x *FinderBizInfo_BizInfo) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

func (x *FinderBizInfo_BizInfo) GetBizUin() uint32 {
	if x != nil && x.BizUin != nil {
		return *x.BizUin
	}
	return 0
}

func (x *FinderBizInfo_BizInfo) GetFriendFollowCount() uint32 {
	if x != nil && x.FriendFollowCount != nil {
		return *x.FriendFollowCount
	}
	return 0
}

func (x *FinderBizInfo_BizInfo) GetAuthInfo() *FinderBizInfo_BizAuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

type FinderMiniAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    *string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	Path     *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	NickName *string `protobuf:"bytes,3,opt,name=nickName" json:"nickName,omitempty"`
	IconUrl  *string `protobuf:"bytes,4,opt,name=iconUrl" json:"iconUrl,omitempty"`
	Scene    *uint32 `protobuf:"varint,5,opt,name=scene" json:"scene,omitempty"`
}

func (x *FinderMiniAppInfo) Reset() {
	*x = FinderMiniAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMiniAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMiniAppInfo) ProtoMessage() {}

func (x *FinderMiniAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMiniAppInfo.ProtoReflect.Descriptor instead.
func (*FinderMiniAppInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{20}
}

func (x *FinderMiniAppInfo) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *FinderMiniAppInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FinderMiniAppInfo) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *FinderMiniAppInfo) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *FinderMiniAppInfo) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type FinderBizInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info     []*FinderBizInfo_BizInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
	Miniapps []*FinderMiniAppInfo     `protobuf:"bytes,2,rep,name=miniapps" json:"miniapps,omitempty"`
}

func (x *FinderBizInfo) Reset() {
	*x = FinderBizInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBizInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBizInfo) ProtoMessage() {}

func (x *FinderBizInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBizInfo.ProtoReflect.Descriptor instead.
func (*FinderBizInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{21}
}

func (x *FinderBizInfo) GetInfo() []*FinderBizInfo_BizInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *FinderBizInfo) GetMiniapps() []*FinderMiniAppInfo {
	if x != nil {
		return x.Miniapps
	}
	return nil
}

type FinderWecomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KfUrl          *string `protobuf:"bytes,1,opt,name=kfUrl" json:"kfUrl,omitempty"`
	ContactId      *string `protobuf:"bytes,2,opt,name=contactId" json:"contactId,omitempty"`
	ContactWording *string `protobuf:"bytes,3,opt,name=contactWording" json:"contactWording,omitempty"`
}

func (x *FinderWecomInfo) Reset() {
	*x = FinderWecomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderWecomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderWecomInfo) ProtoMessage() {}

func (x *FinderWecomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderWecomInfo.ProtoReflect.Descriptor instead.
func (*FinderWecomInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{22}
}

func (x *FinderWecomInfo) GetKfUrl() string {
	if x != nil && x.KfUrl != nil {
		return *x.KfUrl
	}
	return ""
}

func (x *FinderWecomInfo) GetContactId() string {
	if x != nil && x.ContactId != nil {
		return *x.ContactId
	}
	return ""
}

func (x *FinderWecomInfo) GetContactWording() string {
	if x != nil && x.ContactWording != nil {
		return *x.ContactWording
	}
	return ""
}

type FinderQQMusicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname *string `protobuf:"bytes,1,opt,name=nickname" json:"nickname,omitempty"`
	HeadUrl  *string `protobuf:"bytes,2,opt,name=headUrl" json:"headUrl,omitempty"`
}

func (x *FinderQQMusicInfo) Reset() {
	*x = FinderQQMusicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderQQMusicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderQQMusicInfo) ProtoMessage() {}

func (x *FinderQQMusicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderQQMusicInfo.ProtoReflect.Descriptor instead.
func (*FinderQQMusicInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{23}
}

func (x *FinderQQMusicInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderQQMusicInfo) GetHeadUrl() string {
	if x != nil && x.HeadUrl != nil {
		return *x.HeadUrl
	}
	return ""
}

type FinderSticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desuin *uint32 `protobuf:"varint,1,opt,name=desuin" json:"desuin,omitempty"`
}

func (x *FinderSticker) Reset() {
	*x = FinderSticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSticker) ProtoMessage() {}

func (x *FinderSticker) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSticker.ProtoReflect.Descriptor instead.
func (*FinderSticker) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{24}
}

func (x *FinderSticker) GetDesuin() uint32 {
	if x != nil && x.Desuin != nil {
		return *x.Desuin
	}
	return 0
}

type FinderBindInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindType       *uint32            `protobuf:"varint,1,opt,name=bindType" json:"bindType,omitempty"`
	BizInfo        *FinderBizInfo     `protobuf:"bytes,2,opt,name=bizInfo" json:"bizInfo,omitempty"`
	WecomInfo      *FinderWecomInfo   `protobuf:"bytes,3,opt,name=wecomInfo" json:"wecomInfo,omitempty"`
	QqmusicInfo    *FinderQQMusicInfo `protobuf:"bytes,4,opt,name=qqmusicInfo" json:"qqmusicInfo,omitempty"`
	ProfileBizInfo *FinderBizInfo     `protobuf:"bytes,5,opt,name=profileBizInfo" json:"profileBizInfo,omitempty"`
	StickerInfo    *FinderSticker     `protobuf:"bytes,6,opt,name=stickerInfo" json:"stickerInfo,omitempty"`
}

func (x *FinderBindInfo) Reset() {
	*x = FinderBindInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBindInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBindInfo) ProtoMessage() {}

func (x *FinderBindInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBindInfo.ProtoReflect.Descriptor instead.
func (*FinderBindInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{25}
}

func (x *FinderBindInfo) GetBindType() uint32 {
	if x != nil && x.BindType != nil {
		return *x.BindType
	}
	return 0
}

func (x *FinderBindInfo) GetBizInfo() *FinderBizInfo {
	if x != nil {
		return x.BizInfo
	}
	return nil
}

func (x *FinderBindInfo) GetWecomInfo() *FinderWecomInfo {
	if x != nil {
		return x.WecomInfo
	}
	return nil
}

func (x *FinderBindInfo) GetQqmusicInfo() *FinderQQMusicInfo {
	if x != nil {
		return x.QqmusicInfo
	}
	return nil
}

func (x *FinderBindInfo) GetProfileBizInfo() *FinderBizInfo {
	if x != nil {
		return x.ProfileBizInfo
	}
	return nil
}

func (x *FinderBindInfo) GetStickerInfo() *FinderSticker {
	if x != nil {
		return x.StickerInfo
	}
	return nil
}

type AchievementInfo_GameAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameName    *string `protobuf:"bytes,1,opt,name=gameName" json:"gameName,omitempty"`
	GameIcon    *string `protobuf:"bytes,2,opt,name=gameIcon" json:"gameIcon,omitempty"`
	TitleIcon   *string `protobuf:"bytes,3,opt,name=titleIcon" json:"titleIcon,omitempty"`
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	GameIconHd  *string `protobuf:"bytes,5,opt,name=gameIconHd" json:"gameIconHd,omitempty"`
}

func (x *AchievementInfo_GameAchievement) Reset() {
	*x = AchievementInfo_GameAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementInfo_GameAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementInfo_GameAchievement) ProtoMessage() {}

func (x *AchievementInfo_GameAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementInfo_GameAchievement.ProtoReflect.Descriptor instead.
func (*AchievementInfo_GameAchievement) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{26}
}

func (x *AchievementInfo_GameAchievement) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *AchievementInfo_GameAchievement) GetGameIcon() string {
	if x != nil && x.GameIcon != nil {
		return *x.GameIcon
	}
	return ""
}

func (x *AchievementInfo_GameAchievement) GetTitleIcon() string {
	if x != nil && x.TitleIcon != nil {
		return *x.TitleIcon
	}
	return ""
}

func (x *AchievementInfo_GameAchievement) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *AchievementInfo_GameAchievement) GetGameIconHd() string {
	if x != nil && x.GameIconHd != nil {
		return *x.GameIconHd
	}
	return ""
}

type AchievementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameAchievements []*AchievementInfo_GameAchievement `protobuf:"bytes,1,rep,name=gameAchievements" json:"gameAchievements,omitempty"`
}

func (x *AchievementInfo) Reset() {
	*x = AchievementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchievementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchievementInfo) ProtoMessage() {}

func (x *AchievementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchievementInfo.ProtoReflect.Descriptor instead.
func (*AchievementInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{27}
}

func (x *AchievementInfo) GetGameAchievements() []*AchievementInfo_GameAchievement {
	if x != nil {
		return x.GameAchievements
	}
	return nil
}

type FinderJumpInfo_MiniAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       *string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	Path        *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	FetchInfoId *string `protobuf:"bytes,3,opt,name=fetchInfoId" json:"fetchInfoId,omitempty"`
	RequestId   *string `protobuf:"bytes,4,opt,name=requestId" json:"requestId,omitempty"`
	AppUsername *string `protobuf:"bytes,5,opt,name=appUsername" json:"appUsername,omitempty"`
}

func (x *FinderJumpInfo_MiniAppInfo) Reset() {
	*x = FinderJumpInfo_MiniAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJumpInfo_MiniAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJumpInfo_MiniAppInfo) ProtoMessage() {}

func (x *FinderJumpInfo_MiniAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJumpInfo_MiniAppInfo.ProtoReflect.Descriptor instead.
func (*FinderJumpInfo_MiniAppInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{28}
}

func (x *FinderJumpInfo_MiniAppInfo) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *FinderJumpInfo_MiniAppInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FinderJumpInfo_MiniAppInfo) GetFetchInfoId() string {
	if x != nil && x.FetchInfoId != nil {
		return *x.FetchInfoId
	}
	return ""
}

func (x *FinderJumpInfo_MiniAppInfo) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *FinderJumpInfo_MiniAppInfo) GetAppUsername() string {
	if x != nil && x.AppUsername != nil {
		return *x.AppUsername
	}
	return ""
}

type FinderJumpInfo_Html5Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Style         *uint32 `protobuf:"varint,2,opt,name=style" json:"style,omitempty"`
	HeightPercent *uint32 `protobuf:"varint,3,opt,name=heightPercent" json:"heightPercent,omitempty"`
}

func (x *FinderJumpInfo_Html5Info) Reset() {
	*x = FinderJumpInfo_Html5Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJumpInfo_Html5Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJumpInfo_Html5Info) ProtoMessage() {}

func (x *FinderJumpInfo_Html5Info) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJumpInfo_Html5Info.ProtoReflect.Descriptor instead.
func (*FinderJumpInfo_Html5Info) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{29}
}

func (x *FinderJumpInfo_Html5Info) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *FinderJumpInfo_Html5Info) GetStyle() uint32 {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return 0
}

func (x *FinderJumpInfo_Html5Info) GetHeightPercent() uint32 {
	if x != nil && x.HeightPercent != nil {
		return *x.HeightPercent
	}
	return 0
}

type FinderJumpInfo_NativeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NativeType      *uint32 `protobuf:"varint,1,opt,name=nativeType" json:"nativeType,omitempty"`
	NecessaryParams *string `protobuf:"bytes,2,opt,name=necessaryParams" json:"necessaryParams,omitempty"`
}

func (x *FinderJumpInfo_NativeInfo) Reset() {
	*x = FinderJumpInfo_NativeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJumpInfo_NativeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJumpInfo_NativeInfo) ProtoMessage() {}

func (x *FinderJumpInfo_NativeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJumpInfo_NativeInfo.ProtoReflect.Descriptor instead.
func (*FinderJumpInfo_NativeInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{30}
}

func (x *FinderJumpInfo_NativeInfo) GetNativeType() uint32 {
	if x != nil && x.NativeType != nil {
		return *x.NativeType
	}
	return 0
}

func (x *FinderJumpInfo_NativeInfo) GetNecessaryParams() string {
	if x != nil && x.NecessaryParams != nil {
		return *x.NecessaryParams
	}
	return ""
}

type FinderJumpInfo_SchemaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniversalLink         *string `protobuf:"bytes,1,opt,name=universalLink" json:"universalLink,omitempty"`
	Scheme                *string `protobuf:"bytes,2,opt,name=scheme" json:"scheme,omitempty"`
	AppstoreLink          *string `protobuf:"bytes,3,opt,name=appstoreLink" json:"appstoreLink,omitempty"`
	AndroidUniversalLink  *string `protobuf:"bytes,4,opt,name=androidUniversalLink" json:"androidUniversalLink,omitempty"`
	AndroidAppstoreScheme *string `protobuf:"bytes,5,opt,name=androidAppstoreScheme" json:"androidAppstoreScheme,omitempty"`
	AndroidPackage        *string `protobuf:"bytes,6,opt,name=androidPackage" json:"androidPackage,omitempty"`
	AndroidAppPublicKey   *string `protobuf:"bytes,7,opt,name=androidAppPublicKey" json:"androidAppPublicKey,omitempty"`
}

func (x *FinderJumpInfo_SchemaInfo) Reset() {
	*x = FinderJumpInfo_SchemaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJumpInfo_SchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJumpInfo_SchemaInfo) ProtoMessage() {}

func (x *FinderJumpInfo_SchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJumpInfo_SchemaInfo.ProtoReflect.Descriptor instead.
func (*FinderJumpInfo_SchemaInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{31}
}

func (x *FinderJumpInfo_SchemaInfo) GetUniversalLink() string {
	if x != nil && x.UniversalLink != nil {
		return *x.UniversalLink
	}
	return ""
}

func (x *FinderJumpInfo_SchemaInfo) GetScheme() string {
	if x != nil && x.Scheme != nil {
		return *x.Scheme
	}
	return ""
}

func (x *FinderJumpInfo_SchemaInfo) GetAppstoreLink() string {
	if x != nil && x.AppstoreLink != nil {
		return *x.AppstoreLink
	}
	return ""
}

func (x *FinderJumpInfo_SchemaInfo) GetAndroidUniversalLink() string {
	if x != nil && x.AndroidUniversalLink != nil {
		return *x.AndroidUniversalLink
	}
	return ""
}

func (x *FinderJumpInfo_SchemaInfo) GetAndroidAppstoreScheme() string {
	if x != nil && x.AndroidAppstoreScheme != nil {
		return *x.AndroidAppstoreScheme
	}
	return ""
}

func (x *FinderJumpInfo_SchemaInfo) GetAndroidPackage() string {
	if x != nil && x.AndroidPackage != nil {
		return *x.AndroidPackage
	}
	return ""
}

func (x *FinderJumpInfo_SchemaInfo) GetAndroidAppPublicKey() string {
	if x != nil && x.AndroidAppPublicKey != nil {
		return *x.AndroidAppPublicKey
	}
	return ""
}

type FinderJumpInfoRedDot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedDotType *uint64 `protobuf:"varint,1,opt,name=redDotType" json:"redDotType,omitempty"`
	Value      *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *FinderJumpInfoRedDot) Reset() {
	*x = FinderJumpInfoRedDot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJumpInfoRedDot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJumpInfoRedDot) ProtoMessage() {}

func (x *FinderJumpInfoRedDot) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJumpInfoRedDot.ProtoReflect.Descriptor instead.
func (*FinderJumpInfoRedDot) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{32}
}

func (x *FinderJumpInfoRedDot) GetRedDotType() uint64 {
	if x != nil && x.RedDotType != nil {
		return *x.RedDotType
	}
	return 0
}

func (x *FinderJumpInfoRedDot) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type FinderJumpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JumpinfoType    *uint32                     `protobuf:"varint,1,opt,name=jumpinfoType" json:"jumpinfoType,omitempty"`
	BusinessType    *uint32                     `protobuf:"varint,2,opt,name=businessType" json:"businessType,omitempty"`
	IconUrl         *string                     `protobuf:"bytes,3,opt,name=iconUrl" json:"iconUrl,omitempty"`
	Wording         *string                     `protobuf:"bytes,4,opt,name=wording" json:"wording,omitempty"`
	RecommendReason *string                     `protobuf:"bytes,5,opt,name=recommendReason" json:"recommendReason,omitempty"`
	ExtInfo         *string                     `protobuf:"bytes,6,opt,name=extInfo" json:"extInfo,omitempty"`
	ReportInfo      *string                     `protobuf:"bytes,7,opt,name=reportInfo" json:"reportInfo,omitempty"`
	MiniAppInfo     *FinderJumpInfo_MiniAppInfo `protobuf:"bytes,8,opt,name=miniAppInfo" json:"miniAppInfo,omitempty"`
	Html5Info       *FinderJumpInfo_Html5Info   `protobuf:"bytes,9,opt,name=html5Info" json:"html5Info,omitempty"`
	NativeInfo      *FinderJumpInfo_NativeInfo  `protobuf:"bytes,10,opt,name=nativeInfo" json:"nativeInfo,omitempty"`
	SchemaInfo      *FinderJumpInfo_SchemaInfo  `protobuf:"bytes,11,opt,name=schemaInfo" json:"schemaInfo,omitempty"`
	Source          *uint32                     `protobuf:"varint,12,opt,name=source" json:"source,omitempty"`
	IconUrlDark     *string                     `protobuf:"bytes,15,opt,name=iconUrlDark" json:"iconUrlDark,omitempty"`
	IconUrlBg       *string                     `protobuf:"bytes,16,opt,name=iconUrlBg" json:"iconUrlBg,omitempty"`
	ExtBuff         []byte                      `protobuf:"bytes,17,opt,name=extBuff" json:"extBuff,omitempty"`
	RedDot          *FinderJumpInfoRedDot       `protobuf:"bytes,18,opt,name=redDot" json:"redDot,omitempty"`
	JumpId          *string                     `protobuf:"bytes,19,opt,name=jumpId" json:"jumpId,omitempty"`
	BannerType      *uint32                     `protobuf:"varint,20,opt,name=bannerType" json:"bannerType,omitempty"`
	Position        *uint32                     `protobuf:"varint,21,opt,name=position" json:"position,omitempty"`
}

func (x *FinderJumpInfo) Reset() {
	*x = FinderJumpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJumpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJumpInfo) ProtoMessage() {}

func (x *FinderJumpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJumpInfo.ProtoReflect.Descriptor instead.
func (*FinderJumpInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{33}
}

func (x *FinderJumpInfo) GetJumpinfoType() uint32 {
	if x != nil && x.JumpinfoType != nil {
		return *x.JumpinfoType
	}
	return 0
}

func (x *FinderJumpInfo) GetBusinessType() uint32 {
	if x != nil && x.BusinessType != nil {
		return *x.BusinessType
	}
	return 0
}

func (x *FinderJumpInfo) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *FinderJumpInfo) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *FinderJumpInfo) GetRecommendReason() string {
	if x != nil && x.RecommendReason != nil {
		return *x.RecommendReason
	}
	return ""
}

func (x *FinderJumpInfo) GetExtInfo() string {
	if x != nil && x.ExtInfo != nil {
		return *x.ExtInfo
	}
	return ""
}

func (x *FinderJumpInfo) GetReportInfo() string {
	if x != nil && x.ReportInfo != nil {
		return *x.ReportInfo
	}
	return ""
}

func (x *FinderJumpInfo) GetMiniAppInfo() *FinderJumpInfo_MiniAppInfo {
	if x != nil {
		return x.MiniAppInfo
	}
	return nil
}

func (x *FinderJumpInfo) GetHtml5Info() *FinderJumpInfo_Html5Info {
	if x != nil {
		return x.Html5Info
	}
	return nil
}

func (x *FinderJumpInfo) GetNativeInfo() *FinderJumpInfo_NativeInfo {
	if x != nil {
		return x.NativeInfo
	}
	return nil
}

func (x *FinderJumpInfo) GetSchemaInfo() *FinderJumpInfo_SchemaInfo {
	if x != nil {
		return x.SchemaInfo
	}
	return nil
}

func (x *FinderJumpInfo) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *FinderJumpInfo) GetIconUrlDark() string {
	if x != nil && x.IconUrlDark != nil {
		return *x.IconUrlDark
	}
	return ""
}

func (x *FinderJumpInfo) GetIconUrlBg() string {
	if x != nil && x.IconUrlBg != nil {
		return *x.IconUrlBg
	}
	return ""
}

func (x *FinderJumpInfo) GetExtBuff() []byte {
	if x != nil {
		return x.ExtBuff
	}
	return nil
}

func (x *FinderJumpInfo) GetRedDot() *FinderJumpInfoRedDot {
	if x != nil {
		return x.RedDot
	}
	return nil
}

func (x *FinderJumpInfo) GetJumpId() string {
	if x != nil && x.JumpId != nil {
		return *x.JumpId
	}
	return ""
}

func (x *FinderJumpInfo) GetBannerType() uint32 {
	if x != nil && x.BannerType != nil {
		return *x.BannerType
	}
	return 0
}

func (x *FinderJumpInfo) GetPosition() uint32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

type FinderContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username             *string                `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Nickname             *string                `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	HeadUrl              *string                `protobuf:"bytes,3,opt,name=headUrl" json:"headUrl,omitempty"`
	Seq                  *uint64                `protobuf:"varint,4,opt,name=seq" json:"seq,omitempty"`
	Signature            *string                `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
	FollowFlag           *uint32                `protobuf:"varint,6,opt,name=followFlag" json:"followFlag,omitempty"`
	FollowTime           *uint32                `protobuf:"varint,7,opt,name=followTime" json:"followTime,omitempty"`
	AuthInfo             *FinderAuthInfo        `protobuf:"bytes,8,opt,name=authInfo" json:"authInfo,omitempty"`
	CoverImgUrl          *string                `protobuf:"bytes,9,opt,name=coverImgUrl" json:"coverImgUrl,omitempty"`
	SpamStatus           *uint32                `protobuf:"varint,10,opt,name=spamStatus" json:"spamStatus,omitempty"`
	ExtFlag              *uint32                `protobuf:"varint,11,opt,name=extFlag" json:"extFlag,omitempty"`
	ExtInfo              *FinderContactExtInfo  `protobuf:"bytes,12,opt,name=extInfo" json:"extInfo,omitempty"`
	OriginalFlag         *uint32                `protobuf:"varint,13,opt,name=originalFlag" json:"originalFlag,omitempty"`
	OriginalInfo         *FinderOriginalInfo    `protobuf:"bytes,14,opt,name=originalInfo" json:"originalInfo,omitempty"`
	LiveStatus           *uint32                `protobuf:"varint,15,opt,name=liveStatus" json:"liveStatus,omitempty"`
	MsgInfo              *FinderContactMsgInfo  `protobuf:"bytes,16,opt,name=msgInfo" json:"msgInfo,omitempty"`
	OriginalEntranceFlag *uint32                `protobuf:"varint,17,opt,name=originalEntranceFlag" json:"originalEntranceFlag,omitempty"`
	LiveCoverImgUrl      *string                `protobuf:"bytes,18,opt,name=liveCoverImgUrl" json:"liveCoverImgUrl,omitempty"`
	ForeignUserFlag      *uint32                `protobuf:"varint,19,opt,name=foreignUserFlag" json:"foreignUserFlag,omitempty"`
	LiveNoticeInfo       *FinderLiveNoticeInfo  `protobuf:"bytes,20,opt,name=liveNoticeInfo" json:"liveNoticeInfo,omitempty"`
	LoggingoutWording    *string                `protobuf:"bytes,21,opt,name=loggingoutWording" json:"loggingoutWording,omitempty"`
	LiveInfo             *FinderContactLiveInfo `protobuf:"bytes,22,opt,name=liveInfo" json:"liveInfo,omitempty"`
	FriendFollowCount    *uint32                `protobuf:"varint,23,opt,name=friendFollowCount" json:"friendFollowCount,omitempty"`
	FansCount            *uint32                `protobuf:"varint,24,opt,name=fansCount" json:"fansCount,omitempty"`
	WxUsernameV5         *string                `protobuf:"bytes,25,opt,name=wxUsernameV5" json:"wxUsernameV5,omitempty"`
	VestNickname         *string                `protobuf:"bytes,26,opt,name=vestNickname" json:"vestNickname,omitempty"`
	FeedCount            *uint32                `protobuf:"varint,27,opt,name=feedCount" json:"feedCount,omitempty"`
	UserMode             *uint32                `protobuf:"varint,28,opt,name=userMode" json:"userMode,omitempty"`
	GuestInfo            *FinderGuestInfo       `protobuf:"bytes,29,opt,name=guestInfo" json:"guestInfo,omitempty"`
	BindInfo             []*FinderBindInfo      `protobuf:"bytes,30,rep,name=bindInfo" json:"bindInfo,omitempty"`
	CoverUrl             *string                `protobuf:"bytes,31,opt,name=coverUrl" json:"coverUrl,omitempty"`
	CoverEntranceFlag    *uint32                `protobuf:"varint,32,opt,name=coverEntranceFlag" json:"coverEntranceFlag,omitempty"`
	ArchievementInfo     *AchievementInfo       `protobuf:"bytes,33,opt,name=archievementInfo" json:"archievementInfo,omitempty"`
	Menu                 []*FinderJumpInfo      `protobuf:"bytes,34,rep,name=menu" json:"menu,omitempty"`
	UserFlag             *uint32                `protobuf:"varint,35,opt,name=userFlag" json:"userFlag,omitempty"`
	OneTimeFlag          *uint32                `protobuf:"varint,36,opt,name=oneTimeFlag" json:"oneTimeFlag,omitempty"`
}

func (x *FinderContact) Reset() {
	*x = FinderContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContact) ProtoMessage() {}

func (x *FinderContact) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContact.ProtoReflect.Descriptor instead.
func (*FinderContact) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{34}
}

func (x *FinderContact) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderContact) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderContact) GetHeadUrl() string {
	if x != nil && x.HeadUrl != nil {
		return *x.HeadUrl
	}
	return ""
}

func (x *FinderContact) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *FinderContact) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *FinderContact) GetFollowFlag() uint32 {
	if x != nil && x.FollowFlag != nil {
		return *x.FollowFlag
	}
	return 0
}

func (x *FinderContact) GetFollowTime() uint32 {
	if x != nil && x.FollowTime != nil {
		return *x.FollowTime
	}
	return 0
}

func (x *FinderContact) GetAuthInfo() *FinderAuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *FinderContact) GetCoverImgUrl() string {
	if x != nil && x.CoverImgUrl != nil {
		return *x.CoverImgUrl
	}
	return ""
}

func (x *FinderContact) GetSpamStatus() uint32 {
	if x != nil && x.SpamStatus != nil {
		return *x.SpamStatus
	}
	return 0
}

func (x *FinderContact) GetExtFlag() uint32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *FinderContact) GetExtInfo() *FinderContactExtInfo {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

func (x *FinderContact) GetOriginalFlag() uint32 {
	if x != nil && x.OriginalFlag != nil {
		return *x.OriginalFlag
	}
	return 0
}

func (x *FinderContact) GetOriginalInfo() *FinderOriginalInfo {
	if x != nil {
		return x.OriginalInfo
	}
	return nil
}

func (x *FinderContact) GetLiveStatus() uint32 {
	if x != nil && x.LiveStatus != nil {
		return *x.LiveStatus
	}
	return 0
}

func (x *FinderContact) GetMsgInfo() *FinderContactMsgInfo {
	if x != nil {
		return x.MsgInfo
	}
	return nil
}

func (x *FinderContact) GetOriginalEntranceFlag() uint32 {
	if x != nil && x.OriginalEntranceFlag != nil {
		return *x.OriginalEntranceFlag
	}
	return 0
}

func (x *FinderContact) GetLiveCoverImgUrl() string {
	if x != nil && x.LiveCoverImgUrl != nil {
		return *x.LiveCoverImgUrl
	}
	return ""
}

func (x *FinderContact) GetForeignUserFlag() uint32 {
	if x != nil && x.ForeignUserFlag != nil {
		return *x.ForeignUserFlag
	}
	return 0
}

func (x *FinderContact) GetLiveNoticeInfo() *FinderLiveNoticeInfo {
	if x != nil {
		return x.LiveNoticeInfo
	}
	return nil
}

func (x *FinderContact) GetLoggingoutWording() string {
	if x != nil && x.LoggingoutWording != nil {
		return *x.LoggingoutWording
	}
	return ""
}

func (x *FinderContact) GetLiveInfo() *FinderContactLiveInfo {
	if x != nil {
		return x.LiveInfo
	}
	return nil
}

func (x *FinderContact) GetFriendFollowCount() uint32 {
	if x != nil && x.FriendFollowCount != nil {
		return *x.FriendFollowCount
	}
	return 0
}

func (x *FinderContact) GetFansCount() uint32 {
	if x != nil && x.FansCount != nil {
		return *x.FansCount
	}
	return 0
}

func (x *FinderContact) GetWxUsernameV5() string {
	if x != nil && x.WxUsernameV5 != nil {
		return *x.WxUsernameV5
	}
	return ""
}

func (x *FinderContact) GetVestNickname() string {
	if x != nil && x.VestNickname != nil {
		return *x.VestNickname
	}
	return ""
}

func (x *FinderContact) GetFeedCount() uint32 {
	if x != nil && x.FeedCount != nil {
		return *x.FeedCount
	}
	return 0
}

func (x *FinderContact) GetUserMode() uint32 {
	if x != nil && x.UserMode != nil {
		return *x.UserMode
	}
	return 0
}

func (x *FinderContact) GetGuestInfo() *FinderGuestInfo {
	if x != nil {
		return x.GuestInfo
	}
	return nil
}

func (x *FinderContact) GetBindInfo() []*FinderBindInfo {
	if x != nil {
		return x.BindInfo
	}
	return nil
}

func (x *FinderContact) GetCoverUrl() string {
	if x != nil && x.CoverUrl != nil {
		return *x.CoverUrl
	}
	return ""
}

func (x *FinderContact) GetCoverEntranceFlag() uint32 {
	if x != nil && x.CoverEntranceFlag != nil {
		return *x.CoverEntranceFlag
	}
	return 0
}

func (x *FinderContact) GetArchievementInfo() *AchievementInfo {
	if x != nil {
		return x.ArchievementInfo
	}
	return nil
}

func (x *FinderContact) GetMenu() []*FinderJumpInfo {
	if x != nil {
		return x.Menu
	}
	return nil
}

func (x *FinderContact) GetUserFlag() uint32 {
	if x != nil && x.UserFlag != nil {
		return *x.UserFlag
	}
	return 0
}

func (x *FinderContact) GetOneTimeFlag() uint32 {
	if x != nil && x.OneTimeFlag != nil {
		return *x.OneTimeFlag
	}
	return 0
}

type ClientContextInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextId         *string `protobuf:"bytes,1,opt,name=contextId" json:"contextId,omitempty"`
	ClickTabContextId *string `protobuf:"bytes,2,opt,name=clickTabContextId" json:"clickTabContextId,omitempty"`
	ClientReportBuff  *string `protobuf:"bytes,3,opt,name=clientReportBuff" json:"clientReportBuff,omitempty"`
}

func (x *ClientContextInfo) Reset() {
	*x = ClientContextInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientContextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientContextInfo) ProtoMessage() {}

func (x *ClientContextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientContextInfo.ProtoReflect.Descriptor instead.
func (*ClientContextInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{35}
}

func (x *ClientContextInfo) GetContextId() string {
	if x != nil && x.ContextId != nil {
		return *x.ContextId
	}
	return ""
}

func (x *ClientContextInfo) GetClickTabContextId() string {
	if x != nil && x.ClickTabContextId != nil {
		return *x.ClickTabContextId
	}
	return ""
}

func (x *ClientContextInfo) GetClientReportBuff() string {
	if x != nil && x.ClientReportBuff != nil {
		return *x.ClientReportBuff
	}
	return ""
}

type FinderObjectBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SessionBuffer      *string `protobuf:"bytes,2,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	ClientRecvTimeMs   *uint64 `protobuf:"varint,3,opt,name=clientRecvTimeMs" json:"clientRecvTimeMs,omitempty"`
	ClientExposeTimeMs *uint64 `protobuf:"varint,4,opt,name=clientExposeTimeMs" json:"clientExposeTimeMs,omitempty"`
	ClientExposeCount  *uint32 `protobuf:"varint,5,opt,name=clientExposeCount" json:"clientExposeCount,omitempty"`
	ClientUdfKv        *string `protobuf:"bytes,6,opt,name=clientUdfKv" json:"clientUdfKv,omitempty"`
}

func (x *FinderObjectBaseInfo) Reset() {
	*x = FinderObjectBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectBaseInfo) ProtoMessage() {}

func (x *FinderObjectBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectBaseInfo.ProtoReflect.Descriptor instead.
func (*FinderObjectBaseInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{36}
}

func (x *FinderObjectBaseInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FinderObjectBaseInfo) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *FinderObjectBaseInfo) GetClientRecvTimeMs() uint64 {
	if x != nil && x.ClientRecvTimeMs != nil {
		return *x.ClientRecvTimeMs
	}
	return 0
}

func (x *FinderObjectBaseInfo) GetClientExposeTimeMs() uint64 {
	if x != nil && x.ClientExposeTimeMs != nil {
		return *x.ClientExposeTimeMs
	}
	return 0
}

func (x *FinderObjectBaseInfo) GetClientExposeCount() uint32 {
	if x != nil && x.ClientExposeCount != nil {
		return *x.ClientExposeCount
	}
	return 0
}

func (x *FinderObjectBaseInfo) GetClientUdfKv() string {
	if x != nil && x.ClientUdfKv != nil {
		return *x.ClientUdfKv
	}
	return ""
}

type FinderBaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userver         *uint32                 `protobuf:"varint,1,opt,name=userver" json:"userver,omitempty"`
	Scene           *uint32                 `protobuf:"varint,2,opt,name=scene" json:"scene,omitempty"`
	ExtSpamInfo     []byte                  `protobuf:"bytes,3,opt,name=extSpamInfo" json:"extSpamInfo,omitempty"`
	ExptFlag        *uint32                 `protobuf:"varint,4,opt,name=exptFlag" json:"exptFlag,omitempty"`
	CtxInfo         *ClientContextInfo      `protobuf:"bytes,5,opt,name=ctxInfo" json:"ctxInfo,omitempty"`
	RequestId       *uint64                 `protobuf:"varint,6,opt,name=requestId" json:"requestId,omitempty"`
	LiveIdentity    *uint32                 `protobuf:"varint,7,opt,name=liveIdentity" json:"liveIdentity,omitempty"`
	ObjectBaseInfos []*FinderObjectBaseInfo `protobuf:"bytes,8,rep,name=objectBaseInfos" json:"objectBaseInfos,omitempty"`
}

func (x *FinderBaseRequest) Reset() {
	*x = FinderBaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBaseRequest) ProtoMessage() {}

func (x *FinderBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBaseRequest.ProtoReflect.Descriptor instead.
func (*FinderBaseRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{37}
}

func (x *FinderBaseRequest) GetUserver() uint32 {
	if x != nil && x.Userver != nil {
		return *x.Userver
	}
	return 0
}

func (x *FinderBaseRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderBaseRequest) GetExtSpamInfo() []byte {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

func (x *FinderBaseRequest) GetExptFlag() uint32 {
	if x != nil && x.ExptFlag != nil {
		return *x.ExptFlag
	}
	return 0
}

func (x *FinderBaseRequest) GetCtxInfo() *ClientContextInfo {
	if x != nil {
		return x.CtxInfo
	}
	return nil
}

func (x *FinderBaseRequest) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *FinderBaseRequest) GetLiveIdentity() uint32 {
	if x != nil && x.LiveIdentity != nil {
		return *x.LiveIdentity
	}
	return 0
}

func (x *FinderBaseRequest) GetObjectBaseInfos() []*FinderObjectBaseInfo {
	if x != nil {
		return x.ObjectBaseInfos
	}
	return nil
}

type ClientStatsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExposeCount     *uint32 `protobuf:"varint,1,opt,name=exposeCount" json:"exposeCount,omitempty"`
	Oob             *string `protobuf:"bytes,2,opt,name=oob" json:"oob,omitempty"`
	FirstExposeTime *uint64 `protobuf:"varint,3,opt,name=firstExposeTime" json:"firstExposeTime,omitempty"`
}

func (x *ClientStatsInfo) Reset() {
	*x = ClientStatsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStatsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStatsInfo) ProtoMessage() {}

func (x *ClientStatsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStatsInfo.ProtoReflect.Descriptor instead.
func (*ClientStatsInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{38}
}

func (x *ClientStatsInfo) GetExposeCount() uint32 {
	if x != nil && x.ExposeCount != nil {
		return *x.ExposeCount
	}
	return 0
}

func (x *ClientStatsInfo) GetOob() string {
	if x != nil && x.Oob != nil {
		return *x.Oob
	}
	return ""
}

func (x *ClientStatsInfo) GetFirstExposeTime() uint64 {
	if x != nil && x.FirstExposeTime != nil {
		return *x.FirstExposeTime
	}
	return 0
}

type FinderTipsShowInfo_IconConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PositionFlag *uint32 `protobuf:"varint,2,opt,name=positionFlag" json:"positionFlag,omitempty"`
}

func (x *FinderTipsShowInfo_IconConfig) Reset() {
	*x = FinderTipsShowInfo_IconConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTipsShowInfo_IconConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTipsShowInfo_IconConfig) ProtoMessage() {}

func (x *FinderTipsShowInfo_IconConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTipsShowInfo_IconConfig.ProtoReflect.Descriptor instead.
func (*FinderTipsShowInfo_IconConfig) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{39}
}

func (x *FinderTipsShowInfo_IconConfig) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FinderTipsShowInfo_IconConfig) GetPositionFlag() uint32 {
	if x != nil && x.PositionFlag != nil {
		return *x.PositionFlag
	}
	return 0
}

type AttributeTitle_SubContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubTitle   *string `protobuf:"bytes,1,opt,name=subTitle" json:"subTitle,omitempty"`
	IconUrl    *string `protobuf:"bytes,2,opt,name=iconUrl" json:"iconUrl,omitempty"`
	LightColor *string `protobuf:"bytes,3,opt,name=lightColor" json:"lightColor,omitempty"`
	DarkColor  *string `protobuf:"bytes,4,opt,name=darkColor" json:"darkColor,omitempty"`
}

func (x *AttributeTitle_SubContent) Reset() {
	*x = AttributeTitle_SubContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeTitle_SubContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeTitle_SubContent) ProtoMessage() {}

func (x *AttributeTitle_SubContent) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeTitle_SubContent.ProtoReflect.Descriptor instead.
func (*AttributeTitle_SubContent) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{40}
}

func (x *AttributeTitle_SubContent) GetSubTitle() string {
	if x != nil && x.SubTitle != nil {
		return *x.SubTitle
	}
	return ""
}

func (x *AttributeTitle_SubContent) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *AttributeTitle_SubContent) GetLightColor() string {
	if x != nil && x.LightColor != nil {
		return *x.LightColor
	}
	return ""
}

func (x *AttributeTitle_SubContent) GetDarkColor() string {
	if x != nil && x.DarkColor != nil {
		return *x.DarkColor
	}
	return ""
}

type AttributeTitle_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      *string                    `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	SubContent *AttributeTitle_SubContent `protobuf:"bytes,2,opt,name=subContent" json:"subContent,omitempty"`
}

func (x *AttributeTitle_Content) Reset() {
	*x = AttributeTitle_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeTitle_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeTitle_Content) ProtoMessage() {}

func (x *AttributeTitle_Content) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeTitle_Content.ProtoReflect.Descriptor instead.
func (*AttributeTitle_Content) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{41}
}

func (x *AttributeTitle_Content) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *AttributeTitle_Content) GetSubContent() *AttributeTitle_SubContent {
	if x != nil {
		return x.SubContent
	}
	return nil
}

type AttributeTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content *AttributeTitle_Content `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (x *AttributeTitle) Reset() {
	*x = AttributeTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeTitle) ProtoMessage() {}

func (x *AttributeTitle) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeTitle.ProtoReflect.Descriptor instead.
func (*AttributeTitle) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{42}
}

func (x *AttributeTitle) GetContent() *AttributeTitle_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

type FinderTipsShowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowType             *uint32                        `protobuf:"varint,1,opt,name=showType" json:"showType,omitempty"`
	Count                *uint32                        `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Title                *string                        `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	IconUrl              *string                        `protobuf:"bytes,4,opt,name=iconUrl" json:"iconUrl,omitempty"`
	ClearType            *uint32                        `protobuf:"varint,5,opt,name=clearType" json:"clearType,omitempty"`
	Path                 *string                        `protobuf:"bytes,6,opt,name=path" json:"path,omitempty"`
	Parent               *string                        `protobuf:"bytes,7,opt,name=parent" json:"parent,omitempty"`
	ShowExtInfoType      *uint32                        `protobuf:"varint,8,opt,name=showExtInfoType" json:"showExtInfoType,omitempty"`
	ShowExtInfo          []byte                         `protobuf:"bytes,9,opt,name=showExtInfo" json:"showExtInfo,omitempty"`
	MultiIconUrls        []string                       `protobuf:"bytes,10,rep,name=multiIconUrls" json:"multiIconUrls,omitempty"`
	ClientStatsInfo      *ClientStatsInfo               `protobuf:"bytes,11,opt,name=clientStatsInfo" json:"clientStatsInfo,omitempty"`
	ShowLiveTabId        *uint32                        `protobuf:"varint,12,opt,name=showLiveTabId" json:"showLiveTabId,omitempty"`
	IgnoreFreqLimit      *uint32                        `protobuf:"varint,13,opt,name=ignoreFreqLimit" json:"ignoreFreqLimit,omitempty"`
	ExposeCountLimit     *uint32                        `protobuf:"varint,14,opt,name=exposeCountLimit" json:"exposeCountLimit,omitempty"`
	ExposeLimitStrategy  *uint32                        `protobuf:"varint,15,opt,name=exposeLimitStrategy" json:"exposeLimitStrategy,omitempty"`
	ColdTime             *uint32                        `protobuf:"varint,16,opt,name=coldTime" json:"coldTime,omitempty"`
	IconConfig           *FinderTipsShowInfo_IconConfig `protobuf:"bytes,17,opt,name=iconConfig" json:"iconConfig,omitempty"`
	AttributeTitle       *AttributeTitle                `protobuf:"bytes,18,opt,name=attributeTitle" json:"attributeTitle,omitempty"`
	CacheChangeTabOption *uint32                        `protobuf:"varint,19,opt,name=cacheChangeTabOption" json:"cacheChangeTabOption,omitempty"`
}

func (x *FinderTipsShowInfo) Reset() {
	*x = FinderTipsShowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTipsShowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTipsShowInfo) ProtoMessage() {}

func (x *FinderTipsShowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTipsShowInfo.ProtoReflect.Descriptor instead.
func (*FinderTipsShowInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{43}
}

func (x *FinderTipsShowInfo) GetShowType() uint32 {
	if x != nil && x.ShowType != nil {
		return *x.ShowType
	}
	return 0
}

func (x *FinderTipsShowInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *FinderTipsShowInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderTipsShowInfo) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *FinderTipsShowInfo) GetClearType() uint32 {
	if x != nil && x.ClearType != nil {
		return *x.ClearType
	}
	return 0
}

func (x *FinderTipsShowInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FinderTipsShowInfo) GetParent() string {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return ""
}

func (x *FinderTipsShowInfo) GetShowExtInfoType() uint32 {
	if x != nil && x.ShowExtInfoType != nil {
		return *x.ShowExtInfoType
	}
	return 0
}

func (x *FinderTipsShowInfo) GetShowExtInfo() []byte {
	if x != nil {
		return x.ShowExtInfo
	}
	return nil
}

func (x *FinderTipsShowInfo) GetMultiIconUrls() []string {
	if x != nil {
		return x.MultiIconUrls
	}
	return nil
}

func (x *FinderTipsShowInfo) GetClientStatsInfo() *ClientStatsInfo {
	if x != nil {
		return x.ClientStatsInfo
	}
	return nil
}

func (x *FinderTipsShowInfo) GetShowLiveTabId() uint32 {
	if x != nil && x.ShowLiveTabId != nil {
		return *x.ShowLiveTabId
	}
	return 0
}

func (x *FinderTipsShowInfo) GetIgnoreFreqLimit() uint32 {
	if x != nil && x.IgnoreFreqLimit != nil {
		return *x.IgnoreFreqLimit
	}
	return 0
}

func (x *FinderTipsShowInfo) GetExposeCountLimit() uint32 {
	if x != nil && x.ExposeCountLimit != nil {
		return *x.ExposeCountLimit
	}
	return 0
}

func (x *FinderTipsShowInfo) GetExposeLimitStrategy() uint32 {
	if x != nil && x.ExposeLimitStrategy != nil {
		return *x.ExposeLimitStrategy
	}
	return 0
}

func (x *FinderTipsShowInfo) GetColdTime() uint32 {
	if x != nil && x.ColdTime != nil {
		return *x.ColdTime
	}
	return 0
}

func (x *FinderTipsShowInfo) GetIconConfig() *FinderTipsShowInfo_IconConfig {
	if x != nil {
		return x.IconConfig
	}
	return nil
}

func (x *FinderTipsShowInfo) GetAttributeTitle() *AttributeTitle {
	if x != nil {
		return x.AttributeTitle
	}
	return nil
}

func (x *FinderTipsShowInfo) GetCacheChangeTabOption() uint32 {
	if x != nil && x.CacheChangeTabOption != nil {
		return *x.CacheChangeTabOption
	}
	return 0
}

type FinderRedDotCtrlInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority             *uint32               `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	Type                 *uint32               `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	ExtInfo              []byte                `protobuf:"bytes,3,opt,name=extInfo" json:"extInfo,omitempty"`
	ShowInfos            []*FinderTipsShowInfo `protobuf:"bytes,4,rep,name=showInfos" json:"showInfos,omitempty"`
	TipsId               *string               `protobuf:"bytes,5,opt,name=tipsId" json:"tipsId,omitempty"`
	ExpireTime           *uint32               `protobuf:"varint,6,opt,name=expireTime" json:"expireTime,omitempty"`
	StartTime            *uint32               `protobuf:"varint,7,opt,name=startTime" json:"startTime,omitempty"`
	IgnoreDisplayTabType *uint32               `protobuf:"varint,8,opt,name=ignoreDisplayTabType" json:"ignoreDisplayTabType,omitempty"`
	IgnoreValid          *bool                 `protobuf:"varint,9,opt,name=ignoreValid" json:"ignoreValid,omitempty"`
	InternalFeedbackUrl  *string               `protobuf:"bytes,10,opt,name=internalFeedbackUrl" json:"internalFeedbackUrl,omitempty"`
}

func (x *FinderRedDotCtrlInfo) Reset() {
	*x = FinderRedDotCtrlInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderRedDotCtrlInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderRedDotCtrlInfo) ProtoMessage() {}

func (x *FinderRedDotCtrlInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderRedDotCtrlInfo.ProtoReflect.Descriptor instead.
func (*FinderRedDotCtrlInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{44}
}

func (x *FinderRedDotCtrlInfo) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *FinderRedDotCtrlInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderRedDotCtrlInfo) GetExtInfo() []byte {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

func (x *FinderRedDotCtrlInfo) GetShowInfos() []*FinderTipsShowInfo {
	if x != nil {
		return x.ShowInfos
	}
	return nil
}

func (x *FinderRedDotCtrlInfo) GetTipsId() string {
	if x != nil && x.TipsId != nil {
		return *x.TipsId
	}
	return ""
}

func (x *FinderRedDotCtrlInfo) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

func (x *FinderRedDotCtrlInfo) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *FinderRedDotCtrlInfo) GetIgnoreDisplayTabType() uint32 {
	if x != nil && x.IgnoreDisplayTabType != nil {
		return *x.IgnoreDisplayTabType
	}
	return 0
}

func (x *FinderRedDotCtrlInfo) GetIgnoreValid() bool {
	if x != nil && x.IgnoreValid != nil {
		return *x.IgnoreValid
	}
	return false
}

func (x *FinderRedDotCtrlInfo) GetInternalFeedbackUrl() string {
	if x != nil && x.InternalFeedbackUrl != nil {
		return *x.InternalFeedbackUrl
	}
	return ""
}

type FinderSyncClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderEntranceTitleLengthLimit       *uint32 `protobuf:"varint,1,opt,name=finderEntranceTitleLengthLimit" json:"finderEntranceTitleLengthLimit,omitempty"`
	FinderEntranceSingleTitleLengthLimit *uint32 `protobuf:"varint,2,opt,name=finderEntranceSingleTitleLengthLimit" json:"finderEntranceSingleTitleLengthLimit,omitempty"`
}

func (x *FinderSyncClientInfo) Reset() {
	*x = FinderSyncClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSyncClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSyncClientInfo) ProtoMessage() {}

func (x *FinderSyncClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSyncClientInfo.ProtoReflect.Descriptor instead.
func (*FinderSyncClientInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{45}
}

func (x *FinderSyncClientInfo) GetFinderEntranceTitleLengthLimit() uint32 {
	if x != nil && x.FinderEntranceTitleLengthLimit != nil {
		return *x.FinderEntranceTitleLengthLimit
	}
	return 0
}

func (x *FinderSyncClientInfo) GetFinderEntranceSingleTitleLengthLimit() uint32 {
	if x != nil && x.FinderEntranceSingleTitleLengthLimit != nil {
		return *x.FinderEntranceSingleTitleLengthLimit
	}
	return 0
}

type FinderSyncClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasDiscoveryReddot *bool `protobuf:"varint,1,opt,name=hasDiscoveryReddot" json:"hasDiscoveryReddot,omitempty"`
}

func (x *FinderSyncClientStatus) Reset() {
	*x = FinderSyncClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSyncClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSyncClientStatus) ProtoMessage() {}

func (x *FinderSyncClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSyncClientStatus.ProtoReflect.Descriptor instead.
func (*FinderSyncClientStatus) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{46}
}

func (x *FinderSyncClientStatus) GetHasDiscoveryReddot() bool {
	if x != nil && x.HasDiscoveryReddot != nil {
		return *x.HasDiscoveryReddot
	}
	return false
}

type FinderSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest          *BaseRequest            `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Selector             *uint32                 `protobuf:"varint,2,opt,name=selector" json:"selector,omitempty"`
	KeyBuf               *SKBuiltinBufferT       `protobuf:"bytes,3,opt,name=keyBuf" json:"keyBuf,omitempty"`
	Contacts             []*FinderContact        `protobuf:"bytes,4,rep,name=contacts" json:"contacts,omitempty"`
	Self                 []*FinderContact        `protobuf:"bytes,5,rep,name=self" json:"self,omitempty"`
	FinderUsername       *string                 `protobuf:"bytes,6,opt,name=finderUsername" json:"finderUsername,omitempty"`
	FinderBasereq        *FinderBaseRequest      `protobuf:"bytes,7,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	Scene                *uint32                 `protobuf:"varint,8,opt,name=scene" json:"scene,omitempty"`
	CtrlInfoList         []*FinderRedDotCtrlInfo `protobuf:"bytes,9,rep,name=ctrlInfoList" json:"ctrlInfoList,omitempty"`
	EntranceTipsId       *string                 `protobuf:"bytes,10,opt,name=entranceTipsId" json:"entranceTipsId,omitempty"`
	NearbyCtrlInfoList   []*FinderRedDotCtrlInfo `protobuf:"bytes,11,rep,name=nearbyCtrlInfoList" json:"nearbyCtrlInfoList,omitempty"`
	NearbyEntranceTipsId *string                 `protobuf:"bytes,12,opt,name=nearbyEntranceTipsId" json:"nearbyEntranceTipsId,omitempty"`
	StayDisplayTabType   *uint32                 `protobuf:"varint,13,opt,name=stayDisplayTabType" json:"stayDisplayTabType,omitempty"`
	ClientAiInfo         []byte                  `protobuf:"bytes,14,opt,name=clientAiInfo" json:"clientAiInfo,omitempty"`
	FredDeleted          *uint32                 `protobuf:"varint,15,opt,name=fredDeleted" json:"fredDeleted,omitempty"`
	FreqctrlSet          *uint64                 `protobuf:"varint,16,opt,name=freqctrlSet" json:"freqctrlSet,omitempty"`
	ClientInfo           *FinderSyncClientInfo   `protobuf:"bytes,17,opt,name=clientInfo" json:"clientInfo,omitempty"`
	ClientStatus         *FinderSyncClientStatus `protobuf:"bytes,18,opt,name=clientStatus" json:"clientStatus,omitempty"`
}

func (x *FinderSyncRequest) Reset() {
	*x = FinderSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSyncRequest) ProtoMessage() {}

func (x *FinderSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSyncRequest.ProtoReflect.Descriptor instead.
func (*FinderSyncRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{47}
}

func (x *FinderSyncRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderSyncRequest) GetSelector() uint32 {
	if x != nil && x.Selector != nil {
		return *x.Selector
	}
	return 0
}

func (x *FinderSyncRequest) GetKeyBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.KeyBuf
	}
	return nil
}

func (x *FinderSyncRequest) GetContacts() []*FinderContact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *FinderSyncRequest) GetSelf() []*FinderContact {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *FinderSyncRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderSyncRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderSyncRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderSyncRequest) GetCtrlInfoList() []*FinderRedDotCtrlInfo {
	if x != nil {
		return x.CtrlInfoList
	}
	return nil
}

func (x *FinderSyncRequest) GetEntranceTipsId() string {
	if x != nil && x.EntranceTipsId != nil {
		return *x.EntranceTipsId
	}
	return ""
}

func (x *FinderSyncRequest) GetNearbyCtrlInfoList() []*FinderRedDotCtrlInfo {
	if x != nil {
		return x.NearbyCtrlInfoList
	}
	return nil
}

func (x *FinderSyncRequest) GetNearbyEntranceTipsId() string {
	if x != nil && x.NearbyEntranceTipsId != nil {
		return *x.NearbyEntranceTipsId
	}
	return ""
}

func (x *FinderSyncRequest) GetStayDisplayTabType() uint32 {
	if x != nil && x.StayDisplayTabType != nil {
		return *x.StayDisplayTabType
	}
	return 0
}

func (x *FinderSyncRequest) GetClientAiInfo() []byte {
	if x != nil {
		return x.ClientAiInfo
	}
	return nil
}

func (x *FinderSyncRequest) GetFredDeleted() uint32 {
	if x != nil && x.FredDeleted != nil {
		return *x.FredDeleted
	}
	return 0
}

func (x *FinderSyncRequest) GetFreqctrlSet() uint64 {
	if x != nil && x.FreqctrlSet != nil {
		return *x.FreqctrlSet
	}
	return 0
}

func (x *FinderSyncRequest) GetClientInfo() *FinderSyncClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *FinderSyncRequest) GetClientStatus() *FinderSyncClientStatus {
	if x != nil {
		return x.ClientStatus
	}
	return nil
}

type FinderCmdItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdId  *uint32 `protobuf:"varint,1,opt,name=cmdId" json:"cmdId,omitempty"`
	CmdBuf []byte  `protobuf:"bytes,2,opt,name=cmdBuf" json:"cmdBuf,omitempty"`
}

func (x *FinderCmdItem) Reset() {
	*x = FinderCmdItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCmdItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCmdItem) ProtoMessage() {}

func (x *FinderCmdItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCmdItem.ProtoReflect.Descriptor instead.
func (*FinderCmdItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{48}
}

func (x *FinderCmdItem) GetCmdId() uint32 {
	if x != nil && x.CmdId != nil {
		return *x.CmdId
	}
	return 0
}

func (x *FinderCmdItem) GetCmdBuf() []byte {
	if x != nil {
		return x.CmdBuf
	}
	return nil
}

type FinderCheckExpireInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckExpireValid       *uint32 `protobuf:"varint,1,opt,name=checkExpireValid" json:"checkExpireValid,omitempty"`
	CheckExpireIntervalSec *uint32 `protobuf:"varint,2,opt,name=checkExpireIntervalSec" json:"checkExpireIntervalSec,omitempty"`
	CheckExpireMaxCount    *uint32 `protobuf:"varint,3,opt,name=checkExpireMaxCount" json:"checkExpireMaxCount,omitempty"`
}

func (x *FinderCheckExpireInfo) Reset() {
	*x = FinderCheckExpireInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCheckExpireInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCheckExpireInfo) ProtoMessage() {}

func (x *FinderCheckExpireInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCheckExpireInfo.ProtoReflect.Descriptor instead.
func (*FinderCheckExpireInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{49}
}

func (x *FinderCheckExpireInfo) GetCheckExpireValid() uint32 {
	if x != nil && x.CheckExpireValid != nil {
		return *x.CheckExpireValid
	}
	return 0
}

func (x *FinderCheckExpireInfo) GetCheckExpireIntervalSec() uint32 {
	if x != nil && x.CheckExpireIntervalSec != nil {
		return *x.CheckExpireIntervalSec
	}
	return 0
}

func (x *FinderCheckExpireInfo) GetCheckExpireMaxCount() uint32 {
	if x != nil && x.CheckExpireMaxCount != nil {
		return *x.CheckExpireMaxCount
	}
	return 0
}

type FinderSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse       *BaseResponse          `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	CmdListDiscarded   *CmdList               `protobuf:"bytes,2,opt,name=cmdListDiscarded" json:"cmdListDiscarded,omitempty"`
	ContinueFlag       *uint32                `protobuf:"varint,3,opt,name=continueFlag" json:"continueFlag,omitempty"`
	KeyBuf             *SKBuiltinBufferT      `protobuf:"bytes,4,opt,name=keyBuf" json:"keyBuf,omitempty"`
	Contacts           []*FinderContact       `protobuf:"bytes,5,rep,name=contacts" json:"contacts,omitempty"`
	Self               []*FinderContact       `protobuf:"bytes,6,rep,name=self" json:"self,omitempty"`
	CmdList            []*FinderCmdItem       `protobuf:"bytes,7,rep,name=cmdList" json:"cmdList,omitempty"`
	RoundRobinInterval *uint32                `protobuf:"varint,8,opt,name=roundRobinInterval" json:"roundRobinInterval,omitempty"`
	CheckExpireInfo    *FinderCheckExpireInfo `protobuf:"bytes,9,opt,name=checkExpireInfo" json:"checkExpireInfo,omitempty"`
}

func (x *FinderSyncResponse) Reset() {
	*x = FinderSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSyncResponse) ProtoMessage() {}

func (x *FinderSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSyncResponse.ProtoReflect.Descriptor instead.
func (*FinderSyncResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{50}
}

func (x *FinderSyncResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderSyncResponse) GetCmdListDiscarded() *CmdList {
	if x != nil {
		return x.CmdListDiscarded
	}
	return nil
}

func (x *FinderSyncResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderSyncResponse) GetKeyBuf() *SKBuiltinBufferT {
	if x != nil {
		return x.KeyBuf
	}
	return nil
}

func (x *FinderSyncResponse) GetContacts() []*FinderContact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *FinderSyncResponse) GetSelf() []*FinderContact {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *FinderSyncResponse) GetCmdList() []*FinderCmdItem {
	if x != nil {
		return x.CmdList
	}
	return nil
}

func (x *FinderSyncResponse) GetRoundRobinInterval() uint32 {
	if x != nil && x.RoundRobinInterval != nil {
		return *x.RoundRobinInterval
	}
	return 0
}

func (x *FinderSyncResponse) GetCheckExpireInfo() *FinderCheckExpireInfo {
	if x != nil {
		return x.CheckExpireInfo
	}
	return nil
}

type BitFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature *uint64 `protobuf:"varint,1,opt,name=feature" json:"feature,omitempty"`
}

func (x *BitFeature) Reset() {
	*x = BitFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitFeature) ProtoMessage() {}

func (x *BitFeature) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitFeature.ProtoReflect.Descriptor instead.
func (*BitFeature) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{51}
}

func (x *BitFeature) GetFeature() uint64 {
	if x != nil && x.Feature != nil {
		return *x.Feature
	}
	return 0
}

type ValFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VidPlayLen       *uint32 `protobuf:"varint,1,opt,name=vidPlayLen" json:"vidPlayLen,omitempty"`
	StayTime         *uint32 `protobuf:"varint,2,opt,name=stayTime" json:"stayTime,omitempty"`
	StayTimeMs       *uint64 `protobuf:"varint,3,opt,name=stayTimeMs" json:"stayTimeMs,omitempty"`
	VidPlayTimeMs    *uint64 `protobuf:"varint,4,opt,name=vidPlayTimeMs" json:"vidPlayTimeMs,omitempty"`
	VidPlayingTimeMs *uint64 `protobuf:"varint,5,opt,name=vidPlayingTimeMs" json:"vidPlayingTimeMs,omitempty"`
	ExposeTimeMs     *uint64 `protobuf:"varint,6,opt,name=exposeTimeMs" json:"exposeTimeMs,omitempty"`
	StartPlayTime    *uint64 `protobuf:"varint,7,opt,name=startPlayTime" json:"startPlayTime,omitempty"`
	EndPlayTime      *uint64 `protobuf:"varint,8,opt,name=endPlayTime" json:"endPlayTime,omitempty"`
	LastPlayTime     *uint64 `protobuf:"varint,9,opt,name=lastPlayTime" json:"lastPlayTime,omitempty"`
	StopTimes        *uint64 `protobuf:"varint,10,opt,name=stopTimes" json:"stopTimes,omitempty"`
	AutoPlay         *uint32 `protobuf:"varint,11,opt,name=autoPlay" json:"autoPlay,omitempty"`
}

func (x *ValFeature) Reset() {
	*x = ValFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValFeature) ProtoMessage() {}

func (x *ValFeature) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValFeature.ProtoReflect.Descriptor instead.
func (*ValFeature) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{52}
}

func (x *ValFeature) GetVidPlayLen() uint32 {
	if x != nil && x.VidPlayLen != nil {
		return *x.VidPlayLen
	}
	return 0
}

func (x *ValFeature) GetStayTime() uint32 {
	if x != nil && x.StayTime != nil {
		return *x.StayTime
	}
	return 0
}

func (x *ValFeature) GetStayTimeMs() uint64 {
	if x != nil && x.StayTimeMs != nil {
		return *x.StayTimeMs
	}
	return 0
}

func (x *ValFeature) GetVidPlayTimeMs() uint64 {
	if x != nil && x.VidPlayTimeMs != nil {
		return *x.VidPlayTimeMs
	}
	return 0
}

func (x *ValFeature) GetVidPlayingTimeMs() uint64 {
	if x != nil && x.VidPlayingTimeMs != nil {
		return *x.VidPlayingTimeMs
	}
	return 0
}

func (x *ValFeature) GetExposeTimeMs() uint64 {
	if x != nil && x.ExposeTimeMs != nil {
		return *x.ExposeTimeMs
	}
	return 0
}

func (x *ValFeature) GetStartPlayTime() uint64 {
	if x != nil && x.StartPlayTime != nil {
		return *x.StartPlayTime
	}
	return 0
}

func (x *ValFeature) GetEndPlayTime() uint64 {
	if x != nil && x.EndPlayTime != nil {
		return *x.EndPlayTime
	}
	return 0
}

func (x *ValFeature) GetLastPlayTime() uint64 {
	if x != nil && x.LastPlayTime != nil {
		return *x.LastPlayTime
	}
	return 0
}

func (x *ValFeature) GetStopTimes() uint64 {
	if x != nil && x.StopTimes != nil {
		return *x.StopTimes
	}
	return 0
}

func (x *ValFeature) GetAutoPlay() uint32 {
	if x != nil && x.AutoPlay != nil {
		return *x.AutoPlay
	}
	return 0
}

type OriginVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pageturn           *uint32 `protobuf:"varint,1,opt,name=pageturn" json:"pageturn,omitempty"`
	MaxVidPlayProgress *uint32 `protobuf:"varint,2,opt,name=maxVidPlayProgress" json:"maxVidPlayProgress,omitempty"`
	FeedStayTime       *uint32 `protobuf:"varint,3,opt,name=feedStayTime" json:"feedStayTime,omitempty"`
	VidReplayTimes     *uint32 `protobuf:"varint,4,opt,name=vidReplayTimes" json:"vidReplayTimes,omitempty"`
	ForwardTimes       *uint32 `protobuf:"varint,5,opt,name=forwardTimes" json:"forwardTimes,omitempty"`
	ClickComment       *uint32 `protobuf:"varint,6,opt,name=clickComment" json:"clickComment,omitempty"`
	ClickHead          *uint32 `protobuf:"varint,7,opt,name=clickHead" json:"clickHead,omitempty"`
	Share              *uint32 `protobuf:"varint,8,opt,name=share" json:"share,omitempty"`
	FollowStatus       *uint32 `protobuf:"varint,9,opt,name=followStatus" json:"followStatus,omitempty"`
	LikeStatus         *uint32 `protobuf:"varint,10,opt,name=likeStatus" json:"likeStatus,omitempty"`
	CommentTimes       *uint32 `protobuf:"varint,11,opt,name=commentTimes" json:"commentTimes,omitempty"`
	FavStatus          *uint32 `protobuf:"varint,12,opt,name=favStatus" json:"favStatus,omitempty"`
	FastSlip           *uint32 `protobuf:"varint,13,opt,name=fastSlip" json:"fastSlip,omitempty"`
	SortId             *uint32 `protobuf:"varint,14,opt,name=sortId" json:"sortId,omitempty"`
	MaxVidPlayLen      *uint32 `protobuf:"varint,15,opt,name=maxVidPlayLen" json:"maxVidPlayLen,omitempty"`
	NotInterestAction  *uint32 `protobuf:"varint,16,opt,name=notInterestAction" json:"notInterestAction,omitempty"`
	ClickTopicTimes    *uint32 `protobuf:"varint,17,opt,name=clickTopicTimes" json:"clickTopicTimes,omitempty"`
	ExpandTextTimes    *uint32 `protobuf:"varint,18,opt,name=expandTextTimes" json:"expandTextTimes,omitempty"`
	ShareMomentTimes   *uint32 `protobuf:"varint,19,opt,name=shareMomentTimes" json:"shareMomentTimes,omitempty"`
	ClickPoiTimes      *uint32 `protobuf:"varint,20,opt,name=clickPoiTimes" json:"clickPoiTimes,omitempty"`
	CollapseTextTimes  *uint32 `protobuf:"varint,21,opt,name=collapseTextTimes" json:"collapseTextTimes,omitempty"`
	CommentLikeTimes   *uint32 `protobuf:"varint,22,opt,name=commentLikeTimes" json:"commentLikeTimes,omitempty"`
	ClickFeedMenu      *uint32 `protobuf:"varint,23,opt,name=clickFeedMenu" json:"clickFeedMenu,omitempty"`
	ComplainTimes      *uint32 `protobuf:"varint,24,opt,name=complainTimes" json:"complainTimes,omitempty"`
	ClickColumnCard    *uint32 `protobuf:"varint,25,opt,name=clickColumnCard" json:"clickColumnCard,omitempty"`
	DragProgressBar    *uint32 `protobuf:"varint,26,opt,name=dragProgressBar" json:"dragProgressBar,omitempty"`
	ClickFullVideo     *uint32 `protobuf:"varint,27,opt,name=clickFullVideo" json:"clickFullVideo,omitempty"`
}

func (x *OriginVal) Reset() {
	*x = OriginVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginVal) ProtoMessage() {}

func (x *OriginVal) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginVal.ProtoReflect.Descriptor instead.
func (*OriginVal) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{53}
}

func (x *OriginVal) GetPageturn() uint32 {
	if x != nil && x.Pageturn != nil {
		return *x.Pageturn
	}
	return 0
}

func (x *OriginVal) GetMaxVidPlayProgress() uint32 {
	if x != nil && x.MaxVidPlayProgress != nil {
		return *x.MaxVidPlayProgress
	}
	return 0
}

func (x *OriginVal) GetFeedStayTime() uint32 {
	if x != nil && x.FeedStayTime != nil {
		return *x.FeedStayTime
	}
	return 0
}

func (x *OriginVal) GetVidReplayTimes() uint32 {
	if x != nil && x.VidReplayTimes != nil {
		return *x.VidReplayTimes
	}
	return 0
}

func (x *OriginVal) GetForwardTimes() uint32 {
	if x != nil && x.ForwardTimes != nil {
		return *x.ForwardTimes
	}
	return 0
}

func (x *OriginVal) GetClickComment() uint32 {
	if x != nil && x.ClickComment != nil {
		return *x.ClickComment
	}
	return 0
}

func (x *OriginVal) GetClickHead() uint32 {
	if x != nil && x.ClickHead != nil {
		return *x.ClickHead
	}
	return 0
}

func (x *OriginVal) GetShare() uint32 {
	if x != nil && x.Share != nil {
		return *x.Share
	}
	return 0
}

func (x *OriginVal) GetFollowStatus() uint32 {
	if x != nil && x.FollowStatus != nil {
		return *x.FollowStatus
	}
	return 0
}

func (x *OriginVal) GetLikeStatus() uint32 {
	if x != nil && x.LikeStatus != nil {
		return *x.LikeStatus
	}
	return 0
}

func (x *OriginVal) GetCommentTimes() uint32 {
	if x != nil && x.CommentTimes != nil {
		return *x.CommentTimes
	}
	return 0
}

func (x *OriginVal) GetFavStatus() uint32 {
	if x != nil && x.FavStatus != nil {
		return *x.FavStatus
	}
	return 0
}

func (x *OriginVal) GetFastSlip() uint32 {
	if x != nil && x.FastSlip != nil {
		return *x.FastSlip
	}
	return 0
}

func (x *OriginVal) GetSortId() uint32 {
	if x != nil && x.SortId != nil {
		return *x.SortId
	}
	return 0
}

func (x *OriginVal) GetMaxVidPlayLen() uint32 {
	if x != nil && x.MaxVidPlayLen != nil {
		return *x.MaxVidPlayLen
	}
	return 0
}

func (x *OriginVal) GetNotInterestAction() uint32 {
	if x != nil && x.NotInterestAction != nil {
		return *x.NotInterestAction
	}
	return 0
}

func (x *OriginVal) GetClickTopicTimes() uint32 {
	if x != nil && x.ClickTopicTimes != nil {
		return *x.ClickTopicTimes
	}
	return 0
}

func (x *OriginVal) GetExpandTextTimes() uint32 {
	if x != nil && x.ExpandTextTimes != nil {
		return *x.ExpandTextTimes
	}
	return 0
}

func (x *OriginVal) GetShareMomentTimes() uint32 {
	if x != nil && x.ShareMomentTimes != nil {
		return *x.ShareMomentTimes
	}
	return 0
}

func (x *OriginVal) GetClickPoiTimes() uint32 {
	if x != nil && x.ClickPoiTimes != nil {
		return *x.ClickPoiTimes
	}
	return 0
}

func (x *OriginVal) GetCollapseTextTimes() uint32 {
	if x != nil && x.CollapseTextTimes != nil {
		return *x.CollapseTextTimes
	}
	return 0
}

func (x *OriginVal) GetCommentLikeTimes() uint32 {
	if x != nil && x.CommentLikeTimes != nil {
		return *x.CommentLikeTimes
	}
	return 0
}

func (x *OriginVal) GetClickFeedMenu() uint32 {
	if x != nil && x.ClickFeedMenu != nil {
		return *x.ClickFeedMenu
	}
	return 0
}

func (x *OriginVal) GetComplainTimes() uint32 {
	if x != nil && x.ComplainTimes != nil {
		return *x.ComplainTimes
	}
	return 0
}

func (x *OriginVal) GetClickColumnCard() uint32 {
	if x != nil && x.ClickColumnCard != nil {
		return *x.ClickColumnCard
	}
	return 0
}

func (x *OriginVal) GetDragProgressBar() uint32 {
	if x != nil && x.DragProgressBar != nil {
		return *x.DragProgressBar
	}
	return 0
}

func (x *OriginVal) GetClickFullVideo() uint32 {
	if x != nil && x.ClickFullVideo != nil {
		return *x.ClickFullVideo
	}
	return 0
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objectid          *uint64     `protobuf:"varint,1,opt,name=objectid" json:"objectid,omitempty"`
	BitFeature        *BitFeature `protobuf:"bytes,2,opt,name=bitFeature" json:"bitFeature,omitempty"`
	ValFeature        *ValFeature `protobuf:"bytes,3,opt,name=valFeature" json:"valFeature,omitempty"`
	OrgVal            *OriginVal  `protobuf:"bytes,4,opt,name=orgVal" json:"orgVal,omitempty"`
	ObjectNonceId     *string     `protobuf:"bytes,5,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	FinderUsername    *string     `protobuf:"bytes,6,opt,name=finderUsername" json:"finderUsername,omitempty"`
	ActionTimeMs      *uint64     `protobuf:"varint,7,opt,name=actionTimeMs" json:"actionTimeMs,omitempty"`
	FeedScene         *uint32     `protobuf:"varint,8,opt,name=feedScene" json:"feedScene,omitempty"`
	SessionBuffer     *string     `protobuf:"bytes,9,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	FinderUin         *uint64     `protobuf:"varint,10,opt,name=finderUin" json:"finderUin,omitempty"`
	CommentScene      *uint32     `protobuf:"varint,11,opt,name=commentScene" json:"commentScene,omitempty"`
	RecvTimeMs        *uint64     `protobuf:"varint,12,opt,name=recvTimeMs" json:"recvTimeMs,omitempty"`
	StatExtData       []byte      `protobuf:"bytes,13,opt,name=statExtData" json:"statExtData,omitempty"`
	MediaType         *uint32     `protobuf:"varint,14,opt,name=mediaType" json:"mediaType,omitempty"`
	MegavideoId       *uint64     `protobuf:"varint,15,opt,name=megavideoId" json:"megavideoId,omitempty"`
	MegavideoNonceId  *string     `protobuf:"bytes,16,opt,name=megavideoNonceId" json:"megavideoNonceId,omitempty"`
	ExposeStartTimeMs *uint64     `protobuf:"varint,17,opt,name=exposeStartTimeMs" json:"exposeStartTimeMs,omitempty"`
	Uin               *uint32     `protobuf:"varint,18,opt,name=uin" json:"uin,omitempty"`
	LiveId            *uint64     `protobuf:"varint,20,opt,name=liveId" json:"liveId,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{54}
}

func (x *Stats) GetObjectid() uint64 {
	if x != nil && x.Objectid != nil {
		return *x.Objectid
	}
	return 0
}

func (x *Stats) GetBitFeature() *BitFeature {
	if x != nil {
		return x.BitFeature
	}
	return nil
}

func (x *Stats) GetValFeature() *ValFeature {
	if x != nil {
		return x.ValFeature
	}
	return nil
}

func (x *Stats) GetOrgVal() *OriginVal {
	if x != nil {
		return x.OrgVal
	}
	return nil
}

func (x *Stats) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *Stats) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *Stats) GetActionTimeMs() uint64 {
	if x != nil && x.ActionTimeMs != nil {
		return *x.ActionTimeMs
	}
	return 0
}

func (x *Stats) GetFeedScene() uint32 {
	if x != nil && x.FeedScene != nil {
		return *x.FeedScene
	}
	return 0
}

func (x *Stats) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *Stats) GetFinderUin() uint64 {
	if x != nil && x.FinderUin != nil {
		return *x.FinderUin
	}
	return 0
}

func (x *Stats) GetCommentScene() uint32 {
	if x != nil && x.CommentScene != nil {
		return *x.CommentScene
	}
	return 0
}

func (x *Stats) GetRecvTimeMs() uint64 {
	if x != nil && x.RecvTimeMs != nil {
		return *x.RecvTimeMs
	}
	return 0
}

func (x *Stats) GetStatExtData() []byte {
	if x != nil {
		return x.StatExtData
	}
	return nil
}

func (x *Stats) GetMediaType() uint32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *Stats) GetMegavideoId() uint64 {
	if x != nil && x.MegavideoId != nil {
		return *x.MegavideoId
	}
	return 0
}

func (x *Stats) GetMegavideoNonceId() string {
	if x != nil && x.MegavideoNonceId != nil {
		return *x.MegavideoNonceId
	}
	return ""
}

func (x *Stats) GetExposeStartTimeMs() uint64 {
	if x != nil && x.ExposeStartTimeMs != nil {
		return *x.ExposeStartTimeMs
	}
	return 0
}

func (x *Stats) GetUin() uint32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *Stats) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

type FinderWaitDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Percent *uint32 `protobuf:"varint,2,opt,name=percent" json:"percent,omitempty"`
	WaitMs  *uint32 `protobuf:"varint,3,opt,name=waitMs" json:"waitMs,omitempty"`
}

func (x *FinderWaitDetail) Reset() {
	*x = FinderWaitDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderWaitDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderWaitDetail) ProtoMessage() {}

func (x *FinderWaitDetail) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderWaitDetail.ProtoReflect.Descriptor instead.
func (*FinderWaitDetail) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{55}
}

func (x *FinderWaitDetail) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderWaitDetail) GetPercent() uint32 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

func (x *FinderWaitDetail) GetWaitMs() uint32 {
	if x != nil && x.WaitMs != nil {
		return *x.WaitMs
	}
	return 0
}

type DownloadSpeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeByte  *uint64 `protobuf:"varint,1,opt,name=sizeByte" json:"sizeByte,omitempty"`
	CostMs    *uint64 `protobuf:"varint,2,opt,name=costMs" json:"costMs,omitempty"`
	StartTime *uint64 `protobuf:"varint,3,opt,name=startTime" json:"startTime,omitempty"`
	EndTime   *uint64 `protobuf:"varint,4,opt,name=endTime" json:"endTime,omitempty"`
	NetType   *uint32 `protobuf:"varint,5,opt,name=netType" json:"netType,omitempty"`
	ClientIp  *string `protobuf:"bytes,6,opt,name=clientIp" json:"clientIp,omitempty"`
	NetworkId *uint32 `protobuf:"varint,7,opt,name=networkId" json:"networkId,omitempty"`
	ServerIp  *string `protobuf:"bytes,8,opt,name=serverIp" json:"serverIp,omitempty"`
}

func (x *DownloadSpeed) Reset() {
	*x = DownloadSpeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSpeed) ProtoMessage() {}

func (x *DownloadSpeed) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSpeed.ProtoReflect.Descriptor instead.
func (*DownloadSpeed) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{56}
}

func (x *DownloadSpeed) GetSizeByte() uint64 {
	if x != nil && x.SizeByte != nil {
		return *x.SizeByte
	}
	return 0
}

func (x *DownloadSpeed) GetCostMs() uint64 {
	if x != nil && x.CostMs != nil {
		return *x.CostMs
	}
	return 0
}

func (x *DownloadSpeed) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *DownloadSpeed) GetEndTime() uint64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *DownloadSpeed) GetNetType() uint32 {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return 0
}

func (x *DownloadSpeed) GetClientIp() string {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return ""
}

func (x *DownloadSpeed) GetNetworkId() uint32 {
	if x != nil && x.NetworkId != nil {
		return *x.NetworkId
	}
	return 0
}

func (x *DownloadSpeed) GetServerIp() string {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return ""
}

type FinderDownloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedId            *uint64             `protobuf:"varint,1,opt,name=feedId" json:"feedId,omitempty"`
	PageIndex         *uint32             `protobuf:"varint,2,opt,name=pageIndex" json:"pageIndex,omitempty"`
	Scene             *uint32             `protobuf:"varint,3,opt,name=scene" json:"scene,omitempty"`
	PreloadBytes      *uint32             `protobuf:"varint,4,opt,name=preloadBytes" json:"preloadBytes,omitempty"`
	DownloadedBytes   *uint32             `protobuf:"varint,5,opt,name=downloadedBytes" json:"downloadedBytes,omitempty"`
	FileBytes         *uint32             `protobuf:"varint,6,opt,name=fileBytes" json:"fileBytes,omitempty"`
	Duration          *uint32             `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	TotalPlayTimeMs   *uint32             `protobuf:"varint,8,opt,name=totalPlayTimeMs" json:"totalPlayTimeMs,omitempty"`
	TotalWaitTimeMs   *uint32             `protobuf:"varint,9,opt,name=totalWaitTimeMs" json:"totalWaitTimeMs,omitempty"`
	DownloadSpeedKbps *uint32             `protobuf:"varint,10,opt,name=downloadSpeedKbps" json:"downloadSpeedKbps,omitempty"`
	WaitDetails       []*FinderWaitDetail `protobuf:"bytes,11,rep,name=waitDetails" json:"waitDetails,omitempty"`
	StopplayTimestamp *uint32             `protobuf:"varint,12,opt,name=stopplayTimestamp" json:"stopplayTimestamp,omitempty"`
	PlayPosition      *uint32             `protobuf:"varint,13,opt,name=playPosition" json:"playPosition,omitempty"`
	FirstLoadTimeMs   *uint32             `protobuf:"varint,14,opt,name=firstLoadTimeMs" json:"firstLoadTimeMs,omitempty"`
	CodingFormat      *string             `protobuf:"bytes,15,opt,name=codingFormat" json:"codingFormat,omitempty"`
	PreloadStrategyId *uint64             `protobuf:"varint,16,opt,name=preloadStrategyId" json:"preloadStrategyId,omitempty"`
	RttMs             *uint32             `protobuf:"varint,17,opt,name=rttMs" json:"rttMs,omitempty"`
	NetworkId         *uint32             `protobuf:"varint,18,opt,name=networkId" json:"networkId,omitempty"`
	SvrIp             *string             `protobuf:"bytes,19,opt,name=svrIp" json:"svrIp,omitempty"`
	SvrPort           *uint32             `protobuf:"varint,20,opt,name=svrPort" json:"svrPort,omitempty"`
	FileFormat        *string             `protobuf:"bytes,21,opt,name=fileFormat" json:"fileFormat,omitempty"`
	MegaVideoId       *uint64             `protobuf:"varint,22,opt,name=megaVideoId" json:"megaVideoId,omitempty"`
	PlayCount         *uint32             `protobuf:"varint,23,opt,name=playCount" json:"playCount,omitempty"`
	DownloadSpeed     *DownloadSpeed      `protobuf:"bytes,24,opt,name=downloadSpeed" json:"downloadSpeed,omitempty"`
	PreloadMaxBitRate *uint32             `protobuf:"varint,25,opt,name=preloadMaxBitRate" json:"preloadMaxBitRate,omitempty"`
	RequestFormat     *string             `protobuf:"bytes,26,opt,name=requestFormat" json:"requestFormat,omitempty"`
}

func (x *FinderDownloadInfo) Reset() {
	*x = FinderDownloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderDownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderDownloadInfo) ProtoMessage() {}

func (x *FinderDownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderDownloadInfo.ProtoReflect.Descriptor instead.
func (*FinderDownloadInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{57}
}

func (x *FinderDownloadInfo) GetFeedId() uint64 {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return 0
}

func (x *FinderDownloadInfo) GetPageIndex() uint32 {
	if x != nil && x.PageIndex != nil {
		return *x.PageIndex
	}
	return 0
}

func (x *FinderDownloadInfo) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderDownloadInfo) GetPreloadBytes() uint32 {
	if x != nil && x.PreloadBytes != nil {
		return *x.PreloadBytes
	}
	return 0
}

func (x *FinderDownloadInfo) GetDownloadedBytes() uint32 {
	if x != nil && x.DownloadedBytes != nil {
		return *x.DownloadedBytes
	}
	return 0
}

func (x *FinderDownloadInfo) GetFileBytes() uint32 {
	if x != nil && x.FileBytes != nil {
		return *x.FileBytes
	}
	return 0
}

func (x *FinderDownloadInfo) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *FinderDownloadInfo) GetTotalPlayTimeMs() uint32 {
	if x != nil && x.TotalPlayTimeMs != nil {
		return *x.TotalPlayTimeMs
	}
	return 0
}

func (x *FinderDownloadInfo) GetTotalWaitTimeMs() uint32 {
	if x != nil && x.TotalWaitTimeMs != nil {
		return *x.TotalWaitTimeMs
	}
	return 0
}

func (x *FinderDownloadInfo) GetDownloadSpeedKbps() uint32 {
	if x != nil && x.DownloadSpeedKbps != nil {
		return *x.DownloadSpeedKbps
	}
	return 0
}

func (x *FinderDownloadInfo) GetWaitDetails() []*FinderWaitDetail {
	if x != nil {
		return x.WaitDetails
	}
	return nil
}

func (x *FinderDownloadInfo) GetStopplayTimestamp() uint32 {
	if x != nil && x.StopplayTimestamp != nil {
		return *x.StopplayTimestamp
	}
	return 0
}

func (x *FinderDownloadInfo) GetPlayPosition() uint32 {
	if x != nil && x.PlayPosition != nil {
		return *x.PlayPosition
	}
	return 0
}

func (x *FinderDownloadInfo) GetFirstLoadTimeMs() uint32 {
	if x != nil && x.FirstLoadTimeMs != nil {
		return *x.FirstLoadTimeMs
	}
	return 0
}

func (x *FinderDownloadInfo) GetCodingFormat() string {
	if x != nil && x.CodingFormat != nil {
		return *x.CodingFormat
	}
	return ""
}

func (x *FinderDownloadInfo) GetPreloadStrategyId() uint64 {
	if x != nil && x.PreloadStrategyId != nil {
		return *x.PreloadStrategyId
	}
	return 0
}

func (x *FinderDownloadInfo) GetRttMs() uint32 {
	if x != nil && x.RttMs != nil {
		return *x.RttMs
	}
	return 0
}

func (x *FinderDownloadInfo) GetNetworkId() uint32 {
	if x != nil && x.NetworkId != nil {
		return *x.NetworkId
	}
	return 0
}

func (x *FinderDownloadInfo) GetSvrIp() string {
	if x != nil && x.SvrIp != nil {
		return *x.SvrIp
	}
	return ""
}

func (x *FinderDownloadInfo) GetSvrPort() uint32 {
	if x != nil && x.SvrPort != nil {
		return *x.SvrPort
	}
	return 0
}

func (x *FinderDownloadInfo) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

func (x *FinderDownloadInfo) GetMegaVideoId() uint64 {
	if x != nil && x.MegaVideoId != nil {
		return *x.MegaVideoId
	}
	return 0
}

func (x *FinderDownloadInfo) GetPlayCount() uint32 {
	if x != nil && x.PlayCount != nil {
		return *x.PlayCount
	}
	return 0
}

func (x *FinderDownloadInfo) GetDownloadSpeed() *DownloadSpeed {
	if x != nil {
		return x.DownloadSpeed
	}
	return nil
}

func (x *FinderDownloadInfo) GetPreloadMaxBitRate() uint32 {
	if x != nil && x.PreloadMaxBitRate != nil {
		return *x.PreloadMaxBitRate
	}
	return 0
}

func (x *FinderDownloadInfo) GetRequestFormat() string {
	if x != nil && x.RequestFormat != nil {
		return *x.RequestFormat
	}
	return ""
}

type FinderFluencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scene                      *uint32 `protobuf:"varint,1,opt,name=scene" json:"scene,omitempty"`
	Hot                        *uint32 `protobuf:"varint,2,opt,name=hot" json:"hot,omitempty"`
	Pull                       *uint32 `protobuf:"varint,3,opt,name=pull" json:"pull,omitempty"`
	Finish                     *uint32 `protobuf:"varint,4,opt,name=finish" json:"finish,omitempty"`
	GlobalInitMs               *uint32 `protobuf:"varint,5,opt,name=globalInitMs" json:"globalInitMs,omitempty"`
	PullCgiMs                  *uint32 `protobuf:"varint,6,opt,name=pullCgiMs" json:"pullCgiMs,omitempty"`
	ShowUiMs                   *uint32 `protobuf:"varint,7,opt,name=showUiMs" json:"showUiMs,omitempty"`
	DownloadBeginMs            *uint32 `protobuf:"varint,8,opt,name=downloadBeginMs" json:"downloadBeginMs,omitempty"`
	DataHandleMs               *uint32 `protobuf:"varint,9,opt,name=dataHandleMs" json:"dataHandleMs,omitempty"`
	DbOperMs                   *uint32 `protobuf:"varint,10,opt,name=dbOperMs" json:"dbOperMs,omitempty"`
	DebugMessage               []byte  `protobuf:"bytes,11,opt,name=debugMessage" json:"debugMessage,omitempty"`
	CommentScene               *uint32 `protobuf:"varint,12,opt,name=commentScene" json:"commentScene,omitempty"`
	Status                     *uint32 `protobuf:"varint,13,opt,name=status" json:"status,omitempty"`
	CgiType                    *uint32 `protobuf:"varint,14,opt,name=cgiType" json:"cgiType,omitempty"`
	TotalTimeMs                *uint32 `protobuf:"varint,15,opt,name=totalTimeMs" json:"totalTimeMs,omitempty"`
	LoadingTimeMs              *uint32 `protobuf:"varint,16,opt,name=loadingTimeMs" json:"loadingTimeMs,omitempty"`
	StartTime                  *uint64 `protobuf:"varint,17,opt,name=startTime" json:"startTime,omitempty"`
	StartConnectTime           *uint64 `protobuf:"varint,18,opt,name=startConnectTime" json:"startConnectTime,omitempty"`
	ConnectSuccessfulTime      *uint64 `protobuf:"varint,19,opt,name=connectSuccessfulTime" json:"connectSuccessfulTime,omitempty"`
	StartTlsHandshakeTime      *uint64 `protobuf:"varint,20,opt,name=startTlsHandshakeTime" json:"startTlsHandshakeTime,omitempty"`
	TlsHandshakeSuccessfulTime *uint64 `protobuf:"varint,21,opt,name=tlsHandshakeSuccessfulTime" json:"tlsHandshakeSuccessfulTime,omitempty"`
	StartSendPacketTime        *uint64 `protobuf:"varint,22,opt,name=startSendPacketTime" json:"startSendPacketTime,omitempty"`
	StartReadPacketTime        *uint64 `protobuf:"varint,23,opt,name=startReadPacketTime" json:"startReadPacketTime,omitempty"`
	ReadPacketFinishedTime     *uint64 `protobuf:"varint,24,opt,name=readPacketFinishedTime" json:"readPacketFinishedTime,omitempty"`
}

func (x *FinderFluencyInfo) Reset() {
	*x = FinderFluencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFluencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFluencyInfo) ProtoMessage() {}

func (x *FinderFluencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFluencyInfo.ProtoReflect.Descriptor instead.
func (*FinderFluencyInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{58}
}

func (x *FinderFluencyInfo) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderFluencyInfo) GetHot() uint32 {
	if x != nil && x.Hot != nil {
		return *x.Hot
	}
	return 0
}

func (x *FinderFluencyInfo) GetPull() uint32 {
	if x != nil && x.Pull != nil {
		return *x.Pull
	}
	return 0
}

func (x *FinderFluencyInfo) GetFinish() uint32 {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return 0
}

func (x *FinderFluencyInfo) GetGlobalInitMs() uint32 {
	if x != nil && x.GlobalInitMs != nil {
		return *x.GlobalInitMs
	}
	return 0
}

func (x *FinderFluencyInfo) GetPullCgiMs() uint32 {
	if x != nil && x.PullCgiMs != nil {
		return *x.PullCgiMs
	}
	return 0
}

func (x *FinderFluencyInfo) GetShowUiMs() uint32 {
	if x != nil && x.ShowUiMs != nil {
		return *x.ShowUiMs
	}
	return 0
}

func (x *FinderFluencyInfo) GetDownloadBeginMs() uint32 {
	if x != nil && x.DownloadBeginMs != nil {
		return *x.DownloadBeginMs
	}
	return 0
}

func (x *FinderFluencyInfo) GetDataHandleMs() uint32 {
	if x != nil && x.DataHandleMs != nil {
		return *x.DataHandleMs
	}
	return 0
}

func (x *FinderFluencyInfo) GetDbOperMs() uint32 {
	if x != nil && x.DbOperMs != nil {
		return *x.DbOperMs
	}
	return 0
}

func (x *FinderFluencyInfo) GetDebugMessage() []byte {
	if x != nil {
		return x.DebugMessage
	}
	return nil
}

func (x *FinderFluencyInfo) GetCommentScene() uint32 {
	if x != nil && x.CommentScene != nil {
		return *x.CommentScene
	}
	return 0
}

func (x *FinderFluencyInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *FinderFluencyInfo) GetCgiType() uint32 {
	if x != nil && x.CgiType != nil {
		return *x.CgiType
	}
	return 0
}

func (x *FinderFluencyInfo) GetTotalTimeMs() uint32 {
	if x != nil && x.TotalTimeMs != nil {
		return *x.TotalTimeMs
	}
	return 0
}

func (x *FinderFluencyInfo) GetLoadingTimeMs() uint32 {
	if x != nil && x.LoadingTimeMs != nil {
		return *x.LoadingTimeMs
	}
	return 0
}

func (x *FinderFluencyInfo) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *FinderFluencyInfo) GetStartConnectTime() uint64 {
	if x != nil && x.StartConnectTime != nil {
		return *x.StartConnectTime
	}
	return 0
}

func (x *FinderFluencyInfo) GetConnectSuccessfulTime() uint64 {
	if x != nil && x.ConnectSuccessfulTime != nil {
		return *x.ConnectSuccessfulTime
	}
	return 0
}

func (x *FinderFluencyInfo) GetStartTlsHandshakeTime() uint64 {
	if x != nil && x.StartTlsHandshakeTime != nil {
		return *x.StartTlsHandshakeTime
	}
	return 0
}

func (x *FinderFluencyInfo) GetTlsHandshakeSuccessfulTime() uint64 {
	if x != nil && x.TlsHandshakeSuccessfulTime != nil {
		return *x.TlsHandshakeSuccessfulTime
	}
	return 0
}

func (x *FinderFluencyInfo) GetStartSendPacketTime() uint64 {
	if x != nil && x.StartSendPacketTime != nil {
		return *x.StartSendPacketTime
	}
	return 0
}

func (x *FinderFluencyInfo) GetStartReadPacketTime() uint64 {
	if x != nil && x.StartReadPacketTime != nil {
		return *x.StartReadPacketTime
	}
	return 0
}

func (x *FinderFluencyInfo) GetReadPacketFinishedTime() uint64 {
	if x != nil && x.ReadPacketFinishedTime != nil {
		return *x.ReadPacketFinishedTime
	}
	return 0
}

type FinderClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetType                   *uint32               `protobuf:"varint,1,opt,name=netType" json:"netType,omitempty"`
	NetName                   *string               `protobuf:"bytes,2,opt,name=netName" json:"netName,omitempty"`
	BandwidthKbps             *uint32               `protobuf:"varint,3,opt,name=bandwidthKbps" json:"bandwidthKbps,omitempty"`
	LastVideosDownloadInfo    []*FinderDownloadInfo `protobuf:"bytes,4,rep,name=lastVideosDownloadInfo" json:"lastVideosDownloadInfo,omitempty"`
	DeviceModel               *string               `protobuf:"bytes,5,opt,name=deviceModel" json:"deviceModel,omitempty"`
	DeviceBrand               *string               `protobuf:"bytes,6,opt,name=deviceBrand" json:"deviceBrand,omitempty"`
	OsName                    *string               `protobuf:"bytes,7,opt,name=osName" json:"osName,omitempty"`
	OsVersion                 *string               `protobuf:"bytes,8,opt,name=osVersion" json:"osVersion,omitempty"`
	SupportedCodingFormat     []string              `protobuf:"bytes,9,rep,name=supportedCodingFormat" json:"supportedCodingFormat,omitempty"`
	FinderFluencyInfo         []*FinderFluencyInfo  `protobuf:"bytes,10,rep,name=finderFluencyInfo" json:"finderFluencyInfo,omitempty"`
	DeviceTypeId              *uint32               `protobuf:"varint,11,opt,name=deviceTypeId" json:"deviceTypeId,omitempty"`
	ClientVersion             *uint32               `protobuf:"varint,12,opt,name=clientVersion" json:"clientVersion,omitempty"`
	ClientIp                  *string               `protobuf:"bytes,13,opt,name=clientIp" json:"clientIp,omitempty"`
	RecentFinderDownloadSpeed []*DownloadSpeed      `protobuf:"bytes,14,rep,name=recentFinderDownloadSpeed" json:"recentFinderDownloadSpeed,omitempty"`
	RecentWechatDownloadSpeed []*DownloadSpeed      `protobuf:"bytes,15,rep,name=recentWechatDownloadSpeed" json:"recentWechatDownloadSpeed,omitempty"`
	LastPreloadDownloadInfo   []*FinderDownloadInfo `protobuf:"bytes,16,rep,name=lastPreloadDownloadInfo" json:"lastPreloadDownloadInfo,omitempty"`
}

func (x *FinderClientStatus) Reset() {
	*x = FinderClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderClientStatus) ProtoMessage() {}

func (x *FinderClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderClientStatus.ProtoReflect.Descriptor instead.
func (*FinderClientStatus) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{59}
}

func (x *FinderClientStatus) GetNetType() uint32 {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return 0
}

func (x *FinderClientStatus) GetNetName() string {
	if x != nil && x.NetName != nil {
		return *x.NetName
	}
	return ""
}

func (x *FinderClientStatus) GetBandwidthKbps() uint32 {
	if x != nil && x.BandwidthKbps != nil {
		return *x.BandwidthKbps
	}
	return 0
}

func (x *FinderClientStatus) GetLastVideosDownloadInfo() []*FinderDownloadInfo {
	if x != nil {
		return x.LastVideosDownloadInfo
	}
	return nil
}

func (x *FinderClientStatus) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *FinderClientStatus) GetDeviceBrand() string {
	if x != nil && x.DeviceBrand != nil {
		return *x.DeviceBrand
	}
	return ""
}

func (x *FinderClientStatus) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *FinderClientStatus) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *FinderClientStatus) GetSupportedCodingFormat() []string {
	if x != nil {
		return x.SupportedCodingFormat
	}
	return nil
}

func (x *FinderClientStatus) GetFinderFluencyInfo() []*FinderFluencyInfo {
	if x != nil {
		return x.FinderFluencyInfo
	}
	return nil
}

func (x *FinderClientStatus) GetDeviceTypeId() uint32 {
	if x != nil && x.DeviceTypeId != nil {
		return *x.DeviceTypeId
	}
	return 0
}

func (x *FinderClientStatus) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *FinderClientStatus) GetClientIp() string {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return ""
}

func (x *FinderClientStatus) GetRecentFinderDownloadSpeed() []*DownloadSpeed {
	if x != nil {
		return x.RecentFinderDownloadSpeed
	}
	return nil
}

func (x *FinderClientStatus) GetRecentWechatDownloadSpeed() []*DownloadSpeed {
	if x != nil {
		return x.RecentWechatDownloadSpeed
	}
	return nil
}

func (x *FinderClientStatus) GetLastPreloadDownloadInfo() []*FinderDownloadInfo {
	if x != nil {
		return x.LastPreloadDownloadInfo
	}
	return nil
}

type MegaVideoWaitDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Percent *uint32 `protobuf:"varint,2,opt,name=percent" json:"percent,omitempty"`
	WaitMs  *uint32 `protobuf:"varint,3,opt,name=waitMs" json:"waitMs,omitempty"`
}

func (x *MegaVideoWaitDetail) Reset() {
	*x = MegaVideoWaitDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoWaitDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoWaitDetail) ProtoMessage() {}

func (x *MegaVideoWaitDetail) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoWaitDetail.ProtoReflect.Descriptor instead.
func (*MegaVideoWaitDetail) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{60}
}

func (x *MegaVideoWaitDetail) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *MegaVideoWaitDetail) GetPercent() uint32 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

func (x *MegaVideoWaitDetail) GetWaitMs() uint32 {
	if x != nil && x.WaitMs != nil {
		return *x.WaitMs
	}
	return 0
}

type MegaVideoDownloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedId            *uint64                `protobuf:"varint,1,opt,name=feedId" json:"feedId,omitempty"`
	PageIndex         *uint32                `protobuf:"varint,2,opt,name=pageIndex" json:"pageIndex,omitempty"`
	Scene             *uint32                `protobuf:"varint,3,opt,name=scene" json:"scene,omitempty"`
	PreloadBytes      *uint32                `protobuf:"varint,4,opt,name=preloadBytes" json:"preloadBytes,omitempty"`
	DownloadedBytes   *uint32                `protobuf:"varint,5,opt,name=downloadedBytes" json:"downloadedBytes,omitempty"`
	FileBytes         *uint32                `protobuf:"varint,6,opt,name=fileBytes" json:"fileBytes,omitempty"`
	Duration          *uint32                `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	TotalPlayTimeMs   *uint32                `protobuf:"varint,8,opt,name=totalPlayTimeMs" json:"totalPlayTimeMs,omitempty"`
	TotalWaitTimeMs   *uint32                `protobuf:"varint,9,opt,name=totalWaitTimeMs" json:"totalWaitTimeMs,omitempty"`
	DownloadSpeedKbps *uint32                `protobuf:"varint,10,opt,name=downloadSpeedKbps" json:"downloadSpeedKbps,omitempty"`
	WaitDetails       []*MegaVideoWaitDetail `protobuf:"bytes,11,rep,name=waitDetails" json:"waitDetails,omitempty"`
	StopplayTimestamp *uint32                `protobuf:"varint,12,opt,name=stopplayTimestamp" json:"stopplayTimestamp,omitempty"`
	PlayPosition      *uint32                `protobuf:"varint,13,opt,name=playPosition" json:"playPosition,omitempty"`
	FirstLoadTimeMs   *uint32                `protobuf:"varint,14,opt,name=firstLoadTimeMs" json:"firstLoadTimeMs,omitempty"`
	CodingFormat      *string                `protobuf:"bytes,15,opt,name=codingFormat" json:"codingFormat,omitempty"`
	PreloadStrategyId *uint64                `protobuf:"varint,16,opt,name=preloadStrategyId" json:"preloadStrategyId,omitempty"`
	RttMs             *uint32                `protobuf:"varint,17,opt,name=rttMs" json:"rttMs,omitempty"`
	NetworkId         *uint32                `protobuf:"varint,18,opt,name=networkId" json:"networkId,omitempty"`
	SvrIp             *string                `protobuf:"bytes,19,opt,name=svrIp" json:"svrIp,omitempty"`
	SvrPort           *uint32                `protobuf:"varint,20,opt,name=svrPort" json:"svrPort,omitempty"`
	FileFormat        *string                `protobuf:"bytes,21,opt,name=fileFormat" json:"fileFormat,omitempty"`
}

func (x *MegaVideoDownloadInfo) Reset() {
	*x = MegaVideoDownloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoDownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoDownloadInfo) ProtoMessage() {}

func (x *MegaVideoDownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoDownloadInfo.ProtoReflect.Descriptor instead.
func (*MegaVideoDownloadInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{61}
}

func (x *MegaVideoDownloadInfo) GetFeedId() uint64 {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetPageIndex() uint32 {
	if x != nil && x.PageIndex != nil {
		return *x.PageIndex
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetPreloadBytes() uint32 {
	if x != nil && x.PreloadBytes != nil {
		return *x.PreloadBytes
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetDownloadedBytes() uint32 {
	if x != nil && x.DownloadedBytes != nil {
		return *x.DownloadedBytes
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetFileBytes() uint32 {
	if x != nil && x.FileBytes != nil {
		return *x.FileBytes
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetTotalPlayTimeMs() uint32 {
	if x != nil && x.TotalPlayTimeMs != nil {
		return *x.TotalPlayTimeMs
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetTotalWaitTimeMs() uint32 {
	if x != nil && x.TotalWaitTimeMs != nil {
		return *x.TotalWaitTimeMs
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetDownloadSpeedKbps() uint32 {
	if x != nil && x.DownloadSpeedKbps != nil {
		return *x.DownloadSpeedKbps
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetWaitDetails() []*MegaVideoWaitDetail {
	if x != nil {
		return x.WaitDetails
	}
	return nil
}

func (x *MegaVideoDownloadInfo) GetStopplayTimestamp() uint32 {
	if x != nil && x.StopplayTimestamp != nil {
		return *x.StopplayTimestamp
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetPlayPosition() uint32 {
	if x != nil && x.PlayPosition != nil {
		return *x.PlayPosition
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetFirstLoadTimeMs() uint32 {
	if x != nil && x.FirstLoadTimeMs != nil {
		return *x.FirstLoadTimeMs
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetCodingFormat() string {
	if x != nil && x.CodingFormat != nil {
		return *x.CodingFormat
	}
	return ""
}

func (x *MegaVideoDownloadInfo) GetPreloadStrategyId() uint64 {
	if x != nil && x.PreloadStrategyId != nil {
		return *x.PreloadStrategyId
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetRttMs() uint32 {
	if x != nil && x.RttMs != nil {
		return *x.RttMs
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetNetworkId() uint32 {
	if x != nil && x.NetworkId != nil {
		return *x.NetworkId
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetSvrIp() string {
	if x != nil && x.SvrIp != nil {
		return *x.SvrIp
	}
	return ""
}

func (x *MegaVideoDownloadInfo) GetSvrPort() uint32 {
	if x != nil && x.SvrPort != nil {
		return *x.SvrPort
	}
	return 0
}

func (x *MegaVideoDownloadInfo) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

type MegaVideoFluencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scene           *uint32 `protobuf:"varint,1,opt,name=scene" json:"scene,omitempty"`
	Hot             *uint32 `protobuf:"varint,2,opt,name=hot" json:"hot,omitempty"`
	Pull            *uint32 `protobuf:"varint,3,opt,name=pull" json:"pull,omitempty"`
	Finish          *uint32 `protobuf:"varint,4,opt,name=finish" json:"finish,omitempty"`
	GlobalInitMs    *uint32 `protobuf:"varint,5,opt,name=globalInitMs" json:"globalInitMs,omitempty"`
	PullCgiMs       *uint32 `protobuf:"varint,6,opt,name=pullCgiMs" json:"pullCgiMs,omitempty"`
	ShowUiMs        *uint32 `protobuf:"varint,7,opt,name=showUiMs" json:"showUiMs,omitempty"`
	DownloadBeginMs *uint32 `protobuf:"varint,8,opt,name=downloadBeginMs" json:"downloadBeginMs,omitempty"`
	DataHandleMs    *uint32 `protobuf:"varint,9,opt,name=dataHandleMs" json:"dataHandleMs,omitempty"`
}

func (x *MegaVideoFluencyInfo) Reset() {
	*x = MegaVideoFluencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoFluencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoFluencyInfo) ProtoMessage() {}

func (x *MegaVideoFluencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoFluencyInfo.ProtoReflect.Descriptor instead.
func (*MegaVideoFluencyInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{62}
}

func (x *MegaVideoFluencyInfo) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *MegaVideoFluencyInfo) GetHot() uint32 {
	if x != nil && x.Hot != nil {
		return *x.Hot
	}
	return 0
}

func (x *MegaVideoFluencyInfo) GetPull() uint32 {
	if x != nil && x.Pull != nil {
		return *x.Pull
	}
	return 0
}

func (x *MegaVideoFluencyInfo) GetFinish() uint32 {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return 0
}

func (x *MegaVideoFluencyInfo) GetGlobalInitMs() uint32 {
	if x != nil && x.GlobalInitMs != nil {
		return *x.GlobalInitMs
	}
	return 0
}

func (x *MegaVideoFluencyInfo) GetPullCgiMs() uint32 {
	if x != nil && x.PullCgiMs != nil {
		return *x.PullCgiMs
	}
	return 0
}

func (x *MegaVideoFluencyInfo) GetShowUiMs() uint32 {
	if x != nil && x.ShowUiMs != nil {
		return *x.ShowUiMs
	}
	return 0
}

func (x *MegaVideoFluencyInfo) GetDownloadBeginMs() uint32 {
	if x != nil && x.DownloadBeginMs != nil {
		return *x.DownloadBeginMs
	}
	return 0
}

func (x *MegaVideoFluencyInfo) GetDataHandleMs() uint32 {
	if x != nil && x.DataHandleMs != nil {
		return *x.DataHandleMs
	}
	return 0
}

type MegaVideoClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetType                *uint32                  `protobuf:"varint,1,opt,name=netType" json:"netType,omitempty"`
	NetName                *string                  `protobuf:"bytes,2,opt,name=netName" json:"netName,omitempty"`
	BandwidthKbps          *uint32                  `protobuf:"varint,3,opt,name=bandwidthKbps" json:"bandwidthKbps,omitempty"`
	LastVideosDownloadInfo []*MegaVideoDownloadInfo `protobuf:"bytes,4,rep,name=lastVideosDownloadInfo" json:"lastVideosDownloadInfo,omitempty"`
	DeviceModel            *string                  `protobuf:"bytes,5,opt,name=deviceModel" json:"deviceModel,omitempty"`
	DeviceBrand            *string                  `protobuf:"bytes,6,opt,name=deviceBrand" json:"deviceBrand,omitempty"`
	OsName                 *string                  `protobuf:"bytes,7,opt,name=osName" json:"osName,omitempty"`
	OsVersion              *string                  `protobuf:"bytes,8,opt,name=osVersion" json:"osVersion,omitempty"`
	SupportedCodingFormat  []string                 `protobuf:"bytes,9,rep,name=supportedCodingFormat" json:"supportedCodingFormat,omitempty"`
	FinderFluencyInfo      []*MegaVideoFluencyInfo  `protobuf:"bytes,10,rep,name=finderFluencyInfo" json:"finderFluencyInfo,omitempty"`
}

func (x *MegaVideoClientStatus) Reset() {
	*x = MegaVideoClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoClientStatus) ProtoMessage() {}

func (x *MegaVideoClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoClientStatus.ProtoReflect.Descriptor instead.
func (*MegaVideoClientStatus) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{63}
}

func (x *MegaVideoClientStatus) GetNetType() uint32 {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return 0
}

func (x *MegaVideoClientStatus) GetNetName() string {
	if x != nil && x.NetName != nil {
		return *x.NetName
	}
	return ""
}

func (x *MegaVideoClientStatus) GetBandwidthKbps() uint32 {
	if x != nil && x.BandwidthKbps != nil {
		return *x.BandwidthKbps
	}
	return 0
}

func (x *MegaVideoClientStatus) GetLastVideosDownloadInfo() []*MegaVideoDownloadInfo {
	if x != nil {
		return x.LastVideosDownloadInfo
	}
	return nil
}

func (x *MegaVideoClientStatus) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *MegaVideoClientStatus) GetDeviceBrand() string {
	if x != nil && x.DeviceBrand != nil {
		return *x.DeviceBrand
	}
	return ""
}

func (x *MegaVideoClientStatus) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *MegaVideoClientStatus) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *MegaVideoClientStatus) GetSupportedCodingFormat() []string {
	if x != nil {
		return x.SupportedCodingFormat
	}
	return nil
}

func (x *MegaVideoClientStatus) GetFinderFluencyInfo() []*MegaVideoFluencyInfo {
	if x != nil {
		return x.FinderFluencyInfo
	}
	return nil
}

type FinderStatsReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest           `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Stats          []*Stats               `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
	FinderUsername *string                `protobuf:"bytes,3,opt,name=finderUsername" json:"finderUsername,omitempty"`
	FinderBasereq  *FinderBaseRequest     `protobuf:"bytes,4,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	Status         *FinderClientStatus    `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	ReqExtData     []byte                 `protobuf:"bytes,6,opt,name=reqExtData" json:"reqExtData,omitempty"`
	ClientTimeMs   *int64                 `protobuf:"varint,7,opt,name=clientTimeMs" json:"clientTimeMs,omitempty"`
	VideoStatus    *MegaVideoClientStatus `protobuf:"bytes,8,opt,name=videoStatus" json:"videoStatus,omitempty"`
}

func (x *FinderStatsReportRequest) Reset() {
	*x = FinderStatsReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStatsReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStatsReportRequest) ProtoMessage() {}

func (x *FinderStatsReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStatsReportRequest.ProtoReflect.Descriptor instead.
func (*FinderStatsReportRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{64}
}

func (x *FinderStatsReportRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderStatsReportRequest) GetStats() []*Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *FinderStatsReportRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderStatsReportRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderStatsReportRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FinderStatsReportRequest) GetReqExtData() []byte {
	if x != nil {
		return x.ReqExtData
	}
	return nil
}

func (x *FinderStatsReportRequest) GetClientTimeMs() int64 {
	if x != nil && x.ClientTimeMs != nil {
		return *x.ClientTimeMs
	}
	return 0
}

func (x *FinderStatsReportRequest) GetVideoStatus() *MegaVideoClientStatus {
	if x != nil {
		return x.VideoStatus
	}
	return nil
}

type FinderStatsReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
}

func (x *FinderStatsReportResponse) Reset() {
	*x = FinderStatsReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStatsReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStatsReportResponse) ProtoMessage() {}

func (x *FinderStatsReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStatsReportResponse.ProtoReflect.Descriptor instead.
func (*FinderStatsReportResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{65}
}

func (x *FinderStatsReportResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type ExtStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId        *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	FinderUsername  *string `protobuf:"bytes,2,opt,name=finderUsername" json:"finderUsername,omitempty"`
	SessionBuffer   *string `protobuf:"bytes,3,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	FeedActionValue []byte  `protobuf:"bytes,4,opt,name=feedActionValue" json:"feedActionValue,omitempty"`
	VideoDuration   *uint32 `protobuf:"varint,5,opt,name=videoDuration" json:"videoDuration,omitempty"`
	MediaType       *uint32 `protobuf:"varint,6,opt,name=mediaType" json:"mediaType,omitempty"`
}

func (x *ExtStats) Reset() {
	*x = ExtStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtStats) ProtoMessage() {}

func (x *ExtStats) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtStats.ProtoReflect.Descriptor instead.
func (*ExtStats) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{66}
}

func (x *ExtStats) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *ExtStats) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *ExtStats) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *ExtStats) GetFeedActionValue() []byte {
	if x != nil {
		return x.FeedActionValue
	}
	return nil
}

func (x *ExtStats) GetVideoDuration() uint32 {
	if x != nil && x.VideoDuration != nil {
		return *x.VideoDuration
	}
	return 0
}

func (x *ExtStats) GetMediaType() uint32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

type FinderExtStatsReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Finderusername *string            `protobuf:"bytes,2,opt,name=finderusername" json:"finderusername,omitempty"`
	ActionType     *uint32            `protobuf:"varint,3,opt,name=actionType" json:"actionType,omitempty"`
	ExtStats       []*ExtStats        `protobuf:"bytes,4,rep,name=extStats" json:"extStats,omitempty"`
	FinderBasereq  *FinderBaseRequest `protobuf:"bytes,5,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
}

func (x *FinderExtStatsReportRequest) Reset() {
	*x = FinderExtStatsReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderExtStatsReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderExtStatsReportRequest) ProtoMessage() {}

func (x *FinderExtStatsReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderExtStatsReportRequest.ProtoReflect.Descriptor instead.
func (*FinderExtStatsReportRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{67}
}

func (x *FinderExtStatsReportRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderExtStatsReportRequest) GetFinderusername() string {
	if x != nil && x.Finderusername != nil {
		return *x.Finderusername
	}
	return ""
}

func (x *FinderExtStatsReportRequest) GetActionType() uint32 {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return 0
}

func (x *FinderExtStatsReportRequest) GetExtStats() []*ExtStats {
	if x != nil {
		return x.ExtStats
	}
	return nil
}

func (x *FinderExtStatsReportRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

type FinderExtStatsReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
}

func (x *FinderExtStatsReportResponse) Reset() {
	*x = FinderExtStatsReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderExtStatsReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderExtStatsReportResponse) ProtoMessage() {}

func (x *FinderExtStatsReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderExtStatsReportResponse.ProtoReflect.Descriptor instead.
func (*FinderExtStatsReportResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{68}
}

func (x *FinderExtStatsReportResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type MarkReadStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId          *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	Scene             *uint32 `protobuf:"varint,2,opt,name=scene" json:"scene,omitempty"`
	SubScene          *uint32 `protobuf:"varint,3,opt,name=subScene" json:"subScene,omitempty"`
	CommScene         *uint32 `protobuf:"varint,4,opt,name=commScene" json:"commScene,omitempty"`
	SessionBuffer     *string `protobuf:"bytes,5,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	ExposeTimeMs      *uint32 `protobuf:"varint,6,opt,name=exposeTimeMs" json:"exposeTimeMs,omitempty"`
	FeedIndex         *uint32 `protobuf:"varint,7,opt,name=feedIndex" json:"feedIndex,omitempty"`
	AutoPlayTimeMs    *uint32 `protobuf:"varint,8,opt,name=autoPlayTimeMs" json:"autoPlayTimeMs,omitempty"`
	AutoPlayWithSound *bool   `protobuf:"varint,9,opt,name=autoPlayWithSound" json:"autoPlayWithSound,omitempty"`
}

func (x *MarkReadStat) Reset() {
	*x = MarkReadStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkReadStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkReadStat) ProtoMessage() {}

func (x *MarkReadStat) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkReadStat.ProtoReflect.Descriptor instead.
func (*MarkReadStat) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{69}
}

func (x *MarkReadStat) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *MarkReadStat) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *MarkReadStat) GetSubScene() uint32 {
	if x != nil && x.SubScene != nil {
		return *x.SubScene
	}
	return 0
}

func (x *MarkReadStat) GetCommScene() uint32 {
	if x != nil && x.CommScene != nil {
		return *x.CommScene
	}
	return 0
}

func (x *MarkReadStat) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *MarkReadStat) GetExposeTimeMs() uint32 {
	if x != nil && x.ExposeTimeMs != nil {
		return *x.ExposeTimeMs
	}
	return 0
}

func (x *MarkReadStat) GetFeedIndex() uint32 {
	if x != nil && x.FeedIndex != nil {
		return *x.FeedIndex
	}
	return 0
}

func (x *MarkReadStat) GetAutoPlayTimeMs() uint32 {
	if x != nil && x.AutoPlayTimeMs != nil {
		return *x.AutoPlayTimeMs
	}
	return 0
}

func (x *MarkReadStat) GetAutoPlayWithSound() bool {
	if x != nil && x.AutoPlayWithSound != nil {
		return *x.AutoPlayWithSound
	}
	return false
}

type FinderUnreadItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId       *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	ObjectNonceId  *string `protobuf:"bytes,2,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	DisplayTabType *uint32 `protobuf:"varint,3,opt,name=displayTabType" json:"displayTabType,omitempty"`
	SessionBuffer  *string `protobuf:"bytes,4,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
}

func (x *FinderUnreadItem) Reset() {
	*x = FinderUnreadItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUnreadItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUnreadItem) ProtoMessage() {}

func (x *FinderUnreadItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUnreadItem.ProtoReflect.Descriptor instead.
func (*FinderUnreadItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{70}
}

func (x *FinderUnreadItem) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderUnreadItem) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderUnreadItem) GetDisplayTabType() uint32 {
	if x != nil && x.DisplayTabType != nil {
		return *x.DisplayTabType
	}
	return 0
}

func (x *FinderUnreadItem) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

type FinderLiveWaitDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Percent *uint32 `protobuf:"varint,2,opt,name=percent" json:"percent,omitempty"`
	WaitMs  *uint32 `protobuf:"varint,3,opt,name=waitMs" json:"waitMs,omitempty"`
	Bitrate *uint32 `protobuf:"varint,4,opt,name=bitrate" json:"bitrate,omitempty"`
}

func (x *FinderLiveWaitDetail) Reset() {
	*x = FinderLiveWaitDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveWaitDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveWaitDetail) ProtoMessage() {}

func (x *FinderLiveWaitDetail) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveWaitDetail.ProtoReflect.Descriptor instead.
func (*FinderLiveWaitDetail) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{71}
}

func (x *FinderLiveWaitDetail) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderLiveWaitDetail) GetPercent() uint32 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

func (x *FinderLiveWaitDetail) GetWaitMs() uint32 {
	if x != nil && x.WaitMs != nil {
		return *x.WaitMs
	}
	return 0
}

func (x *FinderLiveWaitDetail) GetBitrate() uint32 {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return 0
}

type FinderLiveQoSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveId                 *uint64                 `protobuf:"varint,1,opt,name=liveId" json:"liveId,omitempty"`
	Width                  *uint32                 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height                 *uint32                 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	VideoFps               *uint32                 `protobuf:"varint,4,opt,name=videoFps" json:"videoFps,omitempty"`
	VideoGop               *uint32                 `protobuf:"varint,5,opt,name=videoGop" json:"videoGop,omitempty"`
	VideoBitrate           *uint32                 `protobuf:"varint,6,opt,name=videoBitrate" json:"videoBitrate,omitempty"`
	AudioBitrate           *uint32                 `protobuf:"varint,7,opt,name=audioBitrate" json:"audioBitrate,omitempty"`
	NetSpeed               *uint32                 `protobuf:"varint,8,opt,name=netSpeed" json:"netSpeed,omitempty"`
	VideoCache             *uint32                 `protobuf:"varint,9,opt,name=videoCache" json:"videoCache,omitempty"`
	AudioCache             *uint32                 `protobuf:"varint,10,opt,name=audioCache" json:"audioCache,omitempty"`
	VideoSumCacheSize      *uint32                 `protobuf:"varint,11,opt,name=videoSumCacheSize" json:"videoSumCacheSize,omitempty"`
	AudioVideoPlayInterval *uint32                 `protobuf:"varint,12,opt,name=audioVideoPlayInterval" json:"audioVideoPlayInterval,omitempty"`
	AudioVideoRecvInterval *uint32                 `protobuf:"varint,13,opt,name=audioVideoRecvInterval" json:"audioVideoRecvInterval,omitempty"`
	AudioCacheThreshold    *uint32                 `protobuf:"varint,14,opt,name=audioCacheThreshold" json:"audioCacheThreshold,omitempty"`
	NetJitter              *uint32                 `protobuf:"varint,15,opt,name=netJitter" json:"netJitter,omitempty"`
	QualityLevel           *uint32                 `protobuf:"varint,16,opt,name=qualityLevel" json:"qualityLevel,omitempty"`
	TotalPlayTimeMs        *uint32                 `protobuf:"varint,17,opt,name=totalPlayTimeMs" json:"totalPlayTimeMs,omitempty"`
	TotalWaitTimeMs        *uint32                 `protobuf:"varint,18,opt,name=totalWaitTimeMs" json:"totalWaitTimeMs,omitempty"`
	WaitDetails            []*FinderLiveWaitDetail `protobuf:"bytes,19,rep,name=waitDetails" json:"waitDetails,omitempty"`
	LiveStartPlayTimeSec   *uint32                 `protobuf:"varint,20,opt,name=liveStartPlayTimeSec" json:"liveStartPlayTimeSec,omitempty"`
	FirstFrameTimeMs       *uint32                 `protobuf:"varint,21,opt,name=firstFrameTimeMs" json:"firstFrameTimeMs,omitempty"`
	ConnectMs              *uint32                 `protobuf:"varint,22,opt,name=connectMs" json:"connectMs,omitempty"`
	RttMs                  *uint32                 `protobuf:"varint,23,opt,name=rttMs" json:"rttMs,omitempty"`
	NetworkId              *uint32                 `protobuf:"varint,24,opt,name=networkId" json:"networkId,omitempty"`
	CdnSvrIp               *string                 `protobuf:"bytes,25,opt,name=cdnSvrIp" json:"cdnSvrIp,omitempty"`
	CdnSvrPort             *uint32                 `protobuf:"varint,26,opt,name=cdnSvrPort" json:"cdnSvrPort,omitempty"`
	CpuUsageProcess        *float32                `protobuf:"fixed32,27,opt,name=cpuUsageProcess" json:"cpuUsageProcess,omitempty"`
	CpuUsageDevice         *float32                `protobuf:"fixed32,28,opt,name=cpuUsageDevice" json:"cpuUsageDevice,omitempty"`
	TrtcUpLoss             *float32                `protobuf:"fixed32,29,opt,name=trtcUpLoss" json:"trtcUpLoss,omitempty"`
	TrtcDownLoss           *float32                `protobuf:"fixed32,30,opt,name=trtcDownLoss" json:"trtcDownLoss,omitempty"`
	ExtBuf                 []byte                  `protobuf:"bytes,31,opt,name=extBuf" json:"extBuf,omitempty"`
}

func (x *FinderLiveQoSInfo) Reset() {
	*x = FinderLiveQoSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveQoSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveQoSInfo) ProtoMessage() {}

func (x *FinderLiveQoSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveQoSInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveQoSInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{72}
}

func (x *FinderLiveQoSInfo) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetVideoFps() uint32 {
	if x != nil && x.VideoFps != nil {
		return *x.VideoFps
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetVideoGop() uint32 {
	if x != nil && x.VideoGop != nil {
		return *x.VideoGop
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetVideoBitrate() uint32 {
	if x != nil && x.VideoBitrate != nil {
		return *x.VideoBitrate
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetAudioBitrate() uint32 {
	if x != nil && x.AudioBitrate != nil {
		return *x.AudioBitrate
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetNetSpeed() uint32 {
	if x != nil && x.NetSpeed != nil {
		return *x.NetSpeed
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetVideoCache() uint32 {
	if x != nil && x.VideoCache != nil {
		return *x.VideoCache
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetAudioCache() uint32 {
	if x != nil && x.AudioCache != nil {
		return *x.AudioCache
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetVideoSumCacheSize() uint32 {
	if x != nil && x.VideoSumCacheSize != nil {
		return *x.VideoSumCacheSize
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetAudioVideoPlayInterval() uint32 {
	if x != nil && x.AudioVideoPlayInterval != nil {
		return *x.AudioVideoPlayInterval
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetAudioVideoRecvInterval() uint32 {
	if x != nil && x.AudioVideoRecvInterval != nil {
		return *x.AudioVideoRecvInterval
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetAudioCacheThreshold() uint32 {
	if x != nil && x.AudioCacheThreshold != nil {
		return *x.AudioCacheThreshold
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetNetJitter() uint32 {
	if x != nil && x.NetJitter != nil {
		return *x.NetJitter
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetQualityLevel() uint32 {
	if x != nil && x.QualityLevel != nil {
		return *x.QualityLevel
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetTotalPlayTimeMs() uint32 {
	if x != nil && x.TotalPlayTimeMs != nil {
		return *x.TotalPlayTimeMs
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetTotalWaitTimeMs() uint32 {
	if x != nil && x.TotalWaitTimeMs != nil {
		return *x.TotalWaitTimeMs
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetWaitDetails() []*FinderLiveWaitDetail {
	if x != nil {
		return x.WaitDetails
	}
	return nil
}

func (x *FinderLiveQoSInfo) GetLiveStartPlayTimeSec() uint32 {
	if x != nil && x.LiveStartPlayTimeSec != nil {
		return *x.LiveStartPlayTimeSec
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetFirstFrameTimeMs() uint32 {
	if x != nil && x.FirstFrameTimeMs != nil {
		return *x.FirstFrameTimeMs
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetConnectMs() uint32 {
	if x != nil && x.ConnectMs != nil {
		return *x.ConnectMs
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetRttMs() uint32 {
	if x != nil && x.RttMs != nil {
		return *x.RttMs
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetNetworkId() uint32 {
	if x != nil && x.NetworkId != nil {
		return *x.NetworkId
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetCdnSvrIp() string {
	if x != nil && x.CdnSvrIp != nil {
		return *x.CdnSvrIp
	}
	return ""
}

func (x *FinderLiveQoSInfo) GetCdnSvrPort() uint32 {
	if x != nil && x.CdnSvrPort != nil {
		return *x.CdnSvrPort
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetCpuUsageProcess() float32 {
	if x != nil && x.CpuUsageProcess != nil {
		return *x.CpuUsageProcess
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetCpuUsageDevice() float32 {
	if x != nil && x.CpuUsageDevice != nil {
		return *x.CpuUsageDevice
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetTrtcUpLoss() float32 {
	if x != nil && x.TrtcUpLoss != nil {
		return *x.TrtcUpLoss
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetTrtcDownLoss() float32 {
	if x != nil && x.TrtcDownLoss != nil {
		return *x.TrtcDownLoss
	}
	return 0
}

func (x *FinderLiveQoSInfo) GetExtBuf() []byte {
	if x != nil {
		return x.ExtBuf
	}
	return nil
}

type FinderLiveClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetType            *uint32              `protobuf:"varint,1,opt,name=netType" json:"netType,omitempty"`
	NetName            *string              `protobuf:"bytes,2,opt,name=netName" json:"netName,omitempty"`
	BandwidthKbps      *uint32              `protobuf:"varint,3,opt,name=bandwidthKbps" json:"bandwidthKbps,omitempty"`
	DeviceModel        *string              `protobuf:"bytes,4,opt,name=deviceModel" json:"deviceModel,omitempty"`
	DeviceBrand        *string              `protobuf:"bytes,5,opt,name=deviceBrand" json:"deviceBrand,omitempty"`
	OsName             *string              `protobuf:"bytes,6,opt,name=osName" json:"osName,omitempty"`
	OsVersion          *string              `protobuf:"bytes,7,opt,name=osVersion" json:"osVersion,omitempty"`
	CurrentLiveQosInfo *FinderLiveQoSInfo   `protobuf:"bytes,8,opt,name=currentLiveQosInfo" json:"currentLiveQosInfo,omitempty"`
	LastLiveQosInfo    []*FinderLiveQoSInfo `protobuf:"bytes,9,rep,name=lastLiveQosInfo" json:"lastLiveQosInfo,omitempty"`
}

func (x *FinderLiveClientStatus) Reset() {
	*x = FinderLiveClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveClientStatus) ProtoMessage() {}

func (x *FinderLiveClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveClientStatus.ProtoReflect.Descriptor instead.
func (*FinderLiveClientStatus) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{73}
}

func (x *FinderLiveClientStatus) GetNetType() uint32 {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return 0
}

func (x *FinderLiveClientStatus) GetNetName() string {
	if x != nil && x.NetName != nil {
		return *x.NetName
	}
	return ""
}

func (x *FinderLiveClientStatus) GetBandwidthKbps() uint32 {
	if x != nil && x.BandwidthKbps != nil {
		return *x.BandwidthKbps
	}
	return 0
}

func (x *FinderLiveClientStatus) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *FinderLiveClientStatus) GetDeviceBrand() string {
	if x != nil && x.DeviceBrand != nil {
		return *x.DeviceBrand
	}
	return ""
}

func (x *FinderLiveClientStatus) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *FinderLiveClientStatus) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *FinderLiveClientStatus) GetCurrentLiveQosInfo() *FinderLiveQoSInfo {
	if x != nil {
		return x.CurrentLiveQosInfo
	}
	return nil
}

func (x *FinderLiveClientStatus) GetLastLiveQosInfo() []*FinderLiveQoSInfo {
	if x != nil {
		return x.LastLiveQosInfo
	}
	return nil
}

type FinderSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugId *uint32 `protobuf:"varint,1,opt,name=debugId" json:"debugId,omitempty"`
}

func (x *FinderSwitch) Reset() {
	*x = FinderSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSwitch) ProtoMessage() {}

func (x *FinderSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSwitch.ProtoReflect.Descriptor instead.
func (*FinderSwitch) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{74}
}

func (x *FinderSwitch) GetDebugId() uint32 {
	if x != nil && x.DebugId != nil {
		return *x.DebugId
	}
	return 0
}

type FinderStreamTopObjectItem_ObjectItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId      *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	ObjectNonceId *string `protobuf:"bytes,2,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
}

func (x *FinderStreamTopObjectItem_ObjectItem) Reset() {
	*x = FinderStreamTopObjectItem_ObjectItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamTopObjectItem_ObjectItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamTopObjectItem_ObjectItem) ProtoMessage() {}

func (x *FinderStreamTopObjectItem_ObjectItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamTopObjectItem_ObjectItem.ProtoReflect.Descriptor instead.
func (*FinderStreamTopObjectItem_ObjectItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{75}
}

func (x *FinderStreamTopObjectItem_ObjectItem) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderStreamTopObjectItem_ObjectItem) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

type FinderStreamTopObjectItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects    []*FinderStreamTopObjectItem_ObjectItem `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
	SourceType *uint32                                 `protobuf:"varint,2,opt,name=sourceType" json:"sourceType,omitempty"`
	ExtInfo    []byte                                  `protobuf:"bytes,3,opt,name=extInfo" json:"extInfo,omitempty"`
}

func (x *FinderStreamTopObjectItem) Reset() {
	*x = FinderStreamTopObjectItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamTopObjectItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamTopObjectItem) ProtoMessage() {}

func (x *FinderStreamTopObjectItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamTopObjectItem.ProtoReflect.Descriptor instead.
func (*FinderStreamTopObjectItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{76}
}

func (x *FinderStreamTopObjectItem) GetObjects() []*FinderStreamTopObjectItem_ObjectItem {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *FinderStreamTopObjectItem) GetSourceType() uint32 {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return 0
}

func (x *FinderStreamTopObjectItem) GetExtInfo() []byte {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

type FinderCommByPass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByPassType *uint32 `protobuf:"varint,1,opt,name=byPassType" json:"byPassType,omitempty"`
	ByPassInfo []byte  `protobuf:"bytes,2,opt,name=byPassInfo" json:"byPassInfo,omitempty"`
}

func (x *FinderCommByPass) Reset() {
	*x = FinderCommByPass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCommByPass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCommByPass) ProtoMessage() {}

func (x *FinderCommByPass) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCommByPass.ProtoReflect.Descriptor instead.
func (*FinderCommByPass) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{77}
}

func (x *FinderCommByPass) GetByPassType() uint32 {
	if x != nil && x.ByPassType != nil {
		return *x.ByPassType
	}
	return 0
}

func (x *FinderCommByPass) GetByPassInfo() []byte {
	if x != nil {
		return x.ByPassInfo
	}
	return nil
}

type FinderStreamSceneStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FindReddot   *bool   `protobuf:"varint,1,opt,name=findReddot" json:"findReddot,omitempty"`
	HotReddot    *bool   `protobuf:"varint,2,opt,name=hotReddot" json:"hotReddot,omitempty"`
	FollowRetdot *bool   `protobuf:"varint,3,opt,name=followRetdot" json:"followRetdot,omitempty"`
	FriendReddot *bool   `protobuf:"varint,4,opt,name=friendReddot" json:"friendReddot,omitempty"`
	LastTabType  *uint32 `protobuf:"varint,5,opt,name=lastTabType" json:"lastTabType,omitempty"`
	EnterType    *uint32 `protobuf:"varint,6,opt,name=enterType" json:"enterType,omitempty"`
	FromTabType  *uint32 `protobuf:"varint,7,opt,name=fromTabType" json:"fromTabType,omitempty"`
}

func (x *FinderStreamSceneStatus) Reset() {
	*x = FinderStreamSceneStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamSceneStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamSceneStatus) ProtoMessage() {}

func (x *FinderStreamSceneStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamSceneStatus.ProtoReflect.Descriptor instead.
func (*FinderStreamSceneStatus) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{78}
}

func (x *FinderStreamSceneStatus) GetFindReddot() bool {
	if x != nil && x.FindReddot != nil {
		return *x.FindReddot
	}
	return false
}

func (x *FinderStreamSceneStatus) GetHotReddot() bool {
	if x != nil && x.HotReddot != nil {
		return *x.HotReddot
	}
	return false
}

func (x *FinderStreamSceneStatus) GetFollowRetdot() bool {
	if x != nil && x.FollowRetdot != nil {
		return *x.FollowRetdot
	}
	return false
}

func (x *FinderStreamSceneStatus) GetFriendReddot() bool {
	if x != nil && x.FriendReddot != nil {
		return *x.FriendReddot
	}
	return false
}

func (x *FinderStreamSceneStatus) GetLastTabType() uint32 {
	if x != nil && x.LastTabType != nil {
		return *x.LastTabType
	}
	return 0
}

func (x *FinderStreamSceneStatus) GetEnterType() uint32 {
	if x != nil && x.EnterType != nil {
		return *x.EnterType
	}
	return 0
}

func (x *FinderStreamSceneStatus) GetFromTabType() uint32 {
	if x != nil && x.FromTabType != nil {
		return *x.FromTabType
	}
	return 0
}

type FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgSpeed *uint32 `protobuf:"varint,1,opt,name=avgSpeed" json:"avgSpeed,omitempty"`
}

func (x *FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus) Reset() {
	*x = FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus) ProtoMessage() {}

func (x *FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus.ProtoReflect.Descriptor instead.
func (*FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{79}
}

func (x *FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus) GetAvgSpeed() uint32 {
	if x != nil && x.AvgSpeed != nil {
		return *x.AvgSpeed
	}
	return 0
}

type FinderLiveBeforeJoinLiveRoomStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkStatus *FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus `protobuf:"bytes,1,opt,name=networkStatus" json:"networkStatus,omitempty"`
}

func (x *FinderLiveBeforeJoinLiveRoomStatus) Reset() {
	*x = FinderLiveBeforeJoinLiveRoomStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveBeforeJoinLiveRoomStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveBeforeJoinLiveRoomStatus) ProtoMessage() {}

func (x *FinderLiveBeforeJoinLiveRoomStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveBeforeJoinLiveRoomStatus.ProtoReflect.Descriptor instead.
func (*FinderLiveBeforeJoinLiveRoomStatus) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{80}
}

func (x *FinderLiveBeforeJoinLiveRoomStatus) GetNetworkStatus() *FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus {
	if x != nil {
		return x.NetworkStatus
	}
	return nil
}

type FinderStreamRelatedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId      *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	ObjectNonceId *string `protobuf:"bytes,2,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	RelatedScene  *uint32 `protobuf:"varint,3,opt,name=relatedScene" json:"relatedScene,omitempty"`
}

func (x *FinderStreamRelatedInfo) Reset() {
	*x = FinderStreamRelatedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamRelatedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamRelatedInfo) ProtoMessage() {}

func (x *FinderStreamRelatedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamRelatedInfo.ProtoReflect.Descriptor instead.
func (*FinderStreamRelatedInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{81}
}

func (x *FinderStreamRelatedInfo) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderStreamRelatedInfo) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderStreamRelatedInfo) GetRelatedScene() uint32 {
	if x != nil && x.RelatedScene != nil {
		return *x.RelatedScene
	}
	return 0
}

type FinderStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest              *BaseRequest                        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	LastBuffer               []byte                              `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	FinderUsername           *string                             `protobuf:"bytes,4,opt,name=finderUsername" json:"finderUsername,omitempty"`
	PullType                 *uint32                             `protobuf:"varint,5,opt,name=pullType" json:"pullType,omitempty"`
	FinderBasereq            *FinderBaseRequest                  `protobuf:"bytes,6,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	Longitude                *float32                            `protobuf:"fixed32,7,opt,name=longitude" json:"longitude,omitempty"`
	Latitude                 *float32                            `protobuf:"fixed32,8,opt,name=latitude" json:"latitude,omitempty"`
	SessionId                *string                             `protobuf:"bytes,9,opt,name=sessionId" json:"sessionId,omitempty"`
	Status                   *FinderClientStatus                 `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	ReadStats                []*MarkReadStat                     `protobuf:"bytes,11,rep,name=readStats" json:"readStats,omitempty"`
	PrefetchConsumedFlag     *uint32                             `protobuf:"varint,12,opt,name=prefetchConsumedFlag" json:"prefetchConsumedFlag,omitempty"`
	DisplayTabType           *uint32                             `protobuf:"varint,13,opt,name=displayTabType" json:"displayTabType,omitempty"`
	TabTipsObjectId          *uint64                             `protobuf:"varint,14,opt,name=tabTipsObjectId" json:"tabTipsObjectId,omitempty"`
	TabTipsObjectNonceId     *string                             `protobuf:"bytes,15,opt,name=tabTipsObjectNonceId" json:"tabTipsObjectNonceId,omitempty"`
	Stats                    []*Stats                            `protobuf:"bytes,16,rep,name=stats" json:"stats,omitempty"`
	PartialExposedObjectId   *uint64                             `protobuf:"varint,17,opt,name=partialExposedObjectId" json:"partialExposedObjectId,omitempty"`
	MarkUnreadObjectList     []*FinderUnreadItem                 `protobuf:"bytes,18,rep,name=markUnreadObjectList" json:"markUnreadObjectList,omitempty"`
	CardBuffer               []byte                              `protobuf:"bytes,19,opt,name=cardBuffer" json:"cardBuffer,omitempty"`
	SpecialRequestScene      *uint32                             `protobuf:"varint,20,opt,name=specialRequestScene" json:"specialRequestScene,omitempty"`
	TabTipsUsername          *string                             `protobuf:"bytes,21,opt,name=tabTipsUsername" json:"tabTipsUsername,omitempty"`
	TabTipsByPassInfo        []byte                              `protobuf:"bytes,22,opt,name=tabTipsByPassInfo" json:"tabTipsByPassInfo,omitempty"`
	LiveStatus               *FinderLiveClientStatus             `protobuf:"bytes,23,opt,name=liveStatus" json:"liveStatus,omitempty"`
	TabTipsPath              *string                             `protobuf:"bytes,24,opt,name=tabTipsPath" json:"tabTipsPath,omitempty"`
	RequestSource            *uint32                             `protobuf:"varint,25,opt,name=requestSource" json:"requestSource,omitempty"`
	FinderSwitch             *FinderSwitch                       `protobuf:"bytes,26,opt,name=finderSwitch" json:"finderSwitch,omitempty"`
	GuideBarObjectId         *uint64                             `protobuf:"varint,27,opt,name=guideBarObjectId" json:"guideBarObjectId,omitempty"`
	TopObjects               []*FinderStreamTopObjectItem        `protobuf:"bytes,28,rep,name=topObjects" json:"topObjects,omitempty"`
	EnterFinderProbability   *uint32                             `protobuf:"varint,29,opt,name=enterFinderProbability" json:"enterFinderProbability,omitempty"`
	H5ByPass                 *string                             `protobuf:"bytes,30,opt,name=h5ByPass" json:"h5ByPass,omitempty"`
	CommByPass               *FinderCommByPass                   `protobuf:"bytes,32,opt,name=commByPass" json:"commByPass,omitempty"`
	SceneStatus              *FinderStreamSceneStatus            `protobuf:"bytes,33,opt,name=sceneStatus" json:"sceneStatus,omitempty"`
	BeforeJoinLiveRoomStatus *FinderLiveBeforeJoinLiveRoomStatus `protobuf:"bytes,34,opt,name=beforeJoinLiveRoomStatus" json:"beforeJoinLiveRoomStatus,omitempty"`
	ModelPrefetchConf        *uint32                             `protobuf:"varint,35,opt,name=modelPrefetchConf" json:"modelPrefetchConf,omitempty"`
	RelatedInfo              *FinderStreamRelatedInfo            `protobuf:"bytes,36,opt,name=relatedInfo" json:"relatedInfo,omitempty"`
}

func (x *FinderStreamRequest) Reset() {
	*x = FinderStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamRequest) ProtoMessage() {}

func (x *FinderStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamRequest.ProtoReflect.Descriptor instead.
func (*FinderStreamRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{82}
}

func (x *FinderStreamRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderStreamRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderStreamRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderStreamRequest) GetPullType() uint32 {
	if x != nil && x.PullType != nil {
		return *x.PullType
	}
	return 0
}

func (x *FinderStreamRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderStreamRequest) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderStreamRequest) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderStreamRequest) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *FinderStreamRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FinderStreamRequest) GetReadStats() []*MarkReadStat {
	if x != nil {
		return x.ReadStats
	}
	return nil
}

func (x *FinderStreamRequest) GetPrefetchConsumedFlag() uint32 {
	if x != nil && x.PrefetchConsumedFlag != nil {
		return *x.PrefetchConsumedFlag
	}
	return 0
}

func (x *FinderStreamRequest) GetDisplayTabType() uint32 {
	if x != nil && x.DisplayTabType != nil {
		return *x.DisplayTabType
	}
	return 0
}

func (x *FinderStreamRequest) GetTabTipsObjectId() uint64 {
	if x != nil && x.TabTipsObjectId != nil {
		return *x.TabTipsObjectId
	}
	return 0
}

func (x *FinderStreamRequest) GetTabTipsObjectNonceId() string {
	if x != nil && x.TabTipsObjectNonceId != nil {
		return *x.TabTipsObjectNonceId
	}
	return ""
}

func (x *FinderStreamRequest) GetStats() []*Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *FinderStreamRequest) GetPartialExposedObjectId() uint64 {
	if x != nil && x.PartialExposedObjectId != nil {
		return *x.PartialExposedObjectId
	}
	return 0
}

func (x *FinderStreamRequest) GetMarkUnreadObjectList() []*FinderUnreadItem {
	if x != nil {
		return x.MarkUnreadObjectList
	}
	return nil
}

func (x *FinderStreamRequest) GetCardBuffer() []byte {
	if x != nil {
		return x.CardBuffer
	}
	return nil
}

func (x *FinderStreamRequest) GetSpecialRequestScene() uint32 {
	if x != nil && x.SpecialRequestScene != nil {
		return *x.SpecialRequestScene
	}
	return 0
}

func (x *FinderStreamRequest) GetTabTipsUsername() string {
	if x != nil && x.TabTipsUsername != nil {
		return *x.TabTipsUsername
	}
	return ""
}

func (x *FinderStreamRequest) GetTabTipsByPassInfo() []byte {
	if x != nil {
		return x.TabTipsByPassInfo
	}
	return nil
}

func (x *FinderStreamRequest) GetLiveStatus() *FinderLiveClientStatus {
	if x != nil {
		return x.LiveStatus
	}
	return nil
}

func (x *FinderStreamRequest) GetTabTipsPath() string {
	if x != nil && x.TabTipsPath != nil {
		return *x.TabTipsPath
	}
	return ""
}

func (x *FinderStreamRequest) GetRequestSource() uint32 {
	if x != nil && x.RequestSource != nil {
		return *x.RequestSource
	}
	return 0
}

func (x *FinderStreamRequest) GetFinderSwitch() *FinderSwitch {
	if x != nil {
		return x.FinderSwitch
	}
	return nil
}

func (x *FinderStreamRequest) GetGuideBarObjectId() uint64 {
	if x != nil && x.GuideBarObjectId != nil {
		return *x.GuideBarObjectId
	}
	return 0
}

func (x *FinderStreamRequest) GetTopObjects() []*FinderStreamTopObjectItem {
	if x != nil {
		return x.TopObjects
	}
	return nil
}

func (x *FinderStreamRequest) GetEnterFinderProbability() uint32 {
	if x != nil && x.EnterFinderProbability != nil {
		return *x.EnterFinderProbability
	}
	return 0
}

func (x *FinderStreamRequest) GetH5ByPass() string {
	if x != nil && x.H5ByPass != nil {
		return *x.H5ByPass
	}
	return ""
}

func (x *FinderStreamRequest) GetCommByPass() *FinderCommByPass {
	if x != nil {
		return x.CommByPass
	}
	return nil
}

func (x *FinderStreamRequest) GetSceneStatus() *FinderStreamSceneStatus {
	if x != nil {
		return x.SceneStatus
	}
	return nil
}

func (x *FinderStreamRequest) GetBeforeJoinLiveRoomStatus() *FinderLiveBeforeJoinLiveRoomStatus {
	if x != nil {
		return x.BeforeJoinLiveRoomStatus
	}
	return nil
}

func (x *FinderStreamRequest) GetModelPrefetchConf() uint32 {
	if x != nil && x.ModelPrefetchConf != nil {
		return *x.ModelPrefetchConf
	}
	return 0
}

func (x *FinderStreamRequest) GetRelatedInfo() *FinderStreamRelatedInfo {
	if x != nil {
		return x.RelatedInfo
	}
	return nil
}

type FinderMediaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFormat       *string  `protobuf:"bytes,1,opt,name=fileFormat" json:"fileFormat,omitempty"`
	FirstLoadBytes   *uint32  `protobuf:"varint,2,opt,name=firstLoadBytes" json:"firstLoadBytes,omitempty"`
	BitRate          *uint32  `protobuf:"varint,3,opt,name=bitRate" json:"bitRate,omitempty"`
	CodingFormat     *string  `protobuf:"bytes,4,opt,name=codingFormat" json:"codingFormat,omitempty"`
	DynamicRangeType *uint32  `protobuf:"varint,5,opt,name=dynamicRangeType" json:"dynamicRangeType,omitempty"`
	Vfps             *float32 `protobuf:"fixed32,6,opt,name=vfps" json:"vfps,omitempty"`
	Width            *uint32  `protobuf:"varint,7,opt,name=width" json:"width,omitempty"`
	Height           *uint32  `protobuf:"varint,8,opt,name=height" json:"height,omitempty"`
}

func (x *FinderMediaSpec) Reset() {
	*x = FinderMediaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMediaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMediaSpec) ProtoMessage() {}

func (x *FinderMediaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMediaSpec.ProtoReflect.Descriptor instead.
func (*FinderMediaSpec) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{83}
}

func (x *FinderMediaSpec) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

func (x *FinderMediaSpec) GetFirstLoadBytes() uint32 {
	if x != nil && x.FirstLoadBytes != nil {
		return *x.FirstLoadBytes
	}
	return 0
}

func (x *FinderMediaSpec) GetBitRate() uint32 {
	if x != nil && x.BitRate != nil {
		return *x.BitRate
	}
	return 0
}

func (x *FinderMediaSpec) GetCodingFormat() string {
	if x != nil && x.CodingFormat != nil {
		return *x.CodingFormat
	}
	return ""
}

func (x *FinderMediaSpec) GetDynamicRangeType() uint32 {
	if x != nil && x.DynamicRangeType != nil {
		return *x.DynamicRangeType
	}
	return 0
}

func (x *FinderMediaSpec) GetVfps() float32 {
	if x != nil && x.Vfps != nil {
		return *x.Vfps
	}
	return 0
}

func (x *FinderMediaSpec) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *FinderMediaSpec) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type FinderMediaCodecInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoScore      *float32 `protobuf:"fixed32,1,opt,name=videoScore" json:"videoScore,omitempty"`
	VideoCoverScore *float32 `protobuf:"fixed32,2,opt,name=videoCoverScore" json:"videoCoverScore,omitempty"`
	VideoAudioScore *float32 `protobuf:"fixed32,3,opt,name=videoAudioScore" json:"videoAudioScore,omitempty"`
	ThumbScore      *float32 `protobuf:"fixed32,4,opt,name=thumbScore" json:"thumbScore,omitempty"`
	HdimgScore      *float32 `protobuf:"fixed32,5,opt,name=hdimgScore" json:"hdimgScore,omitempty"`
	HasStickers     *bool    `protobuf:"varint,6,opt,name=hasStickers" json:"hasStickers,omitempty"`
}

func (x *FinderMediaCodecInfo) Reset() {
	*x = FinderMediaCodecInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMediaCodecInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMediaCodecInfo) ProtoMessage() {}

func (x *FinderMediaCodecInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMediaCodecInfo.ProtoReflect.Descriptor instead.
func (*FinderMediaCodecInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{84}
}

func (x *FinderMediaCodecInfo) GetVideoScore() float32 {
	if x != nil && x.VideoScore != nil {
		return *x.VideoScore
	}
	return 0
}

func (x *FinderMediaCodecInfo) GetVideoCoverScore() float32 {
	if x != nil && x.VideoCoverScore != nil {
		return *x.VideoCoverScore
	}
	return 0
}

func (x *FinderMediaCodecInfo) GetVideoAudioScore() float32 {
	if x != nil && x.VideoAudioScore != nil {
		return *x.VideoAudioScore
	}
	return 0
}

func (x *FinderMediaCodecInfo) GetThumbScore() float32 {
	if x != nil && x.ThumbScore != nil {
		return *x.ThumbScore
	}
	return 0
}

func (x *FinderMediaCodecInfo) GetHdimgScore() float32 {
	if x != nil && x.HdimgScore != nil {
		return *x.HdimgScore
	}
	return 0
}

func (x *FinderMediaCodecInfo) GetHasStickers() bool {
	if x != nil && x.HasStickers != nil {
		return *x.HasStickers
	}
	return false
}

type CdnTransInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag                   *uint32 `protobuf:"varint,1,opt,name=tag" json:"tag,omitempty"`
	Url                   *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	QualityTag            *uint32 `protobuf:"varint,3,opt,name=qualityTag" json:"qualityTag,omitempty"`
	TagName               *string `protobuf:"bytes,4,opt,name=tagName" json:"tagName,omitempty"`
	Rate                  *uint32 `protobuf:"varint,5,opt,name=rate" json:"rate,omitempty"`
	VideoTagType          *uint32 `protobuf:"varint,6,opt,name=videoTagType" json:"videoTagType,omitempty"`
	VideoQualityLevel     *uint32 `protobuf:"varint,7,opt,name=videoQualityLevel" json:"videoQualityLevel,omitempty"`
	VideoQualityLevelDesc *string `protobuf:"bytes,8,opt,name=videoQualityLevelDesc" json:"videoQualityLevelDesc,omitempty"`
}

func (x *CdnTransInfo) Reset() {
	*x = CdnTransInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdnTransInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdnTransInfo) ProtoMessage() {}

func (x *CdnTransInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdnTransInfo.ProtoReflect.Descriptor instead.
func (*CdnTransInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{85}
}

func (x *CdnTransInfo) GetTag() uint32 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

func (x *CdnTransInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CdnTransInfo) GetQualityTag() uint32 {
	if x != nil && x.QualityTag != nil {
		return *x.QualityTag
	}
	return 0
}

func (x *CdnTransInfo) GetTagName() string {
	if x != nil && x.TagName != nil {
		return *x.TagName
	}
	return ""
}

func (x *CdnTransInfo) GetRate() uint32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *CdnTransInfo) GetVideoTagType() uint32 {
	if x != nil && x.VideoTagType != nil {
		return *x.VideoTagType
	}
	return 0
}

func (x *CdnTransInfo) GetVideoQualityLevel() uint32 {
	if x != nil && x.VideoQualityLevel != nil {
		return *x.VideoQualityLevel
	}
	return 0
}

func (x *CdnTransInfo) GetVideoQualityLevelDesc() string {
	if x != nil && x.VideoQualityLevelDesc != nil {
		return *x.VideoQualityLevelDesc
	}
	return ""
}

type FinderLiveCdnTransInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CdnTransInfo *CdnTransInfo `protobuf:"bytes,1,opt,name=cdnTransInfo" json:"cdnTransInfo,omitempty"`
	BitRate      *uint32       `protobuf:"varint,2,opt,name=bitRate" json:"bitRate,omitempty"`
	CodingFormat *string       `protobuf:"bytes,3,opt,name=codingFormat" json:"codingFormat,omitempty"`
}

func (x *FinderLiveCdnTransInfo) Reset() {
	*x = FinderLiveCdnTransInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveCdnTransInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveCdnTransInfo) ProtoMessage() {}

func (x *FinderLiveCdnTransInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveCdnTransInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveCdnTransInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{86}
}

func (x *FinderLiveCdnTransInfo) GetCdnTransInfo() *CdnTransInfo {
	if x != nil {
		return x.CdnTransInfo
	}
	return nil
}

func (x *FinderLiveCdnTransInfo) GetBitRate() uint32 {
	if x != nil && x.BitRate != nil {
		return *x.BitRate
	}
	return 0
}

func (x *FinderLiveCdnTransInfo) GetCodingFormat() string {
	if x != nil && x.CodingFormat != nil {
		return *x.CodingFormat
	}
	return ""
}

type VideoPKParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncResEnum *uint32 `protobuf:"varint,1,opt,name=encResEnum" json:"encResEnum,omitempty"`
	CapFps     *uint32 `protobuf:"varint,2,opt,name=capFps" json:"capFps,omitempty"`
	EncBr      *uint32 `protobuf:"varint,3,opt,name=encBr" json:"encBr,omitempty"`
	EncBrMin   *uint32 `protobuf:"varint,4,opt,name=encBrMin" json:"encBrMin,omitempty"`
}

func (x *VideoPKParams) Reset() {
	*x = VideoPKParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoPKParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPKParams) ProtoMessage() {}

func (x *VideoPKParams) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPKParams.ProtoReflect.Descriptor instead.
func (*VideoPKParams) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{87}
}

func (x *VideoPKParams) GetEncResEnum() uint32 {
	if x != nil && x.EncResEnum != nil {
		return *x.EncResEnum
	}
	return 0
}

func (x *VideoPKParams) GetCapFps() uint32 {
	if x != nil && x.CapFps != nil {
		return *x.CapFps
	}
	return 0
}

func (x *VideoPKParams) GetEncBr() uint32 {
	if x != nil && x.EncBr != nil {
		return *x.EncBr
	}
	return 0
}

func (x *VideoPKParams) GetEncBrMin() uint32 {
	if x != nil && x.EncBrMin != nil {
		return *x.EncBrMin
	}
	return 0
}

type LiveSdkVideoParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncResEnum             *uint32        `protobuf:"varint,1,opt,name=encResEnum" json:"encResEnum,omitempty"`
	ResModeEnum            *uint32        `protobuf:"varint,2,opt,name=resModeEnum" json:"resModeEnum,omitempty"`
	CapFps                 *uint32        `protobuf:"varint,3,opt,name=capFps" json:"capFps,omitempty"`
	EncBr                  *uint32        `protobuf:"varint,4,opt,name=encBr" json:"encBr,omitempty"`
	EncAdjustRes           *uint32        `protobuf:"varint,5,opt,name=encAdjustRes" json:"encAdjustRes,omitempty"`
	QosPreferneceEnum      *uint32        `protobuf:"varint,6,opt,name=qosPreferneceEnum" json:"qosPreferneceEnum,omitempty"`
	QosControlModeEnum     *uint32        `protobuf:"varint,7,opt,name=qosControlModeEnum" json:"qosControlModeEnum,omitempty"`
	EncResEnumScreenrecord *uint32        `protobuf:"varint,8,opt,name=encResEnumScreenrecord" json:"encResEnumScreenrecord,omitempty"`
	CapFpsScreenrecord     *uint32        `protobuf:"varint,9,opt,name=capFpsScreenrecord" json:"capFpsScreenrecord,omitempty"`
	EncBrScreenrecord      *uint32        `protobuf:"varint,10,opt,name=encBrScreenrecord" json:"encBrScreenrecord,omitempty"`
	EncBrMin               *uint32        `protobuf:"varint,11,opt,name=encBrMin" json:"encBrMin,omitempty"`
	HevcEncEnable          *uint32        `protobuf:"varint,12,opt,name=hevcEncEnable" json:"hevcEncEnable,omitempty"`
	EncResEnumHevc         *uint32        `protobuf:"varint,13,opt,name=encResEnumHevc" json:"encResEnumHevc,omitempty"`
	CapFpsHevc             *uint32        `protobuf:"varint,14,opt,name=capFpsHevc" json:"capFpsHevc,omitempty"`
	EncBrHevc              *uint32        `protobuf:"varint,15,opt,name=encBrHevc" json:"encBrHevc,omitempty"`
	EncBrHevcMin           *uint32        `protobuf:"varint,16,opt,name=encBrHevcMin" json:"encBrHevcMin,omitempty"`
	MicAnchor11            *VideoPKParams `protobuf:"bytes,23,opt,name=micAnchor11" json:"micAnchor11,omitempty"`
	MicAudience11          *VideoPKParams `protobuf:"bytes,24,opt,name=micAudience11" json:"micAudience11,omitempty"`
	MicAudience12          *VideoPKParams `protobuf:"bytes,25,opt,name=micAudience12" json:"micAudience12,omitempty"`
}

func (x *LiveSdkVideoParams) Reset() {
	*x = LiveSdkVideoParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSdkVideoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSdkVideoParams) ProtoMessage() {}

func (x *LiveSdkVideoParams) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSdkVideoParams.ProtoReflect.Descriptor instead.
func (*LiveSdkVideoParams) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{88}
}

func (x *LiveSdkVideoParams) GetEncResEnum() uint32 {
	if x != nil && x.EncResEnum != nil {
		return *x.EncResEnum
	}
	return 0
}

func (x *LiveSdkVideoParams) GetResModeEnum() uint32 {
	if x != nil && x.ResModeEnum != nil {
		return *x.ResModeEnum
	}
	return 0
}

func (x *LiveSdkVideoParams) GetCapFps() uint32 {
	if x != nil && x.CapFps != nil {
		return *x.CapFps
	}
	return 0
}

func (x *LiveSdkVideoParams) GetEncBr() uint32 {
	if x != nil && x.EncBr != nil {
		return *x.EncBr
	}
	return 0
}

func (x *LiveSdkVideoParams) GetEncAdjustRes() uint32 {
	if x != nil && x.EncAdjustRes != nil {
		return *x.EncAdjustRes
	}
	return 0
}

func (x *LiveSdkVideoParams) GetQosPreferneceEnum() uint32 {
	if x != nil && x.QosPreferneceEnum != nil {
		return *x.QosPreferneceEnum
	}
	return 0
}

func (x *LiveSdkVideoParams) GetQosControlModeEnum() uint32 {
	if x != nil && x.QosControlModeEnum != nil {
		return *x.QosControlModeEnum
	}
	return 0
}

func (x *LiveSdkVideoParams) GetEncResEnumScreenrecord() uint32 {
	if x != nil && x.EncResEnumScreenrecord != nil {
		return *x.EncResEnumScreenrecord
	}
	return 0
}

func (x *LiveSdkVideoParams) GetCapFpsScreenrecord() uint32 {
	if x != nil && x.CapFpsScreenrecord != nil {
		return *x.CapFpsScreenrecord
	}
	return 0
}

func (x *LiveSdkVideoParams) GetEncBrScreenrecord() uint32 {
	if x != nil && x.EncBrScreenrecord != nil {
		return *x.EncBrScreenrecord
	}
	return 0
}

func (x *LiveSdkVideoParams) GetEncBrMin() uint32 {
	if x != nil && x.EncBrMin != nil {
		return *x.EncBrMin
	}
	return 0
}

func (x *LiveSdkVideoParams) GetHevcEncEnable() uint32 {
	if x != nil && x.HevcEncEnable != nil {
		return *x.HevcEncEnable
	}
	return 0
}

func (x *LiveSdkVideoParams) GetEncResEnumHevc() uint32 {
	if x != nil && x.EncResEnumHevc != nil {
		return *x.EncResEnumHevc
	}
	return 0
}

func (x *LiveSdkVideoParams) GetCapFpsHevc() uint32 {
	if x != nil && x.CapFpsHevc != nil {
		return *x.CapFpsHevc
	}
	return 0
}

func (x *LiveSdkVideoParams) GetEncBrHevc() uint32 {
	if x != nil && x.EncBrHevc != nil {
		return *x.EncBrHevc
	}
	return 0
}

func (x *LiveSdkVideoParams) GetEncBrHevcMin() uint32 {
	if x != nil && x.EncBrHevcMin != nil {
		return *x.EncBrHevcMin
	}
	return 0
}

func (x *LiveSdkVideoParams) GetMicAnchor11() *VideoPKParams {
	if x != nil {
		return x.MicAnchor11
	}
	return nil
}

func (x *LiveSdkVideoParams) GetMicAudience11() *VideoPKParams {
	if x != nil {
		return x.MicAudience11
	}
	return nil
}

func (x *LiveSdkVideoParams) GetMicAudience12() *VideoPKParams {
	if x != nil {
		return x.MicAudience12
	}
	return nil
}

type FinderLiveMediaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CdnTransInfo          []*FinderLiveCdnTransInfo `protobuf:"bytes,1,rep,name=cdnTransInfo" json:"cdnTransInfo,omitempty"`
	AnchorVideoParams     *LiveSdkVideoParams       `protobuf:"bytes,2,opt,name=anchorVideoParams" json:"anchorVideoParams,omitempty"`
	AudienceCdnQualityCfg *uint32                   `protobuf:"varint,3,opt,name=audienceCdnQualityCfg" json:"audienceCdnQualityCfg,omitempty"`
	AudienceCdnUrl        *string                   `protobuf:"bytes,4,opt,name=audienceCdnUrl" json:"audienceCdnUrl,omitempty"`
}

func (x *FinderLiveMediaSpec) Reset() {
	*x = FinderLiveMediaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveMediaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveMediaSpec) ProtoMessage() {}

func (x *FinderLiveMediaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveMediaSpec.ProtoReflect.Descriptor instead.
func (*FinderLiveMediaSpec) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{89}
}

func (x *FinderLiveMediaSpec) GetCdnTransInfo() []*FinderLiveCdnTransInfo {
	if x != nil {
		return x.CdnTransInfo
	}
	return nil
}

func (x *FinderLiveMediaSpec) GetAnchorVideoParams() *LiveSdkVideoParams {
	if x != nil {
		return x.AnchorVideoParams
	}
	return nil
}

func (x *FinderLiveMediaSpec) GetAudienceCdnQualityCfg() uint32 {
	if x != nil && x.AudienceCdnQualityCfg != nil {
		return *x.AudienceCdnQualityCfg
	}
	return 0
}

func (x *FinderLiveMediaSpec) GetAudienceCdnUrl() string {
	if x != nil && x.AudienceCdnUrl != nil {
		return *x.AudienceCdnUrl
	}
	return ""
}

type FinderHlsMediaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFormat       *string  `protobuf:"bytes,1,opt,name=fileFormat" json:"fileFormat,omitempty"`
	FirstLoadBytes   *uint32  `protobuf:"varint,2,opt,name=firstLoadBytes" json:"firstLoadBytes,omitempty"`
	BitRate          *uint32  `protobuf:"varint,3,opt,name=bitRate" json:"bitRate,omitempty"`
	CodingFormat     *string  `protobuf:"bytes,4,opt,name=codingFormat" json:"codingFormat,omitempty"`
	DynamicRangeType *uint32  `protobuf:"varint,5,opt,name=dynamicRangeType" json:"dynamicRangeType,omitempty"`
	Vfps             *float32 `protobuf:"fixed32,6,opt,name=vfps" json:"vfps,omitempty"`
	Width            *uint32  `protobuf:"varint,7,opt,name=width" json:"width,omitempty"`
	Height           *uint32  `protobuf:"varint,8,opt,name=height" json:"height,omitempty"`
}

func (x *FinderHlsMediaSpec) Reset() {
	*x = FinderHlsMediaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderHlsMediaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderHlsMediaSpec) ProtoMessage() {}

func (x *FinderHlsMediaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderHlsMediaSpec.ProtoReflect.Descriptor instead.
func (*FinderHlsMediaSpec) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{90}
}

func (x *FinderHlsMediaSpec) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

func (x *FinderHlsMediaSpec) GetFirstLoadBytes() uint32 {
	if x != nil && x.FirstLoadBytes != nil {
		return *x.FirstLoadBytes
	}
	return 0
}

func (x *FinderHlsMediaSpec) GetBitRate() uint32 {
	if x != nil && x.BitRate != nil {
		return *x.BitRate
	}
	return 0
}

func (x *FinderHlsMediaSpec) GetCodingFormat() string {
	if x != nil && x.CodingFormat != nil {
		return *x.CodingFormat
	}
	return ""
}

func (x *FinderHlsMediaSpec) GetDynamicRangeType() uint32 {
	if x != nil && x.DynamicRangeType != nil {
		return *x.DynamicRangeType
	}
	return 0
}

func (x *FinderHlsMediaSpec) GetVfps() float32 {
	if x != nil && x.Vfps != nil {
		return *x.Vfps
	}
	return 0
}

func (x *FinderHlsMediaSpec) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *FinderHlsMediaSpec) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type FinderHlsMediaSpecList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HlsList []*FinderHlsMediaSpec `protobuf:"bytes,1,rep,name=hlsList" json:"hlsList,omitempty"`
}

func (x *FinderHlsMediaSpecList) Reset() {
	*x = FinderHlsMediaSpecList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderHlsMediaSpecList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderHlsMediaSpecList) ProtoMessage() {}

func (x *FinderHlsMediaSpecList) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderHlsMediaSpecList.ProtoReflect.Descriptor instead.
func (*FinderHlsMediaSpecList) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{91}
}

func (x *FinderHlsMediaSpecList) GetHlsList() []*FinderHlsMediaSpec {
	if x != nil {
		return x.HlsList
	}
	return nil
}

type FinderHalfRect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left   *float32 `protobuf:"fixed32,1,opt,name=left" json:"left,omitempty"`
	Top    *float32 `protobuf:"fixed32,2,opt,name=top" json:"top,omitempty"`
	Right  *float32 `protobuf:"fixed32,3,opt,name=right" json:"right,omitempty"`
	Bottom *float32 `protobuf:"fixed32,4,opt,name=bottom" json:"bottom,omitempty"`
}

func (x *FinderHalfRect) Reset() {
	*x = FinderHalfRect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderHalfRect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderHalfRect) ProtoMessage() {}

func (x *FinderHalfRect) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderHalfRect.ProtoReflect.Descriptor instead.
func (*FinderHalfRect) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{92}
}

func (x *FinderHalfRect) GetLeft() float32 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *FinderHalfRect) GetTop() float32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *FinderHalfRect) GetRight() float32 {
	if x != nil && x.Right != nil {
		return *x.Right
	}
	return 0
}

func (x *FinderHalfRect) GetBottom() float32 {
	if x != nil && x.Bottom != nil {
		return *x.Bottom
	}
	return 0
}

type FinderHdrMediaSpecList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HdrList []*FinderMediaSpec `protobuf:"bytes,1,rep,name=hdrList" json:"hdrList,omitempty"`
}

func (x *FinderHdrMediaSpecList) Reset() {
	*x = FinderHdrMediaSpecList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderHdrMediaSpecList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderHdrMediaSpecList) ProtoMessage() {}

func (x *FinderHdrMediaSpecList) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderHdrMediaSpecList.ProtoReflect.Descriptor instead.
func (*FinderHdrMediaSpecList) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{93}
}

func (x *FinderHdrMediaSpecList) GetHdrList() []*FinderMediaSpec {
	if x != nil {
		return x.HdrList
	}
	return nil
}

type FinderMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url               *string                 `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	ThumbUrl          *string                 `protobuf:"bytes,2,opt,name=thumbUrl" json:"thumbUrl,omitempty"`
	MediaType         *uint32                 `protobuf:"varint,3,opt,name=mediaType" json:"mediaType,omitempty"`
	VideoPlayLen      *uint32                 `protobuf:"varint,4,opt,name=videoPlayLen" json:"videoPlayLen,omitempty"`
	Width             *float32                `protobuf:"fixed32,5,opt,name=width" json:"width,omitempty"`
	Height            *float32                `protobuf:"fixed32,6,opt,name=height" json:"height,omitempty"`
	Md5Sum            *string                 `protobuf:"bytes,7,opt,name=md5Sum" json:"md5Sum,omitempty"`
	FileSize          *uint32                 `protobuf:"varint,8,opt,name=fileSize" json:"fileSize,omitempty"`
	Bitrate           *int32                  `protobuf:"varint,9,opt,name=bitrate" json:"bitrate,omitempty"`
	Spec              []*FinderMediaSpec      `protobuf:"bytes,10,rep,name=spec" json:"spec,omitempty"`
	CoverUrl          *string                 `protobuf:"bytes,11,opt,name=coverUrl" json:"coverUrl,omitempty"`
	DecodeKey         *string                 `protobuf:"bytes,12,opt,name=decodeKey" json:"decodeKey,omitempty"`
	UrlToken          *string                 `protobuf:"bytes,13,opt,name=urlToken" json:"urlToken,omitempty"`
	ThumbUrlToken     *string                 `protobuf:"bytes,14,opt,name=thumbUrlToken" json:"thumbUrlToken,omitempty"`
	CoverUrlToken     *string                 `protobuf:"bytes,15,opt,name=coverUrlToken" json:"coverUrlToken,omitempty"`
	CodecInfo         *FinderMediaCodecInfo   `protobuf:"bytes,16,opt,name=codecInfo" json:"codecInfo,omitempty"`
	LiveSpec          *FinderLiveMediaSpec    `protobuf:"bytes,17,opt,name=liveSpec" json:"liveSpec,omitempty"`
	HlsSpec           *FinderHlsMediaSpecList `protobuf:"bytes,18,opt,name=hlsSpec" json:"hlsSpec,omitempty"`
	HotFlag           *uint32                 `protobuf:"varint,19,opt,name=hotFlag" json:"hotFlag,omitempty"`
	HalfRect          *FinderHalfRect         `protobuf:"bytes,20,opt,name=halfRect" json:"halfRect,omitempty"`
	FullThumbUrl      *string                 `protobuf:"bytes,21,opt,name=fullThumbUrl" json:"fullThumbUrl,omitempty"`
	FullThumbUrlToken *string                 `protobuf:"bytes,22,opt,name=fullThumbUrlToken" json:"fullThumbUrlToken,omitempty"`
	FullUrl           *string                 `protobuf:"bytes,23,opt,name=fullUrl" json:"fullUrl,omitempty"`
	FullWidth         *float32                `protobuf:"fixed32,24,opt,name=fullWidth" json:"fullWidth,omitempty"`
	FullHeight        *float32                `protobuf:"fixed32,25,opt,name=fullHeight" json:"fullHeight,omitempty"`
	FullMd5Sum        *string                 `protobuf:"bytes,26,opt,name=fullMd5Sum" json:"fullMd5Sum,omitempty"`
	FullFileSize      *uint32                 `protobuf:"varint,27,opt,name=fullFileSize" json:"fullFileSize,omitempty"`
	FullBitrate       *int32                  `protobuf:"varint,28,opt,name=fullBitrate" json:"fullBitrate,omitempty"`
	FullUrlToken      *string                 `protobuf:"bytes,29,opt,name=fullUrlToken" json:"fullUrlToken,omitempty"`
	FullCoverUrl      *string                 `protobuf:"bytes,30,opt,name=fullCoverUrl" json:"fullCoverUrl,omitempty"`
	FullCoverUrlToken *string                 `protobuf:"bytes,31,opt,name=fullCoverUrlToken" json:"fullCoverUrlToken,omitempty"`
	HdrSpec           *FinderHdrMediaSpecList `protobuf:"bytes,32,opt,name=hdrSpec" json:"hdrSpec,omitempty"`
}

func (x *FinderMedia) Reset() {
	*x = FinderMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMedia) ProtoMessage() {}

func (x *FinderMedia) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMedia.ProtoReflect.Descriptor instead.
func (*FinderMedia) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{94}
}

func (x *FinderMedia) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *FinderMedia) GetThumbUrl() string {
	if x != nil && x.ThumbUrl != nil {
		return *x.ThumbUrl
	}
	return ""
}

func (x *FinderMedia) GetMediaType() uint32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *FinderMedia) GetVideoPlayLen() uint32 {
	if x != nil && x.VideoPlayLen != nil {
		return *x.VideoPlayLen
	}
	return 0
}

func (x *FinderMedia) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *FinderMedia) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *FinderMedia) GetMd5Sum() string {
	if x != nil && x.Md5Sum != nil {
		return *x.Md5Sum
	}
	return ""
}

func (x *FinderMedia) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *FinderMedia) GetBitrate() int32 {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return 0
}

func (x *FinderMedia) GetSpec() []*FinderMediaSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *FinderMedia) GetCoverUrl() string {
	if x != nil && x.CoverUrl != nil {
		return *x.CoverUrl
	}
	return ""
}

func (x *FinderMedia) GetDecodeKey() string {
	if x != nil && x.DecodeKey != nil {
		return *x.DecodeKey
	}
	return ""
}

func (x *FinderMedia) GetUrlToken() string {
	if x != nil && x.UrlToken != nil {
		return *x.UrlToken
	}
	return ""
}

func (x *FinderMedia) GetThumbUrlToken() string {
	if x != nil && x.ThumbUrlToken != nil {
		return *x.ThumbUrlToken
	}
	return ""
}

func (x *FinderMedia) GetCoverUrlToken() string {
	if x != nil && x.CoverUrlToken != nil {
		return *x.CoverUrlToken
	}
	return ""
}

func (x *FinderMedia) GetCodecInfo() *FinderMediaCodecInfo {
	if x != nil {
		return x.CodecInfo
	}
	return nil
}

func (x *FinderMedia) GetLiveSpec() *FinderLiveMediaSpec {
	if x != nil {
		return x.LiveSpec
	}
	return nil
}

func (x *FinderMedia) GetHlsSpec() *FinderHlsMediaSpecList {
	if x != nil {
		return x.HlsSpec
	}
	return nil
}

func (x *FinderMedia) GetHotFlag() uint32 {
	if x != nil && x.HotFlag != nil {
		return *x.HotFlag
	}
	return 0
}

func (x *FinderMedia) GetHalfRect() *FinderHalfRect {
	if x != nil {
		return x.HalfRect
	}
	return nil
}

func (x *FinderMedia) GetFullThumbUrl() string {
	if x != nil && x.FullThumbUrl != nil {
		return *x.FullThumbUrl
	}
	return ""
}

func (x *FinderMedia) GetFullThumbUrlToken() string {
	if x != nil && x.FullThumbUrlToken != nil {
		return *x.FullThumbUrlToken
	}
	return ""
}

func (x *FinderMedia) GetFullUrl() string {
	if x != nil && x.FullUrl != nil {
		return *x.FullUrl
	}
	return ""
}

func (x *FinderMedia) GetFullWidth() float32 {
	if x != nil && x.FullWidth != nil {
		return *x.FullWidth
	}
	return 0
}

func (x *FinderMedia) GetFullHeight() float32 {
	if x != nil && x.FullHeight != nil {
		return *x.FullHeight
	}
	return 0
}

func (x *FinderMedia) GetFullMd5Sum() string {
	if x != nil && x.FullMd5Sum != nil {
		return *x.FullMd5Sum
	}
	return ""
}

func (x *FinderMedia) GetFullFileSize() uint32 {
	if x != nil && x.FullFileSize != nil {
		return *x.FullFileSize
	}
	return 0
}

func (x *FinderMedia) GetFullBitrate() int32 {
	if x != nil && x.FullBitrate != nil {
		return *x.FullBitrate
	}
	return 0
}

func (x *FinderMedia) GetFullUrlToken() string {
	if x != nil && x.FullUrlToken != nil {
		return *x.FullUrlToken
	}
	return ""
}

func (x *FinderMedia) GetFullCoverUrl() string {
	if x != nil && x.FullCoverUrl != nil {
		return *x.FullCoverUrl
	}
	return ""
}

func (x *FinderMedia) GetFullCoverUrlToken() string {
	if x != nil && x.FullCoverUrlToken != nil {
		return *x.FullCoverUrlToken
	}
	return ""
}

func (x *FinderMedia) GetHdrSpec() *FinderHdrMediaSpecList {
	if x != nil {
		return x.HdrSpec
	}
	return nil
}

type FinderMediaExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (x *FinderMediaExtra) Reset() {
	*x = FinderMediaExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMediaExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMediaExtra) ProtoMessage() {}

func (x *FinderMediaExtra) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMediaExtra.ProtoReflect.Descriptor instead.
func (*FinderMediaExtra) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{95}
}

func (x *FinderMediaExtra) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type FinderLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude       *float32 `protobuf:"fixed32,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude        *float32 `protobuf:"fixed32,2,opt,name=latitude" json:"latitude,omitempty"`
	City            *string  `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	PoiName         *string  `protobuf:"bytes,4,opt,name=poiName" json:"poiName,omitempty"`
	PoiAddress      *string  `protobuf:"bytes,5,opt,name=poiAddress" json:"poiAddress,omitempty"`
	PoiClassifyId   *string  `protobuf:"bytes,6,opt,name=poiClassifyId" json:"poiClassifyId,omitempty"`
	PoiClassifyType *uint32  `protobuf:"varint,7,opt,name=poiClassifyType" json:"poiClassifyType,omitempty"`
	Province        *string  `protobuf:"bytes,8,opt,name=province" json:"province,omitempty"`
	Region          *string  `protobuf:"bytes,9,opt,name=region" json:"region,omitempty"`
	Country         *string  `protobuf:"bytes,10,opt,name=country" json:"country,omitempty"`
	Source          *uint32  `protobuf:"varint,11,opt,name=source" json:"source,omitempty"`
}

func (x *FinderLocation) Reset() {
	*x = FinderLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLocation) ProtoMessage() {}

func (x *FinderLocation) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLocation.ProtoReflect.Descriptor instead.
func (*FinderLocation) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{96}
}

func (x *FinderLocation) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderLocation) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderLocation) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *FinderLocation) GetPoiName() string {
	if x != nil && x.PoiName != nil {
		return *x.PoiName
	}
	return ""
}

func (x *FinderLocation) GetPoiAddress() string {
	if x != nil && x.PoiAddress != nil {
		return *x.PoiAddress
	}
	return ""
}

func (x *FinderLocation) GetPoiClassifyId() string {
	if x != nil && x.PoiClassifyId != nil {
		return *x.PoiClassifyId
	}
	return ""
}

func (x *FinderLocation) GetPoiClassifyType() uint32 {
	if x != nil && x.PoiClassifyType != nil {
		return *x.PoiClassifyType
	}
	return 0
}

func (x *FinderLocation) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *FinderLocation) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *FinderLocation) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *FinderLocation) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

type FinderExtendedReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link  *string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	Title *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Type  *uint32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Style *uint32 `protobuf:"varint,4,opt,name=style" json:"style,omitempty"`
}

func (x *FinderExtendedReading) Reset() {
	*x = FinderExtendedReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderExtendedReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderExtendedReading) ProtoMessage() {}

func (x *FinderExtendedReading) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderExtendedReading.ProtoReflect.Descriptor instead.
func (*FinderExtendedReading) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{97}
}

func (x *FinderExtendedReading) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *FinderExtendedReading) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderExtendedReading) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderExtendedReading) GetStyle() uint32 {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return 0
}

type FinderTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderTopicInfo *string `protobuf:"bytes,1,opt,name=finderTopicInfo" json:"finderTopicInfo,omitempty"`
}

func (x *FinderTopic) Reset() {
	*x = FinderTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTopic) ProtoMessage() {}

func (x *FinderTopic) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTopic.ProtoReflect.Descriptor instead.
func (*FinderTopic) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{98}
}

func (x *FinderTopic) GetFinderTopicInfo() string {
	if x != nil && x.FinderTopicInfo != nil {
		return *x.FinderTopicInfo
	}
	return ""
}

type FinderMentionedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Source   *uint32 `protobuf:"varint,2,opt,name=source" json:"source,omitempty"`
	Nickname *string `protobuf:"bytes,3,opt,name=nickname" json:"nickname,omitempty"`
}

func (x *FinderMentionedUser) Reset() {
	*x = FinderMentionedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMentionedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMentionedUser) ProtoMessage() {}

func (x *FinderMentionedUser) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMentionedUser.ProtoReflect.Descriptor instead.
func (*FinderMentionedUser) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{99}
}

func (x *FinderMentionedUser) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderMentionedUser) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *FinderMentionedUser) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

type FinderLiveDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveCoverUrl *string `protobuf:"bytes,1,opt,name=liveCoverUrl" json:"liveCoverUrl,omitempty"`
	LiveFrameUrl *string `protobuf:"bytes,2,opt,name=liveFrameUrl" json:"liveFrameUrl,omitempty"`
}

func (x *FinderLiveDesc) Reset() {
	*x = FinderLiveDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveDesc) ProtoMessage() {}

func (x *FinderLiveDesc) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveDesc.ProtoReflect.Descriptor instead.
func (*FinderLiveDesc) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{100}
}

func (x *FinderLiveDesc) GetLiveCoverUrl() string {
	if x != nil && x.LiveCoverUrl != nil {
		return *x.LiveCoverUrl
	}
	return ""
}

func (x *FinderLiveDesc) GetLiveFrameUrl() string {
	if x != nil && x.LiveFrameUrl != nil {
		return *x.LiveFrameUrl
	}
	return ""
}

type FinderMusicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId             *string `protobuf:"bytes,1,opt,name=docId" json:"docId,omitempty"`
	AlbumThumbUrl     *string `protobuf:"bytes,2,opt,name=albumThumbUrl" json:"albumThumbUrl,omitempty"`
	Name              *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Artist            *string `protobuf:"bytes,4,opt,name=artist" json:"artist,omitempty"`
	AlbumName         *string `protobuf:"bytes,5,opt,name=albumName" json:"albumName,omitempty"`
	MediaStreamingUrl *string `protobuf:"bytes,6,opt,name=mediaStreamingUrl" json:"mediaStreamingUrl,omitempty"`
	MiniappInfo       *string `protobuf:"bytes,7,opt,name=miniappInfo" json:"miniappInfo,omitempty"`
	WebUrl            *string `protobuf:"bytes,8,opt,name=webUrl" json:"webUrl,omitempty"`
	FloatThumbUrl     *string `protobuf:"bytes,9,opt,name=floatThumbUrl" json:"floatThumbUrl,omitempty"`
	MusicPlayLen      *uint32 `protobuf:"varint,10,opt,name=musicPlayLen" json:"musicPlayLen,omitempty"`
	ChorusBegin       *uint32 `protobuf:"varint,11,opt,name=chorusBegin" json:"chorusBegin,omitempty"`
}

func (x *FinderMusicInfo) Reset() {
	*x = FinderMusicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMusicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMusicInfo) ProtoMessage() {}

func (x *FinderMusicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMusicInfo.ProtoReflect.Descriptor instead.
func (*FinderMusicInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{101}
}

func (x *FinderMusicInfo) GetDocId() string {
	if x != nil && x.DocId != nil {
		return *x.DocId
	}
	return ""
}

func (x *FinderMusicInfo) GetAlbumThumbUrl() string {
	if x != nil && x.AlbumThumbUrl != nil {
		return *x.AlbumThumbUrl
	}
	return ""
}

func (x *FinderMusicInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FinderMusicInfo) GetArtist() string {
	if x != nil && x.Artist != nil {
		return *x.Artist
	}
	return ""
}

func (x *FinderMusicInfo) GetAlbumName() string {
	if x != nil && x.AlbumName != nil {
		return *x.AlbumName
	}
	return ""
}

func (x *FinderMusicInfo) GetMediaStreamingUrl() string {
	if x != nil && x.MediaStreamingUrl != nil {
		return *x.MediaStreamingUrl
	}
	return ""
}

func (x *FinderMusicInfo) GetMiniappInfo() string {
	if x != nil && x.MiniappInfo != nil {
		return *x.MiniappInfo
	}
	return ""
}

func (x *FinderMusicInfo) GetWebUrl() string {
	if x != nil && x.WebUrl != nil {
		return *x.WebUrl
	}
	return ""
}

func (x *FinderMusicInfo) GetFloatThumbUrl() string {
	if x != nil && x.FloatThumbUrl != nil {
		return *x.FloatThumbUrl
	}
	return ""
}

func (x *FinderMusicInfo) GetMusicPlayLen() uint32 {
	if x != nil && x.MusicPlayLen != nil {
		return *x.MusicPlayLen
	}
	return 0
}

func (x *FinderMusicInfo) GetChorusBegin() uint32 {
	if x != nil && x.ChorusBegin != nil {
		return *x.ChorusBegin
	}
	return 0
}

type FinderMentionedMusic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId     *string          `protobuf:"bytes,1,opt,name=docId" json:"docId,omitempty"`
	MusicInfo *FinderMusicInfo `protobuf:"bytes,2,opt,name=musicInfo" json:"musicInfo,omitempty"`
}

func (x *FinderMentionedMusic) Reset() {
	*x = FinderMentionedMusic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMentionedMusic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMentionedMusic) ProtoMessage() {}

func (x *FinderMentionedMusic) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMentionedMusic.ProtoReflect.Descriptor instead.
func (*FinderMentionedMusic) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{102}
}

func (x *FinderMentionedMusic) GetDocId() string {
	if x != nil && x.DocId != nil {
		return *x.DocId
	}
	return ""
}

func (x *FinderMentionedMusic) GetMusicInfo() *FinderMusicInfo {
	if x != nil {
		return x.MusicInfo
	}
	return nil
}

type FinderLongVideoDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId      *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	ObjectNonceId *string `protobuf:"bytes,2,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	Description   *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (x *FinderLongVideoDesc) Reset() {
	*x = FinderLongVideoDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLongVideoDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLongVideoDesc) ProtoMessage() {}

func (x *FinderLongVideoDesc) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLongVideoDesc.ProtoReflect.Descriptor instead.
func (*FinderLongVideoDesc) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{103}
}

func (x *FinderLongVideoDesc) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderLongVideoDesc) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderLongVideoDesc) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type FinderObjectBGMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicInfo *FinderMusicInfo `protobuf:"bytes,1,opt,name=musicInfo" json:"musicInfo,omitempty"`
	GroupId   *string          `protobuf:"bytes,2,opt,name=groupId" json:"groupId,omitempty"`
	HasBgm    *uint32          `protobuf:"varint,3,opt,name=hasBgm" json:"hasBgm,omitempty"`
}

func (x *FinderObjectBGMInfo) Reset() {
	*x = FinderObjectBGMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectBGMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectBGMInfo) ProtoMessage() {}

func (x *FinderObjectBGMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectBGMInfo.ProtoReflect.Descriptor instead.
func (*FinderObjectBGMInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{104}
}

func (x *FinderObjectBGMInfo) GetMusicInfo() *FinderMusicInfo {
	if x != nil {
		return x.MusicInfo
	}
	return nil
}

func (x *FinderObjectBGMInfo) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *FinderObjectBGMInfo) GetHasBgm() uint32 {
	if x != nil && x.HasBgm != nil {
		return *x.HasBgm
	}
	return 0
}

type FinderFromAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid   *string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Icon    *string `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	Title   *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Link    *string `protobuf:"bytes,4,opt,name=link" json:"link,omitempty"`
	UiStyle *uint64 `protobuf:"varint,5,opt,name=uiStyle" json:"uiStyle,omitempty"`
	ExtInfo *string `protobuf:"bytes,6,opt,name=extInfo" json:"extInfo,omitempty"`
	Source  *uint32 `protobuf:"varint,7,opt,name=source" json:"source,omitempty"`
}

func (x *FinderFromAppInfo) Reset() {
	*x = FinderFromAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFromAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFromAppInfo) ProtoMessage() {}

func (x *FinderFromAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFromAppInfo.ProtoReflect.Descriptor instead.
func (*FinderFromAppInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{105}
}

func (x *FinderFromAppInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *FinderFromAppInfo) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *FinderFromAppInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderFromAppInfo) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *FinderFromAppInfo) GetUiStyle() uint64 {
	if x != nil && x.UiStyle != nil {
		return *x.UiStyle
	}
	return 0
}

func (x *FinderFromAppInfo) GetExtInfo() string {
	if x != nil && x.ExtInfo != nil {
		return *x.ExtInfo
	}
	return ""
}

func (x *FinderFromAppInfo) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

type FinderTemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId   *string `protobuf:"bytes,1,opt,name=templateId" json:"templateId,omitempty"`
	TemplateType *uint32 `protobuf:"varint,2,opt,name=templateType" json:"templateType,omitempty"`
	ExtInfo      []byte  `protobuf:"bytes,3,opt,name=extInfo" json:"extInfo,omitempty"`
}

func (x *FinderTemplateInfo) Reset() {
	*x = FinderTemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTemplateInfo) ProtoMessage() {}

func (x *FinderTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTemplateInfo.ProtoReflect.Descriptor instead.
func (*FinderTemplateInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{106}
}

func (x *FinderTemplateInfo) GetTemplateId() string {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return ""
}

func (x *FinderTemplateInfo) GetTemplateType() uint32 {
	if x != nil && x.TemplateType != nil {
		return *x.TemplateType
	}
	return 0
}

func (x *FinderTemplateInfo) GetExtInfo() []byte {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

type FinderEventWordingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedPrefix               *string `protobuf:"bytes,1,opt,name=feedPrefix" json:"feedPrefix,omitempty"`
	DescribePrefix           *string `protobuf:"bytes,2,opt,name=describePrefix" json:"describePrefix,omitempty"`
	JoininTimes              *string `protobuf:"bytes,3,opt,name=joininTimes" json:"joininTimes,omitempty"`
	JoininButton             *string `protobuf:"bytes,4,opt,name=joininButton" json:"joininButton,omitempty"`
	PageDescribe             *string `protobuf:"bytes,5,opt,name=pageDescribe" json:"pageDescribe,omitempty"`
	ShowPageDescribe         *bool   `protobuf:"varint,6,opt,name=showPageDescribe" json:"showPageDescribe,omitempty"`
	ShowPageNotice           *bool   `protobuf:"varint,7,opt,name=showPageNotice" json:"showPageNotice,omitempty"`
	EndButton                *string `protobuf:"bytes,8,opt,name=endButton" json:"endButton,omitempty"`
	ShareFrom                *string `protobuf:"bytes,9,opt,name=shareFrom" json:"shareFrom,omitempty"`
	ExitButton               *string `protobuf:"bytes,10,opt,name=exitButton" json:"exitButton,omitempty"`
	ExitHint                 *string `protobuf:"bytes,11,opt,name=exitHint" json:"exitHint,omitempty"`
	CustomJoininTimesWording *string `protobuf:"bytes,12,opt,name=customJoininTimesWording" json:"customJoininTimesWording,omitempty"`
}

func (x *FinderEventWordingInfo) Reset() {
	*x = FinderEventWordingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderEventWordingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderEventWordingInfo) ProtoMessage() {}

func (x *FinderEventWordingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderEventWordingInfo.ProtoReflect.Descriptor instead.
func (*FinderEventWordingInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{107}
}

func (x *FinderEventWordingInfo) GetFeedPrefix() string {
	if x != nil && x.FeedPrefix != nil {
		return *x.FeedPrefix
	}
	return ""
}

func (x *FinderEventWordingInfo) GetDescribePrefix() string {
	if x != nil && x.DescribePrefix != nil {
		return *x.DescribePrefix
	}
	return ""
}

func (x *FinderEventWordingInfo) GetJoininTimes() string {
	if x != nil && x.JoininTimes != nil {
		return *x.JoininTimes
	}
	return ""
}

func (x *FinderEventWordingInfo) GetJoininButton() string {
	if x != nil && x.JoininButton != nil {
		return *x.JoininButton
	}
	return ""
}

func (x *FinderEventWordingInfo) GetPageDescribe() string {
	if x != nil && x.PageDescribe != nil {
		return *x.PageDescribe
	}
	return ""
}

func (x *FinderEventWordingInfo) GetShowPageDescribe() bool {
	if x != nil && x.ShowPageDescribe != nil {
		return *x.ShowPageDescribe
	}
	return false
}

func (x *FinderEventWordingInfo) GetShowPageNotice() bool {
	if x != nil && x.ShowPageNotice != nil {
		return *x.ShowPageNotice
	}
	return false
}

func (x *FinderEventWordingInfo) GetEndButton() string {
	if x != nil && x.EndButton != nil {
		return *x.EndButton
	}
	return ""
}

func (x *FinderEventWordingInfo) GetShareFrom() string {
	if x != nil && x.ShareFrom != nil {
		return *x.ShareFrom
	}
	return ""
}

func (x *FinderEventWordingInfo) GetExitButton() string {
	if x != nil && x.ExitButton != nil {
		return *x.ExitButton
	}
	return ""
}

func (x *FinderEventWordingInfo) GetExitHint() string {
	if x != nil && x.ExitHint != nil {
		return *x.ExitHint
	}
	return ""
}

func (x *FinderEventWordingInfo) GetCustomJoininTimesWording() string {
	if x != nil && x.CustomJoininTimesWording != nil {
		return *x.CustomJoininTimesWording
	}
	return ""
}

type FinderObjectEventDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTopicId         *uint64                 `protobuf:"varint,1,opt,name=eventTopicId" json:"eventTopicId,omitempty"`
	EventName            *string                 `protobuf:"bytes,2,opt,name=eventName" json:"eventName,omitempty"`
	EventCreatorNickname *string                 `protobuf:"bytes,3,opt,name=eventCreatorNickname" json:"eventCreatorNickname,omitempty"`
	EventAttendCount     *uint32                 `protobuf:"varint,4,opt,name=eventAttendCount" json:"eventAttendCount,omitempty"`
	WordingInfo          *FinderEventWordingInfo `protobuf:"bytes,5,opt,name=wordingInfo" json:"wordingInfo,omitempty"`
	HiddenMark           *uint64                 `protobuf:"varint,6,opt,name=hiddenMark" json:"hiddenMark,omitempty"`
}

func (x *FinderObjectEventDesc) Reset() {
	*x = FinderObjectEventDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectEventDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectEventDesc) ProtoMessage() {}

func (x *FinderObjectEventDesc) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectEventDesc.ProtoReflect.Descriptor instead.
func (*FinderObjectEventDesc) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{108}
}

func (x *FinderObjectEventDesc) GetEventTopicId() uint64 {
	if x != nil && x.EventTopicId != nil {
		return *x.EventTopicId
	}
	return 0
}

func (x *FinderObjectEventDesc) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *FinderObjectEventDesc) GetEventCreatorNickname() string {
	if x != nil && x.EventCreatorNickname != nil {
		return *x.EventCreatorNickname
	}
	return ""
}

func (x *FinderObjectEventDesc) GetEventAttendCount() uint32 {
	if x != nil && x.EventAttendCount != nil {
		return *x.EventAttendCount
	}
	return 0
}

func (x *FinderObjectEventDesc) GetWordingInfo() *FinderEventWordingInfo {
	if x != nil {
		return x.WordingInfo
	}
	return nil
}

func (x *FinderObjectEventDesc) GetHiddenMark() uint64 {
	if x != nil && x.HiddenMark != nil {
		return *x.HiddenMark
	}
	return 0
}

type FinderMVInfo_ClientDraftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DraftObjectId       *uint64 `protobuf:"varint,1,opt,name=draftObjectId" json:"draftObjectId,omitempty"`
	DraftNonceId        *string `protobuf:"bytes,2,opt,name=draftNonceId" json:"draftNonceId,omitempty"`
	DraftSource         *uint32 `protobuf:"varint,3,opt,name=draftSource" json:"draftSource,omitempty"`
	PostingClipOffsetMs *uint64 `protobuf:"varint,4,opt,name=postingClipOffsetMs" json:"postingClipOffsetMs,omitempty"`
}

func (x *FinderMVInfo_ClientDraftInfo) Reset() {
	*x = FinderMVInfo_ClientDraftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMVInfo_ClientDraftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMVInfo_ClientDraftInfo) ProtoMessage() {}

func (x *FinderMVInfo_ClientDraftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMVInfo_ClientDraftInfo.ProtoReflect.Descriptor instead.
func (*FinderMVInfo_ClientDraftInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{109}
}

func (x *FinderMVInfo_ClientDraftInfo) GetDraftObjectId() uint64 {
	if x != nil && x.DraftObjectId != nil {
		return *x.DraftObjectId
	}
	return 0
}

func (x *FinderMVInfo_ClientDraftInfo) GetDraftNonceId() string {
	if x != nil && x.DraftNonceId != nil {
		return *x.DraftNonceId
	}
	return ""
}

func (x *FinderMVInfo_ClientDraftInfo) GetDraftSource() uint32 {
	if x != nil && x.DraftSource != nil {
		return *x.DraftSource
	}
	return 0
}

func (x *FinderMVInfo_ClientDraftInfo) GetPostingClipOffsetMs() uint64 {
	if x != nil && x.PostingClipOffsetMs != nil {
		return *x.PostingClipOffsetMs
	}
	return 0
}

type FinderMVInfo_FinderMVTrackReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalMaterialId                 *string `protobuf:"bytes,1,opt,name=localMaterialId" json:"localMaterialId,omitempty"`
	LocalMaterialTimeOffsetInClipMs *uint64 `protobuf:"varint,2,opt,name=localMaterialTimeOffsetInClipMs" json:"localMaterialTimeOffsetInClipMs,omitempty"`
}

func (x *FinderMVInfo_FinderMVTrackReportInfo) Reset() {
	*x = FinderMVInfo_FinderMVTrackReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMVInfo_FinderMVTrackReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMVInfo_FinderMVTrackReportInfo) ProtoMessage() {}

func (x *FinderMVInfo_FinderMVTrackReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMVInfo_FinderMVTrackReportInfo.ProtoReflect.Descriptor instead.
func (*FinderMVInfo_FinderMVTrackReportInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{110}
}

func (x *FinderMVInfo_FinderMVTrackReportInfo) GetLocalMaterialId() string {
	if x != nil && x.LocalMaterialId != nil {
		return *x.LocalMaterialId
	}
	return ""
}

func (x *FinderMVInfo_FinderMVTrackReportInfo) GetLocalMaterialTimeOffsetInClipMs() uint64 {
	if x != nil && x.LocalMaterialTimeOffsetInClipMs != nil {
		return *x.LocalMaterialTimeOffsetInClipMs
	}
	return 0
}

type FinderMVInfo_FinderMVTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeOffsetInMvMs   *uint64                               `protobuf:"varint,1,opt,name=timeOffsetInMvMs" json:"timeOffsetInMvMs,omitempty"`
	TimeLengthInMvMs   *uint32                               `protobuf:"varint,2,opt,name=timeLengthInMvMs" json:"timeLengthInMvMs,omitempty"`
	RefObjectId        *uint64                               `protobuf:"varint,3,opt,name=refObjectId" json:"refObjectId,omitempty"`
	RefNonceid         *string                               `protobuf:"bytes,4,opt,name=refNonceid" json:"refNonceid,omitempty"`
	TimeOffsetInClipMs *uint64                               `protobuf:"varint,5,opt,name=timeOffsetInClipMs" json:"timeOffsetInClipMs,omitempty"`
	FillMode           *uint32                               `protobuf:"varint,6,opt,name=fillMode" json:"fillMode,omitempty"`
	IsFirstUpload      *uint32                               `protobuf:"varint,7,opt,name=isFirstUpload" json:"isFirstUpload,omitempty"`
	ClientDraftInfo    *FinderMVInfo_ClientDraftInfo         `protobuf:"bytes,8,opt,name=clientDraftInfo" json:"clientDraftInfo,omitempty"`
	RefObjectContact   *FinderContact                        `protobuf:"bytes,9,opt,name=refObjectContact" json:"refObjectContact,omitempty"`
	VideoPlayRate      *float32                              `protobuf:"fixed32,10,opt,name=videoPlayRate" json:"videoPlayRate,omitempty"`
	TransitionId       *string                               `protobuf:"bytes,11,opt,name=transitionId" json:"transitionId,omitempty"`
	FeatureList        []uint32                              `protobuf:"varint,12,rep,name=featureList" json:"featureList,omitempty"`
	ImageAnimationType *uint32                               `protobuf:"varint,13,opt,name=imageAnimationType" json:"imageAnimationType,omitempty"`
	MaterialType       *uint32                               `protobuf:"varint,14,opt,name=materialType" json:"materialType,omitempty"`
	TrackReportInfo    *FinderMVInfo_FinderMVTrackReportInfo `protobuf:"bytes,15,opt,name=trackReportInfo" json:"trackReportInfo,omitempty"`
}

func (x *FinderMVInfo_FinderMVTrack) Reset() {
	*x = FinderMVInfo_FinderMVTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMVInfo_FinderMVTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMVInfo_FinderMVTrack) ProtoMessage() {}

func (x *FinderMVInfo_FinderMVTrack) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMVInfo_FinderMVTrack.ProtoReflect.Descriptor instead.
func (*FinderMVInfo_FinderMVTrack) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{111}
}

func (x *FinderMVInfo_FinderMVTrack) GetTimeOffsetInMvMs() uint64 {
	if x != nil && x.TimeOffsetInMvMs != nil {
		return *x.TimeOffsetInMvMs
	}
	return 0
}

func (x *FinderMVInfo_FinderMVTrack) GetTimeLengthInMvMs() uint32 {
	if x != nil && x.TimeLengthInMvMs != nil {
		return *x.TimeLengthInMvMs
	}
	return 0
}

func (x *FinderMVInfo_FinderMVTrack) GetRefObjectId() uint64 {
	if x != nil && x.RefObjectId != nil {
		return *x.RefObjectId
	}
	return 0
}

func (x *FinderMVInfo_FinderMVTrack) GetRefNonceid() string {
	if x != nil && x.RefNonceid != nil {
		return *x.RefNonceid
	}
	return ""
}

func (x *FinderMVInfo_FinderMVTrack) GetTimeOffsetInClipMs() uint64 {
	if x != nil && x.TimeOffsetInClipMs != nil {
		return *x.TimeOffsetInClipMs
	}
	return 0
}

func (x *FinderMVInfo_FinderMVTrack) GetFillMode() uint32 {
	if x != nil && x.FillMode != nil {
		return *x.FillMode
	}
	return 0
}

func (x *FinderMVInfo_FinderMVTrack) GetIsFirstUpload() uint32 {
	if x != nil && x.IsFirstUpload != nil {
		return *x.IsFirstUpload
	}
	return 0
}

func (x *FinderMVInfo_FinderMVTrack) GetClientDraftInfo() *FinderMVInfo_ClientDraftInfo {
	if x != nil {
		return x.ClientDraftInfo
	}
	return nil
}

func (x *FinderMVInfo_FinderMVTrack) GetRefObjectContact() *FinderContact {
	if x != nil {
		return x.RefObjectContact
	}
	return nil
}

func (x *FinderMVInfo_FinderMVTrack) GetVideoPlayRate() float32 {
	if x != nil && x.VideoPlayRate != nil {
		return *x.VideoPlayRate
	}
	return 0
}

func (x *FinderMVInfo_FinderMVTrack) GetTransitionId() string {
	if x != nil && x.TransitionId != nil {
		return *x.TransitionId
	}
	return ""
}

func (x *FinderMVInfo_FinderMVTrack) GetFeatureList() []uint32 {
	if x != nil {
		return x.FeatureList
	}
	return nil
}

func (x *FinderMVInfo_FinderMVTrack) GetImageAnimationType() uint32 {
	if x != nil && x.ImageAnimationType != nil {
		return *x.ImageAnimationType
	}
	return 0
}

func (x *FinderMVInfo_FinderMVTrack) GetMaterialType() uint32 {
	if x != nil && x.MaterialType != nil {
		return *x.MaterialType
	}
	return 0
}

func (x *FinderMVInfo_FinderMVTrack) GetTrackReportInfo() *FinderMVInfo_FinderMVTrackReportInfo {
	if x != nil {
		return x.TrackReportInfo
	}
	return nil
}

type FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicOperationUrl *string `protobuf:"bytes,1,opt,name=musicOperationUrl" json:"musicOperationUrl,omitempty"`
}

func (x *FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo) Reset() {
	*x = FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo) ProtoMessage() {}

func (x *FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo.ProtoReflect.Descriptor instead.
func (*FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{112}
}

func (x *FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo) GetMusicOperationUrl() string {
	if x != nil && x.MusicOperationUrl != nil {
		return *x.MusicOperationUrl
	}
	return ""
}

type FinderMVInfo_FinderMVSongInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SongName           *string                                                  `protobuf:"bytes,1,opt,name=songName" json:"songName,omitempty"`
	Singer             *string                                                  `protobuf:"bytes,2,opt,name=singer" json:"singer,omitempty"`
	MusicDataUrl       *string                                                  `protobuf:"bytes,3,opt,name=musicDataUrl" json:"musicDataUrl,omitempty"`
	MusicAppid         *string                                                  `protobuf:"bytes,4,opt,name=musicAppid" json:"musicAppid,omitempty"`
	MusicWeburl        *string                                                  `protobuf:"bytes,5,opt,name=musicWeburl" json:"musicWeburl,omitempty"`
	SongId             *string                                                  `protobuf:"bytes,6,opt,name=songId" json:"songId,omitempty"`
	Lyric              *string                                                  `protobuf:"bytes,7,opt,name=lyric" json:"lyric,omitempty"`
	AlbumName          *string                                                  `protobuf:"bytes,8,opt,name=albumName" json:"albumName,omitempty"`
	AlbumUrl           *string                                                  `protobuf:"bytes,9,opt,name=albumUrl" json:"albumUrl,omitempty"`
	Genre              *string                                                  `protobuf:"bytes,10,opt,name=genre" json:"genre,omitempty"`
	PublicTime         *string                                                  `protobuf:"bytes,11,opt,name=publicTime" json:"publicTime,omitempty"`
	PublicTimeS        *uint64                                                  `protobuf:"varint,12,opt,name=publicTimeS" json:"publicTimeS,omitempty"`
	ExtraInfo          *string                                                  `protobuf:"bytes,13,opt,name=extraInfo" json:"extraInfo,omitempty"`
	Identification     *string                                                  `protobuf:"bytes,14,opt,name=identification" json:"identification,omitempty"`
	Duration           *uint32                                                  `protobuf:"varint,15,opt,name=duration" json:"duration,omitempty"`
	Copyright          *bool                                                    `protobuf:"varint,16,opt,name=copyright" json:"copyright,omitempty"`
	AndroidDownloadUrl *string                                                  `protobuf:"bytes,17,opt,name=androidDownloadUrl" json:"androidDownloadUrl,omitempty"`
	OperationInfo      *FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo `protobuf:"bytes,18,opt,name=operationInfo" json:"operationInfo,omitempty"`
	Mid                *string                                                  `protobuf:"bytes,19,opt,name=mid" json:"mid,omitempty"`
}

func (x *FinderMVInfo_FinderMVSongInfo) Reset() {
	*x = FinderMVInfo_FinderMVSongInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMVInfo_FinderMVSongInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMVInfo_FinderMVSongInfo) ProtoMessage() {}

func (x *FinderMVInfo_FinderMVSongInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMVInfo_FinderMVSongInfo.ProtoReflect.Descriptor instead.
func (*FinderMVInfo_FinderMVSongInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{113}
}

func (x *FinderMVInfo_FinderMVSongInfo) GetSongName() string {
	if x != nil && x.SongName != nil {
		return *x.SongName
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetSinger() string {
	if x != nil && x.Singer != nil {
		return *x.Singer
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetMusicDataUrl() string {
	if x != nil && x.MusicDataUrl != nil {
		return *x.MusicDataUrl
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetMusicAppid() string {
	if x != nil && x.MusicAppid != nil {
		return *x.MusicAppid
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetMusicWeburl() string {
	if x != nil && x.MusicWeburl != nil {
		return *x.MusicWeburl
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetSongId() string {
	if x != nil && x.SongId != nil {
		return *x.SongId
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetLyric() string {
	if x != nil && x.Lyric != nil {
		return *x.Lyric
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetAlbumName() string {
	if x != nil && x.AlbumName != nil {
		return *x.AlbumName
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetAlbumUrl() string {
	if x != nil && x.AlbumUrl != nil {
		return *x.AlbumUrl
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetGenre() string {
	if x != nil && x.Genre != nil {
		return *x.Genre
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetPublicTime() string {
	if x != nil && x.PublicTime != nil {
		return *x.PublicTime
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetPublicTimeS() uint64 {
	if x != nil && x.PublicTimeS != nil {
		return *x.PublicTimeS
	}
	return 0
}

func (x *FinderMVInfo_FinderMVSongInfo) GetExtraInfo() string {
	if x != nil && x.ExtraInfo != nil {
		return *x.ExtraInfo
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetIdentification() string {
	if x != nil && x.Identification != nil {
		return *x.Identification
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *FinderMVInfo_FinderMVSongInfo) GetCopyright() bool {
	if x != nil && x.Copyright != nil {
		return *x.Copyright
	}
	return false
}

func (x *FinderMVInfo_FinderMVSongInfo) GetAndroidDownloadUrl() string {
	if x != nil && x.AndroidDownloadUrl != nil {
		return *x.AndroidDownloadUrl
	}
	return ""
}

func (x *FinderMVInfo_FinderMVSongInfo) GetOperationInfo() *FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo {
	if x != nil {
		return x.OperationInfo
	}
	return nil
}

func (x *FinderMVInfo_FinderMVSongInfo) GetMid() string {
	if x != nil && x.Mid != nil {
		return *x.Mid
	}
	return ""
}

type FinderMVInfo_FinderMVOriginalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Originality *float32 `protobuf:"fixed32,1,opt,name=originality" json:"originality,omitempty"`
	Completion  *float32 `protobuf:"fixed32,2,opt,name=completion" json:"completion,omitempty"`
}

func (x *FinderMVInfo_FinderMVOriginalInfo) Reset() {
	*x = FinderMVInfo_FinderMVOriginalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMVInfo_FinderMVOriginalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMVInfo_FinderMVOriginalInfo) ProtoMessage() {}

func (x *FinderMVInfo_FinderMVOriginalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMVInfo_FinderMVOriginalInfo.ProtoReflect.Descriptor instead.
func (*FinderMVInfo_FinderMVOriginalInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{114}
}

func (x *FinderMVInfo_FinderMVOriginalInfo) GetOriginality() float32 {
	if x != nil && x.Originality != nil {
		return *x.Originality
	}
	return 0
}

func (x *FinderMVInfo_FinderMVOriginalInfo) GetCompletion() float32 {
	if x != nil && x.Completion != nil {
		return *x.Completion
	}
	return 0
}

type FinderMVInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderedTrackList         []*FinderMVInfo_FinderMVTrack      `protobuf:"bytes,1,rep,name=orderedTrackList" json:"orderedTrackList,omitempty"`
	SongInfo                 *FinderMVInfo_FinderMVSongInfo     `protobuf:"bytes,2,opt,name=songInfo" json:"songInfo,omitempty"`
	OriginalInfo             *FinderMVInfo_FinderMVOriginalInfo `protobuf:"bytes,3,opt,name=originalInfo" json:"originalInfo,omitempty"`
	OrderedTrackListFlexClip []*FinderMVInfo_FinderMVTrack      `protobuf:"bytes,6,rep,name=orderedTrackListFlexClip" json:"orderedTrackListFlexClip,omitempty"`
	MvType                   *uint32                            `protobuf:"varint,7,opt,name=mvType" json:"mvType,omitempty"`
	DraftJumpPage            *uint32                            `protobuf:"varint,8,opt,name=draftJumpPage" json:"draftJumpPage,omitempty"`
}

func (x *FinderMVInfo) Reset() {
	*x = FinderMVInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMVInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMVInfo) ProtoMessage() {}

func (x *FinderMVInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMVInfo.ProtoReflect.Descriptor instead.
func (*FinderMVInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{115}
}

func (x *FinderMVInfo) GetOrderedTrackList() []*FinderMVInfo_FinderMVTrack {
	if x != nil {
		return x.OrderedTrackList
	}
	return nil
}

func (x *FinderMVInfo) GetSongInfo() *FinderMVInfo_FinderMVSongInfo {
	if x != nil {
		return x.SongInfo
	}
	return nil
}

func (x *FinderMVInfo) GetOriginalInfo() *FinderMVInfo_FinderMVOriginalInfo {
	if x != nil {
		return x.OriginalInfo
	}
	return nil
}

func (x *FinderMVInfo) GetOrderedTrackListFlexClip() []*FinderMVInfo_FinderMVTrack {
	if x != nil {
		return x.OrderedTrackListFlexClip
	}
	return nil
}

func (x *FinderMVInfo) GetMvType() uint32 {
	if x != nil && x.MvType != nil {
		return *x.MvType
	}
	return 0
}

func (x *FinderMVInfo) GetDraftJumpPage() uint32 {
	if x != nil && x.DraftJumpPage != nil {
		return *x.DraftJumpPage
	}
	return 0
}

type FinderTopicHashTagInfo_TopicHashTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	InnerTabType *uint32 `protobuf:"varint,2,opt,name=innerTabType" json:"innerTabType,omitempty"`
	TopicId      *uint64 `protobuf:"varint,3,opt,name=topicId" json:"topicId,omitempty"`
}

func (x *FinderTopicHashTagInfo_TopicHashTagInfo) Reset() {
	*x = FinderTopicHashTagInfo_TopicHashTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTopicHashTagInfo_TopicHashTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTopicHashTagInfo_TopicHashTagInfo) ProtoMessage() {}

func (x *FinderTopicHashTagInfo_TopicHashTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTopicHashTagInfo_TopicHashTagInfo.ProtoReflect.Descriptor instead.
func (*FinderTopicHashTagInfo_TopicHashTagInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{116}
}

func (x *FinderTopicHashTagInfo_TopicHashTagInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FinderTopicHashTagInfo_TopicHashTagInfo) GetInnerTabType() uint32 {
	if x != nil && x.InnerTabType != nil {
		return *x.InnerTabType
	}
	return 0
}

func (x *FinderTopicHashTagInfo_TopicHashTagInfo) GetTopicId() uint64 {
	if x != nil && x.TopicId != nil {
		return *x.TopicId
	}
	return 0
}

type FinderTopicHashTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*FinderTopicHashTagInfo_TopicHashTagInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (x *FinderTopicHashTagInfo) Reset() {
	*x = FinderTopicHashTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTopicHashTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTopicHashTagInfo) ProtoMessage() {}

func (x *FinderTopicHashTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTopicHashTagInfo.ProtoReflect.Descriptor instead.
func (*FinderTopicHashTagInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{117}
}

func (x *FinderTopicHashTagInfo) GetList() []*FinderTopicHashTagInfo_TopicHashTagInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type FinderEventDescriptionContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact *FinderContact `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
}

func (x *FinderEventDescriptionContact) Reset() {
	*x = FinderEventDescriptionContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderEventDescriptionContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderEventDescriptionContact) ProtoMessage() {}

func (x *FinderEventDescriptionContact) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderEventDescriptionContact.ProtoReflect.Descriptor instead.
func (*FinderEventDescriptionContact) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{118}
}

func (x *FinderEventDescriptionContact) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type FinderEventInfo_TemplateVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IosSdkVersionMin     *uint32 `protobuf:"varint,1,opt,name=iosSdkVersionMin" json:"iosSdkVersionMin,omitempty"`
	IosSdkVersionMax     *uint32 `protobuf:"varint,2,opt,name=iosSdkVersionMax" json:"iosSdkVersionMax,omitempty"`
	AndroidSdkVersionMin *uint32 `protobuf:"varint,3,opt,name=androidSdkVersionMin" json:"androidSdkVersionMin,omitempty"`
	AndroidSdkVersionMax *uint32 `protobuf:"varint,4,opt,name=androidSdkVersionMax" json:"androidSdkVersionMax,omitempty"`
}

func (x *FinderEventInfo_TemplateVersionInfo) Reset() {
	*x = FinderEventInfo_TemplateVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderEventInfo_TemplateVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderEventInfo_TemplateVersionInfo) ProtoMessage() {}

func (x *FinderEventInfo_TemplateVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderEventInfo_TemplateVersionInfo.ProtoReflect.Descriptor instead.
func (*FinderEventInfo_TemplateVersionInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{119}
}

func (x *FinderEventInfo_TemplateVersionInfo) GetIosSdkVersionMin() uint32 {
	if x != nil && x.IosSdkVersionMin != nil {
		return *x.IosSdkVersionMin
	}
	return 0
}

func (x *FinderEventInfo_TemplateVersionInfo) GetIosSdkVersionMax() uint32 {
	if x != nil && x.IosSdkVersionMax != nil {
		return *x.IosSdkVersionMax
	}
	return 0
}

func (x *FinderEventInfo_TemplateVersionInfo) GetAndroidSdkVersionMin() uint32 {
	if x != nil && x.AndroidSdkVersionMin != nil {
		return *x.AndroidSdkVersionMin
	}
	return 0
}

func (x *FinderEventInfo_TemplateVersionInfo) GetAndroidSdkVersionMax() uint32 {
	if x != nil && x.AndroidSdkVersionMax != nil {
		return *x.AndroidSdkVersionMax
	}
	return 0
}

type FinderEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTopicId           *uint64                              `protobuf:"varint,1,opt,name=eventTopicId" json:"eventTopicId,omitempty"`
	Contact                *FinderContact                       `protobuf:"bytes,2,opt,name=contact" json:"contact,omitempty"`
	EventName              *string                              `protobuf:"bytes,3,opt,name=eventName" json:"eventName,omitempty"`
	Description            *string                              `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	ParticipantCount       *uint32                              `protobuf:"varint,5,opt,name=participantCount" json:"participantCount,omitempty"`
	CoverImgUrl            *string                              `protobuf:"bytes,6,opt,name=coverImgUrl" json:"coverImgUrl,omitempty"`
	FromObjectId           *uint64                              `protobuf:"varint,7,opt,name=fromObjectId" json:"fromObjectId,omitempty"`
	FeedCount              *uint32                              `protobuf:"varint,8,opt,name=feedCount" json:"feedCount,omitempty"`
	MaxTopCount            *uint32                              `protobuf:"varint,9,opt,name=maxTopCount" json:"maxTopCount,omitempty"`
	WxappId                *string                              `protobuf:"bytes,10,opt,name=wxappId" json:"wxappId,omitempty"`
	WxappUrl               *string                              `protobuf:"bytes,11,opt,name=wxappUrl" json:"wxappUrl,omitempty"`
	WxappName              *string                              `protobuf:"bytes,12,opt,name=wxappName" json:"wxappName,omitempty"`
	CloseFlag              *uint32                              `protobuf:"varint,13,opt,name=closeFlag" json:"closeFlag,omitempty"`
	EndTime                *uint64                              `protobuf:"varint,14,opt,name=endTime" json:"endTime,omitempty"`
	AvailableFlag          *uint32                              `protobuf:"varint,15,opt,name=availableFlag" json:"availableFlag,omitempty"`
	JumpInfo               *FinderJumpInfo                      `protobuf:"bytes,16,opt,name=jumpInfo" json:"jumpInfo,omitempty"`
	HashTagInfo            *FinderTopicHashTagInfo              `protobuf:"bytes,17,opt,name=hashTagInfo" json:"hashTagInfo,omitempty"`
	HiddenMark             *uint64                              `protobuf:"varint,18,opt,name=hiddenMark" json:"hiddenMark,omitempty"`
	WordingInfo            *FinderEventWordingInfo              `protobuf:"bytes,19,opt,name=wordingInfo" json:"wordingInfo,omitempty"`
	DescriptionJumpInfo    *FinderJumpInfo                      `protobuf:"bytes,20,opt,name=descriptionJumpInfo" json:"descriptionJumpInfo,omitempty"`
	DescriptionContactInfo *FinderEventDescriptionContact       `protobuf:"bytes,21,opt,name=descriptionContactInfo" json:"descriptionContactInfo,omitempty"`
	AvailableTemplate      *uint32                              `protobuf:"varint,22,opt,name=availableTemplate" json:"availableTemplate,omitempty"`
	PostJumpList           []*FinderJumpInfo                    `protobuf:"bytes,23,rep,name=postJumpList" json:"postJumpList,omitempty"`
	PostWording            *string                              `protobuf:"bytes,24,opt,name=postWording" json:"postWording,omitempty"`
	TmplVersionInfo        *FinderEventInfo_TemplateVersionInfo `protobuf:"bytes,25,opt,name=tmplVersionInfo" json:"tmplVersionInfo,omitempty"`
}

func (x *FinderEventInfo) Reset() {
	*x = FinderEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderEventInfo) ProtoMessage() {}

func (x *FinderEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderEventInfo.ProtoReflect.Descriptor instead.
func (*FinderEventInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{120}
}

func (x *FinderEventInfo) GetEventTopicId() uint64 {
	if x != nil && x.EventTopicId != nil {
		return *x.EventTopicId
	}
	return 0
}

func (x *FinderEventInfo) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderEventInfo) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *FinderEventInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FinderEventInfo) GetParticipantCount() uint32 {
	if x != nil && x.ParticipantCount != nil {
		return *x.ParticipantCount
	}
	return 0
}

func (x *FinderEventInfo) GetCoverImgUrl() string {
	if x != nil && x.CoverImgUrl != nil {
		return *x.CoverImgUrl
	}
	return ""
}

func (x *FinderEventInfo) GetFromObjectId() uint64 {
	if x != nil && x.FromObjectId != nil {
		return *x.FromObjectId
	}
	return 0
}

func (x *FinderEventInfo) GetFeedCount() uint32 {
	if x != nil && x.FeedCount != nil {
		return *x.FeedCount
	}
	return 0
}

func (x *FinderEventInfo) GetMaxTopCount() uint32 {
	if x != nil && x.MaxTopCount != nil {
		return *x.MaxTopCount
	}
	return 0
}

func (x *FinderEventInfo) GetWxappId() string {
	if x != nil && x.WxappId != nil {
		return *x.WxappId
	}
	return ""
}

func (x *FinderEventInfo) GetWxappUrl() string {
	if x != nil && x.WxappUrl != nil {
		return *x.WxappUrl
	}
	return ""
}

func (x *FinderEventInfo) GetWxappName() string {
	if x != nil && x.WxappName != nil {
		return *x.WxappName
	}
	return ""
}

func (x *FinderEventInfo) GetCloseFlag() uint32 {
	if x != nil && x.CloseFlag != nil {
		return *x.CloseFlag
	}
	return 0
}

func (x *FinderEventInfo) GetEndTime() uint64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *FinderEventInfo) GetAvailableFlag() uint32 {
	if x != nil && x.AvailableFlag != nil {
		return *x.AvailableFlag
	}
	return 0
}

func (x *FinderEventInfo) GetJumpInfo() *FinderJumpInfo {
	if x != nil {
		return x.JumpInfo
	}
	return nil
}

func (x *FinderEventInfo) GetHashTagInfo() *FinderTopicHashTagInfo {
	if x != nil {
		return x.HashTagInfo
	}
	return nil
}

func (x *FinderEventInfo) GetHiddenMark() uint64 {
	if x != nil && x.HiddenMark != nil {
		return *x.HiddenMark
	}
	return 0
}

func (x *FinderEventInfo) GetWordingInfo() *FinderEventWordingInfo {
	if x != nil {
		return x.WordingInfo
	}
	return nil
}

func (x *FinderEventInfo) GetDescriptionJumpInfo() *FinderJumpInfo {
	if x != nil {
		return x.DescriptionJumpInfo
	}
	return nil
}

func (x *FinderEventInfo) GetDescriptionContactInfo() *FinderEventDescriptionContact {
	if x != nil {
		return x.DescriptionContactInfo
	}
	return nil
}

func (x *FinderEventInfo) GetAvailableTemplate() uint32 {
	if x != nil && x.AvailableTemplate != nil {
		return *x.AvailableTemplate
	}
	return 0
}

func (x *FinderEventInfo) GetPostJumpList() []*FinderJumpInfo {
	if x != nil {
		return x.PostJumpList
	}
	return nil
}

func (x *FinderEventInfo) GetPostWording() string {
	if x != nil && x.PostWording != nil {
		return *x.PostWording
	}
	return ""
}

func (x *FinderEventInfo) GetTmplVersionInfo() *FinderEventInfo_TemplateVersionInfo {
	if x != nil {
		return x.TmplVersionInfo
	}
	return nil
}

type FinderClientDraftExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitType  *uint32          `protobuf:"varint,1,opt,name=waitType" json:"waitType,omitempty"`
	EventInfo *FinderEventInfo `protobuf:"bytes,2,opt,name=eventInfo" json:"eventInfo,omitempty"`
}

func (x *FinderClientDraftExtInfo) Reset() {
	*x = FinderClientDraftExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderClientDraftExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderClientDraftExtInfo) ProtoMessage() {}

func (x *FinderClientDraftExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderClientDraftExtInfo.ProtoReflect.Descriptor instead.
func (*FinderClientDraftExtInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{121}
}

func (x *FinderClientDraftExtInfo) GetWaitType() uint32 {
	if x != nil && x.WaitType != nil {
		return *x.WaitType
	}
	return 0
}

func (x *FinderClientDraftExtInfo) GetEventInfo() *FinderEventInfo {
	if x != nil {
		return x.EventInfo
	}
	return nil
}

type FinderVideoTemplateInfo_VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IosSdkVersionMin     *uint32 `protobuf:"varint,1,opt,name=iosSdkVersionMin" json:"iosSdkVersionMin,omitempty"`
	IosSdkVersionMax     *uint32 `protobuf:"varint,2,opt,name=iosSdkVersionMax" json:"iosSdkVersionMax,omitempty"`
	AndroidSdkVersionMin *uint32 `protobuf:"varint,3,opt,name=androidSdkVersionMin" json:"androidSdkVersionMin,omitempty"`
	AndroidSdkVersionMax *uint32 `protobuf:"varint,4,opt,name=androidSdkVersionMax" json:"androidSdkVersionMax,omitempty"`
}

func (x *FinderVideoTemplateInfo_VersionInfo) Reset() {
	*x = FinderVideoTemplateInfo_VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderVideoTemplateInfo_VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderVideoTemplateInfo_VersionInfo) ProtoMessage() {}

func (x *FinderVideoTemplateInfo_VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderVideoTemplateInfo_VersionInfo.ProtoReflect.Descriptor instead.
func (*FinderVideoTemplateInfo_VersionInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{122}
}

func (x *FinderVideoTemplateInfo_VersionInfo) GetIosSdkVersionMin() uint32 {
	if x != nil && x.IosSdkVersionMin != nil {
		return *x.IosSdkVersionMin
	}
	return 0
}

func (x *FinderVideoTemplateInfo_VersionInfo) GetIosSdkVersionMax() uint32 {
	if x != nil && x.IosSdkVersionMax != nil {
		return *x.IosSdkVersionMax
	}
	return 0
}

func (x *FinderVideoTemplateInfo_VersionInfo) GetAndroidSdkVersionMin() uint32 {
	if x != nil && x.AndroidSdkVersionMin != nil {
		return *x.AndroidSdkVersionMin
	}
	return 0
}

func (x *FinderVideoTemplateInfo_VersionInfo) GetAndroidSdkVersionMax() uint32 {
	if x != nil && x.AndroidSdkVersionMax != nil {
		return *x.AndroidSdkVersionMax
	}
	return 0
}

type FinderVideoTemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *string                              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type           *uint32                              `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	SdkVersion     *uint32                              `protobuf:"varint,3,opt,name=sdkVersion" json:"sdkVersion,omitempty"`
	UsageCount     *uint32                              `protobuf:"varint,4,opt,name=usageCount" json:"usageCount,omitempty"`
	EntranceSource *uint32                              `protobuf:"varint,5,opt,name=entranceSource" json:"entranceSource,omitempty"`
	VersionInfo    *FinderVideoTemplateInfo_VersionInfo `protobuf:"bytes,6,opt,name=versionInfo" json:"versionInfo,omitempty"`
	MusicId        *string                              `protobuf:"bytes,7,opt,name=musicId" json:"musicId,omitempty"`
}

func (x *FinderVideoTemplateInfo) Reset() {
	*x = FinderVideoTemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderVideoTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderVideoTemplateInfo) ProtoMessage() {}

func (x *FinderVideoTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderVideoTemplateInfo.ProtoReflect.Descriptor instead.
func (*FinderVideoTemplateInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{123}
}

func (x *FinderVideoTemplateInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *FinderVideoTemplateInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderVideoTemplateInfo) GetSdkVersion() uint32 {
	if x != nil && x.SdkVersion != nil {
		return *x.SdkVersion
	}
	return 0
}

func (x *FinderVideoTemplateInfo) GetUsageCount() uint32 {
	if x != nil && x.UsageCount != nil {
		return *x.UsageCount
	}
	return 0
}

func (x *FinderVideoTemplateInfo) GetEntranceSource() uint32 {
	if x != nil && x.EntranceSource != nil {
		return *x.EntranceSource
	}
	return 0
}

func (x *FinderVideoTemplateInfo) GetVersionInfo() *FinderVideoTemplateInfo_VersionInfo {
	if x != nil {
		return x.VersionInfo
	}
	return nil
}

func (x *FinderVideoTemplateInfo) GetMusicId() string {
	if x != nil && x.MusicId != nil {
		return *x.MusicId
	}
	return ""
}

type FinderGeneralReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *string `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (x *FinderGeneralReportInfo) Reset() {
	*x = FinderGeneralReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGeneralReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGeneralReportInfo) ProtoMessage() {}

func (x *FinderGeneralReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGeneralReportInfo.ProtoReflect.Descriptor instead.
func (*FinderGeneralReportInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{124}
}

func (x *FinderGeneralReportInfo) GetInfo() string {
	if x != nil && x.Info != nil {
		return *x.Info
	}
	return ""
}

type OriginalSoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      *string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	SongName   *string `protobuf:"bytes,2,opt,name=songName" json:"songName,omitempty"`
	SingerName *string `protobuf:"bytes,3,opt,name=singerName" json:"singerName,omitempty"`
	ManualName *string `protobuf:"bytes,4,opt,name=manualName" json:"manualName,omitempty"`
}

func (x *OriginalSoundInfo) Reset() {
	*x = OriginalSoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginalSoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginalSoundInfo) ProtoMessage() {}

func (x *OriginalSoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginalSoundInfo.ProtoReflect.Descriptor instead.
func (*OriginalSoundInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{125}
}

func (x *OriginalSoundInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *OriginalSoundInfo) GetSongName() string {
	if x != nil && x.SongName != nil {
		return *x.SongName
	}
	return ""
}

func (x *OriginalSoundInfo) GetSingerName() string {
	if x != nil && x.SingerName != nil {
		return *x.SingerName
	}
	return ""
}

func (x *OriginalSoundInfo) GetManualName() string {
	if x != nil && x.ManualName != nil {
		return *x.ManualName
	}
	return ""
}

type FinderObjectDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description        *string                   `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Media              []*FinderMedia            `protobuf:"bytes,2,rep,name=media" json:"media,omitempty"`
	MediaType          *uint32                   `protobuf:"varint,3,opt,name=mediaType" json:"mediaType,omitempty"`
	Extra              *FinderMediaExtra         `protobuf:"bytes,4,opt,name=extra" json:"extra,omitempty"`
	Location           *FinderLocation           `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	ExtReading         *FinderExtendedReading    `protobuf:"bytes,6,opt,name=extReading" json:"extReading,omitempty"`
	Topic              *FinderTopic              `protobuf:"bytes,7,opt,name=topic" json:"topic,omitempty"`
	MentionedUser      []*FinderMentionedUser    `protobuf:"bytes,8,rep,name=mentionedUser" json:"mentionedUser,omitempty"`
	LiveDesc           *FinderLiveDesc           `protobuf:"bytes,9,opt,name=liveDesc" json:"liveDesc,omitempty"`
	FeedLocation       *FinderLocation           `protobuf:"bytes,10,opt,name=feedLocation" json:"feedLocation,omitempty"`
	MentionedMusics    []*FinderMentionedMusic   `protobuf:"bytes,11,rep,name=mentionedMusics" json:"mentionedMusics,omitempty"`
	LongVideoDesc      *FinderLongVideoDesc      `protobuf:"bytes,12,opt,name=longVideoDesc" json:"longVideoDesc,omitempty"`
	ImgFeedBgmInfo     *FinderMusicInfo          `protobuf:"bytes,13,opt,name=imgFeedBgmInfo" json:"imgFeedBgmInfo,omitempty"`
	FollowPostInfo     *FinderObjectBGMInfo      `protobuf:"bytes,14,opt,name=followPostInfo" json:"followPostInfo,omitempty"`
	FromApp            *FinderFromAppInfo        `protobuf:"bytes,15,opt,name=fromApp" json:"fromApp,omitempty"`
	TmplInfo           *FinderTemplateInfo       `protobuf:"bytes,16,opt,name=tmplInfo" json:"tmplInfo,omitempty"`
	Event              *FinderObjectEventDesc    `protobuf:"bytes,17,opt,name=event" json:"event,omitempty"`
	MvInfo             *FinderMVInfo             `protobuf:"bytes,18,opt,name=mvInfo" json:"mvInfo,omitempty"`
	DraftObjectId      *uint64                   `protobuf:"varint,19,opt,name=draftObjectId" json:"draftObjectId,omitempty"`
	ClientDraftExtInfo *FinderClientDraftExtInfo `protobuf:"bytes,20,opt,name=clientDraftExtInfo" json:"clientDraftExtInfo,omitempty"`
	MusicInfo          *FinderMusicInfo          `protobuf:"bytes,21,opt,name=musicInfo" json:"musicInfo,omitempty"`
	VideoTmplInfo      *FinderVideoTemplateInfo  `protobuf:"bytes,22,opt,name=videoTmplInfo" json:"videoTmplInfo,omitempty"`
	GeneralReportInfo  *FinderGeneralReportInfo  `protobuf:"bytes,23,opt,name=generalReportInfo" json:"generalReportInfo,omitempty"`
	OriginalsoundInfo  *OriginalSoundInfo        `protobuf:"bytes,24,opt,name=originalsoundInfo" json:"originalsoundInfo,omitempty"`
}

func (x *FinderObjectDesc) Reset() {
	*x = FinderObjectDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectDesc) ProtoMessage() {}

func (x *FinderObjectDesc) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectDesc.ProtoReflect.Descriptor instead.
func (*FinderObjectDesc) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{126}
}

func (x *FinderObjectDesc) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FinderObjectDesc) GetMedia() []*FinderMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *FinderObjectDesc) GetMediaType() uint32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *FinderObjectDesc) GetExtra() *FinderMediaExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *FinderObjectDesc) GetLocation() *FinderLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FinderObjectDesc) GetExtReading() *FinderExtendedReading {
	if x != nil {
		return x.ExtReading
	}
	return nil
}

func (x *FinderObjectDesc) GetTopic() *FinderTopic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *FinderObjectDesc) GetMentionedUser() []*FinderMentionedUser {
	if x != nil {
		return x.MentionedUser
	}
	return nil
}

func (x *FinderObjectDesc) GetLiveDesc() *FinderLiveDesc {
	if x != nil {
		return x.LiveDesc
	}
	return nil
}

func (x *FinderObjectDesc) GetFeedLocation() *FinderLocation {
	if x != nil {
		return x.FeedLocation
	}
	return nil
}

func (x *FinderObjectDesc) GetMentionedMusics() []*FinderMentionedMusic {
	if x != nil {
		return x.MentionedMusics
	}
	return nil
}

func (x *FinderObjectDesc) GetLongVideoDesc() *FinderLongVideoDesc {
	if x != nil {
		return x.LongVideoDesc
	}
	return nil
}

func (x *FinderObjectDesc) GetImgFeedBgmInfo() *FinderMusicInfo {
	if x != nil {
		return x.ImgFeedBgmInfo
	}
	return nil
}

func (x *FinderObjectDesc) GetFollowPostInfo() *FinderObjectBGMInfo {
	if x != nil {
		return x.FollowPostInfo
	}
	return nil
}

func (x *FinderObjectDesc) GetFromApp() *FinderFromAppInfo {
	if x != nil {
		return x.FromApp
	}
	return nil
}

func (x *FinderObjectDesc) GetTmplInfo() *FinderTemplateInfo {
	if x != nil {
		return x.TmplInfo
	}
	return nil
}

func (x *FinderObjectDesc) GetEvent() *FinderObjectEventDesc {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *FinderObjectDesc) GetMvInfo() *FinderMVInfo {
	if x != nil {
		return x.MvInfo
	}
	return nil
}

func (x *FinderObjectDesc) GetDraftObjectId() uint64 {
	if x != nil && x.DraftObjectId != nil {
		return *x.DraftObjectId
	}
	return 0
}

func (x *FinderObjectDesc) GetClientDraftExtInfo() *FinderClientDraftExtInfo {
	if x != nil {
		return x.ClientDraftExtInfo
	}
	return nil
}

func (x *FinderObjectDesc) GetMusicInfo() *FinderMusicInfo {
	if x != nil {
		return x.MusicInfo
	}
	return nil
}

func (x *FinderObjectDesc) GetVideoTmplInfo() *FinderVideoTemplateInfo {
	if x != nil {
		return x.VideoTmplInfo
	}
	return nil
}

func (x *FinderObjectDesc) GetGeneralReportInfo() *FinderGeneralReportInfo {
	if x != nil {
		return x.GeneralReportInfo
	}
	return nil
}

func (x *FinderObjectDesc) GetOriginalsoundInfo() *OriginalSoundInfo {
	if x != nil {
		return x.OriginalsoundInfo
	}
	return nil
}

type FinderCommentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username           *string               `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Nickname           *string               `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Content            *string               `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	CommentId          *uint64               `protobuf:"varint,4,opt,name=commentId" json:"commentId,omitempty"`
	ReplyCommentId     *uint64               `protobuf:"varint,5,opt,name=replyCommentId" json:"replyCommentId,omitempty"`
	DeleteFlag         *uint32               `protobuf:"varint,6,opt,name=deleteFlag" json:"deleteFlag,omitempty"`
	HeadUrl            *string               `protobuf:"bytes,7,opt,name=headUrl" json:"headUrl,omitempty"`
	LevelTwoComment    []*FinderCommentInfo  `protobuf:"bytes,8,rep,name=levelTwoComment" json:"levelTwoComment,omitempty"`
	Createtime         *uint64               `protobuf:"varint,9,opt,name=createtime" json:"createtime,omitempty"`
	ReplyNickname      *string               `protobuf:"bytes,10,opt,name=replyNickname" json:"replyNickname,omitempty"`
	DisplayidDiscarded *string               `protobuf:"bytes,11,opt,name=displayidDiscarded" json:"displayidDiscarded,omitempty"`
	LikeFlag           *uint32               `protobuf:"varint,12,opt,name=likeFlag" json:"likeFlag,omitempty"`
	LikeCount          *uint32               `protobuf:"varint,13,opt,name=likeCount" json:"likeCount,omitempty"`
	Displayid          *uint64               `protobuf:"varint,14,opt,name=displayid" json:"displayid,omitempty"`
	ExpandCommentCount *uint32               `protobuf:"varint,15,opt,name=expandCommentCount" json:"expandCommentCount,omitempty"`
	LastBuffer         []byte                `protobuf:"bytes,16,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag       *uint32               `protobuf:"varint,17,opt,name=continueFlag" json:"continueFlag,omitempty"`
	DisplayFlag        *uint32               `protobuf:"varint,18,opt,name=displayFlag" json:"displayFlag,omitempty"`
	BlacklistFlag      *uint32               `protobuf:"varint,19,opt,name=blacklistFlag" json:"blacklistFlag,omitempty"`
	ReplyContent       *string               `protobuf:"bytes,20,opt,name=replyContent" json:"replyContent,omitempty"`
	ReplyUsername      *string               `protobuf:"bytes,21,opt,name=replyUsername" json:"replyUsername,omitempty"`
	ClientId           *string               `protobuf:"bytes,22,opt,name=clientId" json:"clientId,omitempty"`
	UpContinueFlag     *uint32               `protobuf:"varint,23,opt,name=upContinueFlag" json:"upContinueFlag,omitempty"`
	ReplyBlacklistFlag *uint32               `protobuf:"varint,24,opt,name=replyBlacklistFlag" json:"replyBlacklistFlag,omitempty"`
	ExtFlag            *uint32               `protobuf:"varint,25,opt,name=extFlag" json:"extFlag,omitempty"`
	UnreadFlag         *uint32               `protobuf:"varint,26,opt,name=unreadFlag" json:"unreadFlag,omitempty"`
	MsgInfo            *FinderContactMsgInfo `protobuf:"bytes,27,opt,name=msgInfo" json:"msgInfo,omitempty"`
	AuthorContact      *FinderContact        `protobuf:"bytes,28,opt,name=authorContact" json:"authorContact,omitempty"`
	ReplyContact       *FinderContact        `protobuf:"bytes,29,opt,name=replyContact" json:"replyContact,omitempty"`
}

func (x *FinderCommentInfo) Reset() {
	*x = FinderCommentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCommentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCommentInfo) ProtoMessage() {}

func (x *FinderCommentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCommentInfo.ProtoReflect.Descriptor instead.
func (*FinderCommentInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{127}
}

func (x *FinderCommentInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderCommentInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderCommentInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *FinderCommentInfo) GetCommentId() uint64 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *FinderCommentInfo) GetReplyCommentId() uint64 {
	if x != nil && x.ReplyCommentId != nil {
		return *x.ReplyCommentId
	}
	return 0
}

func (x *FinderCommentInfo) GetDeleteFlag() uint32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetHeadUrl() string {
	if x != nil && x.HeadUrl != nil {
		return *x.HeadUrl
	}
	return ""
}

func (x *FinderCommentInfo) GetLevelTwoComment() []*FinderCommentInfo {
	if x != nil {
		return x.LevelTwoComment
	}
	return nil
}

func (x *FinderCommentInfo) GetCreatetime() uint64 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return 0
}

func (x *FinderCommentInfo) GetReplyNickname() string {
	if x != nil && x.ReplyNickname != nil {
		return *x.ReplyNickname
	}
	return ""
}

func (x *FinderCommentInfo) GetDisplayidDiscarded() string {
	if x != nil && x.DisplayidDiscarded != nil {
		return *x.DisplayidDiscarded
	}
	return ""
}

func (x *FinderCommentInfo) GetLikeFlag() uint32 {
	if x != nil && x.LikeFlag != nil {
		return *x.LikeFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetLikeCount() uint32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *FinderCommentInfo) GetDisplayid() uint64 {
	if x != nil && x.Displayid != nil {
		return *x.Displayid
	}
	return 0
}

func (x *FinderCommentInfo) GetExpandCommentCount() uint32 {
	if x != nil && x.ExpandCommentCount != nil {
		return *x.ExpandCommentCount
	}
	return 0
}

func (x *FinderCommentInfo) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderCommentInfo) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetDisplayFlag() uint32 {
	if x != nil && x.DisplayFlag != nil {
		return *x.DisplayFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetBlacklistFlag() uint32 {
	if x != nil && x.BlacklistFlag != nil {
		return *x.BlacklistFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetReplyContent() string {
	if x != nil && x.ReplyContent != nil {
		return *x.ReplyContent
	}
	return ""
}

func (x *FinderCommentInfo) GetReplyUsername() string {
	if x != nil && x.ReplyUsername != nil {
		return *x.ReplyUsername
	}
	return ""
}

func (x *FinderCommentInfo) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *FinderCommentInfo) GetUpContinueFlag() uint32 {
	if x != nil && x.UpContinueFlag != nil {
		return *x.UpContinueFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetReplyBlacklistFlag() uint32 {
	if x != nil && x.ReplyBlacklistFlag != nil {
		return *x.ReplyBlacklistFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetExtFlag() uint32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetUnreadFlag() uint32 {
	if x != nil && x.UnreadFlag != nil {
		return *x.UnreadFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetMsgInfo() *FinderContactMsgInfo {
	if x != nil {
		return x.MsgInfo
	}
	return nil
}

func (x *FinderCommentInfo) GetAuthorContact() *FinderContact {
	if x != nil {
		return x.AuthorContact
	}
	return nil
}

func (x *FinderCommentInfo) GetReplyContact() *FinderContact {
	if x != nil {
		return x.ReplyContact
	}
	return nil
}

type FinderLiveExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnchorStatusBuffer []byte `protobuf:"bytes,1,opt,name=anchorStatusBuffer" json:"anchorStatusBuffer,omitempty"`
}

func (x *FinderLiveExtInfo) Reset() {
	*x = FinderLiveExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveExtInfo) ProtoMessage() {}

func (x *FinderLiveExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveExtInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveExtInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{128}
}

func (x *FinderLiveExtInfo) GetAnchorStatusBuffer() []byte {
	if x != nil {
		return x.AnchorStatusBuffer
	}
	return nil
}

type FinderLiveSdkChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudienceMode *uint32 `protobuf:"varint,1,opt,name=audienceMode" json:"audienceMode,omitempty"`
}

func (x *FinderLiveSdkChannelInfo) Reset() {
	*x = FinderLiveSdkChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveSdkChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveSdkChannelInfo) ProtoMessage() {}

func (x *FinderLiveSdkChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveSdkChannelInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveSdkChannelInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{129}
}

func (x *FinderLiveSdkChannelInfo) GetAudienceMode() uint32 {
	if x != nil && x.AudienceMode != nil {
		return *x.AudienceMode
	}
	return 0
}

type FinderLiveTabInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabId                  *uint32              `protobuf:"varint,1,opt,name=tabId" json:"tabId,omitempty"`
	TabName                *string              `protobuf:"bytes,2,opt,name=tabName" json:"tabName,omitempty"`
	PrefechThisTab         *bool                `protobuf:"varint,3,opt,name=prefechThisTab" json:"prefechThisTab,omitempty"`
	PrefechNextTab         *bool                `protobuf:"varint,4,opt,name=prefechNextTab" json:"prefechNextTab,omitempty"`
	PrefechPreTab          *bool                `protobuf:"varint,5,opt,name=prefechPreTab" json:"prefechPreTab,omitempty"`
	PlayVoice              *bool                `protobuf:"varint,6,opt,name=playVoice" json:"playVoice,omitempty"`
	SubTabList             []*FinderLiveTabInfo `protobuf:"bytes,7,rep,name=subTabList" json:"subTabList,omitempty"`
	TabScene               *uint32              `protobuf:"varint,8,opt,name=tabScene" json:"tabScene,omitempty"`
	ObjectId               *uint64              `protobuf:"varint,9,opt,name=objectId" json:"objectId,omitempty"`
	IconUrl                *string              `protobuf:"bytes,10,opt,name=iconUrl" json:"iconUrl,omitempty"`
	IconWording            *string              `protobuf:"bytes,11,opt,name=iconWording" json:"iconWording,omitempty"`
	LiveSquareIconUrl      *string              `protobuf:"bytes,12,opt,name=liveSquareIconUrl" json:"liveSquareIconUrl,omitempty"`
	LiveSquareWordingColor []string             `protobuf:"bytes,13,rep,name=liveSquareWordingColor" json:"liveSquareWordingColor,omitempty"`
}

func (x *FinderLiveTabInfo) Reset() {
	*x = FinderLiveTabInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveTabInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveTabInfo) ProtoMessage() {}

func (x *FinderLiveTabInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveTabInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveTabInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{130}
}

func (x *FinderLiveTabInfo) GetTabId() uint32 {
	if x != nil && x.TabId != nil {
		return *x.TabId
	}
	return 0
}

func (x *FinderLiveTabInfo) GetTabName() string {
	if x != nil && x.TabName != nil {
		return *x.TabName
	}
	return ""
}

func (x *FinderLiveTabInfo) GetPrefechThisTab() bool {
	if x != nil && x.PrefechThisTab != nil {
		return *x.PrefechThisTab
	}
	return false
}

func (x *FinderLiveTabInfo) GetPrefechNextTab() bool {
	if x != nil && x.PrefechNextTab != nil {
		return *x.PrefechNextTab
	}
	return false
}

func (x *FinderLiveTabInfo) GetPrefechPreTab() bool {
	if x != nil && x.PrefechPreTab != nil {
		return *x.PrefechPreTab
	}
	return false
}

func (x *FinderLiveTabInfo) GetPlayVoice() bool {
	if x != nil && x.PlayVoice != nil {
		return *x.PlayVoice
	}
	return false
}

func (x *FinderLiveTabInfo) GetSubTabList() []*FinderLiveTabInfo {
	if x != nil {
		return x.SubTabList
	}
	return nil
}

func (x *FinderLiveTabInfo) GetTabScene() uint32 {
	if x != nil && x.TabScene != nil {
		return *x.TabScene
	}
	return 0
}

func (x *FinderLiveTabInfo) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderLiveTabInfo) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *FinderLiveTabInfo) GetIconWording() string {
	if x != nil && x.IconWording != nil {
		return *x.IconWording
	}
	return ""
}

func (x *FinderLiveTabInfo) GetLiveSquareIconUrl() string {
	if x != nil && x.LiveSquareIconUrl != nil {
		return *x.LiveSquareIconUrl
	}
	return ""
}

func (x *FinderLiveTabInfo) GetLiveSquareWordingColor() []string {
	if x != nil {
		return x.LiveSquareWordingColor
	}
	return nil
}

type LiveSdkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SdkAppid         *uint32 `protobuf:"varint,1,opt,name=sdkAppid" json:"sdkAppid,omitempty"`
	SdkUserId        *string `protobuf:"bytes,2,opt,name=sdkUserId" json:"sdkUserId,omitempty"`
	SdkLiveId        *uint32 `protobuf:"varint,3,opt,name=sdkLiveId" json:"sdkLiveId,omitempty"`
	SdkRoleId        *uint32 `protobuf:"varint,4,opt,name=sdkRoleId" json:"sdkRoleId,omitempty"`
	SdkUserSig       []byte  `protobuf:"bytes,5,opt,name=sdkUserSig" json:"sdkUserSig,omitempty"`
	SdkPrivateMapKey []byte  `protobuf:"bytes,6,opt,name=sdkPrivateMapKey" json:"sdkPrivateMapKey,omitempty"`
	SdkParams        []byte  `protobuf:"bytes,7,opt,name=sdkParams" json:"sdkParams,omitempty"`
	SdkCreateUserId  *string `protobuf:"bytes,8,opt,name=sdkCreateUserId" json:"sdkCreateUserId,omitempty"`
	ExpireForSig     *uint64 `protobuf:"varint,9,opt,name=expireForSig" json:"expireForSig,omitempty"`
	ExpireForPmk     *uint64 `protobuf:"varint,10,opt,name=expireForPmk" json:"expireForPmk,omitempty"`
	LiveId           *uint64 `protobuf:"varint,11,opt,name=liveId" json:"liveId,omitempty"`
	LiveCdnUrl       *string `protobuf:"bytes,12,opt,name=liveCdnUrl" json:"liveCdnUrl,omitempty"`
}

func (x *LiveSdkInfo) Reset() {
	*x = LiveSdkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSdkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSdkInfo) ProtoMessage() {}

func (x *LiveSdkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSdkInfo.ProtoReflect.Descriptor instead.
func (*LiveSdkInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{131}
}

func (x *LiveSdkInfo) GetSdkAppid() uint32 {
	if x != nil && x.SdkAppid != nil {
		return *x.SdkAppid
	}
	return 0
}

func (x *LiveSdkInfo) GetSdkUserId() string {
	if x != nil && x.SdkUserId != nil {
		return *x.SdkUserId
	}
	return ""
}

func (x *LiveSdkInfo) GetSdkLiveId() uint32 {
	if x != nil && x.SdkLiveId != nil {
		return *x.SdkLiveId
	}
	return 0
}

func (x *LiveSdkInfo) GetSdkRoleId() uint32 {
	if x != nil && x.SdkRoleId != nil {
		return *x.SdkRoleId
	}
	return 0
}

func (x *LiveSdkInfo) GetSdkUserSig() []byte {
	if x != nil {
		return x.SdkUserSig
	}
	return nil
}

func (x *LiveSdkInfo) GetSdkPrivateMapKey() []byte {
	if x != nil {
		return x.SdkPrivateMapKey
	}
	return nil
}

func (x *LiveSdkInfo) GetSdkParams() []byte {
	if x != nil {
		return x.SdkParams
	}
	return nil
}

func (x *LiveSdkInfo) GetSdkCreateUserId() string {
	if x != nil && x.SdkCreateUserId != nil {
		return *x.SdkCreateUserId
	}
	return ""
}

func (x *LiveSdkInfo) GetExpireForSig() uint64 {
	if x != nil && x.ExpireForSig != nil {
		return *x.ExpireForSig
	}
	return 0
}

func (x *LiveSdkInfo) GetExpireForPmk() uint64 {
	if x != nil && x.ExpireForPmk != nil {
		return *x.ExpireForPmk
	}
	return 0
}

func (x *LiveSdkInfo) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *LiveSdkInfo) GetLiveCdnUrl() string {
	if x != nil && x.LiveCdnUrl != nil {
		return *x.LiveCdnUrl
	}
	return ""
}

type FinderLiveLayerShowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowType           *uint32 `protobuf:"varint,1,opt,name=showType" json:"showType,omitempty"`
	ShowBuffer         []byte  `protobuf:"bytes,2,opt,name=showBuffer" json:"showBuffer,omitempty"`
	AccumulatedSeconds *uint32 `protobuf:"varint,3,opt,name=accumulatedSeconds" json:"accumulatedSeconds,omitempty"`
	PauseWording       *string `protobuf:"bytes,4,opt,name=pauseWording" json:"pauseWording,omitempty"`
}

func (x *FinderLiveLayerShowInfo) Reset() {
	*x = FinderLiveLayerShowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveLayerShowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveLayerShowInfo) ProtoMessage() {}

func (x *FinderLiveLayerShowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveLayerShowInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveLayerShowInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{132}
}

func (x *FinderLiveLayerShowInfo) GetShowType() uint32 {
	if x != nil && x.ShowType != nil {
		return *x.ShowType
	}
	return 0
}

func (x *FinderLiveLayerShowInfo) GetShowBuffer() []byte {
	if x != nil {
		return x.ShowBuffer
	}
	return nil
}

func (x *FinderLiveLayerShowInfo) GetAccumulatedSeconds() uint32 {
	if x != nil && x.AccumulatedSeconds != nil {
		return *x.AccumulatedSeconds
	}
	return 0
}

func (x *FinderLiveLayerShowInfo) GetPauseWording() string {
	if x != nil && x.PauseWording != nil {
		return *x.PauseWording
	}
	return ""
}

type FinderLiveUrlOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamUrl  *string `protobuf:"bytes,1,opt,name=streamUrl" json:"streamUrl,omitempty"`
	TimeLimit  *uint32 `protobuf:"varint,2,opt,name=timeLimit" json:"timeLimit,omitempty"`
	RemainTime *uint32 `protobuf:"varint,3,opt,name=remainTime" json:"remainTime,omitempty"`
}

func (x *FinderLiveUrlOption) Reset() {
	*x = FinderLiveUrlOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveUrlOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveUrlOption) ProtoMessage() {}

func (x *FinderLiveUrlOption) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveUrlOption.ProtoReflect.Descriptor instead.
func (*FinderLiveUrlOption) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{133}
}

func (x *FinderLiveUrlOption) GetStreamUrl() string {
	if x != nil && x.StreamUrl != nil {
		return *x.StreamUrl
	}
	return ""
}

func (x *FinderLiveUrlOption) GetTimeLimit() uint32 {
	if x != nil && x.TimeLimit != nil {
		return *x.TimeLimit
	}
	return 0
}

func (x *FinderLiveUrlOption) GetRemainTime() uint32 {
	if x != nil && x.RemainTime != nil {
		return *x.RemainTime
	}
	return 0
}

type FinderLivePurchaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeFlag        *uint32 `protobuf:"varint,1,opt,name=chargeFlag" json:"chargeFlag,omitempty"`
	IsPurchased       *bool   `protobuf:"varint,2,opt,name=isPurchased" json:"isPurchased,omitempty"`
	PurchaseUserCount *uint32 `protobuf:"varint,3,opt,name=purchaseUserCount" json:"purchaseUserCount,omitempty"`
	PurchaseHeat      *uint64 `protobuf:"varint,4,opt,name=purchaseHeat" json:"purchaseHeat,omitempty"`
	UnitPriceInWecoin *uint32 `protobuf:"varint,5,opt,name=unitPriceInWecoin" json:"unitPriceInWecoin,omitempty"`
}

func (x *FinderLivePurchaseInfo) Reset() {
	*x = FinderLivePurchaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLivePurchaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLivePurchaseInfo) ProtoMessage() {}

func (x *FinderLivePurchaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLivePurchaseInfo.ProtoReflect.Descriptor instead.
func (*FinderLivePurchaseInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{134}
}

func (x *FinderLivePurchaseInfo) GetChargeFlag() uint32 {
	if x != nil && x.ChargeFlag != nil {
		return *x.ChargeFlag
	}
	return 0
}

func (x *FinderLivePurchaseInfo) GetIsPurchased() bool {
	if x != nil && x.IsPurchased != nil {
		return *x.IsPurchased
	}
	return false
}

func (x *FinderLivePurchaseInfo) GetPurchaseUserCount() uint32 {
	if x != nil && x.PurchaseUserCount != nil {
		return *x.PurchaseUserCount
	}
	return 0
}

func (x *FinderLivePurchaseInfo) GetPurchaseHeat() uint64 {
	if x != nil && x.PurchaseHeat != nil {
		return *x.PurchaseHeat
	}
	return 0
}

func (x *FinderLivePurchaseInfo) GetUnitPriceInWecoin() uint32 {
	if x != nil && x.UnitPriceInWecoin != nil {
		return *x.UnitPriceInWecoin
	}
	return 0
}

type FinderLiveBadgeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BadgeType       *uint32 `protobuf:"varint,1,opt,name=badgeType" json:"badgeType,omitempty"`
	BadgeImgUrl     *string `protobuf:"bytes,2,opt,name=badgeImgUrl" json:"badgeImgUrl,omitempty"`
	BadgeLevel      *uint32 `protobuf:"varint,3,opt,name=badgeLevel" json:"badgeLevel,omitempty"`
	BackgroundColor *string `protobuf:"bytes,4,opt,name=backgroundColor" json:"backgroundColor,omitempty"`
	BadgeName       *string `protobuf:"bytes,5,opt,name=badgeName" json:"badgeName,omitempty"`
	Transparency    *uint32 `protobuf:"varint,6,opt,name=transparency" json:"transparency,omitempty"`
}

func (x *FinderLiveBadgeInfo) Reset() {
	*x = FinderLiveBadgeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveBadgeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveBadgeInfo) ProtoMessage() {}

func (x *FinderLiveBadgeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveBadgeInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveBadgeInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{135}
}

func (x *FinderLiveBadgeInfo) GetBadgeType() uint32 {
	if x != nil && x.BadgeType != nil {
		return *x.BadgeType
	}
	return 0
}

func (x *FinderLiveBadgeInfo) GetBadgeImgUrl() string {
	if x != nil && x.BadgeImgUrl != nil {
		return *x.BadgeImgUrl
	}
	return ""
}

func (x *FinderLiveBadgeInfo) GetBadgeLevel() uint32 {
	if x != nil && x.BadgeLevel != nil {
		return *x.BadgeLevel
	}
	return 0
}

func (x *FinderLiveBadgeInfo) GetBackgroundColor() string {
	if x != nil && x.BackgroundColor != nil {
		return *x.BackgroundColor
	}
	return ""
}

func (x *FinderLiveBadgeInfo) GetBadgeName() string {
	if x != nil && x.BadgeName != nil {
		return *x.BadgeName
	}
	return ""
}

func (x *FinderLiveBadgeInfo) GetTransparency() uint32 {
	if x != nil && x.Transparency != nil {
		return *x.Transparency
	}
	return 0
}

type FinderLiveContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact            *FinderContact         `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
	EnableComment      *uint32                `protobuf:"varint,2,opt,name=enableComment" json:"enableComment,omitempty"`
	DisableComment     *uint32                `protobuf:"varint,3,opt,name=disableComment" json:"disableComment,omitempty"`
	RewardAmountInHeat *uint32                `protobuf:"varint,4,opt,name=rewardAmountInHeat" json:"rewardAmountInHeat,omitempty"`
	LiveContactFlag    *uint32                `protobuf:"varint,5,opt,name=liveContactFlag" json:"liveContactFlag,omitempty"`
	BadgeInfo          *FinderLiveBadgeInfo   `protobuf:"bytes,6,opt,name=badgeInfo" json:"badgeInfo,omitempty"`
	DisplayNickname    *string                `protobuf:"bytes,9,opt,name=displayNickname" json:"displayNickname,omitempty"`
	LiveIdentity       *uint32                `protobuf:"varint,10,opt,name=liveIdentity" json:"liveIdentity,omitempty"`
	LiveBgImgUrl       *string                `protobuf:"bytes,11,opt,name=liveBgImgUrl" json:"liveBgImgUrl,omitempty"`
	LiveContactExtInfo []byte                 `protobuf:"bytes,12,opt,name=liveContactExtInfo" json:"liveContactExtInfo,omitempty"`
	DisablePersonalMsg *bool                  `protobuf:"varint,13,opt,name=disablePersonalMsg" json:"disablePersonalMsg,omitempty"`
	BadgeInfos         []*FinderLiveBadgeInfo `protobuf:"bytes,14,rep,name=badgeInfos" json:"badgeInfos,omitempty"`
	Intimacy           *uint64                `protobuf:"varint,16,opt,name=intimacy" json:"intimacy,omitempty"`
}

func (x *FinderLiveContact) Reset() {
	*x = FinderLiveContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveContact) ProtoMessage() {}

func (x *FinderLiveContact) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveContact.ProtoReflect.Descriptor instead.
func (*FinderLiveContact) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{136}
}

func (x *FinderLiveContact) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderLiveContact) GetEnableComment() uint32 {
	if x != nil && x.EnableComment != nil {
		return *x.EnableComment
	}
	return 0
}

func (x *FinderLiveContact) GetDisableComment() uint32 {
	if x != nil && x.DisableComment != nil {
		return *x.DisableComment
	}
	return 0
}

func (x *FinderLiveContact) GetRewardAmountInHeat() uint32 {
	if x != nil && x.RewardAmountInHeat != nil {
		return *x.RewardAmountInHeat
	}
	return 0
}

func (x *FinderLiveContact) GetLiveContactFlag() uint32 {
	if x != nil && x.LiveContactFlag != nil {
		return *x.LiveContactFlag
	}
	return 0
}

func (x *FinderLiveContact) GetBadgeInfo() *FinderLiveBadgeInfo {
	if x != nil {
		return x.BadgeInfo
	}
	return nil
}

func (x *FinderLiveContact) GetDisplayNickname() string {
	if x != nil && x.DisplayNickname != nil {
		return *x.DisplayNickname
	}
	return ""
}

func (x *FinderLiveContact) GetLiveIdentity() uint32 {
	if x != nil && x.LiveIdentity != nil {
		return *x.LiveIdentity
	}
	return 0
}

func (x *FinderLiveContact) GetLiveBgImgUrl() string {
	if x != nil && x.LiveBgImgUrl != nil {
		return *x.LiveBgImgUrl
	}
	return ""
}

func (x *FinderLiveContact) GetLiveContactExtInfo() []byte {
	if x != nil {
		return x.LiveContactExtInfo
	}
	return nil
}

func (x *FinderLiveContact) GetDisablePersonalMsg() bool {
	if x != nil && x.DisablePersonalMsg != nil {
		return *x.DisablePersonalMsg
	}
	return false
}

func (x *FinderLiveContact) GetBadgeInfos() []*FinderLiveBadgeInfo {
	if x != nil {
		return x.BadgeInfos
	}
	return nil
}

func (x *FinderLiveContact) GetIntimacy() uint64 {
	if x != nil && x.Intimacy != nil {
		return *x.Intimacy
	}
	return 0
}

type FinderLiveRoomData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlineMemberCount *uint32 `protobuf:"varint,1,opt,name=onlineMemberCount" json:"onlineMemberCount,omitempty"`
	LikeCount         *uint32 `protobuf:"varint,2,opt,name=likeCount" json:"likeCount,omitempty"`
	UpdateTime        *uint64 `protobuf:"varint,3,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (x *FinderLiveRoomData) Reset() {
	*x = FinderLiveRoomData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveRoomData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveRoomData) ProtoMessage() {}

func (x *FinderLiveRoomData) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveRoomData.ProtoReflect.Descriptor instead.
func (*FinderLiveRoomData) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{137}
}

func (x *FinderLiveRoomData) GetOnlineMemberCount() uint32 {
	if x != nil && x.OnlineMemberCount != nil {
		return *x.OnlineMemberCount
	}
	return 0
}

func (x *FinderLiveRoomData) GetLikeCount() uint32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *FinderLiveRoomData) GetUpdateTime() uint64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

type FinderLiveMicAudienceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MicContact   *FinderLiveContact `protobuf:"bytes,1,opt,name=micContact" json:"micContact,omitempty"`
	MicType      *uint32            `protobuf:"varint,2,opt,name=micType" json:"micType,omitempty"`
	MicSdkUserId *string            `protobuf:"bytes,3,opt,name=micSdkUserId" json:"micSdkUserId,omitempty"`
	LiveMicId    *string            `protobuf:"bytes,4,opt,name=liveMicId" json:"liveMicId,omitempty"`
	MicSeq       *uint64            `protobuf:"varint,5,opt,name=micSeq" json:"micSeq,omitempty"`
}

func (x *FinderLiveMicAudienceInfo) Reset() {
	*x = FinderLiveMicAudienceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveMicAudienceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveMicAudienceInfo) ProtoMessage() {}

func (x *FinderLiveMicAudienceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveMicAudienceInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveMicAudienceInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{138}
}

func (x *FinderLiveMicAudienceInfo) GetMicContact() *FinderLiveContact {
	if x != nil {
		return x.MicContact
	}
	return nil
}

func (x *FinderLiveMicAudienceInfo) GetMicType() uint32 {
	if x != nil && x.MicType != nil {
		return *x.MicType
	}
	return 0
}

func (x *FinderLiveMicAudienceInfo) GetMicSdkUserId() string {
	if x != nil && x.MicSdkUserId != nil {
		return *x.MicSdkUserId
	}
	return ""
}

func (x *FinderLiveMicAudienceInfo) GetLiveMicId() string {
	if x != nil && x.LiveMicId != nil {
		return *x.LiveMicId
	}
	return ""
}

func (x *FinderLiveMicAudienceInfo) GetMicSeq() uint64 {
	if x != nil && x.MicSeq != nil {
		return *x.MicSeq
	}
	return 0
}

type FinderLiveMicPkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveMicId       *string                      `protobuf:"bytes,1,opt,name=liveMicId" json:"liveMicId,omitempty"`
	MicSeq          *uint64                      `protobuf:"varint,2,opt,name=micSeq" json:"micSeq,omitempty"`
	MicSdkUserId    *string                      `protobuf:"bytes,3,opt,name=micSdkUserId" json:"micSdkUserId,omitempty"`
	MicContact      *FinderLiveContact           `protobuf:"bytes,4,opt,name=micContact" json:"micContact,omitempty"`
	Status          *uint32                      `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
	MicAudienceList []*FinderLiveMicAudienceInfo `protobuf:"bytes,6,rep,name=micAudienceList" json:"micAudienceList,omitempty"`
	MicSdkLiveId    *uint32                      `protobuf:"varint,7,opt,name=micSdkLiveId" json:"micSdkLiveId,omitempty"`
}

func (x *FinderLiveMicPkInfo) Reset() {
	*x = FinderLiveMicPkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveMicPkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveMicPkInfo) ProtoMessage() {}

func (x *FinderLiveMicPkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveMicPkInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveMicPkInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{139}
}

func (x *FinderLiveMicPkInfo) GetLiveMicId() string {
	if x != nil && x.LiveMicId != nil {
		return *x.LiveMicId
	}
	return ""
}

func (x *FinderLiveMicPkInfo) GetMicSeq() uint64 {
	if x != nil && x.MicSeq != nil {
		return *x.MicSeq
	}
	return 0
}

func (x *FinderLiveMicPkInfo) GetMicSdkUserId() string {
	if x != nil && x.MicSdkUserId != nil {
		return *x.MicSdkUserId
	}
	return ""
}

func (x *FinderLiveMicPkInfo) GetMicContact() *FinderLiveContact {
	if x != nil {
		return x.MicContact
	}
	return nil
}

func (x *FinderLiveMicPkInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *FinderLiveMicPkInfo) GetMicAudienceList() []*FinderLiveMicAudienceInfo {
	if x != nil {
		return x.MicAudienceList
	}
	return nil
}

func (x *FinderLiveMicPkInfo) GetMicSdkLiveId() uint32 {
	if x != nil && x.MicSdkLiveId != nil {
		return *x.MicSdkLiveId
	}
	return 0
}

type FinderLiveBattleInfo_PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderUsername *string `protobuf:"bytes,1,opt,name=finderUsername" json:"finderUsername,omitempty"`
	RewardWecoin   *uint64 `protobuf:"varint,2,opt,name=rewardWecoin" json:"rewardWecoin,omitempty"`
}

func (x *FinderLiveBattleInfo_PlayerInfo) Reset() {
	*x = FinderLiveBattleInfo_PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveBattleInfo_PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveBattleInfo_PlayerInfo) ProtoMessage() {}

func (x *FinderLiveBattleInfo_PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveBattleInfo_PlayerInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveBattleInfo_PlayerInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{140}
}

func (x *FinderLiveBattleInfo_PlayerInfo) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderLiveBattleInfo_PlayerInfo) GetRewardWecoin() uint64 {
	if x != nil && x.RewardWecoin != nil {
		return *x.RewardWecoin
	}
	return 0
}

type FinderLiveBattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleId   *string                            `protobuf:"bytes,1,opt,name=battleId" json:"battleId,omitempty"`
	BattleSeq  *uint64                            `protobuf:"varint,2,opt,name=battleSeq" json:"battleSeq,omitempty"`
	Status     *uint32                            `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	TimeLeft   *uint32                            `protobuf:"varint,4,opt,name=timeLeft" json:"timeLeft,omitempty"`
	PlayerInfo []*FinderLiveBattleInfo_PlayerInfo `protobuf:"bytes,6,rep,name=playerInfo" json:"playerInfo,omitempty"`
	Result     *uint32                            `protobuf:"varint,7,opt,name=result" json:"result,omitempty"`
	DelayMs    *uint64                            `protobuf:"varint,8,opt,name=delayMs" json:"delayMs,omitempty"`
}

func (x *FinderLiveBattleInfo) Reset() {
	*x = FinderLiveBattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveBattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveBattleInfo) ProtoMessage() {}

func (x *FinderLiveBattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveBattleInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveBattleInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{141}
}

func (x *FinderLiveBattleInfo) GetBattleId() string {
	if x != nil && x.BattleId != nil {
		return *x.BattleId
	}
	return ""
}

func (x *FinderLiveBattleInfo) GetBattleSeq() uint64 {
	if x != nil && x.BattleSeq != nil {
		return *x.BattleSeq
	}
	return 0
}

func (x *FinderLiveBattleInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *FinderLiveBattleInfo) GetTimeLeft() uint32 {
	if x != nil && x.TimeLeft != nil {
		return *x.TimeLeft
	}
	return 0
}

func (x *FinderLiveBattleInfo) GetPlayerInfo() []*FinderLiveBattleInfo_PlayerInfo {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *FinderLiveBattleInfo) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *FinderLiveBattleInfo) GetDelayMs() uint64 {
	if x != nil && x.DelayMs != nil {
		return *x.DelayMs
	}
	return 0
}

type FinderLiveMicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveMicId              *string                      `protobuf:"bytes,1,opt,name=liveMicId" json:"liveMicId,omitempty"`
	MicType                *uint32                      `protobuf:"varint,2,opt,name=micType" json:"micType,omitempty"`
	ApplyContact           *FinderLiveContact           `protobuf:"bytes,3,opt,name=applyContact" json:"applyContact,omitempty"`
	AcceptLiveContact      *FinderLiveContact           `protobuf:"bytes,4,opt,name=acceptLiveContact" json:"acceptLiveContact,omitempty"`
	Status                 *uint32                      `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
	MicLiveRoomData        *FinderLiveRoomData          `protobuf:"bytes,6,opt,name=micLiveRoomData" json:"micLiveRoomData,omitempty"`
	MicAudienceList        []*FinderLiveMicAudienceInfo `protobuf:"bytes,7,rep,name=micAudienceList" json:"micAudienceList,omitempty"`
	MicPkInfo              *FinderLiveMicPkInfo         `protobuf:"bytes,8,opt,name=micPkInfo" json:"micPkInfo,omitempty"`
	BattleInfo             *FinderLiveBattleInfo        `protobuf:"bytes,9,opt,name=battleInfo" json:"battleInfo,omitempty"`
	EnableCrossLiveRoomMic *bool                        `protobuf:"varint,10,opt,name=enableCrossLiveRoomMic" json:"enableCrossLiveRoomMic,omitempty"`
}

func (x *FinderLiveMicInfo) Reset() {
	*x = FinderLiveMicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveMicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveMicInfo) ProtoMessage() {}

func (x *FinderLiveMicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveMicInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveMicInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{142}
}

func (x *FinderLiveMicInfo) GetLiveMicId() string {
	if x != nil && x.LiveMicId != nil {
		return *x.LiveMicId
	}
	return ""
}

func (x *FinderLiveMicInfo) GetMicType() uint32 {
	if x != nil && x.MicType != nil {
		return *x.MicType
	}
	return 0
}

func (x *FinderLiveMicInfo) GetApplyContact() *FinderLiveContact {
	if x != nil {
		return x.ApplyContact
	}
	return nil
}

func (x *FinderLiveMicInfo) GetAcceptLiveContact() *FinderLiveContact {
	if x != nil {
		return x.AcceptLiveContact
	}
	return nil
}

func (x *FinderLiveMicInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *FinderLiveMicInfo) GetMicLiveRoomData() *FinderLiveRoomData {
	if x != nil {
		return x.MicLiveRoomData
	}
	return nil
}

func (x *FinderLiveMicInfo) GetMicAudienceList() []*FinderLiveMicAudienceInfo {
	if x != nil {
		return x.MicAudienceList
	}
	return nil
}

func (x *FinderLiveMicInfo) GetMicPkInfo() *FinderLiveMicPkInfo {
	if x != nil {
		return x.MicPkInfo
	}
	return nil
}

func (x *FinderLiveMicInfo) GetBattleInfo() *FinderLiveBattleInfo {
	if x != nil {
		return x.BattleInfo
	}
	return nil
}

func (x *FinderLiveMicInfo) GetEnableCrossLiveRoomMic() bool {
	if x != nil && x.EnableCrossLiveRoomMic != nil {
		return *x.EnableCrossLiveRoomMic
	}
	return false
}

type FinderBizUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizNickname          *string `protobuf:"bytes,1,opt,name=bizNickname" json:"bizNickname,omitempty"`
	BizUsername          *string `protobuf:"bytes,2,opt,name=bizUsername" json:"bizUsername,omitempty"`
	BizFriendFollowCount *uint32 `protobuf:"varint,3,opt,name=bizFriendFollowCount" json:"bizFriendFollowCount,omitempty"`
}

func (x *FinderBizUserInfo) Reset() {
	*x = FinderBizUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBizUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBizUserInfo) ProtoMessage() {}

func (x *FinderBizUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBizUserInfo.ProtoReflect.Descriptor instead.
func (*FinderBizUserInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{143}
}

func (x *FinderBizUserInfo) GetBizNickname() string {
	if x != nil && x.BizNickname != nil {
		return *x.BizNickname
	}
	return ""
}

func (x *FinderBizUserInfo) GetBizUsername() string {
	if x != nil && x.BizUsername != nil {
		return *x.BizUsername
	}
	return ""
}

func (x *FinderBizUserInfo) GetBizFriendFollowCount() uint32 {
	if x != nil && x.BizFriendFollowCount != nil {
		return *x.BizFriendFollowCount
	}
	return 0
}

type FinderLiveReplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportScreenRotate *uint32 `protobuf:"varint,1,opt,name=supportScreenRotate" json:"supportScreenRotate,omitempty"`
	WatchUv             *uint64 `protobuf:"varint,2,opt,name=watchUv" json:"watchUv,omitempty"`
	OrigDuration        *uint32 `protobuf:"varint,3,opt,name=origDuration" json:"origDuration,omitempty"`
}

func (x *FinderLiveReplayInfo) Reset() {
	*x = FinderLiveReplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveReplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveReplayInfo) ProtoMessage() {}

func (x *FinderLiveReplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveReplayInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveReplayInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{144}
}

func (x *FinderLiveReplayInfo) GetSupportScreenRotate() uint32 {
	if x != nil && x.SupportScreenRotate != nil {
		return *x.SupportScreenRotate
	}
	return 0
}

func (x *FinderLiveReplayInfo) GetWatchUv() uint64 {
	if x != nil && x.WatchUv != nil {
		return *x.WatchUv
	}
	return 0
}

func (x *FinderLiveReplayInfo) GetOrigDuration() uint32 {
	if x != nil && x.OrigDuration != nil {
		return *x.OrigDuration
	}
	return 0
}

type RelatedEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelatedEventType *uint32 `protobuf:"varint,1,opt,name=relatedEventType" json:"relatedEventType,omitempty"`
	RelatedEventId   *string `protobuf:"bytes,2,opt,name=relatedEventId" json:"relatedEventId,omitempty"`
}

func (x *RelatedEventInfo) Reset() {
	*x = RelatedEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedEventInfo) ProtoMessage() {}

func (x *RelatedEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedEventInfo.ProtoReflect.Descriptor instead.
func (*RelatedEventInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{145}
}

func (x *RelatedEventInfo) GetRelatedEventType() uint32 {
	if x != nil && x.RelatedEventType != nil {
		return *x.RelatedEventType
	}
	return 0
}

func (x *RelatedEventInfo) GetRelatedEventId() string {
	if x != nil && x.RelatedEventId != nil {
		return *x.RelatedEventId
	}
	return ""
}

type FinderLiveEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId             *uint32             `protobuf:"varint,1,opt,name=eventId" json:"eventId,omitempty"`
	ParticipantIdentity *uint32             `protobuf:"varint,2,opt,name=participantIdentity" json:"participantIdentity,omitempty"`
	EventStatus         *uint32             `protobuf:"varint,3,opt,name=eventStatus" json:"eventStatus,omitempty"`
	StreamStatus        *uint32             `protobuf:"varint,4,opt,name=streamStatus" json:"streamStatus,omitempty"`
	RelatedEvents       []*RelatedEventInfo `protobuf:"bytes,5,rep,name=relatedEvents" json:"relatedEvents,omitempty"`
}

func (x *FinderLiveEventInfo) Reset() {
	*x = FinderLiveEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveEventInfo) ProtoMessage() {}

func (x *FinderLiveEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveEventInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveEventInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{146}
}

func (x *FinderLiveEventInfo) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *FinderLiveEventInfo) GetParticipantIdentity() uint32 {
	if x != nil && x.ParticipantIdentity != nil {
		return *x.ParticipantIdentity
	}
	return 0
}

func (x *FinderLiveEventInfo) GetEventStatus() uint32 {
	if x != nil && x.EventStatus != nil {
		return *x.EventStatus
	}
	return 0
}

func (x *FinderLiveEventInfo) GetStreamStatus() uint32 {
	if x != nil && x.StreamStatus != nil {
		return *x.StreamStatus
	}
	return 0
}

func (x *FinderLiveEventInfo) GetRelatedEvents() []*RelatedEventInfo {
	if x != nil {
		return x.RelatedEvents
	}
	return nil
}

type FinderLiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveId                       *uint64                   `protobuf:"varint,1,opt,name=liveId" json:"liveId,omitempty"`
	OnlineCnt                    *uint32                   `protobuf:"varint,2,opt,name=onlineCnt" json:"onlineCnt,omitempty"`
	LiveStatus                   *uint32                   `protobuf:"varint,3,opt,name=liveStatus" json:"liveStatus,omitempty"`
	StreamUrl                    *string                   `protobuf:"bytes,4,opt,name=streamUrl" json:"streamUrl,omitempty"`
	StartTime                    *uint32                   `protobuf:"varint,5,opt,name=startTime" json:"startTime,omitempty"`
	LikeCnt                      *uint32                   `protobuf:"varint,6,opt,name=likeCnt" json:"likeCnt,omitempty"`
	EndTime                      *uint32                   `protobuf:"varint,7,opt,name=endTime" json:"endTime,omitempty"`
	LiveExtInfo                  *FinderLiveExtInfo        `protobuf:"bytes,8,opt,name=liveExtInfo" json:"liveExtInfo,omitempty"`
	LiveSpec                     *FinderLiveMediaSpec      `protobuf:"bytes,9,opt,name=liveSpec" json:"liveSpec,omitempty"`
	LiveSdkChannelInfo           *FinderLiveSdkChannelInfo `protobuf:"bytes,10,opt,name=liveSdkChannelInfo" json:"liveSdkChannelInfo,omitempty"`
	ParticipantCount             *uint32                   `protobuf:"varint,11,opt,name=participantCount" json:"participantCount,omitempty"`
	RewardTotalAmountInWecoin    *uint64                   `protobuf:"varint,12,opt,name=rewardTotalAmountInWecoin" json:"rewardTotalAmountInWecoin,omitempty"`
	SourceType                   *uint32                   `protobuf:"varint,13,opt,name=sourceType" json:"sourceType,omitempty"`
	ExtFlag                      *uint32                   `protobuf:"varint,14,opt,name=extFlag" json:"extFlag,omitempty"`
	RewardTotalAmountInHeat      *uint64                   `protobuf:"varint,15,opt,name=rewardTotalAmountInHeat" json:"rewardTotalAmountInHeat,omitempty"`
	TabInfo                      *FinderLiveTabInfo        `protobuf:"bytes,16,opt,name=tabInfo" json:"tabInfo,omitempty"`
	SupportFlag                  *uint32                   `protobuf:"varint,17,opt,name=supportFlag" json:"supportFlag,omitempty"`
	LiveBusinessType             *uint32                   `protobuf:"varint,18,opt,name=liveBusinessType" json:"liveBusinessType,omitempty"`
	LiveBarMsg                   *string                   `protobuf:"bytes,19,opt,name=liveBarMsg" json:"liveBarMsg,omitempty"`
	NewLikeCnt                   *uint64                   `protobuf:"varint,20,opt,name=newLikeCnt" json:"newLikeCnt,omitempty"`
	HeatValue                    *uint64                   `protobuf:"varint,21,opt,name=heatValue" json:"heatValue,omitempty"`
	SecondaryDeviceFlag          *uint32                   `protobuf:"varint,22,opt,name=secondaryDeviceFlag" json:"secondaryDeviceFlag,omitempty"`
	GameAppid                    *string                   `protobuf:"bytes,23,opt,name=gameAppid" json:"gameAppid,omitempty"`
	LiveSdkInfo                  *LiveSdkInfo              `protobuf:"bytes,24,opt,name=liveSdkInfo" json:"liveSdkInfo,omitempty"`
	AutoPlayPriority             *uint32                   `protobuf:"varint,25,opt,name=autoPlayPriority" json:"autoPlayPriority,omitempty"`
	LayerShowInfo                *FinderLiveLayerShowInfo  `protobuf:"bytes,26,opt,name=layerShowInfo" json:"layerShowInfo,omitempty"`
	IsWxaGame                    *uint32                   `protobuf:"varint,27,opt,name=isWxaGame" json:"isWxaGame,omitempty"`
	TrialUrlOption               *FinderLiveUrlOption      `protobuf:"bytes,28,opt,name=trialUrlOption" json:"trialUrlOption,omitempty"`
	PurchaseInfo                 *FinderLivePurchaseInfo   `protobuf:"bytes,29,opt,name=purchaseInfo" json:"purchaseInfo,omitempty"`
	ReplayUrl                    *string                   `protobuf:"bytes,30,opt,name=replayUrl" json:"replayUrl,omitempty"`
	LiveMicInfo                  *FinderLiveMicInfo        `protobuf:"bytes,31,opt,name=liveMicInfo" json:"liveMicInfo,omitempty"`
	ReplayStatus                 *uint32                   `protobuf:"varint,32,opt,name=replayStatus" json:"replayStatus,omitempty"`
	AnchorStatusFlag             *uint64                   `protobuf:"varint,33,opt,name=anchorStatusFlag" json:"anchorStatusFlag,omitempty"`
	LiveActivityType             []uint32                  `protobuf:"varint,34,rep,name=liveActivityType" json:"liveActivityType,omitempty"`
	WxaGameVersion               *uint32                   `protobuf:"varint,35,opt,name=wxaGameVersion" json:"wxaGameVersion,omitempty"`
	MaxOnlineCount               *uint32                   `protobuf:"varint,36,opt,name=maxOnlineCount" json:"maxOnlineCount,omitempty"`
	AudiencesAvgSeconds          *uint32                   `protobuf:"varint,37,opt,name=audiencesAvgSeconds" json:"audiencesAvgSeconds,omitempty"`
	LiveFlag                     *uint32                   `protobuf:"varint,38,opt,name=liveFlag" json:"liveFlag,omitempty"`
	PreviewJoinliveDelaySeconds  *uint32                   `protobuf:"varint,39,opt,name=previewJoinliveDelaySeconds" json:"previewJoinliveDelaySeconds,omitempty"`
	BizInfo                      *FinderBizUserInfo        `protobuf:"bytes,41,opt,name=bizInfo" json:"bizInfo,omitempty"`
	MultiReason                  []string                  `protobuf:"bytes,42,rep,name=multiReason" json:"multiReason,omitempty"`
	LiveVrType                   *uint32                   `protobuf:"varint,43,opt,name=liveVrType" json:"liveVrType,omitempty"`
	ReplayInfo                   *FinderLiveReplayInfo     `protobuf:"bytes,47,opt,name=replayInfo" json:"replayInfo,omitempty"`
	EventInfo                    *FinderLiveEventInfo      `protobuf:"bytes,48,opt,name=eventInfo" json:"eventInfo,omitempty"`
	LiveSquareParticipantWording *string                   `protobuf:"bytes,49,opt,name=liveSquareParticipantWording" json:"liveSquareParticipantWording,omitempty"`
}

func (x *FinderLiveInfo) Reset() {
	*x = FinderLiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveInfo) ProtoMessage() {}

func (x *FinderLiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{147}
}

func (x *FinderLiveInfo) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderLiveInfo) GetOnlineCnt() uint32 {
	if x != nil && x.OnlineCnt != nil {
		return *x.OnlineCnt
	}
	return 0
}

func (x *FinderLiveInfo) GetLiveStatus() uint32 {
	if x != nil && x.LiveStatus != nil {
		return *x.LiveStatus
	}
	return 0
}

func (x *FinderLiveInfo) GetStreamUrl() string {
	if x != nil && x.StreamUrl != nil {
		return *x.StreamUrl
	}
	return ""
}

func (x *FinderLiveInfo) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *FinderLiveInfo) GetLikeCnt() uint32 {
	if x != nil && x.LikeCnt != nil {
		return *x.LikeCnt
	}
	return 0
}

func (x *FinderLiveInfo) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *FinderLiveInfo) GetLiveExtInfo() *FinderLiveExtInfo {
	if x != nil {
		return x.LiveExtInfo
	}
	return nil
}

func (x *FinderLiveInfo) GetLiveSpec() *FinderLiveMediaSpec {
	if x != nil {
		return x.LiveSpec
	}
	return nil
}

func (x *FinderLiveInfo) GetLiveSdkChannelInfo() *FinderLiveSdkChannelInfo {
	if x != nil {
		return x.LiveSdkChannelInfo
	}
	return nil
}

func (x *FinderLiveInfo) GetParticipantCount() uint32 {
	if x != nil && x.ParticipantCount != nil {
		return *x.ParticipantCount
	}
	return 0
}

func (x *FinderLiveInfo) GetRewardTotalAmountInWecoin() uint64 {
	if x != nil && x.RewardTotalAmountInWecoin != nil {
		return *x.RewardTotalAmountInWecoin
	}
	return 0
}

func (x *FinderLiveInfo) GetSourceType() uint32 {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return 0
}

func (x *FinderLiveInfo) GetExtFlag() uint32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *FinderLiveInfo) GetRewardTotalAmountInHeat() uint64 {
	if x != nil && x.RewardTotalAmountInHeat != nil {
		return *x.RewardTotalAmountInHeat
	}
	return 0
}

func (x *FinderLiveInfo) GetTabInfo() *FinderLiveTabInfo {
	if x != nil {
		return x.TabInfo
	}
	return nil
}

func (x *FinderLiveInfo) GetSupportFlag() uint32 {
	if x != nil && x.SupportFlag != nil {
		return *x.SupportFlag
	}
	return 0
}

func (x *FinderLiveInfo) GetLiveBusinessType() uint32 {
	if x != nil && x.LiveBusinessType != nil {
		return *x.LiveBusinessType
	}
	return 0
}

func (x *FinderLiveInfo) GetLiveBarMsg() string {
	if x != nil && x.LiveBarMsg != nil {
		return *x.LiveBarMsg
	}
	return ""
}

func (x *FinderLiveInfo) GetNewLikeCnt() uint64 {
	if x != nil && x.NewLikeCnt != nil {
		return *x.NewLikeCnt
	}
	return 0
}

func (x *FinderLiveInfo) GetHeatValue() uint64 {
	if x != nil && x.HeatValue != nil {
		return *x.HeatValue
	}
	return 0
}

func (x *FinderLiveInfo) GetSecondaryDeviceFlag() uint32 {
	if x != nil && x.SecondaryDeviceFlag != nil {
		return *x.SecondaryDeviceFlag
	}
	return 0
}

func (x *FinderLiveInfo) GetGameAppid() string {
	if x != nil && x.GameAppid != nil {
		return *x.GameAppid
	}
	return ""
}

func (x *FinderLiveInfo) GetLiveSdkInfo() *LiveSdkInfo {
	if x != nil {
		return x.LiveSdkInfo
	}
	return nil
}

func (x *FinderLiveInfo) GetAutoPlayPriority() uint32 {
	if x != nil && x.AutoPlayPriority != nil {
		return *x.AutoPlayPriority
	}
	return 0
}

func (x *FinderLiveInfo) GetLayerShowInfo() *FinderLiveLayerShowInfo {
	if x != nil {
		return x.LayerShowInfo
	}
	return nil
}

func (x *FinderLiveInfo) GetIsWxaGame() uint32 {
	if x != nil && x.IsWxaGame != nil {
		return *x.IsWxaGame
	}
	return 0
}

func (x *FinderLiveInfo) GetTrialUrlOption() *FinderLiveUrlOption {
	if x != nil {
		return x.TrialUrlOption
	}
	return nil
}

func (x *FinderLiveInfo) GetPurchaseInfo() *FinderLivePurchaseInfo {
	if x != nil {
		return x.PurchaseInfo
	}
	return nil
}

func (x *FinderLiveInfo) GetReplayUrl() string {
	if x != nil && x.ReplayUrl != nil {
		return *x.ReplayUrl
	}
	return ""
}

func (x *FinderLiveInfo) GetLiveMicInfo() *FinderLiveMicInfo {
	if x != nil {
		return x.LiveMicInfo
	}
	return nil
}

func (x *FinderLiveInfo) GetReplayStatus() uint32 {
	if x != nil && x.ReplayStatus != nil {
		return *x.ReplayStatus
	}
	return 0
}

func (x *FinderLiveInfo) GetAnchorStatusFlag() uint64 {
	if x != nil && x.AnchorStatusFlag != nil {
		return *x.AnchorStatusFlag
	}
	return 0
}

func (x *FinderLiveInfo) GetLiveActivityType() []uint32 {
	if x != nil {
		return x.LiveActivityType
	}
	return nil
}

func (x *FinderLiveInfo) GetWxaGameVersion() uint32 {
	if x != nil && x.WxaGameVersion != nil {
		return *x.WxaGameVersion
	}
	return 0
}

func (x *FinderLiveInfo) GetMaxOnlineCount() uint32 {
	if x != nil && x.MaxOnlineCount != nil {
		return *x.MaxOnlineCount
	}
	return 0
}

func (x *FinderLiveInfo) GetAudiencesAvgSeconds() uint32 {
	if x != nil && x.AudiencesAvgSeconds != nil {
		return *x.AudiencesAvgSeconds
	}
	return 0
}

func (x *FinderLiveInfo) GetLiveFlag() uint32 {
	if x != nil && x.LiveFlag != nil {
		return *x.LiveFlag
	}
	return 0
}

func (x *FinderLiveInfo) GetPreviewJoinliveDelaySeconds() uint32 {
	if x != nil && x.PreviewJoinliveDelaySeconds != nil {
		return *x.PreviewJoinliveDelaySeconds
	}
	return 0
}

func (x *FinderLiveInfo) GetBizInfo() *FinderBizUserInfo {
	if x != nil {
		return x.BizInfo
	}
	return nil
}

func (x *FinderLiveInfo) GetMultiReason() []string {
	if x != nil {
		return x.MultiReason
	}
	return nil
}

func (x *FinderLiveInfo) GetLiveVrType() uint32 {
	if x != nil && x.LiveVrType != nil {
		return *x.LiveVrType
	}
	return 0
}

func (x *FinderLiveInfo) GetReplayInfo() *FinderLiveReplayInfo {
	if x != nil {
		return x.ReplayInfo
	}
	return nil
}

func (x *FinderLiveInfo) GetEventInfo() *FinderLiveEventInfo {
	if x != nil {
		return x.EventInfo
	}
	return nil
}

func (x *FinderLiveInfo) GetLiveSquareParticipantWording() string {
	if x != nil && x.LiveSquareParticipantWording != nil {
		return *x.LiveSquareParticipantWording
	}
	return ""
}

type FinderFoldedLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayoutType *uint32         `protobuf:"varint,1,opt,name=layoutType" json:"layoutType,omitempty"`
	Objects    []*FinderObject `protobuf:"bytes,2,rep,name=objects" json:"objects,omitempty"`
	Username   *string         `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	TotalCount *uint32         `protobuf:"varint,4,opt,name=totalCount" json:"totalCount,omitempty"`
}

func (x *FinderFoldedLayout) Reset() {
	*x = FinderFoldedLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFoldedLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFoldedLayout) ProtoMessage() {}

func (x *FinderFoldedLayout) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFoldedLayout.ProtoReflect.Descriptor instead.
func (*FinderFoldedLayout) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{148}
}

func (x *FinderFoldedLayout) GetLayoutType() uint32 {
	if x != nil && x.LayoutType != nil {
		return *x.LayoutType
	}
	return 0
}

func (x *FinderFoldedLayout) GetObjects() []*FinderObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *FinderFoldedLayout) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderFoldedLayout) GetTotalCount() uint32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type FinderVideoMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url          *string  `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	ThumbUrl     *string  `protobuf:"bytes,2,opt,name=thumbUrl" json:"thumbUrl,omitempty"`
	MediaType    *uint32  `protobuf:"varint,3,opt,name=mediaType" json:"mediaType,omitempty"`
	VideoPlayLen *uint32  `protobuf:"varint,4,opt,name=videoPlayLen" json:"videoPlayLen,omitempty"`
	Width        *float32 `protobuf:"fixed32,5,opt,name=width" json:"width,omitempty"`
	Height       *float32 `protobuf:"fixed32,6,opt,name=height" json:"height,omitempty"`
	Md5Sum       *string  `protobuf:"bytes,7,opt,name=md5Sum" json:"md5Sum,omitempty"`
	FileSize     *uint32  `protobuf:"varint,8,opt,name=fileSize" json:"fileSize,omitempty"`
	Bitrate      *int32   `protobuf:"varint,9,opt,name=bitrate" json:"bitrate,omitempty"`
	DecodeKey    *string  `protobuf:"bytes,10,opt,name=decodeKey" json:"decodeKey,omitempty"`
}

func (x *FinderVideoMedia) Reset() {
	*x = FinderVideoMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderVideoMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderVideoMedia) ProtoMessage() {}

func (x *FinderVideoMedia) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderVideoMedia.ProtoReflect.Descriptor instead.
func (*FinderVideoMedia) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{149}
}

func (x *FinderVideoMedia) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *FinderVideoMedia) GetThumbUrl() string {
	if x != nil && x.ThumbUrl != nil {
		return *x.ThumbUrl
	}
	return ""
}

func (x *FinderVideoMedia) GetMediaType() uint32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *FinderVideoMedia) GetVideoPlayLen() uint32 {
	if x != nil && x.VideoPlayLen != nil {
		return *x.VideoPlayLen
	}
	return 0
}

func (x *FinderVideoMedia) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *FinderVideoMedia) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *FinderVideoMedia) GetMd5Sum() string {
	if x != nil && x.Md5Sum != nil {
		return *x.Md5Sum
	}
	return ""
}

func (x *FinderVideoMedia) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *FinderVideoMedia) GetBitrate() int32 {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return 0
}

func (x *FinderVideoMedia) GetDecodeKey() string {
	if x != nil && x.DecodeKey != nil {
		return *x.DecodeKey
	}
	return ""
}

type FinderVideoDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *string             `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Media       []*FinderVideoMedia `protobuf:"bytes,2,rep,name=media" json:"media,omitempty"`
	MediaType   *uint32             `protobuf:"varint,3,opt,name=mediaType" json:"mediaType,omitempty"`
}

func (x *FinderVideoDesc) Reset() {
	*x = FinderVideoDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderVideoDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderVideoDesc) ProtoMessage() {}

func (x *FinderVideoDesc) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderVideoDesc.ProtoReflect.Descriptor instead.
func (*FinderVideoDesc) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{150}
}

func (x *FinderVideoDesc) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FinderVideoDesc) GetMedia() []*FinderVideoMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *FinderVideoDesc) GetMediaType() uint32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

type FinderVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *uint64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CreateTime      *uint32          `protobuf:"varint,2,opt,name=createTime" json:"createTime,omitempty"`
	Desc            *FinderVideoDesc `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	ForwardCount    *uint32          `protobuf:"varint,4,opt,name=forwardCount" json:"forwardCount,omitempty"`
	LikeCount       *uint32          `protobuf:"varint,5,opt,name=likeCount" json:"likeCount,omitempty"`
	CommentCount    *uint32          `protobuf:"varint,6,opt,name=commentCount" json:"commentCount,omitempty"`
	FavCount        *uint32          `protobuf:"varint,7,opt,name=favCount" json:"favCount,omitempty"`
	FriendLikeCount *uint32          `protobuf:"varint,8,opt,name=friendLikeCount" json:"friendLikeCount,omitempty"`
	SpamFlag        *uint32          `protobuf:"varint,9,opt,name=spamFlag" json:"spamFlag,omitempty"`
	ObjectNonceId   *string          `protobuf:"bytes,10,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	FirstBindId     *uint64          `protobuf:"varint,11,opt,name=firstBindId" json:"firstBindId,omitempty"`
	IsTest          *bool            `protobuf:"varint,12,opt,name=isTest" json:"isTest,omitempty"`
}

func (x *FinderVideo) Reset() {
	*x = FinderVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderVideo) ProtoMessage() {}

func (x *FinderVideo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderVideo.ProtoReflect.Descriptor instead.
func (*FinderVideo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{151}
}

func (x *FinderVideo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FinderVideo) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *FinderVideo) GetDesc() *FinderVideoDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *FinderVideo) GetForwardCount() uint32 {
	if x != nil && x.ForwardCount != nil {
		return *x.ForwardCount
	}
	return 0
}

func (x *FinderVideo) GetLikeCount() uint32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *FinderVideo) GetCommentCount() uint32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *FinderVideo) GetFavCount() uint32 {
	if x != nil && x.FavCount != nil {
		return *x.FavCount
	}
	return 0
}

func (x *FinderVideo) GetFriendLikeCount() uint32 {
	if x != nil && x.FriendLikeCount != nil {
		return *x.FriendLikeCount
	}
	return 0
}

func (x *FinderVideo) GetSpamFlag() uint32 {
	if x != nil && x.SpamFlag != nil {
		return *x.SpamFlag
	}
	return 0
}

func (x *FinderVideo) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderVideo) GetFirstBindId() uint64 {
	if x != nil && x.FirstBindId != nil {
		return *x.FirstBindId
	}
	return 0
}

func (x *FinderVideo) GetIsTest() bool {
	if x != nil && x.IsTest != nil {
		return *x.IsTest
	}
	return false
}

type FinderObjectHotTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicId     *uint64 `protobuf:"varint,1,opt,name=topicId" json:"topicId,omitempty"`
	TopicName   *string `protobuf:"bytes,2,opt,name=topicName" json:"topicName,omitempty"`
	TopicType   *uint32 `protobuf:"varint,3,opt,name=topicType" json:"topicType,omitempty"`
	JumpFlag    *uint32 `protobuf:"varint,4,opt,name=jumpFlag" json:"jumpFlag,omitempty"`
	TopicBuffer []byte  `protobuf:"bytes,5,opt,name=topicBuffer" json:"topicBuffer,omitempty"`
}

func (x *FinderObjectHotTopic) Reset() {
	*x = FinderObjectHotTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectHotTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectHotTopic) ProtoMessage() {}

func (x *FinderObjectHotTopic) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectHotTopic.ProtoReflect.Descriptor instead.
func (*FinderObjectHotTopic) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{152}
}

func (x *FinderObjectHotTopic) GetTopicId() uint64 {
	if x != nil && x.TopicId != nil {
		return *x.TopicId
	}
	return 0
}

func (x *FinderObjectHotTopic) GetTopicName() string {
	if x != nil && x.TopicName != nil {
		return *x.TopicName
	}
	return ""
}

func (x *FinderObjectHotTopic) GetTopicType() uint32 {
	if x != nil && x.TopicType != nil {
		return *x.TopicType
	}
	return 0
}

func (x *FinderObjectHotTopic) GetJumpFlag() uint32 {
	if x != nil && x.JumpFlag != nil {
		return *x.JumpFlag
	}
	return 0
}

func (x *FinderObjectHotTopic) GetTopicBuffer() []byte {
	if x != nil {
		return x.TopicBuffer
	}
	return nil
}

type FinderObjectHotTopicList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics []*FinderObjectHotTopic `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
}

func (x *FinderObjectHotTopicList) Reset() {
	*x = FinderObjectHotTopicList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectHotTopicList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectHotTopicList) ProtoMessage() {}

func (x *FinderObjectHotTopicList) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectHotTopicList.ProtoReflect.Descriptor instead.
func (*FinderObjectHotTopicList) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{153}
}

func (x *FinderObjectHotTopicList) GetTopics() []*FinderObjectHotTopic {
	if x != nil {
		return x.Topics
	}
	return nil
}

type MegaVideoMediaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFormat     *string `protobuf:"bytes,1,opt,name=fileFormat" json:"fileFormat,omitempty"`
	FirstLoadBytes *uint32 `protobuf:"varint,2,opt,name=firstLoadBytes" json:"firstLoadBytes,omitempty"`
	BitRate        *uint32 `protobuf:"varint,3,opt,name=bitRate" json:"bitRate,omitempty"`
	CodingFormat   *string `protobuf:"bytes,4,opt,name=codingFormat" json:"codingFormat,omitempty"`
}

func (x *MegaVideoMediaSpec) Reset() {
	*x = MegaVideoMediaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoMediaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoMediaSpec) ProtoMessage() {}

func (x *MegaVideoMediaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoMediaSpec.ProtoReflect.Descriptor instead.
func (*MegaVideoMediaSpec) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{154}
}

func (x *MegaVideoMediaSpec) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

func (x *MegaVideoMediaSpec) GetFirstLoadBytes() uint32 {
	if x != nil && x.FirstLoadBytes != nil {
		return *x.FirstLoadBytes
	}
	return 0
}

func (x *MegaVideoMediaSpec) GetBitRate() uint32 {
	if x != nil && x.BitRate != nil {
		return *x.BitRate
	}
	return 0
}

func (x *MegaVideoMediaSpec) GetCodingFormat() string {
	if x != nil && x.CodingFormat != nil {
		return *x.CodingFormat
	}
	return ""
}

type FinderMediaSpecList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecList []*FinderMediaSpec `protobuf:"bytes,1,rep,name=specList" json:"specList,omitempty"`
}

func (x *FinderMediaSpecList) Reset() {
	*x = FinderMediaSpecList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMediaSpecList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMediaSpecList) ProtoMessage() {}

func (x *FinderMediaSpecList) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMediaSpecList.ProtoReflect.Descriptor instead.
func (*FinderMediaSpecList) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{155}
}

func (x *FinderMediaSpecList) GetSpecList() []*FinderMediaSpec {
	if x != nil {
		return x.SpecList
	}
	return nil
}

type MegaVideoMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url               *string                 `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	ThumbUrl          *string                 `protobuf:"bytes,2,opt,name=thumbUrl" json:"thumbUrl,omitempty"`
	MediaType         *uint32                 `protobuf:"varint,3,opt,name=mediaType" json:"mediaType,omitempty"`
	VideoPlayLen      *uint32                 `protobuf:"varint,4,opt,name=videoPlayLen" json:"videoPlayLen,omitempty"`
	Width             *float32                `protobuf:"fixed32,5,opt,name=width" json:"width,omitempty"`
	Height            *float32                `protobuf:"fixed32,6,opt,name=height" json:"height,omitempty"`
	Md5Sum            *string                 `protobuf:"bytes,7,opt,name=md5Sum" json:"md5Sum,omitempty"`
	FileSize          *uint32                 `protobuf:"varint,8,opt,name=fileSize" json:"fileSize,omitempty"`
	Bitrate           *int32                  `protobuf:"varint,9,opt,name=bitrate" json:"bitrate,omitempty"`
	DecodeKey         *string                 `protobuf:"bytes,10,opt,name=decodeKey" json:"decodeKey,omitempty"`
	CoverUrl          *string                 `protobuf:"bytes,11,opt,name=coverUrl" json:"coverUrl,omitempty"`
	VideoPlayLenMs    *uint64                 `protobuf:"varint,12,opt,name=videoPlayLenMs" json:"videoPlayLenMs,omitempty"`
	UrlToken          *string                 `protobuf:"bytes,13,opt,name=urlToken" json:"urlToken,omitempty"`
	ThumbUrlToken     *string                 `protobuf:"bytes,14,opt,name=thumbUrlToken" json:"thumbUrlToken,omitempty"`
	CoverUrlToken     *string                 `protobuf:"bytes,15,opt,name=coverUrlToken" json:"coverUrlToken,omitempty"`
	Spec              []*MegaVideoMediaSpec   `protobuf:"bytes,16,rep,name=spec" json:"spec,omitempty"`
	HlsSpec           *FinderHlsMediaSpecList `protobuf:"bytes,17,opt,name=hlsSpec" json:"hlsSpec,omitempty"`
	MediaSpec         *FinderMediaSpecList    `protobuf:"bytes,18,opt,name=mediaSpec" json:"mediaSpec,omitempty"`
	HotFlag           *uint32                 `protobuf:"varint,19,opt,name=hotFlag" json:"hotFlag,omitempty"`
	HalfRect          *FinderHalfRect         `protobuf:"bytes,20,opt,name=halfRect" json:"halfRect,omitempty"`
	FullThumbUrl      *string                 `protobuf:"bytes,21,opt,name=fullThumbUrl" json:"fullThumbUrl,omitempty"`
	FullThumbUrlToken *string                 `protobuf:"bytes,22,opt,name=fullThumbUrlToken" json:"fullThumbUrlToken,omitempty"`
	HdrSpec           *FinderHdrMediaSpecList `protobuf:"bytes,23,opt,name=hdrSpec" json:"hdrSpec,omitempty"`
}

func (x *MegaVideoMedia) Reset() {
	*x = MegaVideoMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoMedia) ProtoMessage() {}

func (x *MegaVideoMedia) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoMedia.ProtoReflect.Descriptor instead.
func (*MegaVideoMedia) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{156}
}

func (x *MegaVideoMedia) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *MegaVideoMedia) GetThumbUrl() string {
	if x != nil && x.ThumbUrl != nil {
		return *x.ThumbUrl
	}
	return ""
}

func (x *MegaVideoMedia) GetMediaType() uint32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *MegaVideoMedia) GetVideoPlayLen() uint32 {
	if x != nil && x.VideoPlayLen != nil {
		return *x.VideoPlayLen
	}
	return 0
}

func (x *MegaVideoMedia) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *MegaVideoMedia) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *MegaVideoMedia) GetMd5Sum() string {
	if x != nil && x.Md5Sum != nil {
		return *x.Md5Sum
	}
	return ""
}

func (x *MegaVideoMedia) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *MegaVideoMedia) GetBitrate() int32 {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return 0
}

func (x *MegaVideoMedia) GetDecodeKey() string {
	if x != nil && x.DecodeKey != nil {
		return *x.DecodeKey
	}
	return ""
}

func (x *MegaVideoMedia) GetCoverUrl() string {
	if x != nil && x.CoverUrl != nil {
		return *x.CoverUrl
	}
	return ""
}

func (x *MegaVideoMedia) GetVideoPlayLenMs() uint64 {
	if x != nil && x.VideoPlayLenMs != nil {
		return *x.VideoPlayLenMs
	}
	return 0
}

func (x *MegaVideoMedia) GetUrlToken() string {
	if x != nil && x.UrlToken != nil {
		return *x.UrlToken
	}
	return ""
}

func (x *MegaVideoMedia) GetThumbUrlToken() string {
	if x != nil && x.ThumbUrlToken != nil {
		return *x.ThumbUrlToken
	}
	return ""
}

func (x *MegaVideoMedia) GetCoverUrlToken() string {
	if x != nil && x.CoverUrlToken != nil {
		return *x.CoverUrlToken
	}
	return ""
}

func (x *MegaVideoMedia) GetSpec() []*MegaVideoMediaSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *MegaVideoMedia) GetHlsSpec() *FinderHlsMediaSpecList {
	if x != nil {
		return x.HlsSpec
	}
	return nil
}

func (x *MegaVideoMedia) GetMediaSpec() *FinderMediaSpecList {
	if x != nil {
		return x.MediaSpec
	}
	return nil
}

func (x *MegaVideoMedia) GetHotFlag() uint32 {
	if x != nil && x.HotFlag != nil {
		return *x.HotFlag
	}
	return 0
}

func (x *MegaVideoMedia) GetHalfRect() *FinderHalfRect {
	if x != nil {
		return x.HalfRect
	}
	return nil
}

func (x *MegaVideoMedia) GetFullThumbUrl() string {
	if x != nil && x.FullThumbUrl != nil {
		return *x.FullThumbUrl
	}
	return ""
}

func (x *MegaVideoMedia) GetFullThumbUrlToken() string {
	if x != nil && x.FullThumbUrlToken != nil {
		return *x.FullThumbUrlToken
	}
	return ""
}

func (x *MegaVideoMedia) GetHdrSpec() *FinderHdrMediaSpecList {
	if x != nil {
		return x.HdrSpec
	}
	return nil
}

type MegaVideoLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude       *float32 `protobuf:"fixed32,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude        *float32 `protobuf:"fixed32,2,opt,name=latitude" json:"latitude,omitempty"`
	City            *string  `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	PoiName         *string  `protobuf:"bytes,4,opt,name=poiName" json:"poiName,omitempty"`
	PoiAddress      *string  `protobuf:"bytes,5,opt,name=poiAddress" json:"poiAddress,omitempty"`
	PoiClassifyId   *string  `protobuf:"bytes,6,opt,name=poiClassifyId" json:"poiClassifyId,omitempty"`
	PoiClassifyType *uint32  `protobuf:"varint,7,opt,name=poiClassifyType" json:"poiClassifyType,omitempty"`
	Province        *string  `protobuf:"bytes,8,opt,name=province" json:"province,omitempty"`
	Region          *string  `protobuf:"bytes,9,opt,name=region" json:"region,omitempty"`
	Country         *string  `protobuf:"bytes,10,opt,name=country" json:"country,omitempty"`
}

func (x *MegaVideoLocation) Reset() {
	*x = MegaVideoLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoLocation) ProtoMessage() {}

func (x *MegaVideoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoLocation.ProtoReflect.Descriptor instead.
func (*MegaVideoLocation) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{157}
}

func (x *MegaVideoLocation) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *MegaVideoLocation) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *MegaVideoLocation) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *MegaVideoLocation) GetPoiName() string {
	if x != nil && x.PoiName != nil {
		return *x.PoiName
	}
	return ""
}

func (x *MegaVideoLocation) GetPoiAddress() string {
	if x != nil && x.PoiAddress != nil {
		return *x.PoiAddress
	}
	return ""
}

func (x *MegaVideoLocation) GetPoiClassifyId() string {
	if x != nil && x.PoiClassifyId != nil {
		return *x.PoiClassifyId
	}
	return ""
}

func (x *MegaVideoLocation) GetPoiClassifyType() uint32 {
	if x != nil && x.PoiClassifyType != nil {
		return *x.PoiClassifyType
	}
	return 0
}

func (x *MegaVideoLocation) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *MegaVideoLocation) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *MegaVideoLocation) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type MegaVideoExtendedReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link  *string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	Title *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *MegaVideoExtendedReading) Reset() {
	*x = MegaVideoExtendedReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoExtendedReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoExtendedReading) ProtoMessage() {}

func (x *MegaVideoExtendedReading) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoExtendedReading.ProtoReflect.Descriptor instead.
func (*MegaVideoExtendedReading) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{158}
}

func (x *MegaVideoExtendedReading) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *MegaVideoExtendedReading) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type MegaVideoDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description  *string                   `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Media        []*MegaVideoMedia         `protobuf:"bytes,2,rep,name=media" json:"media,omitempty"`
	MediaType    *uint32                   `protobuf:"varint,3,opt,name=mediaType" json:"mediaType,omitempty"`
	MixedBuffer  *string                   `protobuf:"bytes,4,opt,name=mixedBuffer" json:"mixedBuffer,omitempty"`
	Location     *MegaVideoLocation        `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	ExtReading   *MegaVideoExtendedReading `protobuf:"bytes,6,opt,name=extReading" json:"extReading,omitempty"`
	FeedLocation *MegaVideoLocation        `protobuf:"bytes,7,opt,name=feedLocation" json:"feedLocation,omitempty"`
}

func (x *MegaVideoDesc) Reset() {
	*x = MegaVideoDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoDesc) ProtoMessage() {}

func (x *MegaVideoDesc) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoDesc.ProtoReflect.Descriptor instead.
func (*MegaVideoDesc) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{159}
}

func (x *MegaVideoDesc) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MegaVideoDesc) GetMedia() []*MegaVideoMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *MegaVideoDesc) GetMediaType() uint32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *MegaVideoDesc) GetMixedBuffer() string {
	if x != nil && x.MixedBuffer != nil {
		return *x.MixedBuffer
	}
	return ""
}

func (x *MegaVideoDesc) GetLocation() *MegaVideoLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *MegaVideoDesc) GetExtReading() *MegaVideoExtendedReading {
	if x != nil {
		return x.ExtReading
	}
	return nil
}

func (x *MegaVideoDesc) GetFeedLocation() *MegaVideoLocation {
	if x != nil {
		return x.FeedLocation
	}
	return nil
}

type MegaVideoFinderBusiness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId      *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	ObjectNonceId *string `protobuf:"bytes,2,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
}

func (x *MegaVideoFinderBusiness) Reset() {
	*x = MegaVideoFinderBusiness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoFinderBusiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoFinderBusiness) ProtoMessage() {}

func (x *MegaVideoFinderBusiness) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoFinderBusiness.ProtoReflect.Descriptor instead.
func (*MegaVideoFinderBusiness) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{160}
}

func (x *MegaVideoFinderBusiness) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *MegaVideoFinderBusiness) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

type MegaVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *uint64                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CreateTime       *uint32                  `protobuf:"varint,2,opt,name=createTime" json:"createTime,omitempty"`
	Desc             *MegaVideoDesc           `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	ForwardCount     *uint32                  `protobuf:"varint,4,opt,name=forwardCount" json:"forwardCount,omitempty"`
	LikeCount        *uint32                  `protobuf:"varint,5,opt,name=likeCount" json:"likeCount,omitempty"`
	CommentCount     *uint32                  `protobuf:"varint,6,opt,name=commentCount" json:"commentCount,omitempty"`
	FavCount         *uint32                  `protobuf:"varint,7,opt,name=favCount" json:"favCount,omitempty"`
	FriendLikeCount  *uint32                  `protobuf:"varint,8,opt,name=friendLikeCount" json:"friendLikeCount,omitempty"`
	SpamFlag         *uint32                  `protobuf:"varint,9,opt,name=spamFlag" json:"spamFlag,omitempty"`
	VideoNonceId     *string                  `protobuf:"bytes,10,opt,name=videoNonceId" json:"videoNonceId,omitempty"`
	IsTest           *bool                    `protobuf:"varint,11,opt,name=isTest" json:"isTest,omitempty"`
	ReadCount        *uint32                  `protobuf:"varint,12,opt,name=readCount" json:"readCount,omitempty"`
	SessionBuffer    *string                  `protobuf:"bytes,13,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	FavFlag          *uint32                  `protobuf:"varint,14,opt,name=favFlag" json:"favFlag,omitempty"`
	UrlValidDuration *uint32                  `protobuf:"varint,15,opt,name=urlValidDuration" json:"urlValidDuration,omitempty"`
	PrivateFlag      *uint32                  `protobuf:"varint,16,opt,name=privateFlag" json:"privateFlag,omitempty"`
	DebugMessage     *string                  `protobuf:"bytes,17,opt,name=debugMessage" json:"debugMessage,omitempty"`
	PermissionFlag   *uint32                  `protobuf:"varint,18,opt,name=permissionFlag" json:"permissionFlag,omitempty"`
	Finder           *MegaVideoFinderBusiness `protobuf:"bytes,19,opt,name=finder" json:"finder,omitempty"`
	Status           *uint32                  `protobuf:"varint,20,opt,name=status" json:"status,omitempty"`
	SpamWording      *string                  `protobuf:"bytes,21,opt,name=spamWording" json:"spamWording,omitempty"`
	BulletCount      *uint32                  `protobuf:"varint,22,opt,name=bulletCount" json:"bulletCount,omitempty"`
	LikeFlag         *uint32                  `protobuf:"varint,23,opt,name=likeFlag" json:"likeFlag,omitempty"`
	WarnFlag         *uint32                  `protobuf:"varint,24,opt,name=warnFlag" json:"warnFlag,omitempty"`
	WarnWording      *string                  `protobuf:"bytes,25,opt,name=warnWording" json:"warnWording,omitempty"`
}

func (x *MegaVideo) Reset() {
	*x = MegaVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideo) ProtoMessage() {}

func (x *MegaVideo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideo.ProtoReflect.Descriptor instead.
func (*MegaVideo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{161}
}

func (x *MegaVideo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MegaVideo) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *MegaVideo) GetDesc() *MegaVideoDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *MegaVideo) GetForwardCount() uint32 {
	if x != nil && x.ForwardCount != nil {
		return *x.ForwardCount
	}
	return 0
}

func (x *MegaVideo) GetLikeCount() uint32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *MegaVideo) GetCommentCount() uint32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *MegaVideo) GetFavCount() uint32 {
	if x != nil && x.FavCount != nil {
		return *x.FavCount
	}
	return 0
}

func (x *MegaVideo) GetFriendLikeCount() uint32 {
	if x != nil && x.FriendLikeCount != nil {
		return *x.FriendLikeCount
	}
	return 0
}

func (x *MegaVideo) GetSpamFlag() uint32 {
	if x != nil && x.SpamFlag != nil {
		return *x.SpamFlag
	}
	return 0
}

func (x *MegaVideo) GetVideoNonceId() string {
	if x != nil && x.VideoNonceId != nil {
		return *x.VideoNonceId
	}
	return ""
}

func (x *MegaVideo) GetIsTest() bool {
	if x != nil && x.IsTest != nil {
		return *x.IsTest
	}
	return false
}

func (x *MegaVideo) GetReadCount() uint32 {
	if x != nil && x.ReadCount != nil {
		return *x.ReadCount
	}
	return 0
}

func (x *MegaVideo) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *MegaVideo) GetFavFlag() uint32 {
	if x != nil && x.FavFlag != nil {
		return *x.FavFlag
	}
	return 0
}

func (x *MegaVideo) GetUrlValidDuration() uint32 {
	if x != nil && x.UrlValidDuration != nil {
		return *x.UrlValidDuration
	}
	return 0
}

func (x *MegaVideo) GetPrivateFlag() uint32 {
	if x != nil && x.PrivateFlag != nil {
		return *x.PrivateFlag
	}
	return 0
}

func (x *MegaVideo) GetDebugMessage() string {
	if x != nil && x.DebugMessage != nil {
		return *x.DebugMessage
	}
	return ""
}

func (x *MegaVideo) GetPermissionFlag() uint32 {
	if x != nil && x.PermissionFlag != nil {
		return *x.PermissionFlag
	}
	return 0
}

func (x *MegaVideo) GetFinder() *MegaVideoFinderBusiness {
	if x != nil {
		return x.Finder
	}
	return nil
}

func (x *MegaVideo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *MegaVideo) GetSpamWording() string {
	if x != nil && x.SpamWording != nil {
		return *x.SpamWording
	}
	return ""
}

func (x *MegaVideo) GetBulletCount() uint32 {
	if x != nil && x.BulletCount != nil {
		return *x.BulletCount
	}
	return 0
}

func (x *MegaVideo) GetLikeFlag() uint32 {
	if x != nil && x.LikeFlag != nil {
		return *x.LikeFlag
	}
	return 0
}

func (x *MegaVideo) GetWarnFlag() uint32 {
	if x != nil && x.WarnFlag != nil {
		return *x.WarnFlag
	}
	return 0
}

func (x *MegaVideo) GetWarnWording() string {
	if x != nil && x.WarnWording != nil {
		return *x.WarnWording
	}
	return ""
}

type FinderVideoAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *uint64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Video        *MegaVideo `protobuf:"bytes,2,opt,name=video" json:"video,omitempty"`
	VideoNonceId *string    `protobuf:"bytes,3,opt,name=videoNonceId" json:"videoNonceId,omitempty"`
}

func (x *FinderVideoAttachment) Reset() {
	*x = FinderVideoAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderVideoAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderVideoAttachment) ProtoMessage() {}

func (x *FinderVideoAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderVideoAttachment.ProtoReflect.Descriptor instead.
func (*FinderVideoAttachment) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{162}
}

func (x *FinderVideoAttachment) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FinderVideoAttachment) GetVideo() *MegaVideo {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *FinderVideoAttachment) GetVideoNonceId() string {
	if x != nil && x.VideoNonceId != nil {
		return *x.VideoNonceId
	}
	return ""
}

type FinderMiniAppAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       *string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	Path        *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Style       *uint32 `protobuf:"varint,3,opt,name=style" json:"style,omitempty"`
	FetchInfoId *string `protobuf:"bytes,4,opt,name=fetchInfoId" json:"fetchInfoId,omitempty"`
	AppName     *string `protobuf:"bytes,5,opt,name=appName" json:"appName,omitempty"`
}

func (x *FinderMiniAppAttachment) Reset() {
	*x = FinderMiniAppAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMiniAppAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMiniAppAttachment) ProtoMessage() {}

func (x *FinderMiniAppAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMiniAppAttachment.ProtoReflect.Descriptor instead.
func (*FinderMiniAppAttachment) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{163}
}

func (x *FinderMiniAppAttachment) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *FinderMiniAppAttachment) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FinderMiniAppAttachment) GetStyle() uint32 {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return 0
}

func (x *FinderMiniAppAttachment) GetFetchInfoId() string {
	if x != nil && x.FetchInfoId != nil {
		return *x.FetchInfoId
	}
	return ""
}

func (x *FinderMiniAppAttachment) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

type FinderJumpInfoAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JumpInfo *FinderJumpInfo `protobuf:"bytes,1,opt,name=jumpInfo" json:"jumpInfo,omitempty"`
}

func (x *FinderJumpInfoAttachment) Reset() {
	*x = FinderJumpInfoAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJumpInfoAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJumpInfoAttachment) ProtoMessage() {}

func (x *FinderJumpInfoAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJumpInfoAttachment.ProtoReflect.Descriptor instead.
func (*FinderJumpInfoAttachment) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{164}
}

func (x *FinderJumpInfoAttachment) GetJumpInfo() *FinderJumpInfo {
	if x != nil {
		return x.JumpInfo
	}
	return nil
}

type FinderAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *uint32                   `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Video    *FinderVideoAttachment    `protobuf:"bytes,2,opt,name=video" json:"video,omitempty"`
	MiniApp  *FinderMiniAppAttachment  `protobuf:"bytes,3,opt,name=miniApp" json:"miniApp,omitempty"`
	JumpInfo *FinderJumpInfoAttachment `protobuf:"bytes,4,opt,name=jumpInfo" json:"jumpInfo,omitempty"`
}

func (x *FinderAttachment) Reset() {
	*x = FinderAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderAttachment) ProtoMessage() {}

func (x *FinderAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderAttachment.ProtoReflect.Descriptor instead.
func (*FinderAttachment) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{165}
}

func (x *FinderAttachment) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderAttachment) GetVideo() *FinderVideoAttachment {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *FinderAttachment) GetMiniApp() *FinderMiniAppAttachment {
	if x != nil {
		return x.MiniApp
	}
	return nil
}

func (x *FinderAttachment) GetJumpInfo() *FinderJumpInfoAttachment {
	if x != nil {
		return x.JumpInfo
	}
	return nil
}

type FinderAttachmentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attachments []*FinderAttachment `protobuf:"bytes,1,rep,name=attachments" json:"attachments,omitempty"`
}

func (x *FinderAttachmentList) Reset() {
	*x = FinderAttachmentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderAttachmentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderAttachmentList) ProtoMessage() {}

func (x *FinderAttachmentList) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderAttachmentList.ProtoReflect.Descriptor instead.
func (*FinderAttachmentList) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{166}
}

func (x *FinderAttachmentList) GetAttachments() []*FinderAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type FinderSnsShareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *uint32          `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	ShareCount    *uint32          `protobuf:"varint,2,opt,name=shareCount" json:"shareCount,omitempty"`
	WatchingCount *uint32          `protobuf:"varint,3,opt,name=watchingCount" json:"watchingCount,omitempty"`
	ShareList     []*FinderContact `protobuf:"bytes,4,rep,name=shareList" json:"shareList,omitempty"`
}

func (x *FinderSnsShareInfo) Reset() {
	*x = FinderSnsShareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSnsShareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSnsShareInfo) ProtoMessage() {}

func (x *FinderSnsShareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSnsShareInfo.ProtoReflect.Descriptor instead.
func (*FinderSnsShareInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{167}
}

func (x *FinderSnsShareInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderSnsShareInfo) GetShareCount() uint32 {
	if x != nil && x.ShareCount != nil {
		return *x.ShareCount
	}
	return 0
}

func (x *FinderSnsShareInfo) GetWatchingCount() uint32 {
	if x != nil && x.WatchingCount != nil {
		return *x.WatchingCount
	}
	return 0
}

func (x *FinderSnsShareInfo) GetShareList() []*FinderContact {
	if x != nil {
		return x.ShareList
	}
	return nil
}

type FinderObjectWebInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (x *FinderObjectWebInfo) Reset() {
	*x = FinderObjectWebInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectWebInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectWebInfo) ProtoMessage() {}

func (x *FinderObjectWebInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectWebInfo.ProtoReflect.Descriptor instead.
func (*FinderObjectWebInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{168}
}

func (x *FinderObjectWebInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type ObjectAdDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wording         *string `protobuf:"bytes,1,opt,name=wording" json:"wording,omitempty"`
	IconUrl         *string `protobuf:"bytes,2,opt,name=iconUrl" json:"iconUrl,omitempty"`
	RecommendReason *string `protobuf:"bytes,3,opt,name=recommendReason" json:"recommendReason,omitempty"`
}

func (x *ObjectAdDesc) Reset() {
	*x = ObjectAdDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAdDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAdDesc) ProtoMessage() {}

func (x *ObjectAdDesc) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAdDesc.ProtoReflect.Descriptor instead.
func (*ObjectAdDesc) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{169}
}

func (x *ObjectAdDesc) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *ObjectAdDesc) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *ObjectAdDesc) GetRecommendReason() string {
	if x != nil && x.RecommendReason != nil {
		return *x.RecommendReason
	}
	return ""
}

type ObjectAdContentH5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (x *ObjectAdContentH5) Reset() {
	*x = ObjectAdContentH5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAdContentH5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAdContentH5) ProtoMessage() {}

func (x *ObjectAdContentH5) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAdContentH5.ProtoReflect.Descriptor instead.
func (*ObjectAdContentH5) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{170}
}

func (x *ObjectAdContentH5) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type ObjectAdContentMiniApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       *string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	Path        *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Style       *uint32 `protobuf:"varint,3,opt,name=style" json:"style,omitempty"`
	FetchInfoId *string `protobuf:"bytes,4,opt,name=fetchInfoId" json:"fetchInfoId,omitempty"`
}

func (x *ObjectAdContentMiniApp) Reset() {
	*x = ObjectAdContentMiniApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAdContentMiniApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAdContentMiniApp) ProtoMessage() {}

func (x *ObjectAdContentMiniApp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAdContentMiniApp.ProtoReflect.Descriptor instead.
func (*ObjectAdContentMiniApp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{171}
}

func (x *ObjectAdContentMiniApp) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *ObjectAdContentMiniApp) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *ObjectAdContentMiniApp) GetStyle() uint32 {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return 0
}

func (x *ObjectAdContentMiniApp) GetFetchInfoId() string {
	if x != nil && x.FetchInfoId != nil {
		return *x.FetchInfoId
	}
	return ""
}

type ObjectAdContentLeadLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Canvasid *uint64 `protobuf:"varint,2,opt,name=canvasid" json:"canvasid,omitempty"`
}

func (x *ObjectAdContentLeadLink) Reset() {
	*x = ObjectAdContentLeadLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAdContentLeadLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAdContentLeadLink) ProtoMessage() {}

func (x *ObjectAdContentLeadLink) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAdContentLeadLink.ProtoReflect.Descriptor instead.
func (*ObjectAdContentLeadLink) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{172}
}

func (x *ObjectAdContentLeadLink) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *ObjectAdContentLeadLink) GetCanvasid() uint64 {
	if x != nil && x.Canvasid != nil {
		return *x.Canvasid
	}
	return 0
}

type ObjectAdItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdType     *uint32                  `protobuf:"varint,1,opt,name=adType" json:"adType,omitempty"`
	AdDesc     *ObjectAdDesc            `protobuf:"bytes,2,opt,name=adDesc" json:"adDesc,omitempty"`
	AdH5       *ObjectAdContentH5       `protobuf:"bytes,3,opt,name=adH5" json:"adH5,omitempty"`
	AdMiniApp  *ObjectAdContentMiniApp  `protobuf:"bytes,4,opt,name=adMiniApp" json:"adMiniApp,omitempty"`
	AdLeadLink *ObjectAdContentLeadLink `protobuf:"bytes,5,opt,name=adLeadLink" json:"adLeadLink,omitempty"`
	Uxinfo     *string                  `protobuf:"bytes,20,opt,name=uxinfo" json:"uxinfo,omitempty"`
	Aid        *uint64                  `protobuf:"varint,21,opt,name=aid" json:"aid,omitempty"`
}

func (x *ObjectAdItem) Reset() {
	*x = ObjectAdItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAdItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAdItem) ProtoMessage() {}

func (x *ObjectAdItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAdItem.ProtoReflect.Descriptor instead.
func (*ObjectAdItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{173}
}

func (x *ObjectAdItem) GetAdType() uint32 {
	if x != nil && x.AdType != nil {
		return *x.AdType
	}
	return 0
}

func (x *ObjectAdItem) GetAdDesc() *ObjectAdDesc {
	if x != nil {
		return x.AdDesc
	}
	return nil
}

func (x *ObjectAdItem) GetAdH5() *ObjectAdContentH5 {
	if x != nil {
		return x.AdH5
	}
	return nil
}

func (x *ObjectAdItem) GetAdMiniApp() *ObjectAdContentMiniApp {
	if x != nil {
		return x.AdMiniApp
	}
	return nil
}

func (x *ObjectAdItem) GetAdLeadLink() *ObjectAdContentLeadLink {
	if x != nil {
		return x.AdLeadLink
	}
	return nil
}

func (x *ObjectAdItem) GetUxinfo() string {
	if x != nil && x.Uxinfo != nil {
		return *x.Uxinfo
	}
	return ""
}

func (x *ObjectAdItem) GetAid() uint64 {
	if x != nil && x.Aid != nil {
		return *x.Aid
	}
	return 0
}

type FinderObjectAdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdType     *uint32                  `protobuf:"varint,1,opt,name=adType" json:"adType,omitempty"`
	AdDesc     *ObjectAdDesc            `protobuf:"bytes,2,opt,name=adDesc" json:"adDesc,omitempty"`
	AdH5       *ObjectAdContentH5       `protobuf:"bytes,3,opt,name=adH5" json:"adH5,omitempty"`
	AdMiniApp  *ObjectAdContentMiniApp  `protobuf:"bytes,4,opt,name=adMiniApp" json:"adMiniApp,omitempty"`
	AdLeadLink *ObjectAdContentLeadLink `protobuf:"bytes,5,opt,name=adLeadLink" json:"adLeadLink,omitempty"`
	AdItems    []*ObjectAdItem          `protobuf:"bytes,6,rep,name=adItems" json:"adItems,omitempty"`
}

func (x *FinderObjectAdInfo) Reset() {
	*x = FinderObjectAdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectAdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectAdInfo) ProtoMessage() {}

func (x *FinderObjectAdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectAdInfo.ProtoReflect.Descriptor instead.
func (*FinderObjectAdInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{174}
}

func (x *FinderObjectAdInfo) GetAdType() uint32 {
	if x != nil && x.AdType != nil {
		return *x.AdType
	}
	return 0
}

func (x *FinderObjectAdInfo) GetAdDesc() *ObjectAdDesc {
	if x != nil {
		return x.AdDesc
	}
	return nil
}

func (x *FinderObjectAdInfo) GetAdH5() *ObjectAdContentH5 {
	if x != nil {
		return x.AdH5
	}
	return nil
}

func (x *FinderObjectAdInfo) GetAdMiniApp() *ObjectAdContentMiniApp {
	if x != nil {
		return x.AdMiniApp
	}
	return nil
}

func (x *FinderObjectAdInfo) GetAdLeadLink() *ObjectAdContentLeadLink {
	if x != nil {
		return x.AdLeadLink
	}
	return nil
}

func (x *FinderObjectAdInfo) GetAdItems() []*ObjectAdItem {
	if x != nil {
		return x.AdItems
	}
	return nil
}

type FinderSearchHotWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HotwordText   *string          `protobuf:"bytes,1,opt,name=hotwordText" json:"hotwordText,omitempty"`
	ActionType    *uint32          `protobuf:"varint,2,opt,name=actionType" json:"actionType,omitempty"`
	Link          *string          `protobuf:"bytes,3,opt,name=link" json:"link,omitempty"`
	Appid         *string          `protobuf:"bytes,4,opt,name=appid" json:"appid,omitempty"`
	SessionBuffer []byte           `protobuf:"bytes,5,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	ReasonWording *string          `protobuf:"bytes,6,opt,name=reasonWording" json:"reasonWording,omitempty"`
	EventInfo     *FinderEventInfo `protobuf:"bytes,7,opt,name=eventInfo" json:"eventInfo,omitempty"`
	HotwordId     *uint64          `protobuf:"varint,8,opt,name=hotwordId" json:"hotwordId,omitempty"`
}

func (x *FinderSearchHotWord) Reset() {
	*x = FinderSearchHotWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchHotWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchHotWord) ProtoMessage() {}

func (x *FinderSearchHotWord) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchHotWord.ProtoReflect.Descriptor instead.
func (*FinderSearchHotWord) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{175}
}

func (x *FinderSearchHotWord) GetHotwordText() string {
	if x != nil && x.HotwordText != nil {
		return *x.HotwordText
	}
	return ""
}

func (x *FinderSearchHotWord) GetActionType() uint32 {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return 0
}

func (x *FinderSearchHotWord) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *FinderSearchHotWord) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *FinderSearchHotWord) GetSessionBuffer() []byte {
	if x != nil {
		return x.SessionBuffer
	}
	return nil
}

func (x *FinderSearchHotWord) GetReasonWording() string {
	if x != nil && x.ReasonWording != nil {
		return *x.ReasonWording
	}
	return ""
}

func (x *FinderSearchHotWord) GetEventInfo() *FinderEventInfo {
	if x != nil {
		return x.EventInfo
	}
	return nil
}

func (x *FinderSearchHotWord) GetHotwordId() uint64 {
	if x != nil && x.HotwordId != nil {
		return *x.HotwordId
	}
	return 0
}

type FinderObjectHotWordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectHotWord      *FinderSearchHotWord   `protobuf:"bytes,1,opt,name=objectHotWord" json:"objectHotWord,omitempty"`
	HotWordList        []*FinderSearchHotWord `protobuf:"bytes,2,rep,name=hotWordList" json:"hotWordList,omitempty"`
	ObjHotwordInfoBuff []byte                 `protobuf:"bytes,3,opt,name=objHotwordInfoBuff" json:"objHotwordInfoBuff,omitempty"`
}

func (x *FinderObjectHotWordInfo) Reset() {
	*x = FinderObjectHotWordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectHotWordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectHotWordInfo) ProtoMessage() {}

func (x *FinderObjectHotWordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectHotWordInfo.ProtoReflect.Descriptor instead.
func (*FinderObjectHotWordInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{176}
}

func (x *FinderObjectHotWordInfo) GetObjectHotWord() *FinderSearchHotWord {
	if x != nil {
		return x.ObjectHotWord
	}
	return nil
}

func (x *FinderObjectHotWordInfo) GetHotWordList() []*FinderSearchHotWord {
	if x != nil {
		return x.HotWordList
	}
	return nil
}

func (x *FinderObjectHotWordInfo) GetObjHotwordInfoBuff() []byte {
	if x != nil {
		return x.ObjHotwordInfoBuff
	}
	return nil
}

type FinderTipsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReviewWording *string `protobuf:"bytes,1,opt,name=reviewWording" json:"reviewWording,omitempty"`
}

func (x *FinderTipsInfo) Reset() {
	*x = FinderTipsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTipsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTipsInfo) ProtoMessage() {}

func (x *FinderTipsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTipsInfo.ProtoReflect.Descriptor instead.
func (*FinderTipsInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{177}
}

func (x *FinderTipsInfo) GetReviewWording() string {
	if x != nil && x.ReviewWording != nil {
		return *x.ReviewWording
	}
	return ""
}

type FinderObjectClientLocalBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecvClientTimeMs *uint64 `protobuf:"varint,1,opt,name=recvClientTimeMs" json:"recvClientTimeMs,omitempty"`
}

func (x *FinderObjectClientLocalBuffer) Reset() {
	*x = FinderObjectClientLocalBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectClientLocalBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectClientLocalBuffer) ProtoMessage() {}

func (x *FinderObjectClientLocalBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectClientLocalBuffer.ProtoReflect.Descriptor instead.
func (*FinderObjectClientLocalBuffer) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{178}
}

func (x *FinderObjectClientLocalBuffer) GetRecvClientTimeMs() uint64 {
	if x != nil && x.RecvClientTimeMs != nil {
		return *x.RecvClientTimeMs
	}
	return 0
}

type FinderPublisherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname *string `protobuf:"bytes,1,opt,name=nickname" json:"nickname,omitempty"`
	HeadUrl  *string `protobuf:"bytes,2,opt,name=headUrl" json:"headUrl,omitempty"`
}

func (x *FinderPublisherInfo) Reset() {
	*x = FinderPublisherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPublisherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPublisherInfo) ProtoMessage() {}

func (x *FinderPublisherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPublisherInfo.ProtoReflect.Descriptor instead.
func (*FinderPublisherInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{179}
}

func (x *FinderPublisherInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderPublisherInfo) GetHeadUrl() string {
	if x != nil && x.HeadUrl != nil {
		return *x.HeadUrl
	}
	return ""
}

type FinderObjectPlaceHolderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowWording *string `protobuf:"bytes,1,opt,name=showWording" json:"showWording,omitempty"`
	Errcode     *int32  `protobuf:"varint,2,opt,name=errcode" json:"errcode,omitempty"`
}

func (x *FinderObjectPlaceHolderInfo) Reset() {
	*x = FinderObjectPlaceHolderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectPlaceHolderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectPlaceHolderInfo) ProtoMessage() {}

func (x *FinderObjectPlaceHolderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectPlaceHolderInfo.ProtoReflect.Descriptor instead.
func (*FinderObjectPlaceHolderInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{180}
}

func (x *FinderObjectPlaceHolderInfo) GetShowWording() string {
	if x != nil && x.ShowWording != nil {
		return *x.ShowWording
	}
	return ""
}

func (x *FinderObjectPlaceHolderInfo) GetErrcode() int32 {
	if x != nil && x.Errcode != nil {
		return *x.Errcode
	}
	return 0
}

type FinderObjectFavInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarFavFlag        *uint32 `protobuf:"varint,1,opt,name=starFavFlag" json:"starFavFlag,omitempty"`
	StarFavCount       *uint32 `protobuf:"varint,2,opt,name=starFavCount" json:"starFavCount,omitempty"`
	FingerlikeFavFlag  *uint32 `protobuf:"varint,3,opt,name=fingerlikeFavFlag" json:"fingerlikeFavFlag,omitempty"`
	FingerlikeFavCount *uint32 `protobuf:"varint,4,opt,name=fingerlikeFavCount" json:"fingerlikeFavCount,omitempty"`
}

func (x *FinderObjectFavInfo) Reset() {
	*x = FinderObjectFavInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectFavInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectFavInfo) ProtoMessage() {}

func (x *FinderObjectFavInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectFavInfo.ProtoReflect.Descriptor instead.
func (*FinderObjectFavInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{181}
}

func (x *FinderObjectFavInfo) GetStarFavFlag() uint32 {
	if x != nil && x.StarFavFlag != nil {
		return *x.StarFavFlag
	}
	return 0
}

func (x *FinderObjectFavInfo) GetStarFavCount() uint32 {
	if x != nil && x.StarFavCount != nil {
		return *x.StarFavCount
	}
	return 0
}

func (x *FinderObjectFavInfo) GetFingerlikeFavFlag() uint32 {
	if x != nil && x.FingerlikeFavFlag != nil {
		return *x.FingerlikeFavFlag
	}
	return 0
}

func (x *FinderObjectFavInfo) GetFingerlikeFavCount() uint32 {
	if x != nil && x.FingerlikeFavCount != nil {
		return *x.FingerlikeFavCount
	}
	return 0
}

type FinderForwardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderForwardSource *string `protobuf:"bytes,1,opt,name=finderForwardSource" json:"finderForwardSource,omitempty"`
}

func (x *FinderForwardInfo) Reset() {
	*x = FinderForwardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderForwardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderForwardInfo) ProtoMessage() {}

func (x *FinderForwardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderForwardInfo.ProtoReflect.Descriptor instead.
func (*FinderForwardInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{182}
}

func (x *FinderForwardInfo) GetFinderForwardSource() string {
	if x != nil && x.FinderForwardSource != nil {
		return *x.FinderForwardSource
	}
	return ""
}

type FinderCollectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionTopicId *uint64 `protobuf:"varint,1,opt,name=collectionTopicId" json:"collectionTopicId,omitempty"`
	CollectionName    *string `protobuf:"bytes,2,opt,name=collectionName" json:"collectionName,omitempty"`
	CollectionDesc    *string `protobuf:"bytes,3,opt,name=collectionDesc" json:"collectionDesc,omitempty"`
	CoverImgUrl       *string `protobuf:"bytes,4,opt,name=coverImgUrl" json:"coverImgUrl,omitempty"`
	FeedCount         *uint32 `protobuf:"varint,5,opt,name=feedCount" json:"feedCount,omitempty"`
	ReadCount         *uint32 `protobuf:"varint,6,opt,name=readCount" json:"readCount,omitempty"`
	FeedSortId        *uint32 `protobuf:"varint,7,opt,name=feedSortId" json:"feedSortId,omitempty"`
	LastUpdateTime    *uint32 `protobuf:"varint,8,opt,name=lastUpdateTime" json:"lastUpdateTime,omitempty"`
	NextObjectId      *uint64 `protobuf:"varint,9,opt,name=nextObjectId" json:"nextObjectId,omitempty"`
}

func (x *FinderCollectionInfo) Reset() {
	*x = FinderCollectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCollectionInfo) ProtoMessage() {}

func (x *FinderCollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCollectionInfo.ProtoReflect.Descriptor instead.
func (*FinderCollectionInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{183}
}

func (x *FinderCollectionInfo) GetCollectionTopicId() uint64 {
	if x != nil && x.CollectionTopicId != nil {
		return *x.CollectionTopicId
	}
	return 0
}

func (x *FinderCollectionInfo) GetCollectionName() string {
	if x != nil && x.CollectionName != nil {
		return *x.CollectionName
	}
	return ""
}

func (x *FinderCollectionInfo) GetCollectionDesc() string {
	if x != nil && x.CollectionDesc != nil {
		return *x.CollectionDesc
	}
	return ""
}

func (x *FinderCollectionInfo) GetCoverImgUrl() string {
	if x != nil && x.CoverImgUrl != nil {
		return *x.CoverImgUrl
	}
	return ""
}

func (x *FinderCollectionInfo) GetFeedCount() uint32 {
	if x != nil && x.FeedCount != nil {
		return *x.FeedCount
	}
	return 0
}

func (x *FinderCollectionInfo) GetReadCount() uint32 {
	if x != nil && x.ReadCount != nil {
		return *x.ReadCount
	}
	return 0
}

func (x *FinderCollectionInfo) GetFeedSortId() uint32 {
	if x != nil && x.FeedSortId != nil {
		return *x.FeedSortId
	}
	return 0
}

func (x *FinderCollectionInfo) GetLastUpdateTime() uint32 {
	if x != nil && x.LastUpdateTime != nil {
		return *x.LastUpdateTime
	}
	return 0
}

func (x *FinderCollectionInfo) GetNextObjectId() uint64 {
	if x != nil && x.NextObjectId != nil {
		return *x.NextObjectId
	}
	return 0
}

type FinderPreloadUserpageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPreload *bool   `protobuf:"varint,1,opt,name=isPreload" json:"isPreload,omitempty"`
	WaitTime  *uint32 `protobuf:"varint,2,opt,name=waitTime" json:"waitTime,omitempty"`
}

func (x *FinderPreloadUserpageInfo) Reset() {
	*x = FinderPreloadUserpageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPreloadUserpageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPreloadUserpageInfo) ProtoMessage() {}

func (x *FinderPreloadUserpageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPreloadUserpageInfo.ProtoReflect.Descriptor instead.
func (*FinderPreloadUserpageInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{184}
}

func (x *FinderPreloadUserpageInfo) GetIsPreload() bool {
	if x != nil && x.IsPreload != nil {
		return *x.IsPreload
	}
	return false
}

func (x *FinderPreloadUserpageInfo) GetWaitTime() uint32 {
	if x != nil && x.WaitTime != nil {
		return *x.WaitTime
	}
	return 0
}

type FinderObjectAdvertisementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JumpInfo         *FinderJumpInfo `protobuf:"bytes,1,opt,name=jumpInfo" json:"jumpInfo,omitempty"`
	Aid              *uint64         `protobuf:"varint,2,opt,name=aid" json:"aid,omitempty"`
	Uxinfo           *string         `protobuf:"bytes,3,opt,name=uxinfo" json:"uxinfo,omitempty"`
	ReportExtraData  *string         `protobuf:"bytes,4,opt,name=reportExtraData" json:"reportExtraData,omitempty"`
	AdType           *uint64         `protobuf:"varint,5,opt,name=adType" json:"adType,omitempty"`
	OriginalObjectid *uint64         `protobuf:"varint,6,opt,name=originalObjectid" json:"originalObjectid,omitempty"`
	AccountJumpInfo  *FinderJumpInfo `protobuf:"bytes,7,opt,name=accountJumpInfo" json:"accountJumpInfo,omitempty"`
}

func (x *FinderObjectAdvertisementInfo) Reset() {
	*x = FinderObjectAdvertisementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectAdvertisementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectAdvertisementInfo) ProtoMessage() {}

func (x *FinderObjectAdvertisementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectAdvertisementInfo.ProtoReflect.Descriptor instead.
func (*FinderObjectAdvertisementInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{185}
}

func (x *FinderObjectAdvertisementInfo) GetJumpInfo() *FinderJumpInfo {
	if x != nil {
		return x.JumpInfo
	}
	return nil
}

func (x *FinderObjectAdvertisementInfo) GetAid() uint64 {
	if x != nil && x.Aid != nil {
		return *x.Aid
	}
	return 0
}

func (x *FinderObjectAdvertisementInfo) GetUxinfo() string {
	if x != nil && x.Uxinfo != nil {
		return *x.Uxinfo
	}
	return ""
}

func (x *FinderObjectAdvertisementInfo) GetReportExtraData() string {
	if x != nil && x.ReportExtraData != nil {
		return *x.ReportExtraData
	}
	return ""
}

func (x *FinderObjectAdvertisementInfo) GetAdType() uint64 {
	if x != nil && x.AdType != nil {
		return *x.AdType
	}
	return 0
}

func (x *FinderObjectAdvertisementInfo) GetOriginalObjectid() uint64 {
	if x != nil && x.OriginalObjectid != nil {
		return *x.OriginalObjectid
	}
	return 0
}

func (x *FinderObjectAdvertisementInfo) GetAccountJumpInfo() *FinderJumpInfo {
	if x != nil {
		return x.AccountJumpInfo
	}
	return nil
}

type FinderObjectExtend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionInfo       *FinderCollectionInfo          `protobuf:"bytes,1,opt,name=collectionInfo" json:"collectionInfo,omitempty"`
	FavInfo              *FinderObjectFavInfo           `protobuf:"bytes,2,opt,name=favInfo" json:"favInfo,omitempty"`
	NatureFlag           *uint32                        `protobuf:"varint,3,opt,name=natureFlag" json:"natureFlag,omitempty"`
	PreloadUerpage       *FinderPreloadUserpageInfo     `protobuf:"bytes,5,opt,name=preloadUerpage" json:"preloadUerpage,omitempty"`
	AdvertisementInfo    *FinderObjectAdvertisementInfo `protobuf:"bytes,6,opt,name=advertisementInfo" json:"advertisementInfo,omitempty"`
	InternalClickCopyMsg *string                        `protobuf:"bytes,7,opt,name=internalClickCopyMsg" json:"internalClickCopyMsg,omitempty"`
	FinderForwardInfo    *FinderForwardInfo             `protobuf:"bytes,9,opt,name=finderForwardInfo" json:"finderForwardInfo,omitempty"`
}

func (x *FinderObjectExtend) Reset() {
	*x = FinderObjectExtend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectExtend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectExtend) ProtoMessage() {}

func (x *FinderObjectExtend) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectExtend.ProtoReflect.Descriptor instead.
func (*FinderObjectExtend) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{186}
}

func (x *FinderObjectExtend) GetCollectionInfo() *FinderCollectionInfo {
	if x != nil {
		return x.CollectionInfo
	}
	return nil
}

func (x *FinderObjectExtend) GetFavInfo() *FinderObjectFavInfo {
	if x != nil {
		return x.FavInfo
	}
	return nil
}

func (x *FinderObjectExtend) GetNatureFlag() uint32 {
	if x != nil && x.NatureFlag != nil {
		return *x.NatureFlag
	}
	return 0
}

func (x *FinderObjectExtend) GetPreloadUerpage() *FinderPreloadUserpageInfo {
	if x != nil {
		return x.PreloadUerpage
	}
	return nil
}

func (x *FinderObjectExtend) GetAdvertisementInfo() *FinderObjectAdvertisementInfo {
	if x != nil {
		return x.AdvertisementInfo
	}
	return nil
}

func (x *FinderObjectExtend) GetInternalClickCopyMsg() string {
	if x != nil && x.InternalClickCopyMsg != nil {
		return *x.InternalClickCopyMsg
	}
	return ""
}

func (x *FinderObjectExtend) GetFinderForwardInfo() *FinderForwardInfo {
	if x != nil {
		return x.FinderForwardInfo
	}
	return nil
}

type FinderRecommendLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendLabelType    *uint32 `protobuf:"varint,1,opt,name=recommendLabelType" json:"recommendLabelType,omitempty"`
	RecommendLabelWording *string `protobuf:"bytes,2,opt,name=recommendLabelWording" json:"recommendLabelWording,omitempty"`
}

func (x *FinderRecommendLabel) Reset() {
	*x = FinderRecommendLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderRecommendLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderRecommendLabel) ProtoMessage() {}

func (x *FinderRecommendLabel) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderRecommendLabel.ProtoReflect.Descriptor instead.
func (*FinderRecommendLabel) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{187}
}

func (x *FinderRecommendLabel) GetRecommendLabelType() uint32 {
	if x != nil && x.RecommendLabelType != nil {
		return *x.RecommendLabelType
	}
	return 0
}

func (x *FinderRecommendLabel) GetRecommendLabelWording() string {
	if x != nil && x.RecommendLabelWording != nil {
		return *x.RecommendLabelWording
	}
	return ""
}

type FinderMusicRealtimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefCount  *uint64 `protobuf:"varint,1,opt,name=refCount" json:"refCount,omitempty"`
	PlayCount *uint64 `protobuf:"varint,2,opt,name=playCount" json:"playCount,omitempty"`
}

func (x *FinderMusicRealtimeInfo) Reset() {
	*x = FinderMusicRealtimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMusicRealtimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMusicRealtimeInfo) ProtoMessage() {}

func (x *FinderMusicRealtimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMusicRealtimeInfo.ProtoReflect.Descriptor instead.
func (*FinderMusicRealtimeInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{188}
}

func (x *FinderMusicRealtimeInfo) GetRefCount() uint64 {
	if x != nil && x.RefCount != nil {
		return *x.RefCount
	}
	return 0
}

func (x *FinderMusicRealtimeInfo) GetPlayCount() uint64 {
	if x != nil && x.PlayCount != nil {
		return *x.PlayCount
	}
	return 0
}

type FinderPlayHistoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreakpointTimeMs *uint32 `protobuf:"varint,1,opt,name=breakpointTimeMs" json:"breakpointTimeMs,omitempty"`
	LastPlayTime     *uint64 `protobuf:"varint,2,opt,name=lastPlayTime" json:"lastPlayTime,omitempty"`
}

func (x *FinderPlayHistoryInfo) Reset() {
	*x = FinderPlayHistoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPlayHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPlayHistoryInfo) ProtoMessage() {}

func (x *FinderPlayHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPlayHistoryInfo.ProtoReflect.Descriptor instead.
func (*FinderPlayHistoryInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{189}
}

func (x *FinderPlayHistoryInfo) GetBreakpointTimeMs() uint32 {
	if x != nil && x.BreakpointTimeMs != nil {
		return *x.BreakpointTimeMs
	}
	return 0
}

func (x *FinderPlayHistoryInfo) GetLastPlayTime() uint64 {
	if x != nil && x.LastPlayTime != nil {
		return *x.LastPlayTime
	}
	return 0
}

type FinderPromotionJumpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JumpInfo     *FinderJumpInfo `protobuf:"bytes,1,opt,name=jumpInfo" json:"jumpInfo,omitempty"`
	ToastMsg     *string         `protobuf:"bytes,2,opt,name=toastMsg" json:"toastMsg,omitempty"`
	ShowToastMsg *bool           `protobuf:"varint,3,opt,name=showToastMsg" json:"showToastMsg,omitempty"`
	Wording      *string         `protobuf:"bytes,4,opt,name=wording" json:"wording,omitempty"`
}

func (x *FinderPromotionJumpInfo) Reset() {
	*x = FinderPromotionJumpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPromotionJumpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPromotionJumpInfo) ProtoMessage() {}

func (x *FinderPromotionJumpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPromotionJumpInfo.ProtoReflect.Descriptor instead.
func (*FinderPromotionJumpInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{190}
}

func (x *FinderPromotionJumpInfo) GetJumpInfo() *FinderJumpInfo {
	if x != nil {
		return x.JumpInfo
	}
	return nil
}

func (x *FinderPromotionJumpInfo) GetToastMsg() string {
	if x != nil && x.ToastMsg != nil {
		return *x.ToastMsg
	}
	return ""
}

func (x *FinderPromotionJumpInfo) GetShowToastMsg() bool {
	if x != nil && x.ShowToastMsg != nil {
		return *x.ShowToastMsg
	}
	return false
}

func (x *FinderPromotionJumpInfo) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

type FinderFlowCardRecommendReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecommendReason *string `protobuf:"bytes,1,opt,name=recommendReason" json:"recommendReason,omitempty"`
	ReasonShowStyle *uint32 `protobuf:"varint,2,opt,name=reasonShowStyle" json:"reasonShowStyle,omitempty"`
}

func (x *FinderFlowCardRecommendReason) Reset() {
	*x = FinderFlowCardRecommendReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFlowCardRecommendReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFlowCardRecommendReason) ProtoMessage() {}

func (x *FinderFlowCardRecommendReason) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFlowCardRecommendReason.ProtoReflect.Descriptor instead.
func (*FinderFlowCardRecommendReason) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{191}
}

func (x *FinderFlowCardRecommendReason) GetRecommendReason() string {
	if x != nil && x.RecommendReason != nil {
		return *x.RecommendReason
	}
	return ""
}

func (x *FinderFlowCardRecommendReason) GetReasonShowStyle() uint32 {
	if x != nil && x.ReasonShowStyle != nil {
		return *x.ReasonShowStyle
	}
	return 0
}

type FinderIpRegionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionText *string `protobuf:"bytes,1,opt,name=regionText" json:"regionText,omitempty"`
}

func (x *FinderIpRegionInfo) Reset() {
	*x = FinderIpRegionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderIpRegionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderIpRegionInfo) ProtoMessage() {}

func (x *FinderIpRegionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderIpRegionInfo.ProtoReflect.Descriptor instead.
func (*FinderIpRegionInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{192}
}

func (x *FinderIpRegionInfo) GetRegionText() string {
	if x != nil && x.RegionText != nil {
		return *x.RegionText
	}
	return ""
}

type FinderObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      *uint64                        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Nickname                *string                        `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Username                *string                        `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	ObjectDesc              *FinderObjectDesc              `protobuf:"bytes,4,opt,name=objectDesc" json:"objectDesc,omitempty"`
	Createtime              *uint32                        `protobuf:"varint,5,opt,name=createtime" json:"createtime,omitempty"`
	LikeFlag                *uint32                        `protobuf:"varint,6,opt,name=likeFlag" json:"likeFlag,omitempty"`
	LikeList                []*FinderCommentInfo           `protobuf:"bytes,7,rep,name=likeList" json:"likeList,omitempty"`
	CommentList             []*FinderCommentInfo           `protobuf:"bytes,8,rep,name=commentList" json:"commentList,omitempty"`
	ForwardCount            *uint32                        `protobuf:"varint,9,opt,name=forwardCount" json:"forwardCount,omitempty"`
	Contact                 *FinderContact                 `protobuf:"bytes,10,opt,name=contact" json:"contact,omitempty"`
	EupdOob                 *string                        `protobuf:"bytes,11,opt,name=eupdOob" json:"eupdOob,omitempty"`
	RecommenderList         []string                       `protobuf:"bytes,12,rep,name=recommenderList" json:"recommenderList,omitempty"`
	Displayid               *uint64                        `protobuf:"varint,13,opt,name=displayid" json:"displayid,omitempty"`
	LikeCount               *uint32                        `protobuf:"varint,14,opt,name=likeCount" json:"likeCount,omitempty"`
	CommentCount            *uint32                        `protobuf:"varint,15,opt,name=commentCount" json:"commentCount,omitempty"`
	RecommendReason         *string                        `protobuf:"bytes,16,opt,name=recommendReason" json:"recommendReason,omitempty"`
	ReadCount               *uint32                        `protobuf:"varint,17,opt,name=readCount" json:"readCount,omitempty"`
	Deletetime              *uint32                        `protobuf:"varint,18,opt,name=deletetime" json:"deletetime,omitempty"`
	CommentClose            *uint32                        `protobuf:"varint,19,opt,name=commentClose" json:"commentClose,omitempty"`
	RefObjectFlag           *uint64                        `protobuf:"varint,20,opt,name=refObjectFlag" json:"refObjectFlag,omitempty"`
	RefObjectid             *uint64                        `protobuf:"varint,21,opt,name=refObjectid" json:"refObjectid,omitempty"`
	RefObjectContact        *FinderContact                 `protobuf:"bytes,22,opt,name=refObjectContact" json:"refObjectContact,omitempty"`
	RecommendType           *uint32                        `protobuf:"varint,23,opt,name=recommendType" json:"recommendType,omitempty"`
	FriendLikeCount         *uint32                        `protobuf:"varint,24,opt,name=friendLikeCount" json:"friendLikeCount,omitempty"`
	ObjectNonceId           *string                        `protobuf:"bytes,25,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	RefObjectNonceId        *string                        `protobuf:"bytes,26,opt,name=refObjectNonceId" json:"refObjectNonceId,omitempty"`
	ObjectStatus            *uint32                        `protobuf:"varint,27,opt,name=objectStatus" json:"objectStatus,omitempty"`
	SendShareFavWording     *string                        `protobuf:"bytes,28,opt,name=sendShareFavWording" json:"sendShareFavWording,omitempty"`
	OriginalFlag            *uint32                        `protobuf:"varint,29,opt,name=originalFlag" json:"originalFlag,omitempty"`
	SecondaryShowFlag       *uint32                        `protobuf:"varint,30,opt,name=secondaryShowFlag" json:"secondaryShowFlag,omitempty"`
	TipsWording             *string                        `protobuf:"bytes,31,opt,name=tipsWording" json:"tipsWording,omitempty"`
	OrgRecommendType        *uint32                        `protobuf:"varint,32,opt,name=orgRecommendType" json:"orgRecommendType,omitempty"`
	MentionedUserContact    []*FinderContact               `protobuf:"bytes,33,rep,name=mentionedUserContact" json:"mentionedUserContact,omitempty"`
	SessionBuffer           *string                        `protobuf:"bytes,34,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	WarnFlag                *uint32                        `protobuf:"varint,35,opt,name=warnFlag" json:"warnFlag,omitempty"`
	WarnWording             *string                        `protobuf:"bytes,36,opt,name=warnWording" json:"warnWording,omitempty"`
	LiveInfo                *FinderLiveInfo                `protobuf:"bytes,37,opt,name=liveInfo" json:"liveInfo,omitempty"`
	FavCount                *uint32                        `protobuf:"varint,38,opt,name=favCount" json:"favCount,omitempty"`
	FavFlag                 *uint32                        `protobuf:"varint,39,opt,name=favFlag" json:"favFlag,omitempty"`
	FoldedFlag              *uint32                        `protobuf:"varint,40,opt,name=foldedFlag" json:"foldedFlag,omitempty"`
	FoldedLayout            *FinderFoldedLayout            `protobuf:"bytes,41,opt,name=foldedLayout" json:"foldedLayout,omitempty"`
	RecommendReasonType     *uint32                        `protobuf:"varint,42,opt,name=recommendReasonType" json:"recommendReasonType,omitempty"`
	UrlValidDuration        *uint32                        `protobuf:"varint,43,opt,name=urlValidDuration" json:"urlValidDuration,omitempty"`
	ForwardStyle            *uint32                        `protobuf:"varint,44,opt,name=forwardStyle" json:"forwardStyle,omitempty"`
	PosTriggerConfig        *string                        `protobuf:"bytes,45,opt,name=posTriggerConfig" json:"posTriggerConfig,omitempty"`
	PrivateFlag             *uint32                        `protobuf:"varint,46,opt,name=privateFlag" json:"privateFlag,omitempty"`
	MsgEventFlag            *uint32                        `protobuf:"varint,47,opt,name=msgEventFlag" json:"msgEventFlag,omitempty"`
	MsgId                   *string                        `protobuf:"bytes,48,opt,name=msgId" json:"msgId,omitempty"`
	IncFriendLikeCount      *uint32                        `protobuf:"varint,49,opt,name=incFriendLikeCount" json:"incFriendLikeCount,omitempty"`
	DebugMessage            *string                        `protobuf:"bytes,50,opt,name=debugMessage" json:"debugMessage,omitempty"`
	LikeBuffer              []byte                         `protobuf:"bytes,51,opt,name=likeBuffer" json:"likeBuffer,omitempty"`
	PermissionFlag          *uint32                        `protobuf:"varint,52,opt,name=permissionFlag" json:"permissionFlag,omitempty"`
	LongVideoNoneed         *FinderVideo                   `protobuf:"bytes,53,opt,name=longVideoNoneed" json:"longVideoNoneed,omitempty"`
	StickyTime              *uint32                        `protobuf:"varint,54,opt,name=stickyTime" json:"stickyTime,omitempty"`
	HotTopics               *FinderObjectHotTopicList      `protobuf:"bytes,55,opt,name=hotTopics" json:"hotTopics,omitempty"`
	AttachmentList          *FinderAttachmentList          `protobuf:"bytes,56,opt,name=attachmentList" json:"attachmentList,omitempty"`
	ObjectType              *uint32                        `protobuf:"varint,57,opt,name=objectType" json:"objectType,omitempty"`
	SnsShareInfo            *FinderSnsShareInfo            `protobuf:"bytes,58,opt,name=snsShareInfo" json:"snsShareInfo,omitempty"`
	WebInfo                 *FinderObjectWebInfo           `protobuf:"bytes,59,opt,name=webInfo" json:"webInfo,omitempty"`
	FollowFeedCount         *uint32                        `protobuf:"varint,60,opt,name=followFeedCount" json:"followFeedCount,omitempty"`
	EventStatusFlag         *uint32                        `protobuf:"varint,61,opt,name=eventStatusFlag" json:"eventStatusFlag,omitempty"`
	IsPoiSameCity           *uint32                        `protobuf:"varint,62,opt,name=isPoiSameCity" json:"isPoiSameCity,omitempty"`
	MentionedListSelected   *uint32                        `protobuf:"varint,63,opt,name=mentionedListSelected" json:"mentionedListSelected,omitempty"`
	VerifyInfoBuf           *string                        `protobuf:"bytes,64,opt,name=verifyInfoBuf" json:"verifyInfoBuf,omitempty"`
	WxStatusRefCount        *uint32                        `protobuf:"varint,65,opt,name=wxStatusRefCount" json:"wxStatusRefCount,omitempty"`
	WxStatusPermissionFlag  *uint32                        `protobuf:"varint,66,opt,name=wxStatusPermissionFlag" json:"wxStatusPermissionFlag,omitempty"`
	AdInfo                  *FinderObjectAdInfo            `protobuf:"bytes,67,opt,name=adInfo" json:"adInfo,omitempty"`
	FriendCommentList       []*FinderCommentInfo           `protobuf:"bytes,68,rep,name=friendCommentList" json:"friendCommentList,omitempty"`
	HotWordInfo             *FinderObjectHotWordInfo       `protobuf:"bytes,69,opt,name=hotWordInfo" json:"hotWordInfo,omitempty"`
	AdFlag                  *uint32                        `protobuf:"varint,70,opt,name=adFlag" json:"adFlag,omitempty"`
	TipsInfo                *FinderTipsInfo                `protobuf:"bytes,71,opt,name=tipsInfo" json:"tipsInfo,omitempty"`
	ClientLocalBuffer       *FinderObjectClientLocalBuffer `protobuf:"bytes,72,opt,name=clientLocalBuffer" json:"clientLocalBuffer,omitempty"`
	PublisherInfo           *FinderPublisherInfo           `protobuf:"bytes,73,opt,name=publisherInfo" json:"publisherInfo,omitempty"`
	LiveRelatedLastBuffer   []byte                         `protobuf:"bytes,74,opt,name=liveRelatedLastBuffer" json:"liveRelatedLastBuffer,omitempty"`
	FollowCount             *uint32                        `protobuf:"varint,75,opt,name=followCount" json:"followCount,omitempty"`
	Cookie                  []byte                         `protobuf:"bytes,76,opt,name=cookie" json:"cookie,omitempty"`
	PreviewFlag             *uint32                        `protobuf:"varint,77,opt,name=previewFlag" json:"previewFlag,omitempty"`
	InternalFeedbackUrl     *string                        `protobuf:"bytes,78,opt,name=internalFeedbackUrl" json:"internalFeedbackUrl,omitempty"`
	WxaGameExportId         *string                        `protobuf:"bytes,79,opt,name=wxaGameExportId" json:"wxaGameExportId,omitempty"`
	RingtoneCount           *uint32                        `protobuf:"varint,80,opt,name=ringtoneCount" json:"ringtoneCount,omitempty"`
	WxStatusIconId          *string                        `protobuf:"bytes,81,opt,name=wxStatusIconId" json:"wxStatusIconId,omitempty"`
	FriendFavCount          *uint32                        `protobuf:"varint,82,opt,name=friendFavCount" json:"friendFavCount,omitempty"`
	FuncFlag                *uint32                        `protobuf:"varint,83,opt,name=funcFlag" json:"funcFlag,omitempty"`
	IsBlocked               *bool                          `protobuf:"varint,84,opt,name=isBlocked" json:"isBlocked,omitempty"`
	PlaceHolderInfo         *FinderObjectPlaceHolderInfo   `protobuf:"bytes,85,opt,name=placeHolderInfo" json:"placeHolderInfo,omitempty"`
	RecommendLabel          *FinderRecommendLabel          `protobuf:"bytes,86,opt,name=recommendLabel" json:"recommendLabel,omitempty"`
	OriginalContact         *FinderContact                 `protobuf:"bytes,87,opt,name=originalContact" json:"originalContact,omitempty"`
	InnerRecommendReason    *string                        `protobuf:"bytes,90,opt,name=innerRecommendReason" json:"innerRecommendReason,omitempty"`
	BlockCgiFlag            *uint64                        `protobuf:"varint,91,opt,name=blockCgiFlag" json:"blockCgiFlag,omitempty"`
	MusicRealtimeInfo       *FinderMusicRealtimeInfo       `protobuf:"bytes,92,opt,name=musicRealtimeInfo" json:"musicRealtimeInfo,omitempty"`
	ShowOriginal            *bool                          `protobuf:"varint,93,opt,name=showOriginal" json:"showOriginal,omitempty"`
	PlayhistoryInfo         *FinderPlayHistoryInfo         `protobuf:"bytes,94,opt,name=playhistoryInfo" json:"playhistoryInfo,omitempty"`
	FinderPromotionJumpinfo *FinderPromotionJumpInfo       `protobuf:"bytes,95,opt,name=finderPromotionJumpinfo" json:"finderPromotionJumpinfo,omitempty"`
	FlowCardRecommandReason *FinderFlowCardRecommendReason `protobuf:"bytes,96,opt,name=flowCardRecommandReason" json:"flowCardRecommandReason,omitempty"`
	IpRegionInfo            *FinderIpRegionInfo            `protobuf:"bytes,97,opt,name=ipRegionInfo" json:"ipRegionInfo,omitempty"`
	ObjectExtend            *FinderObjectExtend            `protobuf:"bytes,98,opt,name=objectExtend" json:"objectExtend,omitempty"`
}

func (x *FinderObject) Reset() {
	*x = FinderObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObject) ProtoMessage() {}

func (x *FinderObject) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObject.ProtoReflect.Descriptor instead.
func (*FinderObject) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{193}
}

func (x *FinderObject) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FinderObject) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderObject) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderObject) GetObjectDesc() *FinderObjectDesc {
	if x != nil {
		return x.ObjectDesc
	}
	return nil
}

func (x *FinderObject) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return 0
}

func (x *FinderObject) GetLikeFlag() uint32 {
	if x != nil && x.LikeFlag != nil {
		return *x.LikeFlag
	}
	return 0
}

func (x *FinderObject) GetLikeList() []*FinderCommentInfo {
	if x != nil {
		return x.LikeList
	}
	return nil
}

func (x *FinderObject) GetCommentList() []*FinderCommentInfo {
	if x != nil {
		return x.CommentList
	}
	return nil
}

func (x *FinderObject) GetForwardCount() uint32 {
	if x != nil && x.ForwardCount != nil {
		return *x.ForwardCount
	}
	return 0
}

func (x *FinderObject) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderObject) GetEupdOob() string {
	if x != nil && x.EupdOob != nil {
		return *x.EupdOob
	}
	return ""
}

func (x *FinderObject) GetRecommenderList() []string {
	if x != nil {
		return x.RecommenderList
	}
	return nil
}

func (x *FinderObject) GetDisplayid() uint64 {
	if x != nil && x.Displayid != nil {
		return *x.Displayid
	}
	return 0
}

func (x *FinderObject) GetLikeCount() uint32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *FinderObject) GetCommentCount() uint32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *FinderObject) GetRecommendReason() string {
	if x != nil && x.RecommendReason != nil {
		return *x.RecommendReason
	}
	return ""
}

func (x *FinderObject) GetReadCount() uint32 {
	if x != nil && x.ReadCount != nil {
		return *x.ReadCount
	}
	return 0
}

func (x *FinderObject) GetDeletetime() uint32 {
	if x != nil && x.Deletetime != nil {
		return *x.Deletetime
	}
	return 0
}

func (x *FinderObject) GetCommentClose() uint32 {
	if x != nil && x.CommentClose != nil {
		return *x.CommentClose
	}
	return 0
}

func (x *FinderObject) GetRefObjectFlag() uint64 {
	if x != nil && x.RefObjectFlag != nil {
		return *x.RefObjectFlag
	}
	return 0
}

func (x *FinderObject) GetRefObjectid() uint64 {
	if x != nil && x.RefObjectid != nil {
		return *x.RefObjectid
	}
	return 0
}

func (x *FinderObject) GetRefObjectContact() *FinderContact {
	if x != nil {
		return x.RefObjectContact
	}
	return nil
}

func (x *FinderObject) GetRecommendType() uint32 {
	if x != nil && x.RecommendType != nil {
		return *x.RecommendType
	}
	return 0
}

func (x *FinderObject) GetFriendLikeCount() uint32 {
	if x != nil && x.FriendLikeCount != nil {
		return *x.FriendLikeCount
	}
	return 0
}

func (x *FinderObject) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderObject) GetRefObjectNonceId() string {
	if x != nil && x.RefObjectNonceId != nil {
		return *x.RefObjectNonceId
	}
	return ""
}

func (x *FinderObject) GetObjectStatus() uint32 {
	if x != nil && x.ObjectStatus != nil {
		return *x.ObjectStatus
	}
	return 0
}

func (x *FinderObject) GetSendShareFavWording() string {
	if x != nil && x.SendShareFavWording != nil {
		return *x.SendShareFavWording
	}
	return ""
}

func (x *FinderObject) GetOriginalFlag() uint32 {
	if x != nil && x.OriginalFlag != nil {
		return *x.OriginalFlag
	}
	return 0
}

func (x *FinderObject) GetSecondaryShowFlag() uint32 {
	if x != nil && x.SecondaryShowFlag != nil {
		return *x.SecondaryShowFlag
	}
	return 0
}

func (x *FinderObject) GetTipsWording() string {
	if x != nil && x.TipsWording != nil {
		return *x.TipsWording
	}
	return ""
}

func (x *FinderObject) GetOrgRecommendType() uint32 {
	if x != nil && x.OrgRecommendType != nil {
		return *x.OrgRecommendType
	}
	return 0
}

func (x *FinderObject) GetMentionedUserContact() []*FinderContact {
	if x != nil {
		return x.MentionedUserContact
	}
	return nil
}

func (x *FinderObject) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *FinderObject) GetWarnFlag() uint32 {
	if x != nil && x.WarnFlag != nil {
		return *x.WarnFlag
	}
	return 0
}

func (x *FinderObject) GetWarnWording() string {
	if x != nil && x.WarnWording != nil {
		return *x.WarnWording
	}
	return ""
}

func (x *FinderObject) GetLiveInfo() *FinderLiveInfo {
	if x != nil {
		return x.LiveInfo
	}
	return nil
}

func (x *FinderObject) GetFavCount() uint32 {
	if x != nil && x.FavCount != nil {
		return *x.FavCount
	}
	return 0
}

func (x *FinderObject) GetFavFlag() uint32 {
	if x != nil && x.FavFlag != nil {
		return *x.FavFlag
	}
	return 0
}

func (x *FinderObject) GetFoldedFlag() uint32 {
	if x != nil && x.FoldedFlag != nil {
		return *x.FoldedFlag
	}
	return 0
}

func (x *FinderObject) GetFoldedLayout() *FinderFoldedLayout {
	if x != nil {
		return x.FoldedLayout
	}
	return nil
}

func (x *FinderObject) GetRecommendReasonType() uint32 {
	if x != nil && x.RecommendReasonType != nil {
		return *x.RecommendReasonType
	}
	return 0
}

func (x *FinderObject) GetUrlValidDuration() uint32 {
	if x != nil && x.UrlValidDuration != nil {
		return *x.UrlValidDuration
	}
	return 0
}

func (x *FinderObject) GetForwardStyle() uint32 {
	if x != nil && x.ForwardStyle != nil {
		return *x.ForwardStyle
	}
	return 0
}

func (x *FinderObject) GetPosTriggerConfig() string {
	if x != nil && x.PosTriggerConfig != nil {
		return *x.PosTriggerConfig
	}
	return ""
}

func (x *FinderObject) GetPrivateFlag() uint32 {
	if x != nil && x.PrivateFlag != nil {
		return *x.PrivateFlag
	}
	return 0
}

func (x *FinderObject) GetMsgEventFlag() uint32 {
	if x != nil && x.MsgEventFlag != nil {
		return *x.MsgEventFlag
	}
	return 0
}

func (x *FinderObject) GetMsgId() string {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return ""
}

func (x *FinderObject) GetIncFriendLikeCount() uint32 {
	if x != nil && x.IncFriendLikeCount != nil {
		return *x.IncFriendLikeCount
	}
	return 0
}

func (x *FinderObject) GetDebugMessage() string {
	if x != nil && x.DebugMessage != nil {
		return *x.DebugMessage
	}
	return ""
}

func (x *FinderObject) GetLikeBuffer() []byte {
	if x != nil {
		return x.LikeBuffer
	}
	return nil
}

func (x *FinderObject) GetPermissionFlag() uint32 {
	if x != nil && x.PermissionFlag != nil {
		return *x.PermissionFlag
	}
	return 0
}

func (x *FinderObject) GetLongVideoNoneed() *FinderVideo {
	if x != nil {
		return x.LongVideoNoneed
	}
	return nil
}

func (x *FinderObject) GetStickyTime() uint32 {
	if x != nil && x.StickyTime != nil {
		return *x.StickyTime
	}
	return 0
}

func (x *FinderObject) GetHotTopics() *FinderObjectHotTopicList {
	if x != nil {
		return x.HotTopics
	}
	return nil
}

func (x *FinderObject) GetAttachmentList() *FinderAttachmentList {
	if x != nil {
		return x.AttachmentList
	}
	return nil
}

func (x *FinderObject) GetObjectType() uint32 {
	if x != nil && x.ObjectType != nil {
		return *x.ObjectType
	}
	return 0
}

func (x *FinderObject) GetSnsShareInfo() *FinderSnsShareInfo {
	if x != nil {
		return x.SnsShareInfo
	}
	return nil
}

func (x *FinderObject) GetWebInfo() *FinderObjectWebInfo {
	if x != nil {
		return x.WebInfo
	}
	return nil
}

func (x *FinderObject) GetFollowFeedCount() uint32 {
	if x != nil && x.FollowFeedCount != nil {
		return *x.FollowFeedCount
	}
	return 0
}

func (x *FinderObject) GetEventStatusFlag() uint32 {
	if x != nil && x.EventStatusFlag != nil {
		return *x.EventStatusFlag
	}
	return 0
}

func (x *FinderObject) GetIsPoiSameCity() uint32 {
	if x != nil && x.IsPoiSameCity != nil {
		return *x.IsPoiSameCity
	}
	return 0
}

func (x *FinderObject) GetMentionedListSelected() uint32 {
	if x != nil && x.MentionedListSelected != nil {
		return *x.MentionedListSelected
	}
	return 0
}

func (x *FinderObject) GetVerifyInfoBuf() string {
	if x != nil && x.VerifyInfoBuf != nil {
		return *x.VerifyInfoBuf
	}
	return ""
}

func (x *FinderObject) GetWxStatusRefCount() uint32 {
	if x != nil && x.WxStatusRefCount != nil {
		return *x.WxStatusRefCount
	}
	return 0
}

func (x *FinderObject) GetWxStatusPermissionFlag() uint32 {
	if x != nil && x.WxStatusPermissionFlag != nil {
		return *x.WxStatusPermissionFlag
	}
	return 0
}

func (x *FinderObject) GetAdInfo() *FinderObjectAdInfo {
	if x != nil {
		return x.AdInfo
	}
	return nil
}

func (x *FinderObject) GetFriendCommentList() []*FinderCommentInfo {
	if x != nil {
		return x.FriendCommentList
	}
	return nil
}

func (x *FinderObject) GetHotWordInfo() *FinderObjectHotWordInfo {
	if x != nil {
		return x.HotWordInfo
	}
	return nil
}

func (x *FinderObject) GetAdFlag() uint32 {
	if x != nil && x.AdFlag != nil {
		return *x.AdFlag
	}
	return 0
}

func (x *FinderObject) GetTipsInfo() *FinderTipsInfo {
	if x != nil {
		return x.TipsInfo
	}
	return nil
}

func (x *FinderObject) GetClientLocalBuffer() *FinderObjectClientLocalBuffer {
	if x != nil {
		return x.ClientLocalBuffer
	}
	return nil
}

func (x *FinderObject) GetPublisherInfo() *FinderPublisherInfo {
	if x != nil {
		return x.PublisherInfo
	}
	return nil
}

func (x *FinderObject) GetLiveRelatedLastBuffer() []byte {
	if x != nil {
		return x.LiveRelatedLastBuffer
	}
	return nil
}

func (x *FinderObject) GetFollowCount() uint32 {
	if x != nil && x.FollowCount != nil {
		return *x.FollowCount
	}
	return 0
}

func (x *FinderObject) GetCookie() []byte {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *FinderObject) GetPreviewFlag() uint32 {
	if x != nil && x.PreviewFlag != nil {
		return *x.PreviewFlag
	}
	return 0
}

func (x *FinderObject) GetInternalFeedbackUrl() string {
	if x != nil && x.InternalFeedbackUrl != nil {
		return *x.InternalFeedbackUrl
	}
	return ""
}

func (x *FinderObject) GetWxaGameExportId() string {
	if x != nil && x.WxaGameExportId != nil {
		return *x.WxaGameExportId
	}
	return ""
}

func (x *FinderObject) GetRingtoneCount() uint32 {
	if x != nil && x.RingtoneCount != nil {
		return *x.RingtoneCount
	}
	return 0
}

func (x *FinderObject) GetWxStatusIconId() string {
	if x != nil && x.WxStatusIconId != nil {
		return *x.WxStatusIconId
	}
	return ""
}

func (x *FinderObject) GetFriendFavCount() uint32 {
	if x != nil && x.FriendFavCount != nil {
		return *x.FriendFavCount
	}
	return 0
}

func (x *FinderObject) GetFuncFlag() uint32 {
	if x != nil && x.FuncFlag != nil {
		return *x.FuncFlag
	}
	return 0
}

func (x *FinderObject) GetIsBlocked() bool {
	if x != nil && x.IsBlocked != nil {
		return *x.IsBlocked
	}
	return false
}

func (x *FinderObject) GetPlaceHolderInfo() *FinderObjectPlaceHolderInfo {
	if x != nil {
		return x.PlaceHolderInfo
	}
	return nil
}

func (x *FinderObject) GetRecommendLabel() *FinderRecommendLabel {
	if x != nil {
		return x.RecommendLabel
	}
	return nil
}

func (x *FinderObject) GetOriginalContact() *FinderContact {
	if x != nil {
		return x.OriginalContact
	}
	return nil
}

func (x *FinderObject) GetInnerRecommendReason() string {
	if x != nil && x.InnerRecommendReason != nil {
		return *x.InnerRecommendReason
	}
	return ""
}

func (x *FinderObject) GetBlockCgiFlag() uint64 {
	if x != nil && x.BlockCgiFlag != nil {
		return *x.BlockCgiFlag
	}
	return 0
}

func (x *FinderObject) GetMusicRealtimeInfo() *FinderMusicRealtimeInfo {
	if x != nil {
		return x.MusicRealtimeInfo
	}
	return nil
}

func (x *FinderObject) GetShowOriginal() bool {
	if x != nil && x.ShowOriginal != nil {
		return *x.ShowOriginal
	}
	return false
}

func (x *FinderObject) GetPlayhistoryInfo() *FinderPlayHistoryInfo {
	if x != nil {
		return x.PlayhistoryInfo
	}
	return nil
}

func (x *FinderObject) GetFinderPromotionJumpinfo() *FinderPromotionJumpInfo {
	if x != nil {
		return x.FinderPromotionJumpinfo
	}
	return nil
}

func (x *FinderObject) GetFlowCardRecommandReason() *FinderFlowCardRecommendReason {
	if x != nil {
		return x.FlowCardRecommandReason
	}
	return nil
}

func (x *FinderObject) GetIpRegionInfo() *FinderIpRegionInfo {
	if x != nil {
		return x.IpRegionInfo
	}
	return nil
}

func (x *FinderObject) GetObjectExtend() *FinderObjectExtend {
	if x != nil {
		return x.ObjectExtend
	}
	return nil
}

type FinderPreloadGlobalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevCount                  *uint32  `protobuf:"varint,1,opt,name=prevCount" json:"prevCount,omitempty"`
	NextCount                  *uint32  `protobuf:"varint,2,opt,name=nextCount" json:"nextCount,omitempty"`
	MaxBitRate                 *uint32  `protobuf:"varint,3,opt,name=maxBitRate" json:"maxBitRate,omitempty"`
	PreloadFileSizePercent     *float32 `protobuf:"fixed32,4,opt,name=preloadFileSizePercent" json:"preloadFileSizePercent,omitempty"`
	PreloadFileMinBytes        *uint32  `protobuf:"varint,5,opt,name=preloadFileMinBytes" json:"preloadFileMinBytes,omitempty"`
	PreloadMaxConcurrentCount  *uint32  `protobuf:"varint,6,opt,name=preloadMaxConcurrentCount" json:"preloadMaxConcurrentCount,omitempty"`
	PreConcurrentCount         *uint32  `protobuf:"varint,7,opt,name=preConcurrentCount" json:"preConcurrentCount,omitempty"`
	PlayConcurrentCount        *uint32  `protobuf:"varint,8,opt,name=playConcurrentCount" json:"playConcurrentCount,omitempty"`
	StartPreloadPercent        *float32 `protobuf:"fixed32,9,opt,name=startPreloadPercent" json:"startPreloadPercent,omitempty"`
	StartPreloadSecs           *uint32  `protobuf:"varint,10,opt,name=startPreloadSecs" json:"startPreloadSecs,omitempty"`
	MegavideoMaxBitRate        *uint32  `protobuf:"varint,11,opt,name=megavideoMaxBitRate" json:"megavideoMaxBitRate,omitempty"`
	MegavideoPrevCount         *uint32  `protobuf:"varint,12,opt,name=megavideoPrevCount" json:"megavideoPrevCount,omitempty"`
	MegavideoNextCount         *uint32  `protobuf:"varint,13,opt,name=megavideoNextCount" json:"megavideoNextCount,omitempty"`
	MinBufferLength            *uint32  `protobuf:"varint,14,opt,name=minBufferLength" json:"minBufferLength,omitempty"`
	MaxBufferLength            *uint32  `protobuf:"varint,15,opt,name=maxBufferLength" json:"maxBufferLength,omitempty"`
	MinCurrentFeedBufferLength *uint32  `protobuf:"varint,16,opt,name=minCurrentFeedBufferLength" json:"minCurrentFeedBufferLength,omitempty"`
	CanPreCreatedPlayer        *bool    `protobuf:"varint,17,opt,name=canPreCreatedPlayer" json:"canPreCreatedPlayer,omitempty"`
}

func (x *FinderPreloadGlobalInfo) Reset() {
	*x = FinderPreloadGlobalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPreloadGlobalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPreloadGlobalInfo) ProtoMessage() {}

func (x *FinderPreloadGlobalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPreloadGlobalInfo.ProtoReflect.Descriptor instead.
func (*FinderPreloadGlobalInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{194}
}

func (x *FinderPreloadGlobalInfo) GetPrevCount() uint32 {
	if x != nil && x.PrevCount != nil {
		return *x.PrevCount
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetNextCount() uint32 {
	if x != nil && x.NextCount != nil {
		return *x.NextCount
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetMaxBitRate() uint32 {
	if x != nil && x.MaxBitRate != nil {
		return *x.MaxBitRate
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetPreloadFileSizePercent() float32 {
	if x != nil && x.PreloadFileSizePercent != nil {
		return *x.PreloadFileSizePercent
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetPreloadFileMinBytes() uint32 {
	if x != nil && x.PreloadFileMinBytes != nil {
		return *x.PreloadFileMinBytes
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetPreloadMaxConcurrentCount() uint32 {
	if x != nil && x.PreloadMaxConcurrentCount != nil {
		return *x.PreloadMaxConcurrentCount
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetPreConcurrentCount() uint32 {
	if x != nil && x.PreConcurrentCount != nil {
		return *x.PreConcurrentCount
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetPlayConcurrentCount() uint32 {
	if x != nil && x.PlayConcurrentCount != nil {
		return *x.PlayConcurrentCount
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetStartPreloadPercent() float32 {
	if x != nil && x.StartPreloadPercent != nil {
		return *x.StartPreloadPercent
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetStartPreloadSecs() uint32 {
	if x != nil && x.StartPreloadSecs != nil {
		return *x.StartPreloadSecs
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetMegavideoMaxBitRate() uint32 {
	if x != nil && x.MegavideoMaxBitRate != nil {
		return *x.MegavideoMaxBitRate
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetMegavideoPrevCount() uint32 {
	if x != nil && x.MegavideoPrevCount != nil {
		return *x.MegavideoPrevCount
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetMegavideoNextCount() uint32 {
	if x != nil && x.MegavideoNextCount != nil {
		return *x.MegavideoNextCount
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetMinBufferLength() uint32 {
	if x != nil && x.MinBufferLength != nil {
		return *x.MinBufferLength
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetMaxBufferLength() uint32 {
	if x != nil && x.MaxBufferLength != nil {
		return *x.MaxBufferLength
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetMinCurrentFeedBufferLength() uint32 {
	if x != nil && x.MinCurrentFeedBufferLength != nil {
		return *x.MinCurrentFeedBufferLength
	}
	return 0
}

func (x *FinderPreloadGlobalInfo) GetCanPreCreatedPlayer() bool {
	if x != nil && x.CanPreCreatedPlayer != nil {
		return *x.CanPreCreatedPlayer
	}
	return false
}

type FinderPreloadObjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedId         *uint64  `protobuf:"varint,1,opt,name=feedId" json:"feedId,omitempty"`
	InterestFactor *float32 `protobuf:"fixed32,2,opt,name=interestFactor" json:"interestFactor,omitempty"`
}

func (x *FinderPreloadObjectInfo) Reset() {
	*x = FinderPreloadObjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPreloadObjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPreloadObjectInfo) ProtoMessage() {}

func (x *FinderPreloadObjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPreloadObjectInfo.ProtoReflect.Descriptor instead.
func (*FinderPreloadObjectInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{195}
}

func (x *FinderPreloadObjectInfo) GetFeedId() uint64 {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return 0
}

func (x *FinderPreloadObjectInfo) GetInterestFactor() float32 {
	if x != nil && x.InterestFactor != nil {
		return *x.InterestFactor
	}
	return 0
}

type MegaVideoFinderPreloadObjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedId         *uint64  `protobuf:"varint,1,opt,name=feedId" json:"feedId,omitempty"`
	InterestFactor *float32 `protobuf:"fixed32,2,opt,name=interestFactor" json:"interestFactor,omitempty"`
}

func (x *MegaVideoFinderPreloadObjectInfo) Reset() {
	*x = MegaVideoFinderPreloadObjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MegaVideoFinderPreloadObjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MegaVideoFinderPreloadObjectInfo) ProtoMessage() {}

func (x *MegaVideoFinderPreloadObjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MegaVideoFinderPreloadObjectInfo.ProtoReflect.Descriptor instead.
func (*MegaVideoFinderPreloadObjectInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{196}
}

func (x *MegaVideoFinderPreloadObjectInfo) GetFeedId() uint64 {
	if x != nil && x.FeedId != nil {
		return *x.FeedId
	}
	return 0
}

func (x *MegaVideoFinderPreloadObjectInfo) GetInterestFactor() float32 {
	if x != nil && x.InterestFactor != nil {
		return *x.InterestFactor
	}
	return 0
}

type FinderPreloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreloadStrategyId *uint64                             `protobuf:"varint,1,opt,name=preloadStrategyId" json:"preloadStrategyId,omitempty"`
	GlobalInfo        *FinderPreloadGlobalInfo            `protobuf:"bytes,2,opt,name=globalInfo" json:"globalInfo,omitempty"`
	ObjectInfo        []*FinderPreloadObjectInfo          `protobuf:"bytes,3,rep,name=objectInfo" json:"objectInfo,omitempty"`
	MegavideoInfo     []*MegaVideoFinderPreloadObjectInfo `protobuf:"bytes,4,rep,name=megavideoInfo" json:"megavideoInfo,omitempty"`
}

func (x *FinderPreloadInfo) Reset() {
	*x = FinderPreloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPreloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPreloadInfo) ProtoMessage() {}

func (x *FinderPreloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPreloadInfo.ProtoReflect.Descriptor instead.
func (*FinderPreloadInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{197}
}

func (x *FinderPreloadInfo) GetPreloadStrategyId() uint64 {
	if x != nil && x.PreloadStrategyId != nil {
		return *x.PreloadStrategyId
	}
	return 0
}

func (x *FinderPreloadInfo) GetGlobalInfo() *FinderPreloadGlobalInfo {
	if x != nil {
		return x.GlobalInfo
	}
	return nil
}

func (x *FinderPreloadInfo) GetObjectInfo() []*FinderPreloadObjectInfo {
	if x != nil {
		return x.ObjectInfo
	}
	return nil
}

func (x *FinderPreloadInfo) GetMegavideoInfo() []*MegaVideoFinderPreloadObjectInfo {
	if x != nil {
		return x.MegavideoInfo
	}
	return nil
}

type FinderContactRecommendItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact         *FinderContact `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
	RecommendReason *string        `protobuf:"bytes,2,opt,name=recommendReason" json:"recommendReason,omitempty"`
}

func (x *FinderContactRecommendItem) Reset() {
	*x = FinderContactRecommendItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactRecommendItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactRecommendItem) ProtoMessage() {}

func (x *FinderContactRecommendItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactRecommendItem.ProtoReflect.Descriptor instead.
func (*FinderContactRecommendItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{198}
}

func (x *FinderContactRecommendItem) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderContactRecommendItem) GetRecommendReason() string {
	if x != nil && x.RecommendReason != nil {
		return *x.RecommendReason
	}
	return ""
}

type FinderContactRecommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items        []*FinderContactRecommendItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	ShowPosition *uint32                       `protobuf:"varint,2,opt,name=showPosition" json:"showPosition,omitempty"`
}

func (x *FinderContactRecommend) Reset() {
	*x = FinderContactRecommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactRecommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactRecommend) ProtoMessage() {}

func (x *FinderContactRecommend) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactRecommend.ProtoReflect.Descriptor instead.
func (*FinderContactRecommend) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{199}
}

func (x *FinderContactRecommend) GetItems() []*FinderContactRecommendItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *FinderContactRecommend) GetShowPosition() uint32 {
	if x != nil && x.ShowPosition != nil {
		return *x.ShowPosition
	}
	return 0
}

type FinderTopicBgmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact       *FinderContact   `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
	MusicInfo     *FinderMusicInfo `protobuf:"bytes,2,opt,name=musicInfo" json:"musicInfo,omitempty"`
	AudioTrackUrl *string          `protobuf:"bytes,3,opt,name=audioTrackUrl" json:"audioTrackUrl,omitempty"`
	GroupId       *string          `protobuf:"bytes,4,opt,name=groupId" json:"groupId,omitempty"`
}

func (x *FinderTopicBgmInfo) Reset() {
	*x = FinderTopicBgmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTopicBgmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTopicBgmInfo) ProtoMessage() {}

func (x *FinderTopicBgmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTopicBgmInfo.ProtoReflect.Descriptor instead.
func (*FinderTopicBgmInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{200}
}

func (x *FinderTopicBgmInfo) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderTopicBgmInfo) GetMusicInfo() *FinderMusicInfo {
	if x != nil {
		return x.MusicInfo
	}
	return nil
}

func (x *FinderTopicBgmInfo) GetAudioTrackUrl() string {
	if x != nil && x.AudioTrackUrl != nil {
		return *x.AudioTrackUrl
	}
	return ""
}

func (x *FinderTopicBgmInfo) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

type FinderTopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic                    *string             `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	TopicId                  *uint64             `protobuf:"varint,2,opt,name=topicId" json:"topicId,omitempty"`
	FeedCount                *uint32             `protobuf:"varint,3,opt,name=feedCount" json:"feedCount,omitempty"`
	TopicNonceId             *string             `protobuf:"bytes,4,opt,name=topicNonceId" json:"topicNonceId,omitempty"`
	TopicType                *uint32             `protobuf:"varint,5,opt,name=topicType" json:"topicType,omitempty"`
	FollowFlag               *uint32             `protobuf:"varint,6,opt,name=followFlag" json:"followFlag,omitempty"`
	CoverUrl                 *string             `protobuf:"bytes,7,opt,name=coverUrl" json:"coverUrl,omitempty"`
	FriendFollowCount        *uint32             `protobuf:"varint,8,opt,name=friendFollowCount" json:"friendFollowCount,omitempty"`
	DisplayId                *uint32             `protobuf:"varint,9,opt,name=displayId" json:"displayId,omitempty"`
	CanFollow                *uint32             `protobuf:"varint,10,opt,name=canFollow" json:"canFollow,omitempty"`
	MusicInfo                *FinderMusicInfo    `protobuf:"bytes,11,opt,name=musicInfo" json:"musicInfo,omitempty"`
	OnlineViewed             *uint32             `protobuf:"varint,12,opt,name=onlineViewed" json:"onlineViewed,omitempty"`
	FollowFeedInfo           *FinderTopicBgmInfo `protobuf:"bytes,13,opt,name=followFeedInfo" json:"followFeedInfo,omitempty"`
	FeedFollowPermissionFlag *uint32             `protobuf:"varint,14,opt,name=feedFollowPermissionFlag" json:"feedFollowPermissionFlag,omitempty"`
	TmplInfo                 *FinderTemplateInfo `protobuf:"bytes,15,opt,name=tmplInfo" json:"tmplInfo,omitempty"`
	DisabledFlag             *uint32             `protobuf:"varint,16,opt,name=disabledFlag" json:"disabledFlag,omitempty"`
	Event                    *FinderEventInfo    `protobuf:"bytes,17,opt,name=event" json:"event,omitempty"`
	ReadCount                *uint32             `protobuf:"varint,18,opt,name=readCount" json:"readCount,omitempty"`
	HeadUrl                  *string             `protobuf:"bytes,19,opt,name=headUrl" json:"headUrl,omitempty"`
}

func (x *FinderTopicInfo) Reset() {
	*x = FinderTopicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTopicInfo) ProtoMessage() {}

func (x *FinderTopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTopicInfo.ProtoReflect.Descriptor instead.
func (*FinderTopicInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{201}
}

func (x *FinderTopicInfo) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *FinderTopicInfo) GetTopicId() uint64 {
	if x != nil && x.TopicId != nil {
		return *x.TopicId
	}
	return 0
}

func (x *FinderTopicInfo) GetFeedCount() uint32 {
	if x != nil && x.FeedCount != nil {
		return *x.FeedCount
	}
	return 0
}

func (x *FinderTopicInfo) GetTopicNonceId() string {
	if x != nil && x.TopicNonceId != nil {
		return *x.TopicNonceId
	}
	return ""
}

func (x *FinderTopicInfo) GetTopicType() uint32 {
	if x != nil && x.TopicType != nil {
		return *x.TopicType
	}
	return 0
}

func (x *FinderTopicInfo) GetFollowFlag() uint32 {
	if x != nil && x.FollowFlag != nil {
		return *x.FollowFlag
	}
	return 0
}

func (x *FinderTopicInfo) GetCoverUrl() string {
	if x != nil && x.CoverUrl != nil {
		return *x.CoverUrl
	}
	return ""
}

func (x *FinderTopicInfo) GetFriendFollowCount() uint32 {
	if x != nil && x.FriendFollowCount != nil {
		return *x.FriendFollowCount
	}
	return 0
}

func (x *FinderTopicInfo) GetDisplayId() uint32 {
	if x != nil && x.DisplayId != nil {
		return *x.DisplayId
	}
	return 0
}

func (x *FinderTopicInfo) GetCanFollow() uint32 {
	if x != nil && x.CanFollow != nil {
		return *x.CanFollow
	}
	return 0
}

func (x *FinderTopicInfo) GetMusicInfo() *FinderMusicInfo {
	if x != nil {
		return x.MusicInfo
	}
	return nil
}

func (x *FinderTopicInfo) GetOnlineViewed() uint32 {
	if x != nil && x.OnlineViewed != nil {
		return *x.OnlineViewed
	}
	return 0
}

func (x *FinderTopicInfo) GetFollowFeedInfo() *FinderTopicBgmInfo {
	if x != nil {
		return x.FollowFeedInfo
	}
	return nil
}

func (x *FinderTopicInfo) GetFeedFollowPermissionFlag() uint32 {
	if x != nil && x.FeedFollowPermissionFlag != nil {
		return *x.FeedFollowPermissionFlag
	}
	return 0
}

func (x *FinderTopicInfo) GetTmplInfo() *FinderTemplateInfo {
	if x != nil {
		return x.TmplInfo
	}
	return nil
}

func (x *FinderTopicInfo) GetDisabledFlag() uint32 {
	if x != nil && x.DisabledFlag != nil {
		return *x.DisabledFlag
	}
	return 0
}

func (x *FinderTopicInfo) GetEvent() *FinderEventInfo {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *FinderTopicInfo) GetReadCount() uint32 {
	if x != nil && x.ReadCount != nil {
		return *x.ReadCount
	}
	return 0
}

func (x *FinderTopicInfo) GetHeadUrl() string {
	if x != nil && x.HeadUrl != nil {
		return *x.HeadUrl
	}
	return ""
}

type FinderTopicRecommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicList []*FinderTopicInfo `protobuf:"bytes,1,rep,name=topicList" json:"topicList,omitempty"`
}

func (x *FinderTopicRecommend) Reset() {
	*x = FinderTopicRecommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTopicRecommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTopicRecommend) ProtoMessage() {}

func (x *FinderTopicRecommend) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTopicRecommend.ProtoReflect.Descriptor instead.
func (*FinderTopicRecommend) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{202}
}

func (x *FinderTopicRecommend) GetTopicList() []*FinderTopicInfo {
	if x != nil {
		return x.TopicList
	}
	return nil
}

type FinderCategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName *string `protobuf:"bytes,1,opt,name=categoryName" json:"categoryName,omitempty"`
}

func (x *FinderCategoryInfo) Reset() {
	*x = FinderCategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCategoryInfo) ProtoMessage() {}

func (x *FinderCategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCategoryInfo.ProtoReflect.Descriptor instead.
func (*FinderCategoryInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{203}
}

func (x *FinderCategoryInfo) GetCategoryName() string {
	if x != nil && x.CategoryName != nil {
		return *x.CategoryName
	}
	return ""
}

type FinderCategoryRecommend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryInfo []*FinderCategoryInfo `protobuf:"bytes,1,rep,name=categoryInfo" json:"categoryInfo,omitempty"`
}

func (x *FinderCategoryRecommend) Reset() {
	*x = FinderCategoryRecommend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCategoryRecommend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCategoryRecommend) ProtoMessage() {}

func (x *FinderCategoryRecommend) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCategoryRecommend.ProtoReflect.Descriptor instead.
func (*FinderCategoryRecommend) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{204}
}

func (x *FinderCategoryRecommend) GetCategoryInfo() []*FinderCategoryInfo {
	if x != nil {
		return x.CategoryInfo
	}
	return nil
}

type RelatedTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicList []*FinderTopicInfo `protobuf:"bytes,1,rep,name=topicList" json:"topicList,omitempty"`
}

func (x *RelatedTopic) Reset() {
	*x = RelatedTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedTopic) ProtoMessage() {}

func (x *RelatedTopic) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedTopic.ProtoReflect.Descriptor instead.
func (*RelatedTopic) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{205}
}

func (x *RelatedTopic) GetTopicList() []*FinderTopicInfo {
	if x != nil {
		return x.TopicList
	}
	return nil
}

type PoiTopicSubTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleName *string `protobuf:"bytes,1,opt,name=titleName" json:"titleName,omitempty"`
}

func (x *PoiTopicSubTitle) Reset() {
	*x = PoiTopicSubTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiTopicSubTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiTopicSubTitle) ProtoMessage() {}

func (x *PoiTopicSubTitle) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiTopicSubTitle.ProtoReflect.Descriptor instead.
func (*PoiTopicSubTitle) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{206}
}

func (x *PoiTopicSubTitle) GetTitleName() string {
	if x != nil && x.TitleName != nil {
		return *x.TitleName
	}
	return ""
}

type TopicFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicId []uint64 `protobuf:"varint,1,rep,name=topicId" json:"topicId,omitempty"`
}

func (x *TopicFilter) Reset() {
	*x = TopicFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicFilter) ProtoMessage() {}

func (x *TopicFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicFilter.ProtoReflect.Descriptor instead.
func (*TopicFilter) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{207}
}

func (x *TopicFilter) GetTopicId() []uint64 {
	if x != nil {
		return x.TopicId
	}
	return nil
}

type FinderGetTopicListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest      *BaseRequest        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq    *FinderBaseRequest  `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LastBuffer       []byte              `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	TopicType        *uint32             `protobuf:"varint,4,opt,name=topicType" json:"topicType,omitempty"`
	Topic            *string             `protobuf:"bytes,5,opt,name=topic" json:"topic,omitempty"`
	Longitude        *float32            `protobuf:"fixed32,6,opt,name=longitude" json:"longitude,omitempty"`
	Latitude         *float32            `protobuf:"fixed32,7,opt,name=latitude" json:"latitude,omitempty"`
	FromObjectId     *uint64             `protobuf:"varint,8,opt,name=fromObjectId" json:"fromObjectId,omitempty"`
	DisplayTabType   *uint32             `protobuf:"varint,9,opt,name=displayTabType" json:"displayTabType,omitempty"`
	TopicFilter      *TopicFilter        `protobuf:"bytes,10,opt,name=topicFilter" json:"topicFilter,omitempty"`
	SectionInfo      *FinderSectionInfo  `protobuf:"bytes,11,opt,name=sectionInfo" json:"sectionInfo,omitempty"`
	FromType         *uint32             `protobuf:"varint,12,opt,name=fromType" json:"fromType,omitempty"`
	Status           *FinderClientStatus `protobuf:"bytes,13,opt,name=status" json:"status,omitempty"`
	TopicId          *uint64             `protobuf:"varint,14,opt,name=topicId" json:"topicId,omitempty"`
	TopicBuffer      []byte              `protobuf:"bytes,15,opt,name=topicBuffer" json:"topicBuffer,omitempty"`
	EncryptedTopicid *string             `protobuf:"bytes,16,opt,name=encryptedTopicid" json:"encryptedTopicid,omitempty"`
	InnerTabType     *uint32             `protobuf:"varint,17,opt,name=innerTabType" json:"innerTabType,omitempty"`
	ByPassInfo       []byte              `protobuf:"bytes,18,opt,name=byPassInfo" json:"byPassInfo,omitempty"`
}

func (x *FinderGetTopicListRequest) Reset() {
	*x = FinderGetTopicListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetTopicListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetTopicListRequest) ProtoMessage() {}

func (x *FinderGetTopicListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetTopicListRequest.ProtoReflect.Descriptor instead.
func (*FinderGetTopicListRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{208}
}

func (x *FinderGetTopicListRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetTopicListRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetTopicListRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetTopicListRequest) GetTopicType() uint32 {
	if x != nil && x.TopicType != nil {
		return *x.TopicType
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *FinderGetTopicListRequest) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetFromObjectId() uint64 {
	if x != nil && x.FromObjectId != nil {
		return *x.FromObjectId
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetDisplayTabType() uint32 {
	if x != nil && x.DisplayTabType != nil {
		return *x.DisplayTabType
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetTopicFilter() *TopicFilter {
	if x != nil {
		return x.TopicFilter
	}
	return nil
}

func (x *FinderGetTopicListRequest) GetSectionInfo() *FinderSectionInfo {
	if x != nil {
		return x.SectionInfo
	}
	return nil
}

func (x *FinderGetTopicListRequest) GetFromType() uint32 {
	if x != nil && x.FromType != nil {
		return *x.FromType
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FinderGetTopicListRequest) GetTopicId() uint64 {
	if x != nil && x.TopicId != nil {
		return *x.TopicId
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetTopicBuffer() []byte {
	if x != nil {
		return x.TopicBuffer
	}
	return nil
}

func (x *FinderGetTopicListRequest) GetEncryptedTopicid() string {
	if x != nil && x.EncryptedTopicid != nil {
		return *x.EncryptedTopicid
	}
	return ""
}

func (x *FinderGetTopicListRequest) GetInnerTabType() uint32 {
	if x != nil && x.InnerTabType != nil {
		return *x.InnerTabType
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetByPassInfo() []byte {
	if x != nil {
		return x.ByPassInfo
	}
	return nil
}

type FinderGetTopicListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse         *BaseResponse      `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Object               []*FinderObject    `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	LastBuffer           []byte             `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag         *uint32            `protobuf:"varint,4,opt,name=continueFlag" json:"continueFlag,omitempty"`
	TotalCount           *uint64            `protobuf:"varint,5,opt,name=totalCount" json:"totalCount,omitempty"`
	Topic                *FinderTopicInfo   `protobuf:"bytes,6,opt,name=topic" json:"topic,omitempty"`
	RecommendSimilarFlag *uint32            `protobuf:"varint,7,opt,name=recommendSimilarFlag" json:"recommendSimilarFlag,omitempty"`
	RelatedTopic         *RelatedTopic      `protobuf:"bytes,8,opt,name=relatedTopic" json:"relatedTopic,omitempty"`
	SubTitle             *PoiTopicSubTitle  `protobuf:"bytes,9,opt,name=subTitle" json:"subTitle,omitempty"`
	PreloadInfo          *FinderPreloadInfo `protobuf:"bytes,10,opt,name=preloadInfo" json:"preloadInfo,omitempty"`
}

func (x *FinderGetTopicListResponse) Reset() {
	*x = FinderGetTopicListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetTopicListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetTopicListResponse) ProtoMessage() {}

func (x *FinderGetTopicListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetTopicListResponse.ProtoReflect.Descriptor instead.
func (*FinderGetTopicListResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{209}
}

func (x *FinderGetTopicListResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetTopicListResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderGetTopicListResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetTopicListResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderGetTopicListResponse) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *FinderGetTopicListResponse) GetTopic() *FinderTopicInfo {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *FinderGetTopicListResponse) GetRecommendSimilarFlag() uint32 {
	if x != nil && x.RecommendSimilarFlag != nil {
		return *x.RecommendSimilarFlag
	}
	return 0
}

func (x *FinderGetTopicListResponse) GetRelatedTopic() *RelatedTopic {
	if x != nil {
		return x.RelatedTopic
	}
	return nil
}

func (x *FinderGetTopicListResponse) GetSubTitle() *PoiTopicSubTitle {
	if x != nil {
		return x.SubTitle
	}
	return nil
}

func (x *FinderGetTopicListResponse) GetPreloadInfo() *FinderPreloadInfo {
	if x != nil {
		return x.PreloadInfo
	}
	return nil
}

type FinderGetRelatedEntranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosTriggerConfig *string `protobuf:"bytes,1,opt,name=posTriggerConfig" json:"posTriggerConfig,omitempty"`
	Stats            *Stats  `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
}

func (x *FinderGetRelatedEntranceInfo) Reset() {
	*x = FinderGetRelatedEntranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetRelatedEntranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetRelatedEntranceInfo) ProtoMessage() {}

func (x *FinderGetRelatedEntranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetRelatedEntranceInfo.ProtoReflect.Descriptor instead.
func (*FinderGetRelatedEntranceInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{210}
}

func (x *FinderGetRelatedEntranceInfo) GetPosTriggerConfig() string {
	if x != nil && x.PosTriggerConfig != nil {
		return *x.PosTriggerConfig
	}
	return ""
}

func (x *FinderGetRelatedEntranceInfo) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type FinderGetRelatedListReq_SwitchColumnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *FinderGetRelatedListReq_SwitchColumnInfo) Reset() {
	*x = FinderGetRelatedListReq_SwitchColumnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetRelatedListReq_SwitchColumnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetRelatedListReq_SwitchColumnInfo) ProtoMessage() {}

func (x *FinderGetRelatedListReq_SwitchColumnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetRelatedListReq_SwitchColumnInfo.ProtoReflect.Descriptor instead.
func (*FinderGetRelatedListReq_SwitchColumnInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{211}
}

func (x *FinderGetRelatedListReq_SwitchColumnInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type FinderGetRelatedListReq_GetColumnFeedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *FinderGetRelatedListReq_GetColumnFeedInfo) Reset() {
	*x = FinderGetRelatedListReq_GetColumnFeedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetRelatedListReq_GetColumnFeedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetRelatedListReq_GetColumnFeedInfo) ProtoMessage() {}

func (x *FinderGetRelatedListReq_GetColumnFeedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetRelatedListReq_GetColumnFeedInfo.ProtoReflect.Descriptor instead.
func (*FinderGetRelatedListReq_GetColumnFeedInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{212}
}

func (x *FinderGetRelatedListReq_GetColumnFeedInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type FinderGetRelatedListReq_GetRelatedColumnTopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *FinderGetRelatedListReq_GetRelatedColumnTopicInfo) Reset() {
	*x = FinderGetRelatedListReq_GetRelatedColumnTopicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetRelatedListReq_GetRelatedColumnTopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetRelatedListReq_GetRelatedColumnTopicInfo) ProtoMessage() {}

func (x *FinderGetRelatedListReq_GetRelatedColumnTopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetRelatedListReq_GetRelatedColumnTopicInfo.ProtoReflect.Descriptor instead.
func (*FinderGetRelatedListReq_GetRelatedColumnTopicInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{213}
}

func (x *FinderGetRelatedListReq_GetRelatedColumnTopicInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type FinderGetRelatedListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest               *BaseRequest                                       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq             *FinderBaseRequest                                 `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LastBuffer                []byte                                             `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ObjectId                  *uint64                                            `protobuf:"varint,4,opt,name=objectId" json:"objectId,omitempty"`
	Longitude                 *float32                                           `protobuf:"fixed32,6,opt,name=longitude" json:"longitude,omitempty"`
	Latitude                  *float32                                           `protobuf:"fixed32,7,opt,name=latitude" json:"latitude,omitempty"`
	DisplayTabType            *uint32                                            `protobuf:"varint,5,opt,name=displayTabType" json:"displayTabType,omitempty"`
	ObjectNonceId             *string                                            `protobuf:"bytes,8,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	FirstObjectReason         *string                                            `protobuf:"bytes,9,opt,name=firstObjectReason" json:"firstObjectReason,omitempty"`
	Scene                     *uint32                                            `protobuf:"varint,10,opt,name=scene" json:"scene,omitempty"`
	Source                    *string                                            `protobuf:"bytes,11,opt,name=source" json:"source,omitempty"`
	SectionInfo               *FinderSectionInfo                                 `protobuf:"bytes,12,opt,name=sectionInfo" json:"sectionInfo,omitempty"`
	CatetoryFilter            *FinderCategoryInfo                                `protobuf:"bytes,13,opt,name=catetoryFilter" json:"catetoryFilter,omitempty"`
	StreamLastBuffer          []byte                                             `protobuf:"bytes,14,opt,name=streamLastBuffer" json:"streamLastBuffer,omitempty"`
	Status                    *FinderClientStatus                                `protobuf:"bytes,15,opt,name=status" json:"status,omitempty"`
	FromUsername              *string                                            `protobuf:"bytes,16,opt,name=fromUsername" json:"fromUsername,omitempty"`
	ToUsername                *string                                            `protobuf:"bytes,17,opt,name=toUsername" json:"toUsername,omitempty"`
	RelatedEntranceInfo       *FinderGetRelatedEntranceInfo                      `protobuf:"bytes,18,opt,name=relatedEntranceInfo" json:"relatedEntranceInfo,omitempty"`
	FromSessionId             *string                                            `protobuf:"bytes,19,opt,name=fromSessionId" json:"fromSessionId,omitempty"`
	ObjectSessionInfo         []byte                                             `protobuf:"bytes,20,opt,name=objectSessionInfo" json:"objectSessionInfo,omitempty"`
	SwitchColumnInfo          *FinderGetRelatedListReq_SwitchColumnInfo          `protobuf:"bytes,21,opt,name=switchColumnInfo" json:"switchColumnInfo,omitempty"`
	GetColumnFeedInfo         *FinderGetRelatedListReq_GetColumnFeedInfo         `protobuf:"bytes,22,opt,name=getColumnFeedInfo" json:"getColumnFeedInfo,omitempty"`
	Stats                     []*Stats                                           `protobuf:"bytes,23,rep,name=stats" json:"stats,omitempty"`
	GetRelatedColumnTopicInfo *FinderGetRelatedListReq_GetRelatedColumnTopicInfo `protobuf:"bytes,24,opt,name=getRelatedColumnTopicInfo" json:"getRelatedColumnTopicInfo,omitempty"`
	LiveStatus                *FinderLiveClientStatus                            `protobuf:"bytes,25,opt,name=liveStatus" json:"liveStatus,omitempty"`
	BeforeJoinLiveRoomStatus  *FinderLiveBeforeJoinLiveRoomStatus                `protobuf:"bytes,26,opt,name=beforeJoinLiveRoomStatus" json:"beforeJoinLiveRoomStatus,omitempty"`
}

func (x *FinderGetRelatedListReq) Reset() {
	*x = FinderGetRelatedListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetRelatedListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetRelatedListReq) ProtoMessage() {}

func (x *FinderGetRelatedListReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetRelatedListReq.ProtoReflect.Descriptor instead.
func (*FinderGetRelatedListReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{214}
}

func (x *FinderGetRelatedListReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderGetRelatedListReq) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderGetRelatedListReq) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderGetRelatedListReq) GetDisplayTabType() uint32 {
	if x != nil && x.DisplayTabType != nil {
		return *x.DisplayTabType
	}
	return 0
}

func (x *FinderGetRelatedListReq) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderGetRelatedListReq) GetFirstObjectReason() string {
	if x != nil && x.FirstObjectReason != nil {
		return *x.FirstObjectReason
	}
	return ""
}

func (x *FinderGetRelatedListReq) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderGetRelatedListReq) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *FinderGetRelatedListReq) GetSectionInfo() *FinderSectionInfo {
	if x != nil {
		return x.SectionInfo
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetCatetoryFilter() *FinderCategoryInfo {
	if x != nil {
		return x.CatetoryFilter
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetStreamLastBuffer() []byte {
	if x != nil {
		return x.StreamLastBuffer
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetFromUsername() string {
	if x != nil && x.FromUsername != nil {
		return *x.FromUsername
	}
	return ""
}

func (x *FinderGetRelatedListReq) GetToUsername() string {
	if x != nil && x.ToUsername != nil {
		return *x.ToUsername
	}
	return ""
}

func (x *FinderGetRelatedListReq) GetRelatedEntranceInfo() *FinderGetRelatedEntranceInfo {
	if x != nil {
		return x.RelatedEntranceInfo
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetFromSessionId() string {
	if x != nil && x.FromSessionId != nil {
		return *x.FromSessionId
	}
	return ""
}

func (x *FinderGetRelatedListReq) GetObjectSessionInfo() []byte {
	if x != nil {
		return x.ObjectSessionInfo
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetSwitchColumnInfo() *FinderGetRelatedListReq_SwitchColumnInfo {
	if x != nil {
		return x.SwitchColumnInfo
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetGetColumnFeedInfo() *FinderGetRelatedListReq_GetColumnFeedInfo {
	if x != nil {
		return x.GetColumnFeedInfo
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetStats() []*Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetGetRelatedColumnTopicInfo() *FinderGetRelatedListReq_GetRelatedColumnTopicInfo {
	if x != nil {
		return x.GetRelatedColumnTopicInfo
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetLiveStatus() *FinderLiveClientStatus {
	if x != nil {
		return x.LiveStatus
	}
	return nil
}

func (x *FinderGetRelatedListReq) GetBeforeJoinLiveRoomStatus() *FinderLiveBeforeJoinLiveRoomStatus {
	if x != nil {
		return x.BeforeJoinLiveRoomStatus
	}
	return nil
}

type FinderStreamCardActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              *uint32                  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	StreamReq         *FinderStreamRequest     `protobuf:"bytes,2,opt,name=streamReq" json:"streamReq,omitempty"`
	GetRelatedListReq *FinderGetRelatedListReq `protobuf:"bytes,3,opt,name=getRelatedListReq" json:"getRelatedListReq,omitempty"`
}

func (x *FinderStreamCardActionInfo) Reset() {
	*x = FinderStreamCardActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamCardActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamCardActionInfo) ProtoMessage() {}

func (x *FinderStreamCardActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamCardActionInfo.ProtoReflect.Descriptor instead.
func (*FinderStreamCardActionInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{215}
}

func (x *FinderStreamCardActionInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderStreamCardActionInfo) GetStreamReq() *FinderStreamRequest {
	if x != nil {
		return x.StreamReq
	}
	return nil
}

func (x *FinderStreamCardActionInfo) GetGetRelatedListReq() *FinderGetRelatedListReq {
	if x != nil {
		return x.GetRelatedListReq
	}
	return nil
}

type FinderStreamTxtCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayoutId       *uint64                       `protobuf:"varint,1,opt,name=layoutId" json:"layoutId,omitempty"`
	Style          *uint32                       `protobuf:"varint,2,opt,name=style" json:"style,omitempty"`
	TitleWording   *string                       `protobuf:"bytes,3,opt,name=titleWording" json:"titleWording,omitempty"`
	LinkWording    []string                      `protobuf:"bytes,4,rep,name=linkWording" json:"linkWording,omitempty"`
	LinkActionInfo []*FinderStreamCardActionInfo `protobuf:"bytes,5,rep,name=linkActionInfo" json:"linkActionInfo,omitempty"`
	LinkReportId   []string                      `protobuf:"bytes,6,rep,name=linkReportId" json:"linkReportId,omitempty"`
}

func (x *FinderStreamTxtCard) Reset() {
	*x = FinderStreamTxtCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamTxtCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamTxtCard) ProtoMessage() {}

func (x *FinderStreamTxtCard) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamTxtCard.ProtoReflect.Descriptor instead.
func (*FinderStreamTxtCard) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{216}
}

func (x *FinderStreamTxtCard) GetLayoutId() uint64 {
	if x != nil && x.LayoutId != nil {
		return *x.LayoutId
	}
	return 0
}

func (x *FinderStreamTxtCard) GetStyle() uint32 {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return 0
}

func (x *FinderStreamTxtCard) GetTitleWording() string {
	if x != nil && x.TitleWording != nil {
		return *x.TitleWording
	}
	return ""
}

func (x *FinderStreamTxtCard) GetLinkWording() []string {
	if x != nil {
		return x.LinkWording
	}
	return nil
}

func (x *FinderStreamTxtCard) GetLinkActionInfo() []*FinderStreamCardActionInfo {
	if x != nil {
		return x.LinkActionInfo
	}
	return nil
}

func (x *FinderStreamTxtCard) GetLinkReportId() []string {
	if x != nil {
		return x.LinkReportId
	}
	return nil
}

type FinderStreamCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayoutId                   *uint64                       `protobuf:"varint,1,opt,name=layoutId" json:"layoutId,omitempty"`
	TitleWording               *string                       `protobuf:"bytes,2,opt,name=titleWording" json:"titleWording,omitempty"`
	LinkWording                *string                       `protobuf:"bytes,3,opt,name=linkWording" json:"linkWording,omitempty"`
	LinkAction                 *uint32                       `protobuf:"varint,4,opt,name=linkAction" json:"linkAction,omitempty"`
	Object                     []*FinderObject               `protobuf:"bytes,5,rep,name=object" json:"object,omitempty"`
	ObjectAction               []uint32                      `protobuf:"varint,6,rep,name=objectAction" json:"objectAction,omitempty"`
	CardBuffer                 []byte                        `protobuf:"bytes,7,opt,name=cardBuffer" json:"cardBuffer,omitempty"`
	CardType                   *uint32                       `protobuf:"varint,8,opt,name=cardType" json:"cardType,omitempty"`
	WithoutLink                *bool                         `protobuf:"varint,9,opt,name=withoutLink" json:"withoutLink,omitempty"`
	GetRelatedListScene        *uint32                       `protobuf:"varint,10,opt,name=getRelatedListScene" json:"getRelatedListScene,omitempty"`
	ContinueAtTheEnd           *bool                         `protobuf:"varint,11,opt,name=continueAtTheEnd" json:"continueAtTheEnd,omitempty"`
	EndWording                 *string                       `protobuf:"bytes,12,opt,name=endWording" json:"endWording,omitempty"`
	EndAction                  *uint32                       `protobuf:"varint,13,opt,name=endAction" json:"endAction,omitempty"`
	SubTitleWording            *string                       `protobuf:"bytes,14,opt,name=subTitleWording" json:"subTitleWording,omitempty"`
	Id                         *uint64                       `protobuf:"varint,15,opt,name=id" json:"id,omitempty"`
	SessionBuffer              *string                       `protobuf:"bytes,16,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	InnerStreamEndTxtCard      *FinderStreamTxtCard          `protobuf:"bytes,17,opt,name=innerStreamEndTxtCard" json:"innerStreamEndTxtCard,omitempty"`
	LinkActionInfo             *FinderStreamCardActionInfo   `protobuf:"bytes,18,opt,name=linkActionInfo" json:"linkActionInfo,omitempty"`
	ObjectActionInfo           []*FinderStreamCardActionInfo `protobuf:"bytes,19,rep,name=objectActionInfo" json:"objectActionInfo,omitempty"`
	EndActionInfo              *FinderStreamCardActionInfo   `protobuf:"bytes,20,opt,name=endActionInfo" json:"endActionInfo,omitempty"`
	FetchContentActionInfo     *FinderStreamCardActionInfo   `protobuf:"bytes,21,opt,name=fetchContentActionInfo" json:"fetchContentActionInfo,omitempty"`
	RefreshWording             *string                       `protobuf:"bytes,22,opt,name=refreshWording" json:"refreshWording,omitempty"`
	RefreshActionInfo          *FinderStreamCardActionInfo   `protobuf:"bytes,23,opt,name=refreshActionInfo" json:"refreshActionInfo,omitempty"`
	ContinueAtTheEndActionInfo *FinderStreamCardActionInfo   `protobuf:"bytes,24,opt,name=continueAtTheEndActionInfo" json:"continueAtTheEndActionInfo,omitempty"`
	TotalObjectCount           *uint32                       `protobuf:"varint,25,opt,name=totalObjectCount" json:"totalObjectCount,omitempty"`
}

func (x *FinderStreamCard) Reset() {
	*x = FinderStreamCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamCard) ProtoMessage() {}

func (x *FinderStreamCard) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamCard.ProtoReflect.Descriptor instead.
func (*FinderStreamCard) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{217}
}

func (x *FinderStreamCard) GetLayoutId() uint64 {
	if x != nil && x.LayoutId != nil {
		return *x.LayoutId
	}
	return 0
}

func (x *FinderStreamCard) GetTitleWording() string {
	if x != nil && x.TitleWording != nil {
		return *x.TitleWording
	}
	return ""
}

func (x *FinderStreamCard) GetLinkWording() string {
	if x != nil && x.LinkWording != nil {
		return *x.LinkWording
	}
	return ""
}

func (x *FinderStreamCard) GetLinkAction() uint32 {
	if x != nil && x.LinkAction != nil {
		return *x.LinkAction
	}
	return 0
}

func (x *FinderStreamCard) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderStreamCard) GetObjectAction() []uint32 {
	if x != nil {
		return x.ObjectAction
	}
	return nil
}

func (x *FinderStreamCard) GetCardBuffer() []byte {
	if x != nil {
		return x.CardBuffer
	}
	return nil
}

func (x *FinderStreamCard) GetCardType() uint32 {
	if x != nil && x.CardType != nil {
		return *x.CardType
	}
	return 0
}

func (x *FinderStreamCard) GetWithoutLink() bool {
	if x != nil && x.WithoutLink != nil {
		return *x.WithoutLink
	}
	return false
}

func (x *FinderStreamCard) GetGetRelatedListScene() uint32 {
	if x != nil && x.GetRelatedListScene != nil {
		return *x.GetRelatedListScene
	}
	return 0
}

func (x *FinderStreamCard) GetContinueAtTheEnd() bool {
	if x != nil && x.ContinueAtTheEnd != nil {
		return *x.ContinueAtTheEnd
	}
	return false
}

func (x *FinderStreamCard) GetEndWording() string {
	if x != nil && x.EndWording != nil {
		return *x.EndWording
	}
	return ""
}

func (x *FinderStreamCard) GetEndAction() uint32 {
	if x != nil && x.EndAction != nil {
		return *x.EndAction
	}
	return 0
}

func (x *FinderStreamCard) GetSubTitleWording() string {
	if x != nil && x.SubTitleWording != nil {
		return *x.SubTitleWording
	}
	return ""
}

func (x *FinderStreamCard) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FinderStreamCard) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *FinderStreamCard) GetInnerStreamEndTxtCard() *FinderStreamTxtCard {
	if x != nil {
		return x.InnerStreamEndTxtCard
	}
	return nil
}

func (x *FinderStreamCard) GetLinkActionInfo() *FinderStreamCardActionInfo {
	if x != nil {
		return x.LinkActionInfo
	}
	return nil
}

func (x *FinderStreamCard) GetObjectActionInfo() []*FinderStreamCardActionInfo {
	if x != nil {
		return x.ObjectActionInfo
	}
	return nil
}

func (x *FinderStreamCard) GetEndActionInfo() *FinderStreamCardActionInfo {
	if x != nil {
		return x.EndActionInfo
	}
	return nil
}

func (x *FinderStreamCard) GetFetchContentActionInfo() *FinderStreamCardActionInfo {
	if x != nil {
		return x.FetchContentActionInfo
	}
	return nil
}

func (x *FinderStreamCard) GetRefreshWording() string {
	if x != nil && x.RefreshWording != nil {
		return *x.RefreshWording
	}
	return ""
}

func (x *FinderStreamCard) GetRefreshActionInfo() *FinderStreamCardActionInfo {
	if x != nil {
		return x.RefreshActionInfo
	}
	return nil
}

func (x *FinderStreamCard) GetContinueAtTheEndActionInfo() *FinderStreamCardActionInfo {
	if x != nil {
		return x.ContinueAtTheEndActionInfo
	}
	return nil
}

func (x *FinderStreamCard) GetTotalObjectCount() uint32 {
	if x != nil && x.TotalObjectCount != nil {
		return *x.TotalObjectCount
	}
	return 0
}

type FinderLivePreloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreloadStrategyId *uint64 `protobuf:"varint,1,opt,name=preloadStrategyId" json:"preloadStrategyId,omitempty"`
	MaxBitRate        *uint32 `protobuf:"varint,2,opt,name=maxBitRate" json:"maxBitRate,omitempty"`
}

func (x *FinderLivePreloadInfo) Reset() {
	*x = FinderLivePreloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLivePreloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLivePreloadInfo) ProtoMessage() {}

func (x *FinderLivePreloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLivePreloadInfo.ProtoReflect.Descriptor instead.
func (*FinderLivePreloadInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{218}
}

func (x *FinderLivePreloadInfo) GetPreloadStrategyId() uint64 {
	if x != nil && x.PreloadStrategyId != nil {
		return *x.PreloadStrategyId
	}
	return 0
}

func (x *FinderLivePreloadInfo) GetMaxBitRate() uint32 {
	if x != nil && x.MaxBitRate != nil {
		return *x.MaxBitRate
	}
	return 0
}

type FinderStreamJumpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object      *FinderObject `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
	JumpType    *uint32       `protobuf:"varint,2,opt,name=jumpType" json:"jumpType,omitempty"`
	JumpExtInfo []byte        `protobuf:"bytes,3,opt,name=jumpExtInfo" json:"jumpExtInfo,omitempty"`
}

func (x *FinderStreamJumpInfo) Reset() {
	*x = FinderStreamJumpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamJumpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamJumpInfo) ProtoMessage() {}

func (x *FinderStreamJumpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamJumpInfo.ProtoReflect.Descriptor instead.
func (*FinderStreamJumpInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{219}
}

func (x *FinderStreamJumpInfo) GetObject() *FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderStreamJumpInfo) GetJumpType() uint32 {
	if x != nil && x.JumpType != nil {
		return *x.JumpType
	}
	return 0
}

func (x *FinderStreamJumpInfo) GetJumpExtInfo() []byte {
	if x != nil {
		return x.JumpExtInfo
	}
	return nil
}

type FinderStreamDivider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertBeforeIndex *uint32               `protobuf:"varint,1,opt,name=insertBeforeIndex" json:"insertBeforeIndex,omitempty"`
	Wording           *string               `protobuf:"bytes,2,opt,name=wording" json:"wording,omitempty"`
	UiStyle           *uint32               `protobuf:"varint,3,opt,name=uiStyle" json:"uiStyle,omitempty"`
	LayoutId          *uint64               `protobuf:"varint,4,opt,name=layoutId" json:"layoutId,omitempty"`
	JumpInfo          *FinderStreamJumpInfo `protobuf:"bytes,5,opt,name=jumpInfo" json:"jumpInfo,omitempty"`
	Type              *uint32               `protobuf:"varint,7,opt,name=type" json:"type,omitempty"`
	IconUrl           *string               `protobuf:"bytes,8,opt,name=iconUrl" json:"iconUrl,omitempty"`
}

func (x *FinderStreamDivider) Reset() {
	*x = FinderStreamDivider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamDivider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamDivider) ProtoMessage() {}

func (x *FinderStreamDivider) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamDivider.ProtoReflect.Descriptor instead.
func (*FinderStreamDivider) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{220}
}

func (x *FinderStreamDivider) GetInsertBeforeIndex() uint32 {
	if x != nil && x.InsertBeforeIndex != nil {
		return *x.InsertBeforeIndex
	}
	return 0
}

func (x *FinderStreamDivider) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *FinderStreamDivider) GetUiStyle() uint32 {
	if x != nil && x.UiStyle != nil {
		return *x.UiStyle
	}
	return 0
}

func (x *FinderStreamDivider) GetLayoutId() uint64 {
	if x != nil && x.LayoutId != nil {
		return *x.LayoutId
	}
	return 0
}

func (x *FinderStreamDivider) GetJumpInfo() *FinderStreamJumpInfo {
	if x != nil {
		return x.JumpInfo
	}
	return nil
}

func (x *FinderStreamDivider) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderStreamDivider) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

type FinderLiveStreamNoticeCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeInfo *FinderLiveNoticeInfo `protobuf:"bytes,1,opt,name=noticeInfo" json:"noticeInfo,omitempty"`
	Contact    *FinderContact        `protobuf:"bytes,2,opt,name=contact" json:"contact,omitempty"`
}

func (x *FinderLiveStreamNoticeCard) Reset() {
	*x = FinderLiveStreamNoticeCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveStreamNoticeCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveStreamNoticeCard) ProtoMessage() {}

func (x *FinderLiveStreamNoticeCard) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveStreamNoticeCard.ProtoReflect.Descriptor instead.
func (*FinderLiveStreamNoticeCard) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{221}
}

func (x *FinderLiveStreamNoticeCard) GetNoticeInfo() *FinderLiveNoticeInfo {
	if x != nil {
		return x.NoticeInfo
	}
	return nil
}

func (x *FinderLiveStreamNoticeCard) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type FinderLiveStreamJumper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveTab        *FinderLiveTabInfo `protobuf:"bytes,1,opt,name=liveTab" json:"liveTab,omitempty"`
	RelatedWording *string            `protobuf:"bytes,2,opt,name=relatedWording" json:"relatedWording,omitempty"`
}

func (x *FinderLiveStreamJumper) Reset() {
	*x = FinderLiveStreamJumper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveStreamJumper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveStreamJumper) ProtoMessage() {}

func (x *FinderLiveStreamJumper) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveStreamJumper.ProtoReflect.Descriptor instead.
func (*FinderLiveStreamJumper) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{222}
}

func (x *FinderLiveStreamJumper) GetLiveTab() *FinderLiveTabInfo {
	if x != nil {
		return x.LiveTab
	}
	return nil
}

func (x *FinderLiveStreamJumper) GetRelatedWording() string {
	if x != nil && x.RelatedWording != nil {
		return *x.RelatedWording
	}
	return ""
}

type FinderBannerExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wording  *string `protobuf:"bytes,1,opt,name=wording" json:"wording,omitempty"`
	CoverImg *string `protobuf:"bytes,2,opt,name=coverImg" json:"coverImg,omitempty"`
}

func (x *FinderBannerExtInfo) Reset() {
	*x = FinderBannerExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBannerExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBannerExtInfo) ProtoMessage() {}

func (x *FinderBannerExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBannerExtInfo.ProtoReflect.Descriptor instead.
func (*FinderBannerExtInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{223}
}

func (x *FinderBannerExtInfo) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *FinderBannerExtInfo) GetCoverImg() string {
	if x != nil && x.CoverImg != nil {
		return *x.CoverImg
	}
	return ""
}

type FinderLiveRelatedExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JumpInfo *FinderJumpInfo `protobuf:"bytes,1,opt,name=jumpInfo" json:"jumpInfo,omitempty"`
}

func (x *FinderLiveRelatedExtInfo) Reset() {
	*x = FinderLiveRelatedExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveRelatedExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveRelatedExtInfo) ProtoMessage() {}

func (x *FinderLiveRelatedExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveRelatedExtInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveRelatedExtInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{224}
}

func (x *FinderLiveRelatedExtInfo) GetJumpInfo() *FinderJumpInfo {
	if x != nil {
		return x.JumpInfo
	}
	return nil
}

type FinderAdExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wording       *string `protobuf:"bytes,1,opt,name=wording" json:"wording,omitempty"`
	CoverImg      *string `protobuf:"bytes,2,opt,name=coverImg" json:"coverImg,omitempty"`
	CoverImgRight *string `protobuf:"bytes,3,opt,name=coverImgRight" json:"coverImgRight,omitempty"`
	BackColor     *string `protobuf:"bytes,4,opt,name=backColor" json:"backColor,omitempty"`
}

func (x *FinderAdExtInfo) Reset() {
	*x = FinderAdExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderAdExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderAdExtInfo) ProtoMessage() {}

func (x *FinderAdExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderAdExtInfo.ProtoReflect.Descriptor instead.
func (*FinderAdExtInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{225}
}

func (x *FinderAdExtInfo) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *FinderAdExtInfo) GetCoverImg() string {
	if x != nil && x.CoverImg != nil {
		return *x.CoverImg
	}
	return ""
}

func (x *FinderAdExtInfo) GetCoverImgRight() string {
	if x != nil && x.CoverImgRight != nil {
		return *x.CoverImgRight
	}
	return ""
}

func (x *FinderAdExtInfo) GetBackColor() string {
	if x != nil && x.BackColor != nil {
		return *x.BackColor
	}
	return ""
}

type FinderLiveStreamCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LayoutId       *uint64                     `protobuf:"varint,1,opt,name=layoutId" json:"layoutId,omitempty"`
	Style          *uint32                     `protobuf:"varint,2,opt,name=style" json:"style,omitempty"`
	Object         *FinderObject               `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
	H5Url          *string                     `protobuf:"bytes,4,opt,name=h5Url" json:"h5Url,omitempty"`
	NoticeInfo     *FinderLiveStreamNoticeCard `protobuf:"bytes,5,opt,name=noticeInfo" json:"noticeInfo,omitempty"`
	RelateLiving   []*FinderObject             `protobuf:"bytes,6,rep,name=relateLiving" json:"relateLiving,omitempty"`
	Jumper         *FinderLiveStreamJumper     `protobuf:"bytes,7,opt,name=jumper" json:"jumper,omitempty"`
	BannerExtinfo  *FinderBannerExtInfo        `protobuf:"bytes,8,opt,name=bannerExtinfo" json:"bannerExtinfo,omitempty"`
	ObjectWording  *string                     `protobuf:"bytes,9,opt,name=objectWording" json:"objectWording,omitempty"`
	RelatedExtInfo *FinderLiveRelatedExtInfo   `protobuf:"bytes,10,opt,name=relatedExtInfo" json:"relatedExtInfo,omitempty"`
	AdExtinfo      *FinderAdExtInfo            `protobuf:"bytes,11,opt,name=adExtinfo" json:"adExtinfo,omitempty"`
}

func (x *FinderLiveStreamCard) Reset() {
	*x = FinderLiveStreamCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveStreamCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveStreamCard) ProtoMessage() {}

func (x *FinderLiveStreamCard) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveStreamCard.ProtoReflect.Descriptor instead.
func (*FinderLiveStreamCard) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{226}
}

func (x *FinderLiveStreamCard) GetLayoutId() uint64 {
	if x != nil && x.LayoutId != nil {
		return *x.LayoutId
	}
	return 0
}

func (x *FinderLiveStreamCard) GetStyle() uint32 {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return 0
}

func (x *FinderLiveStreamCard) GetObject() *FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderLiveStreamCard) GetH5Url() string {
	if x != nil && x.H5Url != nil {
		return *x.H5Url
	}
	return ""
}

func (x *FinderLiveStreamCard) GetNoticeInfo() *FinderLiveStreamNoticeCard {
	if x != nil {
		return x.NoticeInfo
	}
	return nil
}

func (x *FinderLiveStreamCard) GetRelateLiving() []*FinderObject {
	if x != nil {
		return x.RelateLiving
	}
	return nil
}

func (x *FinderLiveStreamCard) GetJumper() *FinderLiveStreamJumper {
	if x != nil {
		return x.Jumper
	}
	return nil
}

func (x *FinderLiveStreamCard) GetBannerExtinfo() *FinderBannerExtInfo {
	if x != nil {
		return x.BannerExtinfo
	}
	return nil
}

func (x *FinderLiveStreamCard) GetObjectWording() string {
	if x != nil && x.ObjectWording != nil {
		return *x.ObjectWording
	}
	return ""
}

func (x *FinderLiveStreamCard) GetRelatedExtInfo() *FinderLiveRelatedExtInfo {
	if x != nil {
		return x.RelatedExtInfo
	}
	return nil
}

func (x *FinderLiveStreamCard) GetAdExtinfo() *FinderAdExtInfo {
	if x != nil {
		return x.AdExtinfo
	}
	return nil
}

type FinderStreamLayoutInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Divider  []*FinderStreamDivider  `protobuf:"bytes,1,rep,name=divider" json:"divider,omitempty"`
	Card     []*FinderStreamCard     `protobuf:"bytes,2,rep,name=card" json:"card,omitempty"`
	LayoutId []uint64                `protobuf:"varint,3,rep,name=layoutId" json:"layoutId,omitempty"`
	LiveCard []*FinderLiveStreamCard `protobuf:"bytes,4,rep,name=liveCard" json:"liveCard,omitempty"`
}

func (x *FinderStreamLayoutInfo) Reset() {
	*x = FinderStreamLayoutInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamLayoutInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamLayoutInfo) ProtoMessage() {}

func (x *FinderStreamLayoutInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamLayoutInfo.ProtoReflect.Descriptor instead.
func (*FinderStreamLayoutInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{227}
}

func (x *FinderStreamLayoutInfo) GetDivider() []*FinderStreamDivider {
	if x != nil {
		return x.Divider
	}
	return nil
}

func (x *FinderStreamLayoutInfo) GetCard() []*FinderStreamCard {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *FinderStreamLayoutInfo) GetLayoutId() []uint64 {
	if x != nil {
		return x.LayoutId
	}
	return nil
}

func (x *FinderStreamLayoutInfo) GetLiveCard() []*FinderLiveStreamCard {
	if x != nil {
		return x.LiveCard
	}
	return nil
}

type FinderLikeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName   *string               `protobuf:"bytes,1,opt,name=nickName" json:"nickName,omitempty"`
	HeadImgUrl *string               `protobuf:"bytes,2,opt,name=headImgUrl" json:"headImgUrl,omitempty"`
	LikeId     *uint64               `protobuf:"varint,3,opt,name=likeId" json:"likeId,omitempty"`
	LikeFlag   *uint32               `protobuf:"varint,4,opt,name=likeFlag" json:"likeFlag,omitempty"`
	RefuseFlag *uint32               `protobuf:"varint,5,opt,name=refuseFlag" json:"refuseFlag,omitempty"`
	WxUsername *string               `protobuf:"bytes,6,opt,name=wxUsername" json:"wxUsername,omitempty"`
	LikeTime   *uint64               `protobuf:"varint,7,opt,name=likeTime" json:"likeTime,omitempty"`
	UnreadFlag *uint32               `protobuf:"varint,8,opt,name=unreadFlag" json:"unreadFlag,omitempty"`
	MsgInfo    *FinderContactMsgInfo `protobuf:"bytes,9,opt,name=msgInfo" json:"msgInfo,omitempty"`
}

func (x *FinderLikeInfo) Reset() {
	*x = FinderLikeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLikeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLikeInfo) ProtoMessage() {}

func (x *FinderLikeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLikeInfo.ProtoReflect.Descriptor instead.
func (*FinderLikeInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{228}
}

func (x *FinderLikeInfo) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *FinderLikeInfo) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

func (x *FinderLikeInfo) GetLikeId() uint64 {
	if x != nil && x.LikeId != nil {
		return *x.LikeId
	}
	return 0
}

func (x *FinderLikeInfo) GetLikeFlag() uint32 {
	if x != nil && x.LikeFlag != nil {
		return *x.LikeFlag
	}
	return 0
}

func (x *FinderLikeInfo) GetRefuseFlag() uint32 {
	if x != nil && x.RefuseFlag != nil {
		return *x.RefuseFlag
	}
	return 0
}

func (x *FinderLikeInfo) GetWxUsername() string {
	if x != nil && x.WxUsername != nil {
		return *x.WxUsername
	}
	return ""
}

func (x *FinderLikeInfo) GetLikeTime() uint64 {
	if x != nil && x.LikeTime != nil {
		return *x.LikeTime
	}
	return 0
}

func (x *FinderLikeInfo) GetUnreadFlag() uint32 {
	if x != nil && x.UnreadFlag != nil {
		return *x.UnreadFlag
	}
	return 0
}

func (x *FinderLikeInfo) GetMsgInfo() *FinderContactMsgInfo {
	if x != nil {
		return x.MsgInfo
	}
	return nil
}

type FinderGuideBarItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId        *uint64           `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	LikeList        []*FinderLikeInfo `protobuf:"bytes,2,rep,name=likeList" json:"likeList,omitempty"`
	Title           *string           `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	FriendLikeCount *uint32           `protobuf:"varint,4,opt,name=friendLikeCount" json:"friendLikeCount,omitempty"`
}

func (x *FinderGuideBarItem) Reset() {
	*x = FinderGuideBarItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGuideBarItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGuideBarItem) ProtoMessage() {}

func (x *FinderGuideBarItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGuideBarItem.ProtoReflect.Descriptor instead.
func (*FinderGuideBarItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{229}
}

func (x *FinderGuideBarItem) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderGuideBarItem) GetLikeList() []*FinderLikeInfo {
	if x != nil {
		return x.LikeList
	}
	return nil
}

func (x *FinderGuideBarItem) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderGuideBarItem) GetFriendLikeCount() uint32 {
	if x != nil && x.FriendLikeCount != nil {
		return *x.FriendLikeCount
	}
	return 0
}

type FinderBarItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *uint32             `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	GuideBar *FinderGuideBarItem `protobuf:"bytes,2,opt,name=guideBar" json:"guideBar,omitempty"`
}

func (x *FinderBarItem) Reset() {
	*x = FinderBarItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBarItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBarItem) ProtoMessage() {}

func (x *FinderBarItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBarItem.ProtoReflect.Descriptor instead.
func (*FinderBarItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{230}
}

func (x *FinderBarItem) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderBarItem) GetGuideBar() *FinderGuideBarItem {
	if x != nil {
		return x.GuideBar
	}
	return nil
}

type FinderBarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BarList []*FinderBarItem `protobuf:"bytes,1,rep,name=barList" json:"barList,omitempty"`
}

func (x *FinderBarInfo) Reset() {
	*x = FinderBarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBarInfo) ProtoMessage() {}

func (x *FinderBarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBarInfo.ProtoReflect.Descriptor instead.
func (*FinderBarInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{231}
}

func (x *FinderBarInfo) GetBarList() []*FinderBarItem {
	if x != nil {
		return x.BarList
	}
	return nil
}

type FinderGetRelatedListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse         *BaseResponse           `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Object               []*FinderObject         `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	LastBuffer           []byte                  `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag         *uint32                 `protobuf:"varint,4,opt,name=continueFlag" json:"continueFlag,omitempty"`
	StreamLastBuffer     []byte                  `protobuf:"bytes,5,opt,name=streamLastBuffer" json:"streamLastBuffer,omitempty"`
	PreloadInfo          *FinderPreloadInfo      `protobuf:"bytes,6,opt,name=preloadInfo" json:"preloadInfo,omitempty"`
	RelatedStreamWording *string                 `protobuf:"bytes,7,opt,name=relatedStreamWording" json:"relatedStreamWording,omitempty"`
	Card                 []*FinderStreamCard     `protobuf:"bytes,8,rep,name=card" json:"card,omitempty"`
	TxtCard              []*FinderStreamTxtCard  `protobuf:"bytes,9,rep,name=txtCard" json:"txtCard,omitempty"`
	LivePreloadInfo      *FinderLivePreloadInfo  `protobuf:"bytes,10,opt,name=livePreloadInfo" json:"livePreloadInfo,omitempty"`
	LayoutInfo           *FinderStreamLayoutInfo `protobuf:"bytes,11,opt,name=layoutInfo" json:"layoutInfo,omitempty"`
	BarInfo              *FinderBarInfo          `protobuf:"bytes,12,opt,name=barInfo" json:"barInfo,omitempty"`
}

func (x *FinderGetRelatedListResp) Reset() {
	*x = FinderGetRelatedListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetRelatedListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetRelatedListResp) ProtoMessage() {}

func (x *FinderGetRelatedListResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetRelatedListResp.ProtoReflect.Descriptor instead.
func (*FinderGetRelatedListResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{232}
}

func (x *FinderGetRelatedListResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetRelatedListResp) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderGetRelatedListResp) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetRelatedListResp) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderGetRelatedListResp) GetStreamLastBuffer() []byte {
	if x != nil {
		return x.StreamLastBuffer
	}
	return nil
}

func (x *FinderGetRelatedListResp) GetPreloadInfo() *FinderPreloadInfo {
	if x != nil {
		return x.PreloadInfo
	}
	return nil
}

func (x *FinderGetRelatedListResp) GetRelatedStreamWording() string {
	if x != nil && x.RelatedStreamWording != nil {
		return *x.RelatedStreamWording
	}
	return ""
}

func (x *FinderGetRelatedListResp) GetCard() []*FinderStreamCard {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *FinderGetRelatedListResp) GetTxtCard() []*FinderStreamTxtCard {
	if x != nil {
		return x.TxtCard
	}
	return nil
}

func (x *FinderGetRelatedListResp) GetLivePreloadInfo() *FinderLivePreloadInfo {
	if x != nil {
		return x.LivePreloadInfo
	}
	return nil
}

func (x *FinderGetRelatedListResp) GetLayoutInfo() *FinderStreamLayoutInfo {
	if x != nil {
		return x.LayoutInfo
	}
	return nil
}

func (x *FinderGetRelatedListResp) GetBarInfo() *FinderBarInfo {
	if x != nil {
		return x.BarInfo
	}
	return nil
}

type FinderSectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionTitle    *string                     `protobuf:"bytes,1,opt,name=sectionTitle" json:"sectionTitle,omitempty"`
	SectionId       *string                     `protobuf:"bytes,2,opt,name=sectionId" json:"sectionId,omitempty"`
	SectionDesc     *string                     `protobuf:"bytes,3,opt,name=sectionDesc" json:"sectionDesc,omitempty"`
	SectionType     *uint32                     `protobuf:"varint,4,opt,name=sectionType" json:"sectionType,omitempty"`
	MoreActionType  *uint32                     `protobuf:"varint,5,opt,name=moreActionType" json:"moreActionType,omitempty"`
	SectionSubTitle *string                     `protobuf:"bytes,6,opt,name=sectionSubTitle" json:"sectionSubTitle,omitempty"`
	IconUrlLight    *string                     `protobuf:"bytes,7,opt,name=iconUrlLight" json:"iconUrlLight,omitempty"`
	IconUrlDark     *string                     `protobuf:"bytes,8,opt,name=iconUrlDark" json:"iconUrlDark,omitempty"`
	IconType        *uint32                     `protobuf:"varint,9,opt,name=iconType" json:"iconType,omitempty"`
	TopicResp       *FinderGetTopicListResponse `protobuf:"bytes,10,opt,name=topicResp" json:"topicResp,omitempty"`
	StreamResp      *FinderStreamResponse       `protobuf:"bytes,11,opt,name=streamResp" json:"streamResp,omitempty"`
	RelatedResp     *FinderGetRelatedListResp   `protobuf:"bytes,12,opt,name=relatedResp" json:"relatedResp,omitempty"`
	RecommendType   *uint32                     `protobuf:"varint,13,opt,name=recommendType" json:"recommendType,omitempty"`
}

func (x *FinderSectionInfo) Reset() {
	*x = FinderSectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSectionInfo) ProtoMessage() {}

func (x *FinderSectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSectionInfo.ProtoReflect.Descriptor instead.
func (*FinderSectionInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{233}
}

func (x *FinderSectionInfo) GetSectionTitle() string {
	if x != nil && x.SectionTitle != nil {
		return *x.SectionTitle
	}
	return ""
}

func (x *FinderSectionInfo) GetSectionId() string {
	if x != nil && x.SectionId != nil {
		return *x.SectionId
	}
	return ""
}

func (x *FinderSectionInfo) GetSectionDesc() string {
	if x != nil && x.SectionDesc != nil {
		return *x.SectionDesc
	}
	return ""
}

func (x *FinderSectionInfo) GetSectionType() uint32 {
	if x != nil && x.SectionType != nil {
		return *x.SectionType
	}
	return 0
}

func (x *FinderSectionInfo) GetMoreActionType() uint32 {
	if x != nil && x.MoreActionType != nil {
		return *x.MoreActionType
	}
	return 0
}

func (x *FinderSectionInfo) GetSectionSubTitle() string {
	if x != nil && x.SectionSubTitle != nil {
		return *x.SectionSubTitle
	}
	return ""
}

func (x *FinderSectionInfo) GetIconUrlLight() string {
	if x != nil && x.IconUrlLight != nil {
		return *x.IconUrlLight
	}
	return ""
}

func (x *FinderSectionInfo) GetIconUrlDark() string {
	if x != nil && x.IconUrlDark != nil {
		return *x.IconUrlDark
	}
	return ""
}

func (x *FinderSectionInfo) GetIconType() uint32 {
	if x != nil && x.IconType != nil {
		return *x.IconType
	}
	return 0
}

func (x *FinderSectionInfo) GetTopicResp() *FinderGetTopicListResponse {
	if x != nil {
		return x.TopicResp
	}
	return nil
}

func (x *FinderSectionInfo) GetStreamResp() *FinderStreamResponse {
	if x != nil {
		return x.StreamResp
	}
	return nil
}

func (x *FinderSectionInfo) GetRelatedResp() *FinderGetRelatedListResp {
	if x != nil {
		return x.RelatedResp
	}
	return nil
}

func (x *FinderSectionInfo) GetRecommendType() uint32 {
	if x != nil && x.RecommendType != nil {
		return *x.RecommendType
	}
	return 0
}

type FinderStreamPrefechTimeIntervalConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowReddotPrefetchOutterInterval   *uint32 `protobuf:"varint,1,opt,name=followReddotPrefetchOutterInterval" json:"followReddotPrefetchOutterInterval,omitempty"`
	FriendReddotPrefetchOutterInterval   *uint32 `protobuf:"varint,2,opt,name=friendReddotPrefetchOutterInterval" json:"friendReddotPrefetchOutterInterval,omitempty"`
	HotReddotPrefetchOutterInterval      *uint32 `protobuf:"varint,3,opt,name=hotReddotPrefetchOutterInterval" json:"hotReddotPrefetchOutterInterval,omitempty"`
	NearbyReddotPrefetchOutterInterval   *uint32 `protobuf:"varint,4,opt,name=nearbyReddotPrefetchOutterInterval" json:"nearbyReddotPrefetchOutterInterval,omitempty"`
	FollowNoReddotPrefetchOutterInterval *uint32 `protobuf:"varint,5,opt,name=followNoReddotPrefetchOutterInterval" json:"followNoReddotPrefetchOutterInterval,omitempty"`
	FriendNoReddotPrefetchOutterInterval *uint32 `protobuf:"varint,6,opt,name=friendNoReddotPrefetchOutterInterval" json:"friendNoReddotPrefetchOutterInterval,omitempty"`
	HotNoReddotPrefetchOutterInterval    *uint32 `protobuf:"varint,7,opt,name=hotNoReddotPrefetchOutterInterval" json:"hotNoReddotPrefetchOutterInterval,omitempty"`
	NearbyNoReddotPrefetchOutterInterval *uint32 `protobuf:"varint,8,opt,name=nearbyNoReddotPrefetchOutterInterval" json:"nearbyNoReddotPrefetchOutterInterval,omitempty"`
	FollowReddotPrefetchInnerInterval    *uint32 `protobuf:"varint,9,opt,name=followReddotPrefetchInnerInterval" json:"followReddotPrefetchInnerInterval,omitempty"`
	FriendReddotPrefetchInnerInterval    *uint32 `protobuf:"varint,10,opt,name=friendReddotPrefetchInnerInterval" json:"friendReddotPrefetchInnerInterval,omitempty"`
	HotReddotPrefetchInnerInterval       *uint32 `protobuf:"varint,11,opt,name=hotReddotPrefetchInnerInterval" json:"hotReddotPrefetchInnerInterval,omitempty"`
	NearbyReddotPrefetchInnerInterval    *uint32 `protobuf:"varint,12,opt,name=nearbyReddotPrefetchInnerInterval" json:"nearbyReddotPrefetchInnerInterval,omitempty"`
	FollowNoReddotPrefetchInnerInterval  *uint32 `protobuf:"varint,13,opt,name=followNoReddotPrefetchInnerInterval" json:"followNoReddotPrefetchInnerInterval,omitempty"`
	FriendNoReddotPrefetchInnerInterval  *uint32 `protobuf:"varint,14,opt,name=friendNoReddotPrefetchInnerInterval" json:"friendNoReddotPrefetchInnerInterval,omitempty"`
	HotNoReddotPrefetchInnerInterval     *uint32 `protobuf:"varint,15,opt,name=hotNoReddotPrefetchInnerInterval" json:"hotNoReddotPrefetchInnerInterval,omitempty"`
	NearbyNoReddotPrefetchInnerInterval  *uint32 `protobuf:"varint,16,opt,name=nearbyNoReddotPrefetchInnerInterval" json:"nearbyNoReddotPrefetchInnerInterval,omitempty"`
	TabInnerHotPrefetchSwitch            *bool   `protobuf:"varint,17,opt,name=tabInnerHotPrefetchSwitch" json:"tabInnerHotPrefetchSwitch,omitempty"`
	ClientPredictPrefetchOutterInterval  *uint32 `protobuf:"varint,18,opt,name=clientPredictPrefetchOutterInterval" json:"clientPredictPrefetchOutterInterval,omitempty"`
	ClientPredictReddotOutterInterval    *uint32 `protobuf:"varint,19,opt,name=clientPredictReddotOutterInterval" json:"clientPredictReddotOutterInterval,omitempty"`
	HotOutterPrefetchModel               *uint32 `protobuf:"varint,20,opt,name=hotOutterPrefetchModel" json:"hotOutterPrefetchModel,omitempty"`
	NewFollowReddotPrefetchInterval      *uint32 `protobuf:"varint,21,opt,name=newFollowReddotPrefetchInterval" json:"newFollowReddotPrefetchInterval,omitempty"`
	NewFriendReddotPrefetchInterval      *uint32 `protobuf:"varint,22,opt,name=newFriendReddotPrefetchInterval" json:"newFriendReddotPrefetchInterval,omitempty"`
	NewHotReddotPrefetchInterval         *uint32 `protobuf:"varint,23,opt,name=newHotReddotPrefetchInterval" json:"newHotReddotPrefetchInterval,omitempty"`
	NewNearbyReddotPrefetchInterval      *uint32 `protobuf:"varint,24,opt,name=newNearbyReddotPrefetchInterval" json:"newNearbyReddotPrefetchInterval,omitempty"`
	FollowOutterPrefetchValidTime        *uint32 `protobuf:"varint,25,opt,name=followOutterPrefetchValidTime" json:"followOutterPrefetchValidTime,omitempty"`
	FriendOutterPrefetchValidTime        *uint32 `protobuf:"varint,26,opt,name=friendOutterPrefetchValidTime" json:"friendOutterPrefetchValidTime,omitempty"`
	HotOutterPrefetchValidTime           *uint32 `protobuf:"varint,27,opt,name=hotOutterPrefetchValidTime" json:"hotOutterPrefetchValidTime,omitempty"`
	NearbyOutterPrefetchValidTime        *uint32 `protobuf:"varint,28,opt,name=nearbyOutterPrefetchValidTime" json:"nearbyOutterPrefetchValidTime,omitempty"`
	ModelPrefetchSwitch                  *bool   `protobuf:"varint,29,opt,name=modelPrefetchSwitch" json:"modelPrefetchSwitch,omitempty"`
	IosModelPrefetchConf                 []byte  `protobuf:"bytes,30,opt,name=iosModelPrefetchConf" json:"iosModelPrefetchConf,omitempty"`
}

func (x *FinderStreamPrefechTimeIntervalConf) Reset() {
	*x = FinderStreamPrefechTimeIntervalConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamPrefechTimeIntervalConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamPrefechTimeIntervalConf) ProtoMessage() {}

func (x *FinderStreamPrefechTimeIntervalConf) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamPrefechTimeIntervalConf.ProtoReflect.Descriptor instead.
func (*FinderStreamPrefechTimeIntervalConf) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{234}
}

func (x *FinderStreamPrefechTimeIntervalConf) GetFollowReddotPrefetchOutterInterval() uint32 {
	if x != nil && x.FollowReddotPrefetchOutterInterval != nil {
		return *x.FollowReddotPrefetchOutterInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetFriendReddotPrefetchOutterInterval() uint32 {
	if x != nil && x.FriendReddotPrefetchOutterInterval != nil {
		return *x.FriendReddotPrefetchOutterInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetHotReddotPrefetchOutterInterval() uint32 {
	if x != nil && x.HotReddotPrefetchOutterInterval != nil {
		return *x.HotReddotPrefetchOutterInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetNearbyReddotPrefetchOutterInterval() uint32 {
	if x != nil && x.NearbyReddotPrefetchOutterInterval != nil {
		return *x.NearbyReddotPrefetchOutterInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetFollowNoReddotPrefetchOutterInterval() uint32 {
	if x != nil && x.FollowNoReddotPrefetchOutterInterval != nil {
		return *x.FollowNoReddotPrefetchOutterInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetFriendNoReddotPrefetchOutterInterval() uint32 {
	if x != nil && x.FriendNoReddotPrefetchOutterInterval != nil {
		return *x.FriendNoReddotPrefetchOutterInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetHotNoReddotPrefetchOutterInterval() uint32 {
	if x != nil && x.HotNoReddotPrefetchOutterInterval != nil {
		return *x.HotNoReddotPrefetchOutterInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetNearbyNoReddotPrefetchOutterInterval() uint32 {
	if x != nil && x.NearbyNoReddotPrefetchOutterInterval != nil {
		return *x.NearbyNoReddotPrefetchOutterInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetFollowReddotPrefetchInnerInterval() uint32 {
	if x != nil && x.FollowReddotPrefetchInnerInterval != nil {
		return *x.FollowReddotPrefetchInnerInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetFriendReddotPrefetchInnerInterval() uint32 {
	if x != nil && x.FriendReddotPrefetchInnerInterval != nil {
		return *x.FriendReddotPrefetchInnerInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetHotReddotPrefetchInnerInterval() uint32 {
	if x != nil && x.HotReddotPrefetchInnerInterval != nil {
		return *x.HotReddotPrefetchInnerInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetNearbyReddotPrefetchInnerInterval() uint32 {
	if x != nil && x.NearbyReddotPrefetchInnerInterval != nil {
		return *x.NearbyReddotPrefetchInnerInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetFollowNoReddotPrefetchInnerInterval() uint32 {
	if x != nil && x.FollowNoReddotPrefetchInnerInterval != nil {
		return *x.FollowNoReddotPrefetchInnerInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetFriendNoReddotPrefetchInnerInterval() uint32 {
	if x != nil && x.FriendNoReddotPrefetchInnerInterval != nil {
		return *x.FriendNoReddotPrefetchInnerInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetHotNoReddotPrefetchInnerInterval() uint32 {
	if x != nil && x.HotNoReddotPrefetchInnerInterval != nil {
		return *x.HotNoReddotPrefetchInnerInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetNearbyNoReddotPrefetchInnerInterval() uint32 {
	if x != nil && x.NearbyNoReddotPrefetchInnerInterval != nil {
		return *x.NearbyNoReddotPrefetchInnerInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetTabInnerHotPrefetchSwitch() bool {
	if x != nil && x.TabInnerHotPrefetchSwitch != nil {
		return *x.TabInnerHotPrefetchSwitch
	}
	return false
}

func (x *FinderStreamPrefechTimeIntervalConf) GetClientPredictPrefetchOutterInterval() uint32 {
	if x != nil && x.ClientPredictPrefetchOutterInterval != nil {
		return *x.ClientPredictPrefetchOutterInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetClientPredictReddotOutterInterval() uint32 {
	if x != nil && x.ClientPredictReddotOutterInterval != nil {
		return *x.ClientPredictReddotOutterInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetHotOutterPrefetchModel() uint32 {
	if x != nil && x.HotOutterPrefetchModel != nil {
		return *x.HotOutterPrefetchModel
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetNewFollowReddotPrefetchInterval() uint32 {
	if x != nil && x.NewFollowReddotPrefetchInterval != nil {
		return *x.NewFollowReddotPrefetchInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetNewFriendReddotPrefetchInterval() uint32 {
	if x != nil && x.NewFriendReddotPrefetchInterval != nil {
		return *x.NewFriendReddotPrefetchInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetNewHotReddotPrefetchInterval() uint32 {
	if x != nil && x.NewHotReddotPrefetchInterval != nil {
		return *x.NewHotReddotPrefetchInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetNewNearbyReddotPrefetchInterval() uint32 {
	if x != nil && x.NewNearbyReddotPrefetchInterval != nil {
		return *x.NewNearbyReddotPrefetchInterval
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetFollowOutterPrefetchValidTime() uint32 {
	if x != nil && x.FollowOutterPrefetchValidTime != nil {
		return *x.FollowOutterPrefetchValidTime
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetFriendOutterPrefetchValidTime() uint32 {
	if x != nil && x.FriendOutterPrefetchValidTime != nil {
		return *x.FriendOutterPrefetchValidTime
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetHotOutterPrefetchValidTime() uint32 {
	if x != nil && x.HotOutterPrefetchValidTime != nil {
		return *x.HotOutterPrefetchValidTime
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetNearbyOutterPrefetchValidTime() uint32 {
	if x != nil && x.NearbyOutterPrefetchValidTime != nil {
		return *x.NearbyOutterPrefetchValidTime
	}
	return 0
}

func (x *FinderStreamPrefechTimeIntervalConf) GetModelPrefetchSwitch() bool {
	if x != nil && x.ModelPrefetchSwitch != nil {
		return *x.ModelPrefetchSwitch
	}
	return false
}

func (x *FinderStreamPrefechTimeIntervalConf) GetIosModelPrefetchConf() []byte {
	if x != nil {
		return x.IosModelPrefetchConf
	}
	return nil
}

type FinderStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse              *BaseResponse                        `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Object                    []*FinderObject                      `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	LastBuffer                []byte                               `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	HistoryHeadWording        *string                              `protobuf:"bytes,4,opt,name=historyHeadWording" json:"historyHeadWording,omitempty"`
	HistoryEndWording         *string                              `protobuf:"bytes,5,opt,name=historyEndWording" json:"historyEndWording,omitempty"`
	RetFlag                   *uint32                              `protobuf:"varint,6,opt,name=retFlag" json:"retFlag,omitempty"`
	NeedClear                 *uint32                              `protobuf:"varint,7,opt,name=needClear" json:"needClear,omitempty"`
	GethistoryNow             *uint32                              `protobuf:"varint,8,opt,name=gethistoryNow" json:"gethistoryNow,omitempty"`
	PrefetchLastFeedCount     *uint32                              `protobuf:"varint,9,opt,name=prefetchLastFeedCount" json:"prefetchLastFeedCount,omitempty"`
	PreloadInfo               *FinderPreloadInfo                   `protobuf:"bytes,10,opt,name=preloadInfo" json:"preloadInfo,omitempty"`
	FinderContactRecommend    *FinderContactRecommend              `protobuf:"bytes,11,opt,name=finderContactRecommend" json:"finderContactRecommend,omitempty"`
	ForceChangePrefetchResult *uint32                              `protobuf:"varint,12,opt,name=forceChangePrefetchResult" json:"forceChangePrefetchResult,omitempty"`
	LiveObjects               []*FinderObject                      `protobuf:"bytes,13,rep,name=liveObjects" json:"liveObjects,omitempty"`
	FinderTopicRecommends     *FinderTopicRecommend                `protobuf:"bytes,14,opt,name=finderTopicRecommends" json:"finderTopicRecommends,omitempty"`
	FinderCategoryRecommends  *FinderCategoryRecommend             `protobuf:"bytes,15,opt,name=finderCategoryRecommends" json:"finderCategoryRecommends,omitempty"`
	CurLocation               *string                              `protobuf:"bytes,16,opt,name=curLocation" json:"curLocation,omitempty"`
	SectionInfo               *FinderSectionInfo                   `protobuf:"bytes,17,opt,name=sectionInfo" json:"sectionInfo,omitempty"`
	IntervalConf              *FinderStreamPrefechTimeIntervalConf `protobuf:"bytes,18,opt,name=intervalConf" json:"intervalConf,omitempty"`
	LayoutInfo                *FinderStreamLayoutInfo              `protobuf:"bytes,19,opt,name=layoutInfo" json:"layoutInfo,omitempty"`
	Oob                       *string                              `protobuf:"bytes,20,opt,name=oob" json:"oob,omitempty"`
	LivePreloadInfo           *FinderLivePreloadInfo               `protobuf:"bytes,21,opt,name=livePreloadInfo" json:"livePreloadInfo,omitempty"`
	DebugMessage              []byte                               `protobuf:"bytes,22,opt,name=debugMessage" json:"debugMessage,omitempty"`
}

func (x *FinderStreamResponse) Reset() {
	*x = FinderStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamResponse) ProtoMessage() {}

func (x *FinderStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamResponse.ProtoReflect.Descriptor instead.
func (*FinderStreamResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{235}
}

func (x *FinderStreamResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderStreamResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderStreamResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderStreamResponse) GetHistoryHeadWording() string {
	if x != nil && x.HistoryHeadWording != nil {
		return *x.HistoryHeadWording
	}
	return ""
}

func (x *FinderStreamResponse) GetHistoryEndWording() string {
	if x != nil && x.HistoryEndWording != nil {
		return *x.HistoryEndWording
	}
	return ""
}

func (x *FinderStreamResponse) GetRetFlag() uint32 {
	if x != nil && x.RetFlag != nil {
		return *x.RetFlag
	}
	return 0
}

func (x *FinderStreamResponse) GetNeedClear() uint32 {
	if x != nil && x.NeedClear != nil {
		return *x.NeedClear
	}
	return 0
}

func (x *FinderStreamResponse) GetGethistoryNow() uint32 {
	if x != nil && x.GethistoryNow != nil {
		return *x.GethistoryNow
	}
	return 0
}

func (x *FinderStreamResponse) GetPrefetchLastFeedCount() uint32 {
	if x != nil && x.PrefetchLastFeedCount != nil {
		return *x.PrefetchLastFeedCount
	}
	return 0
}

func (x *FinderStreamResponse) GetPreloadInfo() *FinderPreloadInfo {
	if x != nil {
		return x.PreloadInfo
	}
	return nil
}

func (x *FinderStreamResponse) GetFinderContactRecommend() *FinderContactRecommend {
	if x != nil {
		return x.FinderContactRecommend
	}
	return nil
}

func (x *FinderStreamResponse) GetForceChangePrefetchResult() uint32 {
	if x != nil && x.ForceChangePrefetchResult != nil {
		return *x.ForceChangePrefetchResult
	}
	return 0
}

func (x *FinderStreamResponse) GetLiveObjects() []*FinderObject {
	if x != nil {
		return x.LiveObjects
	}
	return nil
}

func (x *FinderStreamResponse) GetFinderTopicRecommends() *FinderTopicRecommend {
	if x != nil {
		return x.FinderTopicRecommends
	}
	return nil
}

func (x *FinderStreamResponse) GetFinderCategoryRecommends() *FinderCategoryRecommend {
	if x != nil {
		return x.FinderCategoryRecommends
	}
	return nil
}

func (x *FinderStreamResponse) GetCurLocation() string {
	if x != nil && x.CurLocation != nil {
		return *x.CurLocation
	}
	return ""
}

func (x *FinderStreamResponse) GetSectionInfo() *FinderSectionInfo {
	if x != nil {
		return x.SectionInfo
	}
	return nil
}

func (x *FinderStreamResponse) GetIntervalConf() *FinderStreamPrefechTimeIntervalConf {
	if x != nil {
		return x.IntervalConf
	}
	return nil
}

func (x *FinderStreamResponse) GetLayoutInfo() *FinderStreamLayoutInfo {
	if x != nil {
		return x.LayoutInfo
	}
	return nil
}

func (x *FinderStreamResponse) GetOob() string {
	if x != nil && x.Oob != nil {
		return *x.Oob
	}
	return ""
}

func (x *FinderStreamResponse) GetLivePreloadInfo() *FinderLivePreloadInfo {
	if x != nil {
		return x.LivePreloadInfo
	}
	return nil
}

func (x *FinderStreamResponse) GetDebugMessage() []byte {
	if x != nil {
		return x.DebugMessage
	}
	return nil
}

type FinderGetBuzzwordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	ObjectIds     []uint64           `protobuf:"varint,3,rep,name=objectIds" json:"objectIds,omitempty"`
}

func (x *FinderGetBuzzwordRequest) Reset() {
	*x = FinderGetBuzzwordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetBuzzwordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetBuzzwordRequest) ProtoMessage() {}

func (x *FinderGetBuzzwordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetBuzzwordRequest.ProtoReflect.Descriptor instead.
func (*FinderGetBuzzwordRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{236}
}

func (x *FinderGetBuzzwordRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetBuzzwordRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetBuzzwordRequest) GetObjectIds() []uint64 {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

type Buzzword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuzzwordId *uint64 `protobuf:"varint,1,opt,name=buzzwordId" json:"buzzwordId,omitempty"`
	Content    *string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	LikeCount  *uint64 `protobuf:"varint,3,opt,name=likeCount" json:"likeCount,omitempty"`
	Liked      *uint32 `protobuf:"varint,4,opt,name=liked" json:"liked,omitempty"`
}

func (x *Buzzword) Reset() {
	*x = Buzzword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buzzword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buzzword) ProtoMessage() {}

func (x *Buzzword) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buzzword.ProtoReflect.Descriptor instead.
func (*Buzzword) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{237}
}

func (x *Buzzword) GetBuzzwordId() uint64 {
	if x != nil && x.BuzzwordId != nil {
		return *x.BuzzwordId
	}
	return 0
}

func (x *Buzzword) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *Buzzword) GetLikeCount() uint64 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *Buzzword) GetLiked() uint32 {
	if x != nil && x.Liked != nil {
		return *x.Liked
	}
	return 0
}

type BuzzwordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId     *uint64     `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	VisitorTitle *string     `protobuf:"bytes,2,opt,name=visitorTitle" json:"visitorTitle,omitempty"`
	Buzzwords    []*Buzzword `protobuf:"bytes,3,rep,name=buzzwords" json:"buzzwords,omitempty"`
	EditTitle    *string     `protobuf:"bytes,4,opt,name=editTitle" json:"editTitle,omitempty"`
	ManageTitle  *string     `protobuf:"bytes,5,opt,name=manageTitle" json:"manageTitle,omitempty"`
}

func (x *BuzzwordInfo) Reset() {
	*x = BuzzwordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuzzwordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuzzwordInfo) ProtoMessage() {}

func (x *BuzzwordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuzzwordInfo.ProtoReflect.Descriptor instead.
func (*BuzzwordInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{238}
}

func (x *BuzzwordInfo) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *BuzzwordInfo) GetVisitorTitle() string {
	if x != nil && x.VisitorTitle != nil {
		return *x.VisitorTitle
	}
	return ""
}

func (x *BuzzwordInfo) GetBuzzwords() []*Buzzword {
	if x != nil {
		return x.Buzzwords
	}
	return nil
}

func (x *BuzzwordInfo) GetEditTitle() string {
	if x != nil && x.EditTitle != nil {
		return *x.EditTitle
	}
	return ""
}

func (x *BuzzwordInfo) GetManageTitle() string {
	if x != nil && x.ManageTitle != nil {
		return *x.ManageTitle
	}
	return ""
}

type FinderGetBuzzwordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse     *BaseResponse   `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	BuzzwordInfoList []*BuzzwordInfo `protobuf:"bytes,2,rep,name=buzzwordInfoList" json:"buzzwordInfoList,omitempty"`
}

func (x *FinderGetBuzzwordResponse) Reset() {
	*x = FinderGetBuzzwordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetBuzzwordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetBuzzwordResponse) ProtoMessage() {}

func (x *FinderGetBuzzwordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetBuzzwordResponse.ProtoReflect.Descriptor instead.
func (*FinderGetBuzzwordResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{239}
}

func (x *FinderGetBuzzwordResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetBuzzwordResponse) GetBuzzwordInfoList() []*BuzzwordInfo {
	if x != nil {
		return x.BuzzwordInfoList
	}
	return nil
}

type FinderCollectUnreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq *FinderBaseRequest  `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	UnreadItems   []*FinderUnreadItem `protobuf:"bytes,3,rep,name=unreadItems" json:"unreadItems,omitempty"`
}

func (x *FinderCollectUnreadRequest) Reset() {
	*x = FinderCollectUnreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCollectUnreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCollectUnreadRequest) ProtoMessage() {}

func (x *FinderCollectUnreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCollectUnreadRequest.ProtoReflect.Descriptor instead.
func (*FinderCollectUnreadRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{240}
}

func (x *FinderCollectUnreadRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderCollectUnreadRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderCollectUnreadRequest) GetUnreadItems() []*FinderUnreadItem {
	if x != nil {
		return x.UnreadItems
	}
	return nil
}

type FinderCollectUnreadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
}

func (x *FinderCollectUnreadResponse) Reset() {
	*x = FinderCollectUnreadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCollectUnreadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCollectUnreadResponse) ProtoMessage() {}

func (x *FinderCollectUnreadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCollectUnreadResponse.ProtoReflect.Descriptor instead.
func (*FinderCollectUnreadResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{241}
}

func (x *FinderCollectUnreadResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type FinderObjectUidUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId          *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	ObjectNonceId     *string `protobuf:"bytes,2,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	AdFlag            *uint32 `protobuf:"varint,3,opt,name=adFlag" json:"adFlag,omitempty"`
	ObjectCookie      []byte  `protobuf:"bytes,4,opt,name=objectCookie" json:"objectCookie,omitempty"`
	EncryptedObjectId *string `protobuf:"bytes,5,opt,name=encryptedObjectId" json:"encryptedObjectId,omitempty"`
	LiveId            *uint64 `protobuf:"varint,6,opt,name=liveId" json:"liveId,omitempty"`
}

func (x *FinderObjectUidUnit) Reset() {
	*x = FinderObjectUidUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectUidUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectUidUnit) ProtoMessage() {}

func (x *FinderObjectUidUnit) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectUidUnit.ProtoReflect.Descriptor instead.
func (*FinderObjectUidUnit) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{242}
}

func (x *FinderObjectUidUnit) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderObjectUidUnit) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderObjectUidUnit) GetAdFlag() uint32 {
	if x != nil && x.AdFlag != nil {
		return *x.AdFlag
	}
	return 0
}

func (x *FinderObjectUidUnit) GetObjectCookie() []byte {
	if x != nil {
		return x.ObjectCookie
	}
	return nil
}

func (x *FinderObjectUidUnit) GetEncryptedObjectId() string {
	if x != nil && x.EncryptedObjectId != nil {
		return *x.EncryptedObjectId
	}
	return ""
}

func (x *FinderObjectUidUnit) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

type FinderBatchGetObjectAsyncLoadInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest           `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq   *FinderBaseRequest     `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	ObjectUidList   []*FinderObjectUidUnit `protobuf:"bytes,3,rep,name=objectUidList" json:"objectUidList,omitempty"`
	Scene           *uint32                `protobuf:"varint,4,opt,name=scene" json:"scene,omitempty"`
	LiveReportScene *uint32                `protobuf:"varint,5,opt,name=liveReportScene" json:"liveReportScene,omitempty"`
	CommentScene    *uint32                `protobuf:"varint,6,opt,name=commentScene" json:"commentScene,omitempty"`
	FinderUsername  *string                `protobuf:"bytes,7,opt,name=finderUsername" json:"finderUsername,omitempty"`
	ClientUserAgent *string                `protobuf:"bytes,8,opt,name=clientUserAgent" json:"clientUserAgent,omitempty"`
	Uxinfo          *string                `protobuf:"bytes,9,opt,name=uxinfo" json:"uxinfo,omitempty"`
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) Reset() {
	*x = FinderBatchGetObjectAsyncLoadInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBatchGetObjectAsyncLoadInfoRequest) ProtoMessage() {}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBatchGetObjectAsyncLoadInfoRequest.ProtoReflect.Descriptor instead.
func (*FinderBatchGetObjectAsyncLoadInfoRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{243}
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) GetObjectUidList() []*FinderObjectUidUnit {
	if x != nil {
		return x.ObjectUidList
	}
	return nil
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) GetLiveReportScene() uint32 {
	if x != nil && x.LiveReportScene != nil {
		return *x.LiveReportScene
	}
	return 0
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) GetCommentScene() uint32 {
	if x != nil && x.CommentScene != nil {
		return *x.CommentScene
	}
	return 0
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) GetClientUserAgent() string {
	if x != nil && x.ClientUserAgent != nil {
		return *x.ClientUserAgent
	}
	return ""
}

func (x *FinderBatchGetObjectAsyncLoadInfoRequest) GetUxinfo() string {
	if x != nil && x.Uxinfo != nil {
		return *x.Uxinfo
	}
	return ""
}

type FinderJoinLiveTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LawTips *string `protobuf:"bytes,1,opt,name=lawTips" json:"lawTips,omitempty"`
}

func (x *FinderJoinLiveTips) Reset() {
	*x = FinderJoinLiveTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJoinLiveTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJoinLiveTips) ProtoMessage() {}

func (x *FinderJoinLiveTips) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJoinLiveTips.ProtoReflect.Descriptor instead.
func (*FinderJoinLiveTips) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{244}
}

func (x *FinderJoinLiveTips) GetLawTips() string {
	if x != nil && x.LawTips != nil {
		return *x.LawTips
	}
	return ""
}

type FinderLivePreJoinLiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tips        *FinderJoinLiveTips `protobuf:"bytes,1,opt,name=tips" json:"tips,omitempty"`
	BizUserInfo *FinderBizUserInfo  `protobuf:"bytes,2,opt,name=bizUserInfo" json:"bizUserInfo,omitempty"`
}

func (x *FinderLivePreJoinLiveInfo) Reset() {
	*x = FinderLivePreJoinLiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLivePreJoinLiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLivePreJoinLiveInfo) ProtoMessage() {}

func (x *FinderLivePreJoinLiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLivePreJoinLiveInfo.ProtoReflect.Descriptor instead.
func (*FinderLivePreJoinLiveInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{245}
}

func (x *FinderLivePreJoinLiveInfo) GetTips() *FinderJoinLiveTips {
	if x != nil {
		return x.Tips
	}
	return nil
}

func (x *FinderLivePreJoinLiveInfo) GetBizUserInfo() *FinderBizUserInfo {
	if x != nil {
		return x.BizUserInfo
	}
	return nil
}

type FinderObjectDigestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigestId  *uint64 `protobuf:"varint,1,opt,name=digestId" json:"digestId,omitempty"`
	Wording   *string `protobuf:"bytes,2,opt,name=wording" json:"wording,omitempty"`
	LikeCount *uint64 `protobuf:"varint,3,opt,name=likeCount" json:"likeCount,omitempty"`
	Liked     *uint32 `protobuf:"varint,4,opt,name=liked" json:"liked,omitempty"`
}

func (x *FinderObjectDigestItem) Reset() {
	*x = FinderObjectDigestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectDigestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectDigestItem) ProtoMessage() {}

func (x *FinderObjectDigestItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectDigestItem.ProtoReflect.Descriptor instead.
func (*FinderObjectDigestItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{246}
}

func (x *FinderObjectDigestItem) GetDigestId() uint64 {
	if x != nil && x.DigestId != nil {
		return *x.DigestId
	}
	return 0
}

func (x *FinderObjectDigestItem) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *FinderObjectDigestItem) GetLikeCount() uint64 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *FinderObjectDigestItem) GetLiked() uint32 {
	if x != nil && x.Liked != nil {
		return *x.Liked
	}
	return 0
}

type FinderObjectDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title *string                   `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Items []*FinderObjectDigestItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *FinderObjectDigest) Reset() {
	*x = FinderObjectDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectDigest) ProtoMessage() {}

func (x *FinderObjectDigest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectDigest.ProtoReflect.Descriptor instead.
func (*FinderObjectDigest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{247}
}

func (x *FinderObjectDigest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderObjectDigest) GetItems() []*FinderObjectDigestItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type FinderPurchaseLivePreviewInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInvalid *bool `protobuf:"varint,1,opt,name=isInvalid" json:"isInvalid,omitempty"`
}

func (x *FinderPurchaseLivePreviewInfo) Reset() {
	*x = FinderPurchaseLivePreviewInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPurchaseLivePreviewInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPurchaseLivePreviewInfo) ProtoMessage() {}

func (x *FinderPurchaseLivePreviewInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPurchaseLivePreviewInfo.ProtoReflect.Descriptor instead.
func (*FinderPurchaseLivePreviewInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{248}
}

func (x *FinderPurchaseLivePreviewInfo) GetIsInvalid() bool {
	if x != nil && x.IsInvalid != nil {
		return *x.IsInvalid
	}
	return false
}

type FinderObjectAsyncLoadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId                *uint64                        `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	LiveInfo                *FinderLiveInfo                `protobuf:"bytes,2,opt,name=liveInfo" json:"liveInfo,omitempty"`
	AdItemInfo              []string                       `protobuf:"bytes,3,rep,name=adItemInfo" json:"adItemInfo,omitempty"`
	AdLeadInfo              []string                       `protobuf:"bytes,4,rep,name=adLeadInfo" json:"adLeadInfo,omitempty"`
	JumpInfo                []*FinderJumpInfo              `protobuf:"bytes,5,rep,name=jumpInfo" json:"jumpInfo,omitempty"`
	HotspotJumpinfo         []*FinderJumpInfo              `protobuf:"bytes,6,rep,name=hotspotJumpinfo" json:"hotspotJumpinfo,omitempty"`
	PreJoinliveInfo         *FinderLivePreJoinLiveInfo     `protobuf:"bytes,7,opt,name=preJoinliveInfo" json:"preJoinliveInfo,omitempty"`
	ObjectDigest            *FinderObjectDigest            `protobuf:"bytes,8,opt,name=objectDigest" json:"objectDigest,omitempty"`
	PurchaseLivePreviewInfo *FinderPurchaseLivePreviewInfo `protobuf:"bytes,9,opt,name=purchaseLivePreviewInfo" json:"purchaseLivePreviewInfo,omitempty"`
	CommJumpinfo            []*FinderJumpInfo              `protobuf:"bytes,10,rep,name=commJumpinfo" json:"commJumpinfo,omitempty"`
}

func (x *FinderObjectAsyncLoadInfo) Reset() {
	*x = FinderObjectAsyncLoadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectAsyncLoadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectAsyncLoadInfo) ProtoMessage() {}

func (x *FinderObjectAsyncLoadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectAsyncLoadInfo.ProtoReflect.Descriptor instead.
func (*FinderObjectAsyncLoadInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{249}
}

func (x *FinderObjectAsyncLoadInfo) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderObjectAsyncLoadInfo) GetLiveInfo() *FinderLiveInfo {
	if x != nil {
		return x.LiveInfo
	}
	return nil
}

func (x *FinderObjectAsyncLoadInfo) GetAdItemInfo() []string {
	if x != nil {
		return x.AdItemInfo
	}
	return nil
}

func (x *FinderObjectAsyncLoadInfo) GetAdLeadInfo() []string {
	if x != nil {
		return x.AdLeadInfo
	}
	return nil
}

func (x *FinderObjectAsyncLoadInfo) GetJumpInfo() []*FinderJumpInfo {
	if x != nil {
		return x.JumpInfo
	}
	return nil
}

func (x *FinderObjectAsyncLoadInfo) GetHotspotJumpinfo() []*FinderJumpInfo {
	if x != nil {
		return x.HotspotJumpinfo
	}
	return nil
}

func (x *FinderObjectAsyncLoadInfo) GetPreJoinliveInfo() *FinderLivePreJoinLiveInfo {
	if x != nil {
		return x.PreJoinliveInfo
	}
	return nil
}

func (x *FinderObjectAsyncLoadInfo) GetObjectDigest() *FinderObjectDigest {
	if x != nil {
		return x.ObjectDigest
	}
	return nil
}

func (x *FinderObjectAsyncLoadInfo) GetPurchaseLivePreviewInfo() *FinderPurchaseLivePreviewInfo {
	if x != nil {
		return x.PurchaseLivePreviewInfo
	}
	return nil
}

func (x *FinderObjectAsyncLoadInfo) GetCommJumpinfo() []*FinderJumpInfo {
	if x != nil {
		return x.CommJumpinfo
	}
	return nil
}

type FinderContactAsyncLoadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderUsername *string               `protobuf:"bytes,1,opt,name=finderUsername" json:"finderUsername,omitempty"`
	NoticeInfo     *FinderLiveNoticeInfo `protobuf:"bytes,2,opt,name=noticeInfo" json:"noticeInfo,omitempty"`
	LiveInfo       *FinderLiveInfo       `protobuf:"bytes,3,opt,name=liveInfo" json:"liveInfo,omitempty"`
}

func (x *FinderContactAsyncLoadInfo) Reset() {
	*x = FinderContactAsyncLoadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactAsyncLoadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactAsyncLoadInfo) ProtoMessage() {}

func (x *FinderContactAsyncLoadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactAsyncLoadInfo.ProtoReflect.Descriptor instead.
func (*FinderContactAsyncLoadInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{250}
}

func (x *FinderContactAsyncLoadInfo) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderContactAsyncLoadInfo) GetNoticeInfo() *FinderLiveNoticeInfo {
	if x != nil {
		return x.NoticeInfo
	}
	return nil
}

func (x *FinderContactAsyncLoadInfo) GetLiveInfo() *FinderLiveInfo {
	if x != nil {
		return x.LiveInfo
	}
	return nil
}

type FinderBatchGetObjectAsyncLoadInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse                     *BaseResponse                 `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	ObjectAsyncInfoMap               []*FinderObjectAsyncLoadInfo  `protobuf:"bytes,2,rep,name=objectAsyncInfoMap" json:"objectAsyncInfoMap,omitempty"`
	ContactAsyncInfoMap              []*FinderContactAsyncLoadInfo `protobuf:"bytes,3,rep,name=contactAsyncInfoMap" json:"contactAsyncInfoMap,omitempty"`
	ObjectInfoRefreshIntervalSeconds *uint32                       `protobuf:"varint,4,opt,name=objectInfoRefreshIntervalSeconds" json:"objectInfoRefreshIntervalSeconds,omitempty"`
}

func (x *FinderBatchGetObjectAsyncLoadInfoResponse) Reset() {
	*x = FinderBatchGetObjectAsyncLoadInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBatchGetObjectAsyncLoadInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBatchGetObjectAsyncLoadInfoResponse) ProtoMessage() {}

func (x *FinderBatchGetObjectAsyncLoadInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBatchGetObjectAsyncLoadInfoResponse.ProtoReflect.Descriptor instead.
func (*FinderBatchGetObjectAsyncLoadInfoResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{251}
}

func (x *FinderBatchGetObjectAsyncLoadInfoResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderBatchGetObjectAsyncLoadInfoResponse) GetObjectAsyncInfoMap() []*FinderObjectAsyncLoadInfo {
	if x != nil {
		return x.ObjectAsyncInfoMap
	}
	return nil
}

func (x *FinderBatchGetObjectAsyncLoadInfoResponse) GetContactAsyncInfoMap() []*FinderContactAsyncLoadInfo {
	if x != nil {
		return x.ContactAsyncInfoMap
	}
	return nil
}

func (x *FinderBatchGetObjectAsyncLoadInfoResponse) GetObjectInfoRefreshIntervalSeconds() uint32 {
	if x != nil && x.ObjectInfoRefreshIntervalSeconds != nil {
		return *x.ObjectInfoRefreshIntervalSeconds
	}
	return 0
}

type FinderLivePermissionVerifyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyType *uint32 `protobuf:"varint,1,opt,name=verifyType" json:"verifyType,omitempty"`
	WxaAppid   *string `protobuf:"bytes,2,opt,name=wxaAppid" json:"wxaAppid,omitempty"`
}

func (x *FinderLivePermissionVerifyInfo) Reset() {
	*x = FinderLivePermissionVerifyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLivePermissionVerifyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLivePermissionVerifyInfo) ProtoMessage() {}

func (x *FinderLivePermissionVerifyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLivePermissionVerifyInfo.ProtoReflect.Descriptor instead.
func (*FinderLivePermissionVerifyInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{252}
}

func (x *FinderLivePermissionVerifyInfo) GetVerifyType() uint32 {
	if x != nil && x.VerifyType != nil {
		return *x.VerifyType
	}
	return 0
}

func (x *FinderLivePermissionVerifyInfo) GetWxaAppid() string {
	if x != nil && x.WxaAppid != nil {
		return *x.WxaAppid
	}
	return ""
}

type FinderGetCommentDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest       *BaseRequest                    `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Objectid          *uint64                         `protobuf:"varint,2,opt,name=objectid" json:"objectid,omitempty"`
	MaxCommentId      *uint64                         `protobuf:"varint,3,opt,name=maxCommentId" json:"maxCommentId,omitempty"`
	NeedObject        *uint32                         `protobuf:"varint,4,opt,name=needObject" json:"needObject,omitempty"`
	LastBuffer        []byte                          `protobuf:"bytes,5,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	RootCommentId     *uint64                         `protobuf:"varint,6,opt,name=rootCommentId" json:"rootCommentId,omitempty"`
	FinderUsername    *string                         `protobuf:"bytes,7,opt,name=finderUsername" json:"finderUsername,omitempty"`
	RefCommentId      *uint64                         `protobuf:"varint,8,opt,name=refCommentId" json:"refCommentId,omitempty"`
	Scene             *uint32                         `protobuf:"varint,9,opt,name=scene" json:"scene,omitempty"`
	Direction         *uint32                         `protobuf:"varint,10,opt,name=direction" json:"direction,omitempty"`
	EncryptedObjectid *string                         `protobuf:"bytes,11,opt,name=encryptedObjectid" json:"encryptedObjectid,omitempty"`
	ObjectNonceId     *string                         `protobuf:"bytes,12,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	FinderBasereq     *FinderBaseRequest              `protobuf:"bytes,13,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	IdentityScene     *uint32                         `protobuf:"varint,14,opt,name=identityScene" json:"identityScene,omitempty"`
	PullScene         *uint32                         `protobuf:"varint,15,opt,name=pullScene" json:"pullScene,omitempty"`
	LikeBuffer        []byte                          `protobuf:"bytes,16,opt,name=likeBuffer" json:"likeBuffer,omitempty"`
	PlatformScene     *uint32                         `protobuf:"varint,17,opt,name=platformScene" json:"platformScene,omitempty"`
	NeedSelection     *uint32                         `protobuf:"varint,18,opt,name=needSelection" json:"needSelection,omitempty"`
	Longitude         *float32                        `protobuf:"fixed32,19,opt,name=longitude" json:"longitude,omitempty"`
	Latitude          *float32                        `protobuf:"fixed32,20,opt,name=latitude" json:"latitude,omitempty"`
	Status            *FinderClientStatus             `protobuf:"bytes,21,opt,name=status" json:"status,omitempty"`
	VerifyInfo        *FinderLivePermissionVerifyInfo `protobuf:"bytes,22,opt,name=verifyInfo" json:"verifyInfo,omitempty"`
}

func (x *FinderGetCommentDetailRequest) Reset() {
	*x = FinderGetCommentDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetCommentDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetCommentDetailRequest) ProtoMessage() {}

func (x *FinderGetCommentDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetCommentDetailRequest.ProtoReflect.Descriptor instead.
func (*FinderGetCommentDetailRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{253}
}

func (x *FinderGetCommentDetailRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetCommentDetailRequest) GetObjectid() uint64 {
	if x != nil && x.Objectid != nil {
		return *x.Objectid
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetMaxCommentId() uint64 {
	if x != nil && x.MaxCommentId != nil {
		return *x.MaxCommentId
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetNeedObject() uint32 {
	if x != nil && x.NeedObject != nil {
		return *x.NeedObject
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetCommentDetailRequest) GetRootCommentId() uint64 {
	if x != nil && x.RootCommentId != nil {
		return *x.RootCommentId
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetCommentDetailRequest) GetRefCommentId() uint64 {
	if x != nil && x.RefCommentId != nil {
		return *x.RefCommentId
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetDirection() uint32 {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetEncryptedObjectid() string {
	if x != nil && x.EncryptedObjectid != nil {
		return *x.EncryptedObjectid
	}
	return ""
}

func (x *FinderGetCommentDetailRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderGetCommentDetailRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetCommentDetailRequest) GetIdentityScene() uint32 {
	if x != nil && x.IdentityScene != nil {
		return *x.IdentityScene
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetPullScene() uint32 {
	if x != nil && x.PullScene != nil {
		return *x.PullScene
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetLikeBuffer() []byte {
	if x != nil {
		return x.LikeBuffer
	}
	return nil
}

func (x *FinderGetCommentDetailRequest) GetPlatformScene() uint32 {
	if x != nil && x.PlatformScene != nil {
		return *x.PlatformScene
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetNeedSelection() uint32 {
	if x != nil && x.NeedSelection != nil {
		return *x.NeedSelection
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FinderGetCommentDetailRequest) GetVerifyInfo() *FinderLivePermissionVerifyInfo {
	if x != nil {
		return x.VerifyInfo
	}
	return nil
}

type FinderGetCommentDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse          *BaseResponse        `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	CommentInfo           []*FinderCommentInfo `protobuf:"bytes,2,rep,name=commentInfo" json:"commentInfo,omitempty"`
	Object                *FinderObject        `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
	LastBuffer            []byte               `protobuf:"bytes,4,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	CommentCount          *uint32              `protobuf:"varint,5,opt,name=commentCount" json:"commentCount,omitempty"`
	UpContinueFlag        *uint32              `protobuf:"varint,6,opt,name=upContinueFlag" json:"upContinueFlag,omitempty"`
	DownContinueFlag      *uint32              `protobuf:"varint,7,opt,name=downContinueFlag" json:"downContinueFlag,omitempty"`
	NextCheckObjectStatus *uint32              `protobuf:"varint,8,opt,name=nextCheckObjectStatus" json:"nextCheckObjectStatus,omitempty"`
	SecondaryShowFlag     *uint32              `protobuf:"varint,9,opt,name=secondaryShowFlag" json:"secondaryShowFlag,omitempty"`
	BarrageCommentInfo    []*FinderCommentInfo `protobuf:"bytes,10,rep,name=barrageCommentInfo" json:"barrageCommentInfo,omitempty"`
	RefObjectList         []*FinderObject      `protobuf:"bytes,11,rep,name=refObjectList" json:"refObjectList,omitempty"`
	PreloadInfo           *FinderPreloadInfo   `protobuf:"bytes,12,opt,name=preloadInfo" json:"preloadInfo,omitempty"`
	JsonResp              *string              `protobuf:"bytes,13,opt,name=jsonResp" json:"jsonResp,omitempty"`
}

func (x *FinderGetCommentDetailResponse) Reset() {
	*x = FinderGetCommentDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetCommentDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetCommentDetailResponse) ProtoMessage() {}

func (x *FinderGetCommentDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetCommentDetailResponse.ProtoReflect.Descriptor instead.
func (*FinderGetCommentDetailResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{254}
}

func (x *FinderGetCommentDetailResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetCommentInfo() []*FinderCommentInfo {
	if x != nil {
		return x.CommentInfo
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetObject() *FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetCommentCount() uint32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *FinderGetCommentDetailResponse) GetUpContinueFlag() uint32 {
	if x != nil && x.UpContinueFlag != nil {
		return *x.UpContinueFlag
	}
	return 0
}

func (x *FinderGetCommentDetailResponse) GetDownContinueFlag() uint32 {
	if x != nil && x.DownContinueFlag != nil {
		return *x.DownContinueFlag
	}
	return 0
}

func (x *FinderGetCommentDetailResponse) GetNextCheckObjectStatus() uint32 {
	if x != nil && x.NextCheckObjectStatus != nil {
		return *x.NextCheckObjectStatus
	}
	return 0
}

func (x *FinderGetCommentDetailResponse) GetSecondaryShowFlag() uint32 {
	if x != nil && x.SecondaryShowFlag != nil {
		return *x.SecondaryShowFlag
	}
	return 0
}

func (x *FinderGetCommentDetailResponse) GetBarrageCommentInfo() []*FinderCommentInfo {
	if x != nil {
		return x.BarrageCommentInfo
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetRefObjectList() []*FinderObject {
	if x != nil {
		return x.RefObjectList
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetPreloadInfo() *FinderPreloadInfo {
	if x != nil {
		return x.PreloadInfo
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetJsonResp() string {
	if x != nil && x.JsonResp != nil {
		return *x.JsonResp
	}
	return ""
}

type FinderGetHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderUsername *string             `protobuf:"bytes,2,opt,name=finderUsername" json:"finderUsername,omitempty"`
	LastBuffer     []byte              `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	FinderBasereq  *FinderBaseRequest  `protobuf:"bytes,4,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	DisplayTabType *uint32             `protobuf:"varint,5,opt,name=displayTabType" json:"displayTabType,omitempty"`
	Status         *FinderClientStatus `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (x *FinderGetHistoryRequest) Reset() {
	*x = FinderGetHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetHistoryRequest) ProtoMessage() {}

func (x *FinderGetHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetHistoryRequest.ProtoReflect.Descriptor instead.
func (*FinderGetHistoryRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{255}
}

func (x *FinderGetHistoryRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetHistoryRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetHistoryRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetHistoryRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetHistoryRequest) GetDisplayTabType() uint32 {
	if x != nil && x.DisplayTabType != nil {
		return *x.DisplayTabType
	}
	return 0
}

func (x *FinderGetHistoryRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type FinderGetHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse      `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Object       []*FinderObject    `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	LastBuffer   []byte             `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag *uint32            `protobuf:"varint,4,opt,name=continueFlag" json:"continueFlag,omitempty"`
	PreloadInfo  *FinderPreloadInfo `protobuf:"bytes,5,opt,name=preloadInfo" json:"preloadInfo,omitempty"`
}

func (x *FinderGetHistoryResponse) Reset() {
	*x = FinderGetHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetHistoryResponse) ProtoMessage() {}

func (x *FinderGetHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetHistoryResponse.ProtoReflect.Descriptor instead.
func (*FinderGetHistoryResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{256}
}

func (x *FinderGetHistoryResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetHistoryResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderGetHistoryResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetHistoryResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderGetHistoryResponse) GetPreloadInfo() *FinderPreloadInfo {
	if x != nil {
		return x.PreloadInfo
	}
	return nil
}

type FinderFavReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq  *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	ObjectId       *uint64            `protobuf:"varint,3,opt,name=objectId" json:"objectId,omitempty"`
	Optype         *uint32            `protobuf:"varint,4,opt,name=optype" json:"optype,omitempty"`
	ObjectNonceId  *string            `protobuf:"bytes,5,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	FavId          *uint64            `protobuf:"varint,6,opt,name=favId" json:"favId,omitempty"`
	FinderUsername *string            `protobuf:"bytes,7,opt,name=finderUsername" json:"finderUsername,omitempty"`
	SessionBuffer  *string            `protobuf:"bytes,8,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
}

func (x *FinderFavReq) Reset() {
	*x = FinderFavReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFavReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFavReq) ProtoMessage() {}

func (x *FinderFavReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFavReq.ProtoReflect.Descriptor instead.
func (*FinderFavReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{257}
}

func (x *FinderFavReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderFavReq) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderFavReq) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderFavReq) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *FinderFavReq) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderFavReq) GetFavId() uint64 {
	if x != nil && x.FavId != nil {
		return *x.FavId
	}
	return 0
}

func (x *FinderFavReq) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderFavReq) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

type FinderFavResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
}

func (x *FinderFavResp) Reset() {
	*x = FinderFavResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFavResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFavResp) ProtoMessage() {}

func (x *FinderFavResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFavResp.ProtoReflect.Descriptor instead.
func (*FinderFavResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{258}
}

func (x *FinderFavResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type FinderLikeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest           *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Objectid              *uint64            `protobuf:"varint,2,opt,name=objectid" json:"objectid,omitempty"`
	Commentid             *uint64            `protobuf:"varint,3,opt,name=commentid" json:"commentid,omitempty"`
	Optype                *uint32            `protobuf:"varint,4,opt,name=optype" json:"optype,omitempty"`
	Likeid                *uint64            `protobuf:"varint,5,opt,name=likeid" json:"likeid,omitempty"`
	CurLikeCount          *uint32            `protobuf:"varint,6,opt,name=curLikeCount" json:"curLikeCount,omitempty"`
	FinderUsername        *string            `protobuf:"bytes,7,opt,name=finderUsername" json:"finderUsername,omitempty"`
	Scene                 *uint32            `protobuf:"varint,8,opt,name=scene" json:"scene,omitempty"`
	ObjectNonceId         *string            `protobuf:"bytes,9,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	FinderBasereq         *FinderBaseRequest `protobuf:"bytes,10,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	SessionBuffer         *string            `protobuf:"bytes,11,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	LikeUsername          *string            `protobuf:"bytes,12,opt,name=likeUsername" json:"likeUsername,omitempty"`
	IsPrivate             *uint32            `protobuf:"varint,13,opt,name=isPrivate" json:"isPrivate,omitempty"`
	VisibilityMode        *uint32            `protobuf:"varint,14,opt,name=visibilityMode" json:"visibilityMode,omitempty"`
	VisibilityLabelIdList []uint32           `protobuf:"varint,15,rep,name=visibilityLabelIdList" json:"visibilityLabelIdList,omitempty"`
}

func (x *FinderLikeRequest) Reset() {
	*x = FinderLikeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLikeRequest) ProtoMessage() {}

func (x *FinderLikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLikeRequest.ProtoReflect.Descriptor instead.
func (*FinderLikeRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{259}
}

func (x *FinderLikeRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderLikeRequest) GetObjectid() uint64 {
	if x != nil && x.Objectid != nil {
		return *x.Objectid
	}
	return 0
}

func (x *FinderLikeRequest) GetCommentid() uint64 {
	if x != nil && x.Commentid != nil {
		return *x.Commentid
	}
	return 0
}

func (x *FinderLikeRequest) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *FinderLikeRequest) GetLikeid() uint64 {
	if x != nil && x.Likeid != nil {
		return *x.Likeid
	}
	return 0
}

func (x *FinderLikeRequest) GetCurLikeCount() uint32 {
	if x != nil && x.CurLikeCount != nil {
		return *x.CurLikeCount
	}
	return 0
}

func (x *FinderLikeRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderLikeRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderLikeRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderLikeRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderLikeRequest) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *FinderLikeRequest) GetLikeUsername() string {
	if x != nil && x.LikeUsername != nil {
		return *x.LikeUsername
	}
	return ""
}

func (x *FinderLikeRequest) GetIsPrivate() uint32 {
	if x != nil && x.IsPrivate != nil {
		return *x.IsPrivate
	}
	return 0
}

func (x *FinderLikeRequest) GetVisibilityMode() uint32 {
	if x != nil && x.VisibilityMode != nil {
		return *x.VisibilityMode
	}
	return 0
}

func (x *FinderLikeRequest) GetVisibilityLabelIdList() []uint32 {
	if x != nil {
		return x.VisibilityLabelIdList
	}
	return nil
}

type FinderLikeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Likeid       *uint64       `protobuf:"varint,2,opt,name=likeid" json:"likeid,omitempty"`
}

func (x *FinderLikeResponse) Reset() {
	*x = FinderLikeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLikeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLikeResponse) ProtoMessage() {}

func (x *FinderLikeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLikeResponse.ProtoReflect.Descriptor instead.
func (*FinderLikeResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{260}
}

func (x *FinderLikeResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderLikeResponse) GetLikeid() uint64 {
	if x != nil && x.Likeid != nil {
		return *x.Likeid
	}
	return 0
}

type RealTimeKVReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	DeviceModel *string      `protobuf:"bytes,2,opt,name=deviceModel" json:"deviceModel,omitempty"`
	DeviceBrand *string      `protobuf:"bytes,3,opt,name=deviceBrand" json:"deviceBrand,omitempty"`
	OsName      *string      `protobuf:"bytes,4,opt,name=osName" json:"osName,omitempty"`
	OsVersion   *string      `protobuf:"bytes,5,opt,name=osVersion" json:"osVersion,omitempty"`
	LanguageVer *string      `protobuf:"bytes,6,opt,name=languageVer" json:"languageVer,omitempty"`
	LogId       *uint32      `protobuf:"varint,7,req,name=logId" json:"logId,omitempty"`
	Value       *string      `protobuf:"bytes,8,opt,name=value" json:"value,omitempty"`
}

func (x *RealTimeKVReportReq) Reset() {
	*x = RealTimeKVReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeKVReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeKVReportReq) ProtoMessage() {}

func (x *RealTimeKVReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeKVReportReq.ProtoReflect.Descriptor instead.
func (*RealTimeKVReportReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{261}
}

func (x *RealTimeKVReportReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *RealTimeKVReportReq) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *RealTimeKVReportReq) GetDeviceBrand() string {
	if x != nil && x.DeviceBrand != nil {
		return *x.DeviceBrand
	}
	return ""
}

func (x *RealTimeKVReportReq) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *RealTimeKVReportReq) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *RealTimeKVReportReq) GetLanguageVer() string {
	if x != nil && x.LanguageVer != nil {
		return *x.LanguageVer
	}
	return ""
}

func (x *RealTimeKVReportReq) GetLogId() uint32 {
	if x != nil && x.LogId != nil {
		return *x.LogId
	}
	return 0
}

func (x *RealTimeKVReportReq) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type RealTimeKVReportResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
}

func (x *RealTimeKVReportResp) Reset() {
	*x = RealTimeKVReportResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealTimeKVReportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeKVReportResp) ProtoMessage() {}

func (x *RealTimeKVReportResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeKVReportResp.ProtoReflect.Descriptor instead.
func (*RealTimeKVReportResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{262}
}

func (x *RealTimeKVReportResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type FinderCommentMentionedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MentionedCliBuf []byte  `protobuf:"bytes,1,opt,name=mentionedCliBuf" json:"mentionedCliBuf,omitempty"`
	Username        *string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (x *FinderCommentMentionedUser) Reset() {
	*x = FinderCommentMentionedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCommentMentionedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCommentMentionedUser) ProtoMessage() {}

func (x *FinderCommentMentionedUser) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCommentMentionedUser.ProtoReflect.Descriptor instead.
func (*FinderCommentMentionedUser) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{263}
}

func (x *FinderCommentMentionedUser) GetMentionedCliBuf() []byte {
	if x != nil {
		return x.MentionedCliBuf
	}
	return nil
}

func (x *FinderCommentMentionedUser) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type FinderCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest          *BaseRequest                  `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Username             *string                       `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Objectid             *uint64                       `protobuf:"varint,3,opt,name=objectid" json:"objectid,omitempty"`
	Content              *string                       `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	CommentId            *uint64                       `protobuf:"varint,5,opt,name=commentId" json:"commentId,omitempty"`
	ReplyCommentId       *uint64                       `protobuf:"varint,6,opt,name=replyCommentId" json:"replyCommentId,omitempty"`
	ReplyUsername        *string                       `protobuf:"bytes,7,opt,name=replyUsername" json:"replyUsername,omitempty"`
	Optype               *uint32                       `protobuf:"varint,8,opt,name=optype" json:"optype,omitempty"`
	Clientid             *string                       `protobuf:"bytes,9,opt,name=clientid" json:"clientid,omitempty"`
	RootCommentId        *uint64                       `protobuf:"varint,10,opt,name=rootCommentId" json:"rootCommentId,omitempty"`
	Scene                *uint32                       `protobuf:"varint,11,opt,name=scene" json:"scene,omitempty"`
	ObjectNonceId        *string                       `protobuf:"bytes,12,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	FinderBasereq        *FinderBaseRequest            `protobuf:"bytes,13,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	SessionBuffer        *string                       `protobuf:"bytes,14,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	CommentScene         *uint32                       `protobuf:"varint,15,opt,name=commentScene" json:"commentScene,omitempty"`
	CommentMentionedUser []*FinderCommentMentionedUser `protobuf:"bytes,16,rep,name=commentMentionedUser" json:"commentMentionedUser,omitempty"`
	PastedContent        []string                      `protobuf:"bytes,17,rep,name=pastedContent" json:"pastedContent,omitempty"`
}

func (x *FinderCommentRequest) Reset() {
	*x = FinderCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCommentRequest) ProtoMessage() {}

func (x *FinderCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCommentRequest.ProtoReflect.Descriptor instead.
func (*FinderCommentRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{264}
}

func (x *FinderCommentRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderCommentRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderCommentRequest) GetObjectid() uint64 {
	if x != nil && x.Objectid != nil {
		return *x.Objectid
	}
	return 0
}

func (x *FinderCommentRequest) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *FinderCommentRequest) GetCommentId() uint64 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *FinderCommentRequest) GetReplyCommentId() uint64 {
	if x != nil && x.ReplyCommentId != nil {
		return *x.ReplyCommentId
	}
	return 0
}

func (x *FinderCommentRequest) GetReplyUsername() string {
	if x != nil && x.ReplyUsername != nil {
		return *x.ReplyUsername
	}
	return ""
}

func (x *FinderCommentRequest) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *FinderCommentRequest) GetClientid() string {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return ""
}

func (x *FinderCommentRequest) GetRootCommentId() uint64 {
	if x != nil && x.RootCommentId != nil {
		return *x.RootCommentId
	}
	return 0
}

func (x *FinderCommentRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderCommentRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderCommentRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderCommentRequest) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *FinderCommentRequest) GetCommentScene() uint32 {
	if x != nil && x.CommentScene != nil {
		return *x.CommentScene
	}
	return 0
}

func (x *FinderCommentRequest) GetCommentMentionedUser() []*FinderCommentMentionedUser {
	if x != nil {
		return x.CommentMentionedUser
	}
	return nil
}

func (x *FinderCommentRequest) GetPastedContent() []string {
	if x != nil {
		return x.PastedContent
	}
	return nil
}

type FinderCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse   *BaseResponse        `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	CommentId      *uint64              `protobuf:"varint,2,opt,name=commentId" json:"commentId,omitempty"`
	Clientid       *string              `protobuf:"bytes,3,opt,name=clientid" json:"clientid,omitempty"`
	Object         *FinderObject        `protobuf:"bytes,4,opt,name=object" json:"object,omitempty"`
	ExposedComment []*FinderCommentInfo `protobuf:"bytes,5,rep,name=exposedComment" json:"exposedComment,omitempty"`
}

func (x *FinderCommentResponse) Reset() {
	*x = FinderCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCommentResponse) ProtoMessage() {}

func (x *FinderCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCommentResponse.ProtoReflect.Descriptor instead.
func (*FinderCommentResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{265}
}

func (x *FinderCommentResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderCommentResponse) GetCommentId() uint64 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *FinderCommentResponse) GetClientid() string {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return ""
}

func (x *FinderCommentResponse) GetObject() *FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderCommentResponse) GetExposedComment() []*FinderCommentInfo {
	if x != nil {
		return x.ExposedComment
	}
	return nil
}

type FinderLiveReportBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClickSubTabContextId *string `protobuf:"bytes,1,opt,name=clickSubTabContextId" json:"clickSubTabContextId,omitempty"`
	SessionId            *string `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
	EnterSessionId       *uint64 `protobuf:"varint,3,opt,name=enterSessionId" json:"enterSessionId,omitempty"`
	ActionTs             *uint64 `protobuf:"varint,4,opt,name=actionTs" json:"actionTs,omitempty"`
	ScenenoteAppid       *string `protobuf:"bytes,5,opt,name=scenenoteAppid" json:"scenenoteAppid,omitempty"`
	ChnlExposeType       *string `protobuf:"bytes,7,opt,name=chnlExposeType" json:"chnlExposeType,omitempty"`
	EnterEntrance        *uint64 `protobuf:"varint,8,opt,name=enterEntrance" json:"enterEntrance,omitempty"`
	LegacyCommentScene   *string `protobuf:"bytes,1001,opt,name=legacyCommentScene" json:"legacyCommentScene,omitempty"`
}

func (x *FinderLiveReportBaseInfo) Reset() {
	*x = FinderLiveReportBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveReportBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveReportBaseInfo) ProtoMessage() {}

func (x *FinderLiveReportBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveReportBaseInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveReportBaseInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{266}
}

func (x *FinderLiveReportBaseInfo) GetClickSubTabContextId() string {
	if x != nil && x.ClickSubTabContextId != nil {
		return *x.ClickSubTabContextId
	}
	return ""
}

func (x *FinderLiveReportBaseInfo) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *FinderLiveReportBaseInfo) GetEnterSessionId() uint64 {
	if x != nil && x.EnterSessionId != nil {
		return *x.EnterSessionId
	}
	return 0
}

func (x *FinderLiveReportBaseInfo) GetActionTs() uint64 {
	if x != nil && x.ActionTs != nil {
		return *x.ActionTs
	}
	return 0
}

func (x *FinderLiveReportBaseInfo) GetScenenoteAppid() string {
	if x != nil && x.ScenenoteAppid != nil {
		return *x.ScenenoteAppid
	}
	return ""
}

func (x *FinderLiveReportBaseInfo) GetChnlExposeType() string {
	if x != nil && x.ChnlExposeType != nil {
		return *x.ChnlExposeType
	}
	return ""
}

func (x *FinderLiveReportBaseInfo) GetEnterEntrance() uint64 {
	if x != nil && x.EnterEntrance != nil {
		return *x.EnterEntrance
	}
	return 0
}

func (x *FinderLiveReportBaseInfo) GetLegacyCommentScene() string {
	if x != nil && x.LegacyCommentScene != nil {
		return *x.LegacyCommentScene
	}
	return ""
}

type FinderFollowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest        *BaseRequest              `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	PosterUsername     *string                   `protobuf:"bytes,2,opt,name=posterUsername" json:"posterUsername,omitempty"`
	Optype             *uint32                   `protobuf:"varint,3,opt,name=optype" json:"optype,omitempty"`
	RefObjectid        *uint64                   `protobuf:"varint,4,opt,name=refObjectid" json:"refObjectid,omitempty"`
	FinderUsername     *string                   `protobuf:"bytes,5,opt,name=finderUsername" json:"finderUsername,omitempty"`
	RefObjectNonceId   *string                   `protobuf:"bytes,6,opt,name=refObjectNonceId" json:"refObjectNonceId,omitempty"`
	FinderBasereq      *FinderBaseRequest        `protobuf:"bytes,7,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	SessionBuffer      *string                   `protobuf:"bytes,8,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	EnterType          *uint32                   `protobuf:"varint,9,opt,name=enterType" json:"enterType,omitempty"`
	LiveReportBaseInfo *FinderLiveReportBaseInfo `protobuf:"bytes,10,opt,name=liveReportBaseInfo" json:"liveReportBaseInfo,omitempty"`
}

func (x *FinderFollowRequest) Reset() {
	*x = FinderFollowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFollowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFollowRequest) ProtoMessage() {}

func (x *FinderFollowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFollowRequest.ProtoReflect.Descriptor instead.
func (*FinderFollowRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{267}
}

func (x *FinderFollowRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderFollowRequest) GetPosterUsername() string {
	if x != nil && x.PosterUsername != nil {
		return *x.PosterUsername
	}
	return ""
}

func (x *FinderFollowRequest) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *FinderFollowRequest) GetRefObjectid() uint64 {
	if x != nil && x.RefObjectid != nil {
		return *x.RefObjectid
	}
	return 0
}

func (x *FinderFollowRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderFollowRequest) GetRefObjectNonceId() string {
	if x != nil && x.RefObjectNonceId != nil {
		return *x.RefObjectNonceId
	}
	return ""
}

func (x *FinderFollowRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderFollowRequest) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *FinderFollowRequest) GetEnterType() uint32 {
	if x != nil && x.EnterType != nil {
		return *x.EnterType
	}
	return 0
}

func (x *FinderFollowRequest) GetLiveReportBaseInfo() *FinderLiveReportBaseInfo {
	if x != nil {
		return x.LiveReportBaseInfo
	}
	return nil
}

type FinderFollowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse   *BaseResponse  `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Contact        *FinderContact `protobuf:"bytes,2,opt,name=contact" json:"contact,omitempty"`
	LiveStatusFlag *uint32        `protobuf:"varint,3,opt,name=liveStatusFlag" json:"liveStatusFlag,omitempty"`
}

func (x *FinderFollowResponse) Reset() {
	*x = FinderFollowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFollowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFollowResponse) ProtoMessage() {}

func (x *FinderFollowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFollowResponse.ProtoReflect.Descriptor instead.
func (*FinderFollowResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{268}
}

func (x *FinderFollowResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderFollowResponse) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderFollowResponse) GetLiveStatusFlag() uint32 {
	if x != nil && x.LiveStatusFlag != nil {
		return *x.LiveStatusFlag
	}
	return 0
}

type KVCommReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId       *uint32 `protobuf:"varint,1,req,name=logId" json:"logId,omitempty"`
	Value       []byte  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	StartTime   *uint32 `protobuf:"varint,3,req,name=startTime" json:"startTime,omitempty"`
	EndTime     *uint32 `protobuf:"varint,4,req,name=endTime" json:"endTime,omitempty"`
	Count       *uint32 `protobuf:"varint,5,req,name=count" json:"count,omitempty"`
	RefreshTime *uint32 `protobuf:"varint,6,opt,name=refreshTime" json:"refreshTime,omitempty"`
	Type        *uint32 `protobuf:"varint,7,opt,name=type" json:"type,omitempty"`
}

func (x *KVCommReportItem) Reset() {
	*x = KVCommReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVCommReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVCommReportItem) ProtoMessage() {}

func (x *KVCommReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVCommReportItem.ProtoReflect.Descriptor instead.
func (*KVCommReportItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{269}
}

func (x *KVCommReportItem) GetLogId() uint32 {
	if x != nil && x.LogId != nil {
		return *x.LogId
	}
	return 0
}

func (x *KVCommReportItem) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KVCommReportItem) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *KVCommReportItem) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *KVCommReportItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *KVCommReportItem) GetRefreshTime() uint32 {
	if x != nil && x.RefreshTime != nil {
		return *x.RefreshTime
	}
	return 0
}

func (x *KVCommReportItem) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type CliReportKVDataPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin           *uint32             `protobuf:"varint,1,req,name=uin" json:"uin,omitempty"`
	ClientVersion *uint32             `protobuf:"varint,2,req,name=clientVersion" json:"clientVersion,omitempty"`
	NetType       *uint32             `protobuf:"varint,3,req,name=netType" json:"netType,omitempty"`
	ItemList      []*KVCommReportItem `protobuf:"bytes,4,rep,name=itemList" json:"itemList,omitempty"`
	DeviceModel   *string             `protobuf:"bytes,5,opt,name=deviceModel" json:"deviceModel,omitempty"`
	DeviceBrand   *string             `protobuf:"bytes,6,opt,name=deviceBrand" json:"deviceBrand,omitempty"`
	OsName        *string             `protobuf:"bytes,7,opt,name=osName" json:"osName,omitempty"`
	OsVersion     *string             `protobuf:"bytes,8,opt,name=osVersion" json:"osVersion,omitempty"`
	LanguageVer   *string             `protobuf:"bytes,9,opt,name=languageVer" json:"languageVer,omitempty"`
	Datatype      *uint32             `protobuf:"varint,10,opt,name=datatype" json:"datatype,omitempty"`
}

func (x *CliReportKVDataPackage) Reset() {
	*x = CliReportKVDataPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliReportKVDataPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliReportKVDataPackage) ProtoMessage() {}

func (x *CliReportKVDataPackage) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliReportKVDataPackage.ProtoReflect.Descriptor instead.
func (*CliReportKVDataPackage) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{270}
}

func (x *CliReportKVDataPackage) GetUin() uint32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *CliReportKVDataPackage) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *CliReportKVDataPackage) GetNetType() uint32 {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return 0
}

func (x *CliReportKVDataPackage) GetItemList() []*KVCommReportItem {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *CliReportKVDataPackage) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *CliReportKVDataPackage) GetDeviceBrand() string {
	if x != nil && x.DeviceBrand != nil {
		return *x.DeviceBrand
	}
	return ""
}

func (x *CliReportKVDataPackage) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *CliReportKVDataPackage) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *CliReportKVDataPackage) GetLanguageVer() string {
	if x != nil && x.LanguageVer != nil {
		return *x.LanguageVer
	}
	return ""
}

func (x *CliReportKVDataPackage) GetDatatype() uint32 {
	if x != nil && x.Datatype != nil {
		return *x.Datatype
	}
	return 0
}

type HeavyUserReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorIdMapVersion *uint32 `protobuf:"varint,1,req,name=monitorIdMapVersion" json:"monitorIdMapVersion,omitempty"`
}

func (x *HeavyUserReqInfo) Reset() {
	*x = HeavyUserReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeavyUserReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeavyUserReqInfo) ProtoMessage() {}

func (x *HeavyUserReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeavyUserReqInfo.ProtoReflect.Descriptor instead.
func (*HeavyUserReqInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{271}
}

func (x *HeavyUserReqInfo) GetMonitorIdMapVersion() uint32 {
	if x != nil && x.MonitorIdMapVersion != nil {
		return *x.MonitorIdMapVersion
	}
	return 0
}

type CliReportKVReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneralVersion         *uint32                   `protobuf:"varint,1,req,name=generalVersion" json:"generalVersion,omitempty"`
	SpecialVersion         *uint32                   `protobuf:"varint,2,req,name=specialVersion" json:"specialVersion,omitempty"`
	WhiteOrBlackUinVersion *uint32                   `protobuf:"varint,3,req,name=whiteOrBlackUinVersion" json:"whiteOrBlackUinVersion,omitempty"`
	DataPkg                []*CliReportKVDataPackage `protobuf:"bytes,4,rep,name=dataPkg" json:"dataPkg,omitempty"`
	RandomEncryKey         []byte                    `protobuf:"bytes,5,opt,name=randomEncryKey" json:"randomEncryKey,omitempty"`
	HeavyUserInfo          *HeavyUserReqInfo         `protobuf:"bytes,6,opt,name=heavyUserInfo" json:"heavyUserInfo,omitempty"`
}

func (x *CliReportKVReq) Reset() {
	*x = CliReportKVReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliReportKVReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliReportKVReq) ProtoMessage() {}

func (x *CliReportKVReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliReportKVReq.ProtoReflect.Descriptor instead.
func (*CliReportKVReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{272}
}

func (x *CliReportKVReq) GetGeneralVersion() uint32 {
	if x != nil && x.GeneralVersion != nil {
		return *x.GeneralVersion
	}
	return 0
}

func (x *CliReportKVReq) GetSpecialVersion() uint32 {
	if x != nil && x.SpecialVersion != nil {
		return *x.SpecialVersion
	}
	return 0
}

func (x *CliReportKVReq) GetWhiteOrBlackUinVersion() uint32 {
	if x != nil && x.WhiteOrBlackUinVersion != nil {
		return *x.WhiteOrBlackUinVersion
	}
	return 0
}

func (x *CliReportKVReq) GetDataPkg() []*CliReportKVDataPackage {
	if x != nil {
		return x.DataPkg
	}
	return nil
}

func (x *CliReportKVReq) GetRandomEncryKey() []byte {
	if x != nil {
		return x.RandomEncryKey
	}
	return nil
}

func (x *CliReportKVReq) GetHeavyUserInfo() *HeavyUserReqInfo {
	if x != nil {
		return x.HeavyUserInfo
	}
	return nil
}

type NewStrategyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId               *uint32 `protobuf:"varint,1,req,name=logId" json:"logId,omitempty"`
	ReportCycle         *uint32 `protobuf:"varint,2,req,name=reportCycle" json:"reportCycle,omitempty"`
	ReportFlag          *uint32 `protobuf:"varint,3,req,name=reportFlag" json:"reportFlag,omitempty"`
	SampleRatio         *uint32 `protobuf:"varint,4,req,name=sampleRatio" json:"sampleRatio,omitempty"`
	SampleMode          *uint32 `protobuf:"varint,5,req,name=sampleMode" json:"sampleMode,omitempty"`
	SampleValidInterval *uint32 `protobuf:"varint,6,req,name=sampleValidInterval" json:"sampleValidInterval,omitempty"`
	MonitorFlag         *uint32 `protobuf:"varint,7,opt,name=monitorFlag" json:"monitorFlag,omitempty"`
	Type                *uint32 `protobuf:"varint,8,opt,name=type" json:"type,omitempty"`
}

func (x *NewStrategyItem) Reset() {
	*x = NewStrategyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStrategyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStrategyItem) ProtoMessage() {}

func (x *NewStrategyItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStrategyItem.ProtoReflect.Descriptor instead.
func (*NewStrategyItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{273}
}

func (x *NewStrategyItem) GetLogId() uint32 {
	if x != nil && x.LogId != nil {
		return *x.LogId
	}
	return 0
}

func (x *NewStrategyItem) GetReportCycle() uint32 {
	if x != nil && x.ReportCycle != nil {
		return *x.ReportCycle
	}
	return 0
}

func (x *NewStrategyItem) GetReportFlag() uint32 {
	if x != nil && x.ReportFlag != nil {
		return *x.ReportFlag
	}
	return 0
}

func (x *NewStrategyItem) GetSampleRatio() uint32 {
	if x != nil && x.SampleRatio != nil {
		return *x.SampleRatio
	}
	return 0
}

func (x *NewStrategyItem) GetSampleMode() uint32 {
	if x != nil && x.SampleMode != nil {
		return *x.SampleMode
	}
	return 0
}

func (x *NewStrategyItem) GetSampleValidInterval() uint32 {
	if x != nil && x.SampleValidInterval != nil {
		return *x.SampleValidInterval
	}
	return 0
}

func (x *NewStrategyItem) GetMonitorFlag() uint32 {
	if x != nil && x.MonitorFlag != nil {
		return *x.MonitorFlag
	}
	return 0
}

func (x *NewStrategyItem) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type StrategyInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogIdbegin   *uint32            `protobuf:"varint,1,req,name=logIdbegin" json:"logIdbegin,omitempty"`
	LogIdend     *uint32            `protobuf:"varint,2,req,name=logIdend" json:"logIdend,omitempty"`
	StrategyItem []*NewStrategyItem `protobuf:"bytes,3,rep,name=strategyItem" json:"strategyItem,omitempty"`
}

func (x *StrategyInterval) Reset() {
	*x = StrategyInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyInterval) ProtoMessage() {}

func (x *StrategyInterval) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyInterval.ProtoReflect.Descriptor instead.
func (*StrategyInterval) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{274}
}

func (x *StrategyInterval) GetLogIdbegin() uint32 {
	if x != nil && x.LogIdbegin != nil {
		return *x.LogIdbegin
	}
	return 0
}

func (x *StrategyInterval) GetLogIdend() uint32 {
	if x != nil && x.LogIdend != nil {
		return *x.LogIdend
	}
	return 0
}

func (x *StrategyInterval) GetStrategyItem() []*NewStrategyItem {
	if x != nil {
		return x.StrategyItem
	}
	return nil
}

type MonitorIdMapStrategyInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalId  *uint32 `protobuf:"varint,1,req,name=originalId" json:"originalId,omitempty"`
	HeavyUserId *uint32 `protobuf:"varint,2,req,name=heavyUserId" json:"heavyUserId,omitempty"`
}

func (x *MonitorIdMapStrategyInterval) Reset() {
	*x = MonitorIdMapStrategyInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorIdMapStrategyInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorIdMapStrategyInterval) ProtoMessage() {}

func (x *MonitorIdMapStrategyInterval) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorIdMapStrategyInterval.ProtoReflect.Descriptor instead.
func (*MonitorIdMapStrategyInterval) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{275}
}

func (x *MonitorIdMapStrategyInterval) GetOriginalId() uint32 {
	if x != nil && x.OriginalId != nil {
		return *x.OriginalId
	}
	return 0
}

func (x *MonitorIdMapStrategyInterval) GetHeavyUserId() uint32 {
	if x != nil && x.HeavyUserId != nil {
		return *x.HeavyUserId
	}
	return 0
}

type HeavyUserRespInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorIdMapVersion   *uint32                         `protobuf:"varint,1,req,name=monitorIdMapVersion" json:"monitorIdMapVersion,omitempty"`
	MonitorIdMapStrategys []*MonitorIdMapStrategyInterval `protobuf:"bytes,2,rep,name=monitorIdMapStrategys" json:"monitorIdMapStrategys,omitempty"`
	RespType              *uint32                         `protobuf:"varint,3,req,name=respType" json:"respType,omitempty"`
}

func (x *HeavyUserRespInfo) Reset() {
	*x = HeavyUserRespInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeavyUserRespInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeavyUserRespInfo) ProtoMessage() {}

func (x *HeavyUserRespInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeavyUserRespInfo.ProtoReflect.Descriptor instead.
func (*HeavyUserRespInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{276}
}

func (x *HeavyUserRespInfo) GetMonitorIdMapVersion() uint32 {
	if x != nil && x.MonitorIdMapVersion != nil {
		return *x.MonitorIdMapVersion
	}
	return 0
}

func (x *HeavyUserRespInfo) GetMonitorIdMapStrategys() []*MonitorIdMapStrategyInterval {
	if x != nil {
		return x.MonitorIdMapStrategys
	}
	return nil
}

func (x *HeavyUserRespInfo) GetRespType() uint32 {
	if x != nil && x.RespType != nil {
		return *x.RespType
	}
	return 0
}

type CliReportKVResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret                       *int32              `protobuf:"varint,1,req,name=ret" json:"ret,omitempty"`
	GeneralVersion            *uint32             `protobuf:"varint,2,req,name=generalVersion" json:"generalVersion,omitempty"`
	SpecialVersion            *uint32             `protobuf:"varint,3,req,name=specialVersion" json:"specialVersion,omitempty"`
	WhiteOrBlackUinVersion    *uint32             `protobuf:"varint,4,req,name=whiteOrBlackUinVersion" json:"whiteOrBlackUinVersion,omitempty"`
	GeneralStrategies         []*StrategyInterval `protobuf:"bytes,5,rep,name=generalStrategies" json:"generalStrategies,omitempty"`
	SpecialStrategies         []*StrategyInterval `protobuf:"bytes,6,rep,name=specialStrategies" json:"specialStrategies,omitempty"`
	WhiteOrBlackUinStrategies []*StrategyInterval `protobuf:"bytes,7,rep,name=whiteOrBlackUinStrategies" json:"whiteOrBlackUinStrategies,omitempty"`
	MaxValidDataTime          *uint32             `protobuf:"varint,8,opt,name=maxValidDataTime" json:"maxValidDataTime,omitempty"`
	BanReportTime             *uint32             `protobuf:"varint,9,opt,name=banReportTime" json:"banReportTime,omitempty"`
	AskSvrStrategyInterval    *uint32             `protobuf:"varint,10,opt,name=askSvrStrategyInterval" json:"askSvrStrategyInterval,omitempty"`
	HeavyUserInfo             *HeavyUserRespInfo  `protobuf:"bytes,11,opt,name=heavyUserInfo" json:"heavyUserInfo,omitempty"`
}

func (x *CliReportKVResp) Reset() {
	*x = CliReportKVResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliReportKVResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliReportKVResp) ProtoMessage() {}

func (x *CliReportKVResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliReportKVResp.ProtoReflect.Descriptor instead.
func (*CliReportKVResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{277}
}

func (x *CliReportKVResp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *CliReportKVResp) GetGeneralVersion() uint32 {
	if x != nil && x.GeneralVersion != nil {
		return *x.GeneralVersion
	}
	return 0
}

func (x *CliReportKVResp) GetSpecialVersion() uint32 {
	if x != nil && x.SpecialVersion != nil {
		return *x.SpecialVersion
	}
	return 0
}

func (x *CliReportKVResp) GetWhiteOrBlackUinVersion() uint32 {
	if x != nil && x.WhiteOrBlackUinVersion != nil {
		return *x.WhiteOrBlackUinVersion
	}
	return 0
}

func (x *CliReportKVResp) GetGeneralStrategies() []*StrategyInterval {
	if x != nil {
		return x.GeneralStrategies
	}
	return nil
}

func (x *CliReportKVResp) GetSpecialStrategies() []*StrategyInterval {
	if x != nil {
		return x.SpecialStrategies
	}
	return nil
}

func (x *CliReportKVResp) GetWhiteOrBlackUinStrategies() []*StrategyInterval {
	if x != nil {
		return x.WhiteOrBlackUinStrategies
	}
	return nil
}

func (x *CliReportKVResp) GetMaxValidDataTime() uint32 {
	if x != nil && x.MaxValidDataTime != nil {
		return *x.MaxValidDataTime
	}
	return 0
}

func (x *CliReportKVResp) GetBanReportTime() uint32 {
	if x != nil && x.BanReportTime != nil {
		return *x.BanReportTime
	}
	return 0
}

func (x *CliReportKVResp) GetAskSvrStrategyInterval() uint32 {
	if x != nil && x.AskSvrStrategyInterval != nil {
		return *x.AskSvrStrategyInterval
	}
	return 0
}

func (x *CliReportKVResp) GetHeavyUserInfo() *HeavyUserRespInfo {
	if x != nil {
		return x.HeavyUserInfo
	}
	return nil
}

type CommRequestSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenScene *int32 `protobuf:"varint,1,opt,name=openScene" json:"openScene,omitempty"`
	IsPreHot  *bool  `protobuf:"varint,2,opt,name=isPreHot" json:"isPreHot,omitempty"`
	SyncType  *int32 `protobuf:"varint,3,opt,name=syncType" json:"syncType,omitempty"`
}

func (x *CommRequestSource) Reset() {
	*x = CommRequestSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommRequestSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommRequestSource) ProtoMessage() {}

func (x *CommRequestSource) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommRequestSource.ProtoReflect.Descriptor instead.
func (*CommRequestSource) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{278}
}

func (x *CommRequestSource) GetOpenScene() int32 {
	if x != nil && x.OpenScene != nil {
		return *x.OpenScene
	}
	return 0
}

func (x *CommRequestSource) GetIsPreHot() bool {
	if x != nil && x.IsPreHot != nil {
		return *x.IsPreHot
	}
	return false
}

func (x *CommRequestSource) GetSyncType() int32 {
	if x != nil && x.SyncType != nil {
		return *x.SyncType
	}
	return 0
}

type WxaClientPublicLibInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubVersion  *uint32 `protobuf:"varint,1,opt,name=pubVersion" json:"pubVersion,omitempty"`
	UpdateTime  *uint32 `protobuf:"varint,2,opt,name=updateTime" json:"updateTime,omitempty"`
	UpdateScene *uint32 `protobuf:"varint,3,opt,name=updateScene" json:"updateScene,omitempty"`
}

func (x *WxaClientPublicLibInfo) Reset() {
	*x = WxaClientPublicLibInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaClientPublicLibInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaClientPublicLibInfo) ProtoMessage() {}

func (x *WxaClientPublicLibInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaClientPublicLibInfo.ProtoReflect.Descriptor instead.
func (*WxaClientPublicLibInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{279}
}

func (x *WxaClientPublicLibInfo) GetPubVersion() uint32 {
	if x != nil && x.PubVersion != nil {
		return *x.PubVersion
	}
	return 0
}

func (x *WxaClientPublicLibInfo) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *WxaClientPublicLibInfo) GetUpdateScene() uint32 {
	if x != nil && x.UpdateScene != nil {
		return *x.UpdateScene
	}
	return 0
}

type WxaAttrSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest            `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	WxaUserName     *string                 `protobuf:"bytes,2,opt,name=wxaUserName" json:"wxaUserName,omitempty"`
	LastAttrVersion []byte                  `protobuf:"bytes,3,opt,name=lastAttrVersion" json:"lastAttrVersion,omitempty"`
	WxaAppId        *string                 `protobuf:"bytes,4,opt,name=wxaAppId" json:"wxaAppId,omitempty"`
	InstanceId      *string                 `protobuf:"bytes,5,opt,name=instanceId" json:"instanceId,omitempty"`
	RequestScene    *int32                  `protobuf:"varint,6,opt,name=requestScene" json:"requestScene,omitempty"`
	RequestSource   *CommRequestSource      `protobuf:"bytes,7,opt,name=requestSource" json:"requestSource,omitempty"`
	PublicLib       *WxaClientPublicLibInfo `protobuf:"bytes,8,opt,name=publicLib" json:"publicLib,omitempty"`
	DeviceModel     *string                 `protobuf:"bytes,9,opt,name=deviceModel" json:"deviceModel,omitempty"`
	DeviceRelease   *string                 `protobuf:"bytes,10,opt,name=deviceRelease" json:"deviceRelease,omitempty"`
}

func (x *WxaAttrSyncRequest) Reset() {
	*x = WxaAttrSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaAttrSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaAttrSyncRequest) ProtoMessage() {}

func (x *WxaAttrSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaAttrSyncRequest.ProtoReflect.Descriptor instead.
func (*WxaAttrSyncRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{280}
}

func (x *WxaAttrSyncRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *WxaAttrSyncRequest) GetWxaUserName() string {
	if x != nil && x.WxaUserName != nil {
		return *x.WxaUserName
	}
	return ""
}

func (x *WxaAttrSyncRequest) GetLastAttrVersion() []byte {
	if x != nil {
		return x.LastAttrVersion
	}
	return nil
}

func (x *WxaAttrSyncRequest) GetWxaAppId() string {
	if x != nil && x.WxaAppId != nil {
		return *x.WxaAppId
	}
	return ""
}

func (x *WxaAttrSyncRequest) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *WxaAttrSyncRequest) GetRequestScene() int32 {
	if x != nil && x.RequestScene != nil {
		return *x.RequestScene
	}
	return 0
}

func (x *WxaAttrSyncRequest) GetRequestSource() *CommRequestSource {
	if x != nil {
		return x.RequestSource
	}
	return nil
}

func (x *WxaAttrSyncRequest) GetPublicLib() *WxaClientPublicLibInfo {
	if x != nil {
		return x.PublicLib
	}
	return nil
}

func (x *WxaAttrSyncRequest) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *WxaAttrSyncRequest) GetDeviceRelease() string {
	if x != nil && x.DeviceRelease != nil {
		return *x.DeviceRelease
	}
	return ""
}

type WxaAttrSyncResp_KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *WxaAttrSyncResp_KeyValue) Reset() {
	*x = WxaAttrSyncResp_KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaAttrSyncResp_KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaAttrSyncResp_KeyValue) ProtoMessage() {}

func (x *WxaAttrSyncResp_KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaAttrSyncResp_KeyValue.ProtoReflect.Descriptor instead.
func (*WxaAttrSyncResp_KeyValue) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{281}
}

func (x *WxaAttrSyncResp_KeyValue) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *WxaAttrSyncResp_KeyValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type WxaAttrSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse               `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	LastAttrVersion []byte                      `protobuf:"bytes,2,opt,name=lastAttrVersion" json:"lastAttrVersion,omitempty"`
	UpdateInfoList  []*WxaAttrSyncResp_KeyValue `protobuf:"bytes,3,rep,name=updateInfoList" json:"updateInfoList,omitempty"`
	WxaUserName     *string                     `protobuf:"bytes,4,opt,name=wxaUserName" json:"wxaUserName,omitempty"`
}

func (x *WxaAttrSyncResponse) Reset() {
	*x = WxaAttrSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaAttrSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaAttrSyncResponse) ProtoMessage() {}

func (x *WxaAttrSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaAttrSyncResponse.ProtoReflect.Descriptor instead.
func (*WxaAttrSyncResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{282}
}

func (x *WxaAttrSyncResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *WxaAttrSyncResponse) GetLastAttrVersion() []byte {
	if x != nil {
		return x.LastAttrVersion
	}
	return nil
}

func (x *WxaAttrSyncResponse) GetUpdateInfoList() []*WxaAttrSyncResp_KeyValue {
	if x != nil {
		return x.UpdateInfoList
	}
	return nil
}

func (x *WxaAttrSyncResponse) GetWxaUserName() string {
	if x != nil && x.WxaUserName != nil {
		return *x.WxaUserName
	}
	return ""
}

type PreGetDownloadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest             *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	Username                *string      `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Appid                   *string      `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	OldAppVersion           *uint32      `protobuf:"varint,4,opt,name=oldAppVersion" json:"oldAppVersion,omitempty"`
	Path                    *string      `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	SupportedEncryptVersion *uint32      `protobuf:"varint,6,opt,name=supportedEncryptVersion" json:"supportedEncryptVersion,omitempty"`
	IsSupportWithoutLib     *bool        `protobuf:"varint,7,opt,name=isSupportWithoutLib" json:"isSupportWithoutLib,omitempty"`
}

func (x *PreGetDownloadUrlRequest) Reset() {
	*x = PreGetDownloadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreGetDownloadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreGetDownloadUrlRequest) ProtoMessage() {}

func (x *PreGetDownloadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreGetDownloadUrlRequest.ProtoReflect.Descriptor instead.
func (*PreGetDownloadUrlRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{283}
}

func (x *PreGetDownloadUrlRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *PreGetDownloadUrlRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *PreGetDownloadUrlRequest) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *PreGetDownloadUrlRequest) GetOldAppVersion() uint32 {
	if x != nil && x.OldAppVersion != nil {
		return *x.OldAppVersion
	}
	return 0
}

func (x *PreGetDownloadUrlRequest) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *PreGetDownloadUrlRequest) GetSupportedEncryptVersion() uint32 {
	if x != nil && x.SupportedEncryptVersion != nil {
		return *x.SupportedEncryptVersion
	}
	return 0
}

func (x *PreGetDownloadUrlRequest) GetIsSupportWithoutLib() bool {
	if x != nil && x.IsSupportWithoutLib != nil {
		return *x.IsSupportWithoutLib
	}
	return false
}

type PackageUrlInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid          *string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	ModuleName     *string `protobuf:"bytes,2,opt,name=moduleName" json:"moduleName,omitempty"`
	PackageType    *uint32 `protobuf:"varint,3,opt,name=packageType" json:"packageType,omitempty"`
	Version        *uint32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Url            *string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	Md5            *string `protobuf:"bytes,6,opt,name=md5" json:"md5,omitempty"`
	IsPatch        *bool   `protobuf:"varint,20,opt,name=isPatch" json:"isPatch,omitempty"`
	IsZstd         *bool   `protobuf:"varint,21,opt,name=isZstd" json:"isZstd,omitempty"`
	EncryptVersion *uint32 `protobuf:"varint,22,opt,name=encryptVersion" json:"encryptVersion,omitempty"`
}

func (x *PackageUrlInfo) Reset() {
	*x = PackageUrlInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageUrlInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUrlInfo) ProtoMessage() {}

func (x *PackageUrlInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUrlInfo.ProtoReflect.Descriptor instead.
func (*PackageUrlInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{284}
}

func (x *PackageUrlInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *PackageUrlInfo) GetModuleName() string {
	if x != nil && x.ModuleName != nil {
		return *x.ModuleName
	}
	return ""
}

func (x *PackageUrlInfo) GetPackageType() uint32 {
	if x != nil && x.PackageType != nil {
		return *x.PackageType
	}
	return 0
}

func (x *PackageUrlInfo) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *PackageUrlInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PackageUrlInfo) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *PackageUrlInfo) GetIsPatch() bool {
	if x != nil && x.IsPatch != nil {
		return *x.IsPatch
	}
	return false
}

func (x *PackageUrlInfo) GetIsZstd() bool {
	if x != nil && x.IsZstd != nil {
		return *x.IsZstd
	}
	return false
}

func (x *PackageUrlInfo) GetEncryptVersion() uint32 {
	if x != nil && x.EncryptVersion != nil {
		return *x.EncryptVersion
	}
	return 0
}

type PreGetDownloadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse     `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Appid           *string           `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	Version         *uint32           `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	PackageInfoList []*PackageUrlInfo `protobuf:"bytes,4,rep,name=packageInfoList" json:"packageInfoList,omitempty"`
}

func (x *PreGetDownloadUrlResponse) Reset() {
	*x = PreGetDownloadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreGetDownloadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreGetDownloadUrlResponse) ProtoMessage() {}

func (x *PreGetDownloadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreGetDownloadUrlResponse.ProtoReflect.Descriptor instead.
func (*PreGetDownloadUrlResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{285}
}

func (x *PreGetDownloadUrlResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *PreGetDownloadUrlResponse) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *PreGetDownloadUrlResponse) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *PreGetDownloadUrlResponse) GetPackageInfoList() []*PackageUrlInfo {
	if x != nil {
		return x.PackageInfoList
	}
	return nil
}

type FinderGetPurchasedFeedListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq  *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	FinderUsername *string            `protobuf:"bytes,3,opt,name=finderUsername" json:"finderUsername,omitempty"`
	LastBuffer     []byte             `protobuf:"bytes,4,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
}

func (x *FinderGetPurchasedFeedListRequest) Reset() {
	*x = FinderGetPurchasedFeedListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetPurchasedFeedListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetPurchasedFeedListRequest) ProtoMessage() {}

func (x *FinderGetPurchasedFeedListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetPurchasedFeedListRequest.ProtoReflect.Descriptor instead.
func (*FinderGetPurchasedFeedListRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{286}
}

func (x *FinderGetPurchasedFeedListRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetPurchasedFeedListRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetPurchasedFeedListRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetPurchasedFeedListRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

type FinderGetPurchasedFeedListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse   *BaseResponse   `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Objects        []*FinderObject `protobuf:"bytes,2,rep,name=objects" json:"objects,omitempty"`
	LastBuffer     []byte          `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag   *uint32         `protobuf:"varint,4,opt,name=continueFlag" json:"continueFlag,omitempty"`
	PurchasedCount *uint32         `protobuf:"varint,5,opt,name=purchasedCount" json:"purchasedCount,omitempty"`
}

func (x *FinderGetPurchasedFeedListResponse) Reset() {
	*x = FinderGetPurchasedFeedListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetPurchasedFeedListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetPurchasedFeedListResponse) ProtoMessage() {}

func (x *FinderGetPurchasedFeedListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetPurchasedFeedListResponse.ProtoReflect.Descriptor instead.
func (*FinderGetPurchasedFeedListResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{287}
}

func (x *FinderGetPurchasedFeedListResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetPurchasedFeedListResponse) GetObjects() []*FinderObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *FinderGetPurchasedFeedListResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetPurchasedFeedListResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderGetPurchasedFeedListResponse) GetPurchasedCount() uint32 {
	if x != nil && x.PurchasedCount != nil {
		return *x.PurchasedCount
	}
	return 0
}

type FinderUserPrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Scene         *uint32            `protobuf:"varint,2,opt,name=scene" json:"scene,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,3,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	Longitude     *float32           `protobuf:"fixed32,4,opt,name=longitude" json:"longitude,omitempty"`
	Latitude      *float32           `protobuf:"fixed32,5,opt,name=latitude" json:"latitude,omitempty"`
}

func (x *FinderUserPrepareRequest) Reset() {
	*x = FinderUserPrepareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPrepareRequest) ProtoMessage() {}

func (x *FinderUserPrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPrepareRequest.ProtoReflect.Descriptor instead.
func (*FinderUserPrepareRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{288}
}

func (x *FinderUserPrepareRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderUserPrepareRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderUserPrepareRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderUserPrepareRequest) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderUserPrepareRequest) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

type FinderNicknameVerifyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyPrefix   *string `protobuf:"bytes,1,opt,name=verifyPrefix" json:"verifyPrefix,omitempty"`
	BannerWording  *string `protobuf:"bytes,2,opt,name=bannerWording" json:"bannerWording,omitempty"`
	VerifyLink     *string `protobuf:"bytes,3,opt,name=verifyLink" json:"verifyLink,omitempty"`
	Appname        *string `protobuf:"bytes,4,opt,name=appname" json:"appname,omitempty"`
	VerifyNickname *string `protobuf:"bytes,5,opt,name=verifyNickname" json:"verifyNickname,omitempty"`
	HeadImgUrl     *string `protobuf:"bytes,6,opt,name=headImgUrl" json:"headImgUrl,omitempty"`
	ErrScene       *uint32 `protobuf:"varint,7,opt,name=errScene" json:"errScene,omitempty"`
	BannerApplink  *string `protobuf:"bytes,8,opt,name=bannerApplink" json:"bannerApplink,omitempty"`
	BannerAppname  *string `protobuf:"bytes,9,opt,name=bannerAppname" json:"bannerAppname,omitempty"`
}

func (x *FinderNicknameVerifyInfo) Reset() {
	*x = FinderNicknameVerifyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderNicknameVerifyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderNicknameVerifyInfo) ProtoMessage() {}

func (x *FinderNicknameVerifyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderNicknameVerifyInfo.ProtoReflect.Descriptor instead.
func (*FinderNicknameVerifyInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{289}
}

func (x *FinderNicknameVerifyInfo) GetVerifyPrefix() string {
	if x != nil && x.VerifyPrefix != nil {
		return *x.VerifyPrefix
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetBannerWording() string {
	if x != nil && x.BannerWording != nil {
		return *x.BannerWording
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetVerifyLink() string {
	if x != nil && x.VerifyLink != nil {
		return *x.VerifyLink
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetAppname() string {
	if x != nil && x.Appname != nil {
		return *x.Appname
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetVerifyNickname() string {
	if x != nil && x.VerifyNickname != nil {
		return *x.VerifyNickname
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetErrScene() uint32 {
	if x != nil && x.ErrScene != nil {
		return *x.ErrScene
	}
	return 0
}

func (x *FinderNicknameVerifyInfo) GetBannerApplink() string {
	if x != nil && x.BannerApplink != nil {
		return *x.BannerApplink
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetBannerAppname() string {
	if x != nil && x.BannerAppname != nil {
		return *x.BannerAppname
	}
	return ""
}

type DataCenterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          *bool   `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	PortType        *uint32 `protobuf:"varint,2,opt,name=portType" json:"portType,omitempty"`
	WebUrl          *string `protobuf:"bytes,3,opt,name=webUrl" json:"webUrl,omitempty"`
	MiniappUsername *string `protobuf:"bytes,4,opt,name=miniappUsername" json:"miniappUsername,omitempty"`
	MiniappPath     *string `protobuf:"bytes,5,opt,name=miniappPath" json:"miniappPath,omitempty"`
	Title           *string `protobuf:"bytes,6,opt,name=title" json:"title,omitempty"`
}

func (x *DataCenterConfig) Reset() {
	*x = DataCenterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCenterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCenterConfig) ProtoMessage() {}

func (x *DataCenterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCenterConfig.ProtoReflect.Descriptor instead.
func (*DataCenterConfig) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{290}
}

func (x *DataCenterConfig) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *DataCenterConfig) GetPortType() uint32 {
	if x != nil && x.PortType != nil {
		return *x.PortType
	}
	return 0
}

func (x *DataCenterConfig) GetWebUrl() string {
	if x != nil && x.WebUrl != nil {
		return *x.WebUrl
	}
	return ""
}

func (x *DataCenterConfig) GetMiniappUsername() string {
	if x != nil && x.MiniappUsername != nil {
		return *x.MiniappUsername
	}
	return ""
}

func (x *DataCenterConfig) GetMiniappPath() string {
	if x != nil && x.MiniappPath != nil {
		return *x.MiniappPath
	}
	return ""
}

func (x *DataCenterConfig) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type FinderWxAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       *string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	AppUrl      *string `protobuf:"bytes,2,opt,name=appUrl" json:"appUrl,omitempty"`
	AppUsername *string `protobuf:"bytes,3,opt,name=appUsername" json:"appUsername,omitempty"`
}

func (x *FinderWxAppInfo) Reset() {
	*x = FinderWxAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderWxAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderWxAppInfo) ProtoMessage() {}

func (x *FinderWxAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderWxAppInfo.ProtoReflect.Descriptor instead.
func (*FinderWxAppInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{291}
}

func (x *FinderWxAppInfo) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *FinderWxAppInfo) GetAppUrl() string {
	if x != nil && x.AppUrl != nil {
		return *x.AppUrl
	}
	return ""
}

func (x *FinderWxAppInfo) GetAppUsername() string {
	if x != nil && x.AppUsername != nil {
		return *x.AppUsername
	}
	return ""
}

type AcctTransferConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcctTransferMiniappUsername *string `protobuf:"bytes,1,opt,name=acctTransferMiniappUsername" json:"acctTransferMiniappUsername,omitempty"`
	AcctTransferMiniappPath     *string `protobuf:"bytes,2,opt,name=acctTransferMiniappPath" json:"acctTransferMiniappPath,omitempty"`
	CellName                    *string `protobuf:"bytes,3,opt,name=cellName" json:"cellName,omitempty"`
}

func (x *AcctTransferConfig) Reset() {
	*x = AcctTransferConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctTransferConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctTransferConfig) ProtoMessage() {}

func (x *AcctTransferConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctTransferConfig.ProtoReflect.Descriptor instead.
func (*AcctTransferConfig) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{292}
}

func (x *AcctTransferConfig) GetAcctTransferMiniappUsername() string {
	if x != nil && x.AcctTransferMiniappUsername != nil {
		return *x.AcctTransferMiniappUsername
	}
	return ""
}

func (x *AcctTransferConfig) GetAcctTransferMiniappPath() string {
	if x != nil && x.AcctTransferMiniappPath != nil {
		return *x.AcctTransferMiniappPath
	}
	return ""
}

func (x *AcctTransferConfig) GetCellName() string {
	if x != nil && x.CellName != nil {
		return *x.CellName
	}
	return ""
}

type PostActionSheet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                 *string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Icon                  *string `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	Desc                  *string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	Type                  *uint32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Value                 *string `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	UniversalLink         *string `protobuf:"bytes,6,opt,name=universalLink" json:"universalLink,omitempty"`
	AppstoreScheme        *string `protobuf:"bytes,7,opt,name=appstoreScheme" json:"appstoreScheme,omitempty"`
	AndroidUniversalLink  *string `protobuf:"bytes,8,opt,name=androidUniversalLink" json:"androidUniversalLink,omitempty"`
	AndroidAppstoreScheme *string `protobuf:"bytes,9,opt,name=androidAppstoreScheme" json:"androidAppstoreScheme,omitempty"`
	AndroidPackage        *string `protobuf:"bytes,10,opt,name=androidPackage" json:"androidPackage,omitempty"`
	AndroidAppPublicKey   *string `protobuf:"bytes,11,opt,name=androidAppPublicKey" json:"androidAppPublicKey,omitempty"`
}

func (x *PostActionSheet) Reset() {
	*x = PostActionSheet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostActionSheet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostActionSheet) ProtoMessage() {}

func (x *PostActionSheet) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostActionSheet.ProtoReflect.Descriptor instead.
func (*PostActionSheet) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{293}
}

func (x *PostActionSheet) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PostActionSheet) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *PostActionSheet) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *PostActionSheet) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PostActionSheet) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PostActionSheet) GetUniversalLink() string {
	if x != nil && x.UniversalLink != nil {
		return *x.UniversalLink
	}
	return ""
}

func (x *PostActionSheet) GetAppstoreScheme() string {
	if x != nil && x.AppstoreScheme != nil {
		return *x.AppstoreScheme
	}
	return ""
}

func (x *PostActionSheet) GetAndroidUniversalLink() string {
	if x != nil && x.AndroidUniversalLink != nil {
		return *x.AndroidUniversalLink
	}
	return ""
}

func (x *PostActionSheet) GetAndroidAppstoreScheme() string {
	if x != nil && x.AndroidAppstoreScheme != nil {
		return *x.AndroidAppstoreScheme
	}
	return ""
}

func (x *PostActionSheet) GetAndroidPackage() string {
	if x != nil && x.AndroidPackage != nil {
		return *x.AndroidPackage
	}
	return ""
}

func (x *PostActionSheet) GetAndroidAppPublicKey() string {
	if x != nil && x.AndroidAppPublicKey != nil {
		return *x.AndroidAppPublicKey
	}
	return ""
}

type PostActionSheetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sheets []*PostActionSheet `protobuf:"bytes,1,rep,name=sheets" json:"sheets,omitempty"`
}

func (x *PostActionSheetList) Reset() {
	*x = PostActionSheetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostActionSheetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostActionSheetList) ProtoMessage() {}

func (x *PostActionSheetList) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostActionSheetList.ProtoReflect.Descriptor instead.
func (*PostActionSheetList) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{294}
}

func (x *PostActionSheetList) GetSheets() []*PostActionSheet {
	if x != nil {
		return x.Sheets
	}
	return nil
}

type AcctConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiniappUsername *string `protobuf:"bytes,1,opt,name=miniappUsername" json:"miniappUsername,omitempty"`
	MiniappPath     *string `protobuf:"bytes,2,opt,name=miniappPath" json:"miniappPath,omitempty"`
	CellName        *string `protobuf:"bytes,3,opt,name=cellName" json:"cellName,omitempty"`
	ActionType      *uint32 `protobuf:"varint,4,opt,name=actionType" json:"actionType,omitempty"`
	WebUrl          *string `protobuf:"bytes,5,opt,name=webUrl" json:"webUrl,omitempty"`
	MiniappScene    *uint32 `protobuf:"varint,6,opt,name=miniappScene" json:"miniappScene,omitempty"`
	CellDetail      *string `protobuf:"bytes,7,opt,name=cellDetail" json:"cellDetail,omitempty"`
}

func (x *AcctConfig) Reset() {
	*x = AcctConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcctConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcctConfig) ProtoMessage() {}

func (x *AcctConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcctConfig.ProtoReflect.Descriptor instead.
func (*AcctConfig) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{295}
}

func (x *AcctConfig) GetMiniappUsername() string {
	if x != nil && x.MiniappUsername != nil {
		return *x.MiniappUsername
	}
	return ""
}

func (x *AcctConfig) GetMiniappPath() string {
	if x != nil && x.MiniappPath != nil {
		return *x.MiniappPath
	}
	return ""
}

func (x *AcctConfig) GetCellName() string {
	if x != nil && x.CellName != nil {
		return *x.CellName
	}
	return ""
}

func (x *AcctConfig) GetActionType() uint32 {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return 0
}

func (x *AcctConfig) GetWebUrl() string {
	if x != nil && x.WebUrl != nil {
		return *x.WebUrl
	}
	return ""
}

func (x *AcctConfig) GetMiniappScene() uint32 {
	if x != nil && x.MiniappScene != nil {
		return *x.MiniappScene
	}
	return 0
}

func (x *AcctConfig) GetCellDetail() string {
	if x != nil && x.CellDetail != nil {
		return *x.CellDetail
	}
	return ""
}

type AccountExtraSettingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*AcctConfig `protobuf:"bytes,1,rep,name=configs" json:"configs,omitempty"`
}

func (x *AccountExtraSettingConfig) Reset() {
	*x = AccountExtraSettingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountExtraSettingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountExtraSettingConfig) ProtoMessage() {}

func (x *AccountExtraSettingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountExtraSettingConfig.ProtoReflect.Descriptor instead.
func (*AccountExtraSettingConfig) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{296}
}

func (x *AccountExtraSettingConfig) GetConfigs() []*AcctConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type FinderLiveAliasInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname     *string `protobuf:"bytes,1,opt,name=nickname" json:"nickname,omitempty"`
	HeadImgUrl   *string `protobuf:"bytes,2,opt,name=headImgUrl" json:"headImgUrl,omitempty"`
	RoleType     *uint32 `protobuf:"varint,3,opt,name=roleType" json:"roleType,omitempty"`
	AliasMsgName *string `protobuf:"bytes,4,opt,name=aliasMsgName" json:"aliasMsgName,omitempty"`
	AliasVersion *uint32 `protobuf:"varint,5,opt,name=aliasVersion" json:"aliasVersion,omitempty"`
}

func (x *FinderLiveAliasInfo) Reset() {
	*x = FinderLiveAliasInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveAliasInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveAliasInfo) ProtoMessage() {}

func (x *FinderLiveAliasInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveAliasInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveAliasInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{297}
}

func (x *FinderLiveAliasInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderLiveAliasInfo) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

func (x *FinderLiveAliasInfo) GetRoleType() uint32 {
	if x != nil && x.RoleType != nil {
		return *x.RoleType
	}
	return 0
}

func (x *FinderLiveAliasInfo) GetAliasMsgName() string {
	if x != nil && x.AliasMsgName != nil {
		return *x.AliasMsgName
	}
	return ""
}

func (x *FinderLiveAliasInfo) GetAliasVersion() uint32 {
	if x != nil && x.AliasVersion != nil {
		return *x.AliasVersion
	}
	return 0
}

type SettleToAgencyRelateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettleToAgencyTips *string `protobuf:"bytes,1,opt,name=settleToAgencyTips" json:"settleToAgencyTips,omitempty"`
	EntranceUrl        *string `protobuf:"bytes,2,opt,name=entranceUrl" json:"entranceUrl,omitempty"`
}

func (x *SettleToAgencyRelateInfo) Reset() {
	*x = SettleToAgencyRelateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleToAgencyRelateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleToAgencyRelateInfo) ProtoMessage() {}

func (x *SettleToAgencyRelateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleToAgencyRelateInfo.ProtoReflect.Descriptor instead.
func (*SettleToAgencyRelateInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{298}
}

func (x *SettleToAgencyRelateInfo) GetSettleToAgencyTips() string {
	if x != nil && x.SettleToAgencyTips != nil {
		return *x.SettleToAgencyTips
	}
	return ""
}

func (x *SettleToAgencyRelateInfo) GetEntranceUrl() string {
	if x != nil && x.EntranceUrl != nil {
		return *x.EntranceUrl
	}
	return ""
}

type FinderUserPreparePoiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnablePoiManage     *uint32 `protobuf:"varint,1,opt,name=enablePoiManage" json:"enablePoiManage,omitempty"`
	HasCompanyVerify    *uint32 `protobuf:"varint,2,opt,name=hasCompanyVerify" json:"hasCompanyVerify,omitempty"`
	IsBrandMerchant     *uint32 `protobuf:"varint,3,opt,name=isBrandMerchant" json:"isBrandMerchant,omitempty"`
	PoiManageFirstEnter *uint32 `protobuf:"varint,4,opt,name=poiManageFirstEnter" json:"poiManageFirstEnter,omitempty"`
	BrandMerchantUrl    *string `protobuf:"bytes,5,opt,name=brandMerchantUrl" json:"brandMerchantUrl,omitempty"`
}

func (x *FinderUserPreparePoiInfo) Reset() {
	*x = FinderUserPreparePoiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPreparePoiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPreparePoiInfo) ProtoMessage() {}

func (x *FinderUserPreparePoiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPreparePoiInfo.ProtoReflect.Descriptor instead.
func (*FinderUserPreparePoiInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{299}
}

func (x *FinderUserPreparePoiInfo) GetEnablePoiManage() uint32 {
	if x != nil && x.EnablePoiManage != nil {
		return *x.EnablePoiManage
	}
	return 0
}

func (x *FinderUserPreparePoiInfo) GetHasCompanyVerify() uint32 {
	if x != nil && x.HasCompanyVerify != nil {
		return *x.HasCompanyVerify
	}
	return 0
}

func (x *FinderUserPreparePoiInfo) GetIsBrandMerchant() uint32 {
	if x != nil && x.IsBrandMerchant != nil {
		return *x.IsBrandMerchant
	}
	return 0
}

func (x *FinderUserPreparePoiInfo) GetPoiManageFirstEnter() uint32 {
	if x != nil && x.PoiManageFirstEnter != nil {
		return *x.PoiManageFirstEnter
	}
	return 0
}

func (x *FinderUserPreparePoiInfo) GetBrandMerchantUrl() string {
	if x != nil && x.BrandMerchantUrl != nil {
		return *x.BrandMerchantUrl
	}
	return ""
}

type AgencyCollaborateInfo_EntranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgencyHeadImageUrl *string `protobuf:"bytes,1,opt,name=agencyHeadImageUrl" json:"agencyHeadImageUrl,omitempty"`
	JumpUrl            *string `protobuf:"bytes,2,opt,name=jumpUrl" json:"jumpUrl,omitempty"`
}

func (x *AgencyCollaborateInfo_EntranceInfo) Reset() {
	*x = AgencyCollaborateInfo_EntranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgencyCollaborateInfo_EntranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgencyCollaborateInfo_EntranceInfo) ProtoMessage() {}

func (x *AgencyCollaborateInfo_EntranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgencyCollaborateInfo_EntranceInfo.ProtoReflect.Descriptor instead.
func (*AgencyCollaborateInfo_EntranceInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{300}
}

func (x *AgencyCollaborateInfo_EntranceInfo) GetAgencyHeadImageUrl() string {
	if x != nil && x.AgencyHeadImageUrl != nil {
		return *x.AgencyHeadImageUrl
	}
	return ""
}

func (x *AgencyCollaborateInfo_EntranceInfo) GetJumpUrl() string {
	if x != nil && x.JumpUrl != nil {
		return *x.JumpUrl
	}
	return ""
}

type AgencyCollaborateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveEntrance *AgencyCollaborateInfo_EntranceInfo `protobuf:"bytes,1,opt,name=liveEntrance" json:"liveEntrance,omitempty"`
}

func (x *AgencyCollaborateInfo) Reset() {
	*x = AgencyCollaborateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgencyCollaborateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgencyCollaborateInfo) ProtoMessage() {}

func (x *AgencyCollaborateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgencyCollaborateInfo.ProtoReflect.Descriptor instead.
func (*AgencyCollaborateInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{301}
}

func (x *AgencyCollaborateInfo) GetLiveEntrance() *AgencyCollaborateInfo_EntranceInfo {
	if x != nil {
		return x.LiveEntrance
	}
	return nil
}

type PostActionWording struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpamPostProductsWording *string `protobuf:"bytes,1,opt,name=spamPostProductsWording" json:"spamPostProductsWording,omitempty"`
}

func (x *PostActionWording) Reset() {
	*x = PostActionWording{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostActionWording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostActionWording) ProtoMessage() {}

func (x *PostActionWording) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostActionWording.ProtoReflect.Descriptor instead.
func (*PostActionWording) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{302}
}

func (x *PostActionWording) GetSpamPostProductsWording() string {
	if x != nil && x.SpamPostProductsWording != nil {
		return *x.SpamPostProductsWording
	}
	return ""
}

type FinderLiveWxaPreloadCtrlInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid             *string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	PreHot            *bool   `protobuf:"varint,2,opt,name=preHot" json:"preHot,omitempty"`
	PreHotPath        *string `protobuf:"bytes,3,opt,name=preHotPath" json:"preHotPath,omitempty"`
	PreDownload       *bool   `protobuf:"varint,4,opt,name=preDownload" json:"preDownload,omitempty"`
	PreLoad           *bool   `protobuf:"varint,5,opt,name=preLoad" json:"preLoad,omitempty"`
	ShowNavigationBar *uint32 `protobuf:"varint,6,opt,name=showNavigationBar" json:"showNavigationBar,omitempty"`
}

func (x *FinderLiveWxaPreloadCtrlInfo) Reset() {
	*x = FinderLiveWxaPreloadCtrlInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveWxaPreloadCtrlInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveWxaPreloadCtrlInfo) ProtoMessage() {}

func (x *FinderLiveWxaPreloadCtrlInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveWxaPreloadCtrlInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveWxaPreloadCtrlInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{303}
}

func (x *FinderLiveWxaPreloadCtrlInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *FinderLiveWxaPreloadCtrlInfo) GetPreHot() bool {
	if x != nil && x.PreHot != nil {
		return *x.PreHot
	}
	return false
}

func (x *FinderLiveWxaPreloadCtrlInfo) GetPreHotPath() string {
	if x != nil && x.PreHotPath != nil {
		return *x.PreHotPath
	}
	return ""
}

func (x *FinderLiveWxaPreloadCtrlInfo) GetPreDownload() bool {
	if x != nil && x.PreDownload != nil {
		return *x.PreDownload
	}
	return false
}

func (x *FinderLiveWxaPreloadCtrlInfo) GetPreLoad() bool {
	if x != nil && x.PreLoad != nil {
		return *x.PreLoad
	}
	return false
}

func (x *FinderLiveWxaPreloadCtrlInfo) GetShowNavigationBar() uint32 {
	if x != nil && x.ShowNavigationBar != nil {
		return *x.ShowNavigationBar
	}
	return 0
}

type FinderLiveWxaPreloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrerenderPath *string                         `protobuf:"bytes,1,opt,name=prerenderPath" json:"prerenderPath,omitempty"`
	CtrlInfos     []*FinderLiveWxaPreloadCtrlInfo `protobuf:"bytes,2,rep,name=ctrlInfos" json:"ctrlInfos,omitempty"`
}

func (x *FinderLiveWxaPreloadInfo) Reset() {
	*x = FinderLiveWxaPreloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveWxaPreloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveWxaPreloadInfo) ProtoMessage() {}

func (x *FinderLiveWxaPreloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveWxaPreloadInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveWxaPreloadInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{304}
}

func (x *FinderLiveWxaPreloadInfo) GetPrerenderPath() string {
	if x != nil && x.PrerenderPath != nil {
		return *x.PrerenderPath
	}
	return ""
}

func (x *FinderLiveWxaPreloadInfo) GetCtrlInfos() []*FinderLiveWxaPreloadCtrlInfo {
	if x != nil {
		return x.CtrlInfos
	}
	return nil
}

type GameRankSwitchInfo_GameRankSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameAppId   *string `protobuf:"bytes,1,opt,name=gameAppId" json:"gameAppId,omitempty"`
	GameAppName *string `protobuf:"bytes,2,opt,name=gameAppName" json:"gameAppName,omitempty"`
	IsEnable    *uint32 `protobuf:"varint,3,opt,name=isEnable" json:"isEnable,omitempty"`
	OrderNum    *uint32 `protobuf:"varint,4,opt,name=orderNum" json:"orderNum,omitempty"`
}

func (x *GameRankSwitchInfo_GameRankSwitch) Reset() {
	*x = GameRankSwitchInfo_GameRankSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRankSwitchInfo_GameRankSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRankSwitchInfo_GameRankSwitch) ProtoMessage() {}

func (x *GameRankSwitchInfo_GameRankSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRankSwitchInfo_GameRankSwitch.ProtoReflect.Descriptor instead.
func (*GameRankSwitchInfo_GameRankSwitch) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{305}
}

func (x *GameRankSwitchInfo_GameRankSwitch) GetGameAppId() string {
	if x != nil && x.GameAppId != nil {
		return *x.GameAppId
	}
	return ""
}

func (x *GameRankSwitchInfo_GameRankSwitch) GetGameAppName() string {
	if x != nil && x.GameAppName != nil {
		return *x.GameAppName
	}
	return ""
}

func (x *GameRankSwitchInfo_GameRankSwitch) GetIsEnable() uint32 {
	if x != nil && x.IsEnable != nil {
		return *x.IsEnable
	}
	return 0
}

func (x *GameRankSwitchInfo_GameRankSwitch) GetOrderNum() uint32 {
	if x != nil && x.OrderNum != nil {
		return *x.OrderNum
	}
	return 0
}

type GameRankSwitchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchList       []*GameRankSwitchInfo_GameRankSwitch `protobuf:"bytes,1,rep,name=switchList" json:"switchList,omitempty"`
	CanShowBullet    *uint32                              `protobuf:"varint,2,opt,name=canShowBullet" json:"canShowBullet,omitempty"`
	CurrentGameAppid *string                              `protobuf:"bytes,3,opt,name=currentGameAppid" json:"currentGameAppid,omitempty"`
}

func (x *GameRankSwitchInfo) Reset() {
	*x = GameRankSwitchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRankSwitchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRankSwitchInfo) ProtoMessage() {}

func (x *GameRankSwitchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRankSwitchInfo.ProtoReflect.Descriptor instead.
func (*GameRankSwitchInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{306}
}

func (x *GameRankSwitchInfo) GetSwitchList() []*GameRankSwitchInfo_GameRankSwitch {
	if x != nil {
		return x.SwitchList
	}
	return nil
}

func (x *GameRankSwitchInfo) GetCanShowBullet() uint32 {
	if x != nil && x.CanShowBullet != nil {
		return *x.CanShowBullet
	}
	return 0
}

func (x *GameRankSwitchInfo) GetCurrentGameAppid() string {
	if x != nil && x.CurrentGameAppid != nil {
		return *x.CurrentGameAppid
	}
	return ""
}

type FinderPrivacySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportJumpLink *string `protobuf:"bytes,1,opt,name=exportJumpLink" json:"exportJumpLink,omitempty"`
}

func (x *FinderPrivacySetting) Reset() {
	*x = FinderPrivacySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPrivacySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPrivacySetting) ProtoMessage() {}

func (x *FinderPrivacySetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPrivacySetting.ProtoReflect.Descriptor instead.
func (*FinderPrivacySetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{307}
}

func (x *FinderPrivacySetting) GetExportJumpLink() string {
	if x != nil && x.ExportJumpLink != nil {
		return *x.ExportJumpLink
	}
	return ""
}

type FinderUserPrepareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse                  *BaseResponse              `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	ActionType                    *uint32                    `protobuf:"varint,2,opt,name=actionType" json:"actionType,omitempty"`
	VerifyInfo                    *FinderNicknameVerifyInfo  `protobuf:"bytes,3,opt,name=verifyInfo" json:"verifyInfo,omitempty"`
	SelfContact                   *FinderContact             `protobuf:"bytes,4,opt,name=selfContact" json:"selfContact,omitempty"`
	UserFlag                      *uint32                    `protobuf:"varint,5,opt,name=userFlag" json:"userFlag,omitempty"`
	NicknameModifyWording         *string                    `protobuf:"bytes,6,opt,name=nicknameModifyWording" json:"nicknameModifyWording,omitempty"`
	NoPostPrivilegeTitle          *string                    `protobuf:"bytes,7,opt,name=noPostPrivilegeTitle" json:"noPostPrivilegeTitle,omitempty"`
	NoPostPrivilegeDesc           *string                    `protobuf:"bytes,8,opt,name=noPostPrivilegeDesc" json:"noPostPrivilegeDesc,omitempty"`
	SignatureMinLength            *uint32                    `protobuf:"varint,9,opt,name=signatureMinLength" json:"signatureMinLength,omitempty"`
	SignatureMaxLength            *uint32                    `protobuf:"varint,10,opt,name=signatureMaxLength" json:"signatureMaxLength,omitempty"`
	NicknameMinLength             *uint32                    `protobuf:"varint,11,opt,name=nicknameMinLength" json:"nicknameMinLength,omitempty"`
	NicknameMaxLength             *uint32                    `protobuf:"varint,12,opt,name=nicknameMaxLength" json:"nicknameMaxLength,omitempty"`
	DatacenterConf                *DataCenterConfig          `protobuf:"bytes,13,opt,name=datacenterConf" json:"datacenterConf,omitempty"`
	LikedTotalCount               *uint32                    `protobuf:"varint,14,opt,name=likedTotalCount" json:"likedTotalCount,omitempty"`
	FavTotalCount                 *uint32                    `protobuf:"varint,15,opt,name=favTotalCount" json:"favTotalCount,omitempty"`
	RealnameUrl                   *string                    `protobuf:"bytes,16,opt,name=realnameUrl" json:"realnameUrl,omitempty"`
	WxaShopBindUrl                *FinderWxAppInfo           `protobuf:"bytes,17,opt,name=wxaShopBindUrl" json:"wxaShopBindUrl,omitempty"`
	WxaShopInfo                   *FinderWxAppInfo           `protobuf:"bytes,18,opt,name=wxaShopInfo" json:"wxaShopInfo,omitempty"`
	LiveGlobalFlag                *uint32                    `protobuf:"varint,19,opt,name=liveGlobalFlag" json:"liveGlobalFlag,omitempty"`
	AcctTransferConf              *AcctTransferConfig        `protobuf:"bytes,20,opt,name=acctTransferConf" json:"acctTransferConf,omitempty"`
	ActionList                    *PostActionSheetList       `protobuf:"bytes,21,opt,name=actionList" json:"actionList,omitempty"`
	LivePrivilegesFlag            *uint32                    `protobuf:"varint,22,opt,name=livePrivilegesFlag" json:"livePrivilegesFlag,omitempty"`
	CreatorCentorUrl              *string                    `protobuf:"bytes,23,opt,name=creatorCentorUrl" json:"creatorCentorUrl,omitempty"`
	ForeignUserFlag               *uint32                    `protobuf:"varint,24,opt,name=foreignUserFlag" json:"foreignUserFlag,omitempty"`
	AcctDetailUrl                 *string                    `protobuf:"bytes,25,opt,name=acctDetailUrl" json:"acctDetailUrl,omitempty"`
	AcctExtSettingConfig          *AccountExtraSettingConfig `protobuf:"bytes,26,opt,name=acctExtSettingConfig" json:"acctExtSettingConfig,omitempty"`
	LogoutLock                    *uint32                    `protobuf:"varint,27,opt,name=logoutLock" json:"logoutLock,omitempty"`
	LogoutUrl                     *string                    `protobuf:"bytes,28,opt,name=logoutUrl" json:"logoutUrl,omitempty"`
	AliasInfo                     []*FinderLiveAliasInfo     `protobuf:"bytes,29,rep,name=aliasInfo" json:"aliasInfo,omitempty"`
	CurrentAliasRoleType          *uint32                    `protobuf:"varint,30,opt,name=currentAliasRoleType" json:"currentAliasRoleType,omitempty"`
	NextAliasModAvailableTime     *uint64                    `protobuf:"varint,31,opt,name=nextAliasModAvailableTime" json:"nextAliasModAvailableTime,omitempty"`
	UserNoFinder                  *int32                     `protobuf:"varint,32,opt,name=userNoFinder" json:"userNoFinder,omitempty"`
	NicknameModifyRestCountNotice *string                    `protobuf:"bytes,33,opt,name=nicknameModifyRestCountNotice" json:"nicknameModifyRestCountNotice,omitempty"`
	SettleInfo                    *SettleToAgencyRelateInfo  `protobuf:"bytes,35,opt,name=settleInfo" json:"settleInfo,omitempty"`
	PoiInfo                       *FinderUserPreparePoiInfo  `protobuf:"bytes,36,opt,name=poiInfo" json:"poiInfo,omitempty"`
	AgencyCollaborateInfo         *AgencyCollaborateInfo     `protobuf:"bytes,37,opt,name=agencyCollaborateInfo" json:"agencyCollaborateInfo,omitempty"`
	PurchasedTotalCount           *uint32                    `protobuf:"varint,38,opt,name=purchasedTotalCount" json:"purchasedTotalCount,omitempty"`
	ActionWording                 *PostActionWording         `protobuf:"bytes,39,opt,name=actionWording" json:"actionWording,omitempty"`
	ShopWindowPreload             *FinderLiveWxaPreloadInfo  `protobuf:"bytes,40,opt,name=shopWindowPreload" json:"shopWindowPreload,omitempty"`
	GameLiveSwitchInfo            *GameRankSwitchInfo        `protobuf:"bytes,41,opt,name=gameLiveSwitchInfo" json:"gameLiveSwitchInfo,omitempty"`
	PrivacySetting                *FinderPrivacySetting      `protobuf:"bytes,42,opt,name=privacySetting" json:"privacySetting,omitempty"`
}

func (x *FinderUserPrepareResponse) Reset() {
	*x = FinderUserPrepareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPrepareResponse) ProtoMessage() {}

func (x *FinderUserPrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPrepareResponse.ProtoReflect.Descriptor instead.
func (*FinderUserPrepareResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{308}
}

func (x *FinderUserPrepareResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetActionType() uint32 {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetVerifyInfo() *FinderNicknameVerifyInfo {
	if x != nil {
		return x.VerifyInfo
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetSelfContact() *FinderContact {
	if x != nil {
		return x.SelfContact
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetUserFlag() uint32 {
	if x != nil && x.UserFlag != nil {
		return *x.UserFlag
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetNicknameModifyWording() string {
	if x != nil && x.NicknameModifyWording != nil {
		return *x.NicknameModifyWording
	}
	return ""
}

func (x *FinderUserPrepareResponse) GetNoPostPrivilegeTitle() string {
	if x != nil && x.NoPostPrivilegeTitle != nil {
		return *x.NoPostPrivilegeTitle
	}
	return ""
}

func (x *FinderUserPrepareResponse) GetNoPostPrivilegeDesc() string {
	if x != nil && x.NoPostPrivilegeDesc != nil {
		return *x.NoPostPrivilegeDesc
	}
	return ""
}

func (x *FinderUserPrepareResponse) GetSignatureMinLength() uint32 {
	if x != nil && x.SignatureMinLength != nil {
		return *x.SignatureMinLength
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetSignatureMaxLength() uint32 {
	if x != nil && x.SignatureMaxLength != nil {
		return *x.SignatureMaxLength
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetNicknameMinLength() uint32 {
	if x != nil && x.NicknameMinLength != nil {
		return *x.NicknameMinLength
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetNicknameMaxLength() uint32 {
	if x != nil && x.NicknameMaxLength != nil {
		return *x.NicknameMaxLength
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetDatacenterConf() *DataCenterConfig {
	if x != nil {
		return x.DatacenterConf
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetLikedTotalCount() uint32 {
	if x != nil && x.LikedTotalCount != nil {
		return *x.LikedTotalCount
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetFavTotalCount() uint32 {
	if x != nil && x.FavTotalCount != nil {
		return *x.FavTotalCount
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetRealnameUrl() string {
	if x != nil && x.RealnameUrl != nil {
		return *x.RealnameUrl
	}
	return ""
}

func (x *FinderUserPrepareResponse) GetWxaShopBindUrl() *FinderWxAppInfo {
	if x != nil {
		return x.WxaShopBindUrl
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetWxaShopInfo() *FinderWxAppInfo {
	if x != nil {
		return x.WxaShopInfo
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetLiveGlobalFlag() uint32 {
	if x != nil && x.LiveGlobalFlag != nil {
		return *x.LiveGlobalFlag
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetAcctTransferConf() *AcctTransferConfig {
	if x != nil {
		return x.AcctTransferConf
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetActionList() *PostActionSheetList {
	if x != nil {
		return x.ActionList
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetLivePrivilegesFlag() uint32 {
	if x != nil && x.LivePrivilegesFlag != nil {
		return *x.LivePrivilegesFlag
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetCreatorCentorUrl() string {
	if x != nil && x.CreatorCentorUrl != nil {
		return *x.CreatorCentorUrl
	}
	return ""
}

func (x *FinderUserPrepareResponse) GetForeignUserFlag() uint32 {
	if x != nil && x.ForeignUserFlag != nil {
		return *x.ForeignUserFlag
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetAcctDetailUrl() string {
	if x != nil && x.AcctDetailUrl != nil {
		return *x.AcctDetailUrl
	}
	return ""
}

func (x *FinderUserPrepareResponse) GetAcctExtSettingConfig() *AccountExtraSettingConfig {
	if x != nil {
		return x.AcctExtSettingConfig
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetLogoutLock() uint32 {
	if x != nil && x.LogoutLock != nil {
		return *x.LogoutLock
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetLogoutUrl() string {
	if x != nil && x.LogoutUrl != nil {
		return *x.LogoutUrl
	}
	return ""
}

func (x *FinderUserPrepareResponse) GetAliasInfo() []*FinderLiveAliasInfo {
	if x != nil {
		return x.AliasInfo
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetCurrentAliasRoleType() uint32 {
	if x != nil && x.CurrentAliasRoleType != nil {
		return *x.CurrentAliasRoleType
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetNextAliasModAvailableTime() uint64 {
	if x != nil && x.NextAliasModAvailableTime != nil {
		return *x.NextAliasModAvailableTime
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetUserNoFinder() int32 {
	if x != nil && x.UserNoFinder != nil {
		return *x.UserNoFinder
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetNicknameModifyRestCountNotice() string {
	if x != nil && x.NicknameModifyRestCountNotice != nil {
		return *x.NicknameModifyRestCountNotice
	}
	return ""
}

func (x *FinderUserPrepareResponse) GetSettleInfo() *SettleToAgencyRelateInfo {
	if x != nil {
		return x.SettleInfo
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetPoiInfo() *FinderUserPreparePoiInfo {
	if x != nil {
		return x.PoiInfo
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetAgencyCollaborateInfo() *AgencyCollaborateInfo {
	if x != nil {
		return x.AgencyCollaborateInfo
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetPurchasedTotalCount() uint32 {
	if x != nil && x.PurchasedTotalCount != nil {
		return *x.PurchasedTotalCount
	}
	return 0
}

func (x *FinderUserPrepareResponse) GetActionWording() *PostActionWording {
	if x != nil {
		return x.ActionWording
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetShopWindowPreload() *FinderLiveWxaPreloadInfo {
	if x != nil {
		return x.ShopWindowPreload
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetGameLiveSwitchInfo() *GameRankSwitchInfo {
	if x != nil {
		return x.GameLiveSwitchInfo
	}
	return nil
}

func (x *FinderUserPrepareResponse) GetPrivacySetting() *FinderPrivacySetting {
	if x != nil {
		return x.PrivacySetting
	}
	return nil
}

type ColdStartFetchDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	VersionType *uint32      `protobuf:"varint,2,opt,name=versionType" json:"versionType,omitempty"`
	Username    *string      `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	FetchType   *uint32      `protobuf:"varint,4,opt,name=fetchType" json:"fetchType,omitempty"`
	ReqData     []byte       `protobuf:"bytes,5,opt,name=reqData" json:"reqData,omitempty"`
}

func (x *ColdStartFetchDataRequest) Reset() {
	*x = ColdStartFetchDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColdStartFetchDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColdStartFetchDataRequest) ProtoMessage() {}

func (x *ColdStartFetchDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColdStartFetchDataRequest.ProtoReflect.Descriptor instead.
func (*ColdStartFetchDataRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{309}
}

func (x *ColdStartFetchDataRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *ColdStartFetchDataRequest) GetVersionType() uint32 {
	if x != nil && x.VersionType != nil {
		return *x.VersionType
	}
	return 0
}

func (x *ColdStartFetchDataRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *ColdStartFetchDataRequest) GetFetchType() uint32 {
	if x != nil && x.FetchType != nil {
		return *x.FetchType
	}
	return 0
}

func (x *ColdStartFetchDataRequest) GetReqData() []byte {
	if x != nil {
		return x.ReqData
	}
	return nil
}

type ColdStartFetchDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	RespData     *string       `protobuf:"bytes,2,opt,name=respData" json:"respData,omitempty"`
}

func (x *ColdStartFetchDataResponse) Reset() {
	*x = ColdStartFetchDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColdStartFetchDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColdStartFetchDataResponse) ProtoMessage() {}

func (x *ColdStartFetchDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColdStartFetchDataResponse.ProtoReflect.Descriptor instead.
func (*ColdStartFetchDataResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{310}
}

func (x *ColdStartFetchDataResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *ColdStartFetchDataResponse) GetRespData() string {
	if x != nil && x.RespData != nil {
		return *x.RespData
	}
	return ""
}

type WxaAppBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionType *uint32 `protobuf:"varint,1,opt,name=versionType" json:"versionType,omitempty"`
	AppVersion  *uint32 `protobuf:"varint,2,opt,name=appVersion" json:"appVersion,omitempty"`
	Scene       *uint32 `protobuf:"varint,3,opt,name=scene" json:"scene,omitempty"`
	PagePath    *string `protobuf:"bytes,4,opt,name=pagePath" json:"pagePath,omitempty"`
	BackGround  *uint32 `protobuf:"varint,5,opt,name=backGround" json:"backGround,omitempty"`
	PreScene    *uint32 `protobuf:"varint,6,opt,name=preScene" json:"preScene,omitempty"`
}

func (x *WxaAppBaseInfo) Reset() {
	*x = WxaAppBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaAppBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaAppBaseInfo) ProtoMessage() {}

func (x *WxaAppBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaAppBaseInfo.ProtoReflect.Descriptor instead.
func (*WxaAppBaseInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{311}
}

func (x *WxaAppBaseInfo) GetVersionType() uint32 {
	if x != nil && x.VersionType != nil {
		return *x.VersionType
	}
	return 0
}

func (x *WxaAppBaseInfo) GetAppVersion() uint32 {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return 0
}

func (x *WxaAppBaseInfo) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *WxaAppBaseInfo) GetPagePath() string {
	if x != nil && x.PagePath != nil {
		return *x.PagePath
	}
	return ""
}

func (x *WxaAppBaseInfo) GetBackGround() uint32 {
	if x != nil && x.BackGround != nil {
		return *x.BackGround
	}
	return 0
}

func (x *WxaAppBaseInfo) GetPreScene() uint32 {
	if x != nil && x.PreScene != nil {
		return *x.PreScene
	}
	return 0
}

type WxaPluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostAppid *string `protobuf:"bytes,1,opt,name=hostAppid" json:"hostAppid,omitempty"`
}

func (x *WxaPluginInfo) Reset() {
	*x = WxaPluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaPluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaPluginInfo) ProtoMessage() {}

func (x *WxaPluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaPluginInfo.ProtoReflect.Descriptor instead.
func (*WxaPluginInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{312}
}

func (x *WxaPluginInfo) GetHostAppid() string {
	if x != nil && x.HostAppid != nil {
		return *x.HostAppid
	}
	return ""
}

type WxaWebLaunchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Url   *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (x *WxaWebLaunchInfo) Reset() {
	*x = WxaWebLaunchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaWebLaunchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaWebLaunchInfo) ProtoMessage() {}

func (x *WxaWebLaunchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaWebLaunchInfo.ProtoReflect.Descriptor instead.
func (*WxaWebLaunchInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{313}
}

func (x *WxaWebLaunchInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *WxaWebLaunchInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type WxaJumpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAppid *string `protobuf:"bytes,1,opt,name=sourceAppid" json:"sourceAppid,omitempty"`
	SourceType  *uint32 `protobuf:"varint,2,opt,name=sourceType" json:"sourceType,omitempty"`
	AgentId     *string `protobuf:"bytes,3,opt,name=agentId" json:"agentId,omitempty"`
}

func (x *WxaJumpInfo) Reset() {
	*x = WxaJumpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaJumpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaJumpInfo) ProtoMessage() {}

func (x *WxaJumpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaJumpInfo.ProtoReflect.Descriptor instead.
func (*WxaJumpInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{314}
}

func (x *WxaJumpInfo) GetSourceAppid() string {
	if x != nil && x.SourceAppid != nil {
		return *x.SourceAppid
	}
	return ""
}

func (x *WxaJumpInfo) GetSourceType() uint32 {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return 0
}

func (x *WxaJumpInfo) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

type WxaMaterialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterialType *string `protobuf:"bytes,1,opt,name=materialType" json:"materialType,omitempty"`
}

func (x *WxaMaterialInfo) Reset() {
	*x = WxaMaterialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaMaterialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaMaterialInfo) ProtoMessage() {}

func (x *WxaMaterialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaMaterialInfo.ProtoReflect.Descriptor instead.
func (*WxaMaterialInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{315}
}

func (x *WxaMaterialInfo) GetMaterialType() string {
	if x != nil && x.MaterialType != nil {
		return *x.MaterialType
	}
	return ""
}

type LaunchWxaAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest       *BaseRequest            `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	AppId             *string                 `protobuf:"bytes,2,opt,name=appId" json:"appId,omitempty"`
	WxaAppInfo        *WxaAppBaseInfo         `protobuf:"bytes,3,opt,name=wxaAppInfo" json:"wxaAppInfo,omitempty"`
	RequestType       *uint32                 `protobuf:"varint,4,opt,name=requestType" json:"requestType,omitempty"`
	PluginInfo        *WxaPluginInfo          `protobuf:"bytes,5,opt,name=pluginInfo" json:"pluginInfo,omitempty"`
	PublicLib         *WxaClientPublicLibInfo `protobuf:"bytes,6,opt,name=publicLib" json:"publicLib,omitempty"`
	WebLaunchInfo     *WxaWebLaunchInfo       `protobuf:"bytes,7,opt,name=webLaunchInfo" json:"webLaunchInfo,omitempty"`
	JumpInfo          *WxaJumpInfo            `protobuf:"bytes,8,opt,name=jumpInfo" json:"jumpInfo,omitempty"`
	PerformanceLevel  *int32                  `protobuf:"varint,10,opt,name=performanceLevel" json:"performanceLevel,omitempty"`
	InstanceId        *string                 `protobuf:"bytes,11,opt,name=instanceId" json:"instanceId,omitempty"`
	WxaUserName       *string                 `protobuf:"bytes,12,opt,name=wxaUserName" json:"wxaUserName,omitempty"`
	IsParallelRequest *bool                   `protobuf:"varint,13,opt,name=isParallelRequest" json:"isParallelRequest,omitempty"`
	IsSdkPrefetch     *bool                   `protobuf:"varint,14,opt,name=isSdkPrefetch" json:"isSdkPrefetch,omitempty"`
	ShortLink         *string                 `protobuf:"bytes,17,opt,name=shortLink" json:"shortLink,omitempty"`
	RequestSource     *CommRequestSource      `protobuf:"bytes,18,opt,name=requestSource" json:"requestSource,omitempty"`
	MaterialInfo      *WxaMaterialInfo        `protobuf:"bytes,19,opt,name=materialInfo" json:"materialInfo,omitempty"`
	LaunchMode        *uint32                 `protobuf:"varint,20,opt,name=launchMode" json:"launchMode,omitempty"`
}

func (x *LaunchWxaAppRequest) Reset() {
	*x = LaunchWxaAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchWxaAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchWxaAppRequest) ProtoMessage() {}

func (x *LaunchWxaAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchWxaAppRequest.ProtoReflect.Descriptor instead.
func (*LaunchWxaAppRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{316}
}

func (x *LaunchWxaAppRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *LaunchWxaAppRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *LaunchWxaAppRequest) GetWxaAppInfo() *WxaAppBaseInfo {
	if x != nil {
		return x.WxaAppInfo
	}
	return nil
}

func (x *LaunchWxaAppRequest) GetRequestType() uint32 {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return 0
}

func (x *LaunchWxaAppRequest) GetPluginInfo() *WxaPluginInfo {
	if x != nil {
		return x.PluginInfo
	}
	return nil
}

func (x *LaunchWxaAppRequest) GetPublicLib() *WxaClientPublicLibInfo {
	if x != nil {
		return x.PublicLib
	}
	return nil
}

func (x *LaunchWxaAppRequest) GetWebLaunchInfo() *WxaWebLaunchInfo {
	if x != nil {
		return x.WebLaunchInfo
	}
	return nil
}

func (x *LaunchWxaAppRequest) GetJumpInfo() *WxaJumpInfo {
	if x != nil {
		return x.JumpInfo
	}
	return nil
}

func (x *LaunchWxaAppRequest) GetPerformanceLevel() int32 {
	if x != nil && x.PerformanceLevel != nil {
		return *x.PerformanceLevel
	}
	return 0
}

func (x *LaunchWxaAppRequest) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *LaunchWxaAppRequest) GetWxaUserName() string {
	if x != nil && x.WxaUserName != nil {
		return *x.WxaUserName
	}
	return ""
}

func (x *LaunchWxaAppRequest) GetIsParallelRequest() bool {
	if x != nil && x.IsParallelRequest != nil {
		return *x.IsParallelRequest
	}
	return false
}

func (x *LaunchWxaAppRequest) GetIsSdkPrefetch() bool {
	if x != nil && x.IsSdkPrefetch != nil {
		return *x.IsSdkPrefetch
	}
	return false
}

func (x *LaunchWxaAppRequest) GetShortLink() string {
	if x != nil && x.ShortLink != nil {
		return *x.ShortLink
	}
	return ""
}

func (x *LaunchWxaAppRequest) GetRequestSource() *CommRequestSource {
	if x != nil {
		return x.RequestSource
	}
	return nil
}

func (x *LaunchWxaAppRequest) GetMaterialInfo() *WxaMaterialInfo {
	if x != nil {
		return x.MaterialInfo
	}
	return nil
}

func (x *LaunchWxaAppRequest) GetLaunchMode() uint32 {
	if x != nil && x.LaunchMode != nil {
		return *x.LaunchMode
	}
	return 0
}

type LaunchAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionCode      *uint32 `protobuf:"varint,1,opt,name=actionCode" json:"actionCode,omitempty"`
	OpenUrl         *string `protobuf:"bytes,2,opt,name=openUrl" json:"openUrl,omitempty"`
	NeedHistoryList *bool   `protobuf:"varint,3,opt,name=needHistoryList" json:"needHistoryList,omitempty"`
	AlertMsg        *string `protobuf:"bytes,4,opt,name=alertMsg" json:"alertMsg,omitempty"`
	AlertTitle      *string `protobuf:"bytes,5,opt,name=alertTitle" json:"alertTitle,omitempty"`
}

func (x *LaunchAction) Reset() {
	*x = LaunchAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchAction) ProtoMessage() {}

func (x *LaunchAction) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchAction.ProtoReflect.Descriptor instead.
func (*LaunchAction) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{317}
}

func (x *LaunchAction) GetActionCode() uint32 {
	if x != nil && x.ActionCode != nil {
		return *x.ActionCode
	}
	return 0
}

func (x *LaunchAction) GetOpenUrl() string {
	if x != nil && x.OpenUrl != nil {
		return *x.OpenUrl
	}
	return ""
}

func (x *LaunchAction) GetNeedHistoryList() bool {
	if x != nil && x.NeedHistoryList != nil {
		return *x.NeedHistoryList
	}
	return false
}

func (x *LaunchAction) GetAlertMsg() string {
	if x != nil && x.AlertMsg != nil {
		return *x.AlertMsg
	}
	return ""
}

func (x *LaunchAction) GetAlertTitle() string {
	if x != nil && x.AlertTitle != nil {
		return *x.AlertTitle
	}
	return ""
}

type CheckJsApiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsapiControlBytes []byte   `protobuf:"bytes,1,opt,name=jsapiControlBytes" json:"jsapiControlBytes,omitempty"`
	StateJsapiBytes   [][]byte `protobuf:"bytes,2,rep,name=stateJsapiBytes" json:"stateJsapiBytes,omitempty"`
}

func (x *CheckJsApiInfo) Reset() {
	*x = CheckJsApiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckJsApiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckJsApiInfo) ProtoMessage() {}

func (x *CheckJsApiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckJsApiInfo.ProtoReflect.Descriptor instead.
func (*CheckJsApiInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{318}
}

func (x *CheckJsApiInfo) GetJsapiControlBytes() []byte {
	if x != nil {
		return x.JsapiControlBytes
	}
	return nil
}

func (x *CheckJsApiInfo) GetStateJsapiBytes() [][]byte {
	if x != nil {
		return x.StateJsapiBytes
	}
	return nil
}

type PublicLibUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedUpdate  *bool   `protobuf:"varint,1,opt,name=needUpdate" json:"needUpdate,omitempty"`
	Url         *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Md5         *string `protobuf:"bytes,3,opt,name=md5" json:"md5,omitempty"`
	Version     *uint32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	ForceUpdate *uint32 `protobuf:"varint,5,opt,name=forceUpdate" json:"forceUpdate,omitempty"`
	PatchUrl    *string `protobuf:"bytes,6,opt,name=patchUrl" json:"patchUrl,omitempty"`
	RelyUpdate  *bool   `protobuf:"varint,7,opt,name=relyUpdate" json:"relyUpdate,omitempty"`
}

func (x *PublicLibUpdateInfo) Reset() {
	*x = PublicLibUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicLibUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicLibUpdateInfo) ProtoMessage() {}

func (x *PublicLibUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicLibUpdateInfo.ProtoReflect.Descriptor instead.
func (*PublicLibUpdateInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{319}
}

func (x *PublicLibUpdateInfo) GetNeedUpdate() bool {
	if x != nil && x.NeedUpdate != nil {
		return *x.NeedUpdate
	}
	return false
}

func (x *PublicLibUpdateInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PublicLibUpdateInfo) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *PublicLibUpdateInfo) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *PublicLibUpdateInfo) GetForceUpdate() uint32 {
	if x != nil && x.ForceUpdate != nil {
		return *x.ForceUpdate
	}
	return 0
}

func (x *PublicLibUpdateInfo) GetPatchUrl() string {
	if x != nil && x.PatchUrl != nil {
		return *x.PatchUrl
	}
	return ""
}

func (x *PublicLibUpdateInfo) GetRelyUpdate() bool {
	if x != nil && x.RelyUpdate != nil {
		return *x.RelyUpdate
	}
	return false
}

type ActionSheetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenComment              *bool   `protobuf:"varint,1,opt,name=openComment" json:"openComment,omitempty"`
	ShouldPopEvaluate        *bool   `protobuf:"varint,2,opt,name=shouldPopEvaluate" json:"shouldPopEvaluate,omitempty"`
	PopEvaluateLeastStayTime *uint32 `protobuf:"varint,3,opt,name=popEvaluateLeastStayTime" json:"popEvaluateLeastStayTime,omitempty"`
	ControlBytes             []byte  `protobuf:"bytes,5,opt,name=controlBytes" json:"controlBytes,omitempty"`
}

func (x *ActionSheetInfo) Reset() {
	*x = ActionSheetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSheetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSheetInfo) ProtoMessage() {}

func (x *ActionSheetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSheetInfo.ProtoReflect.Descriptor instead.
func (*ActionSheetInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{320}
}

func (x *ActionSheetInfo) GetOpenComment() bool {
	if x != nil && x.OpenComment != nil {
		return *x.OpenComment
	}
	return false
}

func (x *ActionSheetInfo) GetShouldPopEvaluate() bool {
	if x != nil && x.ShouldPopEvaluate != nil {
		return *x.ShouldPopEvaluate
	}
	return false
}

func (x *ActionSheetInfo) GetPopEvaluateLeastStayTime() uint32 {
	if x != nil && x.PopEvaluateLeastStayTime != nil {
		return *x.PopEvaluateLeastStayTime
	}
	return 0
}

func (x *ActionSheetInfo) GetControlBytes() []byte {
	if x != nil {
		return x.ControlBytes
	}
	return nil
}

type OperationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonInfo *string `protobuf:"bytes,1,opt,name=jsonInfo" json:"jsonInfo,omitempty"`
}

func (x *OperationInfo) Reset() {
	*x = OperationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationInfo) ProtoMessage() {}

func (x *OperationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationInfo.ProtoReflect.Descriptor instead.
func (*OperationInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{321}
}

func (x *OperationInfo) GetJsonInfo() string {
	if x != nil && x.JsonInfo != nil {
		return *x.JsonInfo
	}
	return ""
}

type LaunchWxaAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse        `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Launch          *LaunchAction        `protobuf:"bytes,2,opt,name=launch" json:"launch,omitempty"`
	CheckJsApi      *CheckJsApiInfo      `protobuf:"bytes,3,opt,name=checkJsApi" json:"checkJsApi,omitempty"`
	PublicLibUpdate *PublicLibUpdateInfo `protobuf:"bytes,5,opt,name=publicLibUpdate" json:"publicLibUpdate,omitempty"`
	ActionSheet     *ActionSheetInfo     `protobuf:"bytes,6,opt,name=actionSheet" json:"actionSheet,omitempty"`
	Operation       *OperationInfo       `protobuf:"bytes,7,opt,name=operation" json:"operation,omitempty"`
	Appid           *string              `protobuf:"bytes,8,opt,name=appid" json:"appid,omitempty"`
	Username        *string              `protobuf:"bytes,9,opt,name=username" json:"username,omitempty"`
	OpConfig        *string              `protobuf:"bytes,10,opt,name=opConfig" json:"opConfig,omitempty"`
	CacheSeconds    *uint32              `protobuf:"varint,12,opt,name=cacheSeconds" json:"cacheSeconds,omitempty"`
}

func (x *LaunchWxaAppResponse) Reset() {
	*x = LaunchWxaAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchWxaAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchWxaAppResponse) ProtoMessage() {}

func (x *LaunchWxaAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchWxaAppResponse.ProtoReflect.Descriptor instead.
func (*LaunchWxaAppResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{322}
}

func (x *LaunchWxaAppResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *LaunchWxaAppResponse) GetLaunch() *LaunchAction {
	if x != nil {
		return x.Launch
	}
	return nil
}

func (x *LaunchWxaAppResponse) GetCheckJsApi() *CheckJsApiInfo {
	if x != nil {
		return x.CheckJsApi
	}
	return nil
}

func (x *LaunchWxaAppResponse) GetPublicLibUpdate() *PublicLibUpdateInfo {
	if x != nil {
		return x.PublicLibUpdate
	}
	return nil
}

func (x *LaunchWxaAppResponse) GetActionSheet() *ActionSheetInfo {
	if x != nil {
		return x.ActionSheet
	}
	return nil
}

func (x *LaunchWxaAppResponse) GetOperation() *OperationInfo {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *LaunchWxaAppResponse) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *LaunchWxaAppResponse) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *LaunchWxaAppResponse) GetOpConfig() string {
	if x != nil && x.OpConfig != nil {
		return *x.OpConfig
	}
	return ""
}

func (x *LaunchWxaAppResponse) GetCacheSeconds() uint32 {
	if x != nil && x.CacheSeconds != nil {
		return *x.CacheSeconds
	}
	return 0
}

type RequestPackageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Username    *string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	ModuleName  *string `protobuf:"bytes,3,opt,name=moduleName" json:"moduleName,omitempty"`
	PackageType *uint32 `protobuf:"varint,4,opt,name=packageType" json:"packageType,omitempty"`
	VersionType *uint32 `protobuf:"varint,5,opt,name=versionType" json:"versionType,omitempty"`
}

func (x *RequestPackageInfo) Reset() {
	*x = RequestPackageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPackageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPackageInfo) ProtoMessage() {}

func (x *RequestPackageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPackageInfo.ProtoReflect.Descriptor instead.
func (*RequestPackageInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{323}
}

func (x *RequestPackageInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *RequestPackageInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *RequestPackageInfo) GetModuleName() string {
	if x != nil && x.ModuleName != nil {
		return *x.ModuleName
	}
	return ""
}

func (x *RequestPackageInfo) GetPackageType() uint32 {
	if x != nil && x.PackageType != nil {
		return *x.PackageType
	}
	return 0
}

func (x *RequestPackageInfo) GetVersionType() uint32 {
	if x != nil && x.VersionType != nil {
		return *x.VersionType
	}
	return 0
}

type LocalPackageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppVersion     *uint32 `protobuf:"varint,1,opt,name=appVersion" json:"appVersion,omitempty"`
	EncryptVersion *uint32 `protobuf:"varint,2,opt,name=encryptVersion" json:"encryptVersion,omitempty"`
}

func (x *LocalPackageInfo) Reset() {
	*x = LocalPackageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalPackageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalPackageInfo) ProtoMessage() {}

func (x *LocalPackageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalPackageInfo.ProtoReflect.Descriptor instead.
func (*LocalPackageInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{324}
}

func (x *LocalPackageInfo) GetAppVersion() uint32 {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return 0
}

func (x *LocalPackageInfo) GetEncryptVersion() uint32 {
	if x != nil && x.EncryptVersion != nil {
		return *x.EncryptVersion
	}
	return 0
}

type GetDownloadUrlReqItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqPackageInfo          *RequestPackageInfo `protobuf:"bytes,1,opt,name=reqPackageInfo" json:"reqPackageInfo,omitempty"`
	LocalPackageInfo        *LocalPackageInfo   `protobuf:"bytes,2,opt,name=localPackageInfo" json:"localPackageInfo,omitempty"`
	SupportedEncryptVersion *uint32             `protobuf:"varint,3,opt,name=supportedEncryptVersion" json:"supportedEncryptVersion,omitempty"`
	AppVersion              *uint32             `protobuf:"varint,4,opt,name=appVersion" json:"appVersion,omitempty"`
	NeedLatestVersion       *bool               `protobuf:"varint,5,opt,name=needLatestVersion" json:"needLatestVersion,omitempty"`
	NeedZstd                *bool               `protobuf:"varint,6,opt,name=needZstd" json:"needZstd,omitempty"`
	DevUin                  *uint32             `protobuf:"varint,7,opt,name=devUin" json:"devUin,omitempty"`
	VersionDesc             *string             `protobuf:"bytes,8,opt,name=versionDesc" json:"versionDesc,omitempty"`
	NeedBackupDomain        *string             `protobuf:"bytes,9,opt,name=needBackupDomain" json:"needBackupDomain,omitempty"`
}

func (x *GetDownloadUrlReqItem) Reset() {
	*x = GetDownloadUrlReqItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDownloadUrlReqItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadUrlReqItem) ProtoMessage() {}

func (x *GetDownloadUrlReqItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadUrlReqItem.ProtoReflect.Descriptor instead.
func (*GetDownloadUrlReqItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{325}
}

func (x *GetDownloadUrlReqItem) GetReqPackageInfo() *RequestPackageInfo {
	if x != nil {
		return x.ReqPackageInfo
	}
	return nil
}

func (x *GetDownloadUrlReqItem) GetLocalPackageInfo() *LocalPackageInfo {
	if x != nil {
		return x.LocalPackageInfo
	}
	return nil
}

func (x *GetDownloadUrlReqItem) GetSupportedEncryptVersion() uint32 {
	if x != nil && x.SupportedEncryptVersion != nil {
		return *x.SupportedEncryptVersion
	}
	return 0
}

func (x *GetDownloadUrlReqItem) GetAppVersion() uint32 {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return 0
}

func (x *GetDownloadUrlReqItem) GetNeedLatestVersion() bool {
	if x != nil && x.NeedLatestVersion != nil {
		return *x.NeedLatestVersion
	}
	return false
}

func (x *GetDownloadUrlReqItem) GetNeedZstd() bool {
	if x != nil && x.NeedZstd != nil {
		return *x.NeedZstd
	}
	return false
}

func (x *GetDownloadUrlReqItem) GetDevUin() uint32 {
	if x != nil && x.DevUin != nil {
		return *x.DevUin
	}
	return 0
}

func (x *GetDownloadUrlReqItem) GetVersionDesc() string {
	if x != nil && x.VersionDesc != nil {
		return *x.VersionDesc
	}
	return ""
}

func (x *GetDownloadUrlReqItem) GetNeedBackupDomain() string {
	if x != nil && x.NeedBackupDomain != nil {
		return *x.NeedBackupDomain
	}
	return ""
}

type BatchGetDownloadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest             `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	ReqList       []*GetDownloadUrlReqItem `protobuf:"bytes,2,rep,name=reqList" json:"reqList,omitempty"`
	Scene         *uint32                  `protobuf:"varint,3,opt,name=scene" json:"scene,omitempty"`
	RequestSource *CommRequestSource       `protobuf:"bytes,4,opt,name=requestSource" json:"requestSource,omitempty"`
}

func (x *BatchGetDownloadUrlRequest) Reset() {
	*x = BatchGetDownloadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetDownloadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetDownloadUrlRequest) ProtoMessage() {}

func (x *BatchGetDownloadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetDownloadUrlRequest.ProtoReflect.Descriptor instead.
func (*BatchGetDownloadUrlRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{326}
}

func (x *BatchGetDownloadUrlRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BatchGetDownloadUrlRequest) GetReqList() []*GetDownloadUrlReqItem {
	if x != nil {
		return x.ReqList
	}
	return nil
}

func (x *BatchGetDownloadUrlRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *BatchGetDownloadUrlRequest) GetRequestSource() *CommRequestSource {
	if x != nil {
		return x.RequestSource
	}
	return nil
}

type GetDownloadUrlRespItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errcode          *int32              `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	Url              *string             `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Md5              *string             `protobuf:"bytes,3,opt,name=md5" json:"md5,omitempty"`
	Lifespan         *uint32             `protobuf:"varint,4,opt,name=lifespan" json:"lifespan,omitempty"`
	AppVersion       *uint32             `protobuf:"varint,5,opt,name=appVersion" json:"appVersion,omitempty"`
	IsPatch          *bool               `protobuf:"varint,6,opt,name=isPatch" json:"isPatch,omitempty"`
	IsZstd           *bool               `protobuf:"varint,7,opt,name=isZstd" json:"isZstd,omitempty"`
	CustomVersion    *string             `protobuf:"bytes,8,opt,name=customVersion" json:"customVersion,omitempty"`
	ReqPackageInfo   *RequestPackageInfo `protobuf:"bytes,20,opt,name=reqPackageInfo" json:"reqPackageInfo,omitempty"`
	NewCustomVersion *string             `protobuf:"bytes,21,opt,name=newCustomVersion" json:"newCustomVersion,omitempty"`
}

func (x *GetDownloadUrlRespItem) Reset() {
	*x = GetDownloadUrlRespItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDownloadUrlRespItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadUrlRespItem) ProtoMessage() {}

func (x *GetDownloadUrlRespItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadUrlRespItem.ProtoReflect.Descriptor instead.
func (*GetDownloadUrlRespItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{327}
}

func (x *GetDownloadUrlRespItem) GetErrcode() int32 {
	if x != nil && x.Errcode != nil {
		return *x.Errcode
	}
	return 0
}

func (x *GetDownloadUrlRespItem) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *GetDownloadUrlRespItem) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *GetDownloadUrlRespItem) GetLifespan() uint32 {
	if x != nil && x.Lifespan != nil {
		return *x.Lifespan
	}
	return 0
}

func (x *GetDownloadUrlRespItem) GetAppVersion() uint32 {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return 0
}

func (x *GetDownloadUrlRespItem) GetIsPatch() bool {
	if x != nil && x.IsPatch != nil {
		return *x.IsPatch
	}
	return false
}

func (x *GetDownloadUrlRespItem) GetIsZstd() bool {
	if x != nil && x.IsZstd != nil {
		return *x.IsZstd
	}
	return false
}

func (x *GetDownloadUrlRespItem) GetCustomVersion() string {
	if x != nil && x.CustomVersion != nil {
		return *x.CustomVersion
	}
	return ""
}

func (x *GetDownloadUrlRespItem) GetReqPackageInfo() *RequestPackageInfo {
	if x != nil {
		return x.ReqPackageInfo
	}
	return nil
}

func (x *GetDownloadUrlRespItem) GetNewCustomVersion() string {
	if x != nil && x.NewCustomVersion != nil {
		return *x.NewCustomVersion
	}
	return ""
}

type BatchGetDownloadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse             `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	RespList     []*GetDownloadUrlRespItem `protobuf:"bytes,2,rep,name=respList" json:"respList,omitempty"`
}

func (x *BatchGetDownloadUrlResponse) Reset() {
	*x = BatchGetDownloadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetDownloadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetDownloadUrlResponse) ProtoMessage() {}

func (x *BatchGetDownloadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetDownloadUrlResponse.ProtoReflect.Descriptor instead.
func (*BatchGetDownloadUrlResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{328}
}

func (x *BatchGetDownloadUrlResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *BatchGetDownloadUrlResponse) GetRespList() []*GetDownloadUrlRespItem {
	if x != nil {
		return x.RespList
	}
	return nil
}

type JSOperateWxDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest     `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	Appid       *string          `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	Data        []byte           `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	GrantScope  *string          `protobuf:"bytes,4,opt,name=grantScope" json:"grantScope,omitempty"`
	Opt         *uint32          `protobuf:"varint,5,opt,name=opt" json:"opt,omitempty"`
	VersionType *uint32          `protobuf:"varint,6,opt,name=versionType" json:"versionType,omitempty"`
	ExtInfo     *WxaExternalInfo `protobuf:"bytes,7,opt,name=extInfo" json:"extInfo,omitempty"`
	AvatarId    *uint32          `protobuf:"varint,8,opt,name=avatarId" json:"avatarId,omitempty"`
	SessionId   *string          `protobuf:"bytes,9,opt,name=sessionId" json:"sessionId,omitempty"`
	AvatarOpt   *uint32          `protobuf:"varint,10,opt,name=avatarOpt" json:"avatarOpt,omitempty"`
}

func (x *JSOperateWxDataRequest) Reset() {
	*x = JSOperateWxDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSOperateWxDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSOperateWxDataRequest) ProtoMessage() {}

func (x *JSOperateWxDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSOperateWxDataRequest.ProtoReflect.Descriptor instead.
func (*JSOperateWxDataRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{329}
}

func (x *JSOperateWxDataRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *JSOperateWxDataRequest) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *JSOperateWxDataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *JSOperateWxDataRequest) GetGrantScope() string {
	if x != nil && x.GrantScope != nil {
		return *x.GrantScope
	}
	return ""
}

func (x *JSOperateWxDataRequest) GetOpt() uint32 {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return 0
}

func (x *JSOperateWxDataRequest) GetVersionType() uint32 {
	if x != nil && x.VersionType != nil {
		return *x.VersionType
	}
	return 0
}

func (x *JSOperateWxDataRequest) GetExtInfo() *WxaExternalInfo {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

func (x *JSOperateWxDataRequest) GetAvatarId() uint32 {
	if x != nil && x.AvatarId != nil {
		return *x.AvatarId
	}
	return 0
}

func (x *JSOperateWxDataRequest) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *JSOperateWxDataRequest) GetAvatarOpt() uint32 {
	if x != nil && x.AvatarOpt != nil {
		return *x.AvatarOpt
	}
	return 0
}

type JSAPIBaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errcode *int32  `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	Errmsg  *string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
}

func (x *JSAPIBaseResponse) Reset() {
	*x = JSAPIBaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSAPIBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSAPIBaseResponse) ProtoMessage() {}

func (x *JSAPIBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSAPIBaseResponse.ProtoReflect.Descriptor instead.
func (*JSAPIBaseResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{330}
}

func (x *JSAPIBaseResponse) GetErrcode() int32 {
	if x != nil && x.Errcode != nil {
		return *x.Errcode
	}
	return 0
}

func (x *JSAPIBaseResponse) GetErrmsg() string {
	if x != nil && x.Errmsg != nil {
		return *x.Errmsg
	}
	return ""
}

type JSOperateWxDataResponse_DebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       *string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	SessionKey *string `protobuf:"bytes,2,opt,name=sessionKey" json:"sessionKey,omitempty"`
}

func (x *JSOperateWxDataResponse_DebugInfo) Reset() {
	*x = JSOperateWxDataResponse_DebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSOperateWxDataResponse_DebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSOperateWxDataResponse_DebugInfo) ProtoMessage() {}

func (x *JSOperateWxDataResponse_DebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSOperateWxDataResponse_DebugInfo.ProtoReflect.Descriptor instead.
func (*JSOperateWxDataResponse_DebugInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{331}
}

func (x *JSOperateWxDataResponse_DebugInfo) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *JSOperateWxDataResponse_DebugInfo) GetSessionKey() string {
	if x != nil && x.SessionKey != nil {
		return *x.SessionKey
	}
	return ""
}

type UserAvatarItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Nickname  *string `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Avatarurl *string `protobuf:"bytes,3,opt,name=avatarurl" json:"avatarurl,omitempty"`
	Desc      *string `protobuf:"bytes,4,opt,name=desc" json:"desc,omitempty"`
}

func (x *UserAvatarItem) Reset() {
	*x = UserAvatarItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAvatarItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAvatarItem) ProtoMessage() {}

func (x *UserAvatarItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAvatarItem.ProtoReflect.Descriptor instead.
func (*UserAvatarItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{332}
}

func (x *UserAvatarItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UserAvatarItem) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *UserAvatarItem) GetAvatarurl() string {
	if x != nil && x.Avatarurl != nil {
		return *x.Avatarurl
	}
	return ""
}

func (x *UserAvatarItem) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type UserAvatarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvatarList           []*UserAvatarItem `protobuf:"bytes,1,rep,name=avatarList" json:"avatarList,omitempty"`
	IsBanModifyAvatar    *bool             `protobuf:"varint,2,opt,name=isBanModifyAvatar" json:"isBanModifyAvatar,omitempty"`
	AvatarLimit          *uint32           `protobuf:"varint,3,opt,name=avatarLimit" json:"avatarLimit,omitempty"`
	DefaultAvatarId      *uint32           `protobuf:"varint,4,opt,name=defaultAvatarId" json:"defaultAvatarId,omitempty"`
	DefaultHeadimgUrl    *string           `protobuf:"bytes,5,opt,name=defaultHeadimgUrl" json:"defaultHeadimgUrl,omitempty"`
	DefaultHeadimgFileid *string           `protobuf:"bytes,6,opt,name=defaultHeadimgFileid" json:"defaultHeadimgFileid,omitempty"`
	AvatarWording        *string           `protobuf:"bytes,7,opt,name=avatarWording" json:"avatarWording,omitempty"`
	LimitWording         *string           `protobuf:"bytes,8,opt,name=limitWording" json:"limitWording,omitempty"`
}

func (x *UserAvatarInfo) Reset() {
	*x = UserAvatarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAvatarInfo) ProtoMessage() {}

func (x *UserAvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAvatarInfo.ProtoReflect.Descriptor instead.
func (*UserAvatarInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{333}
}

func (x *UserAvatarInfo) GetAvatarList() []*UserAvatarItem {
	if x != nil {
		return x.AvatarList
	}
	return nil
}

func (x *UserAvatarInfo) GetIsBanModifyAvatar() bool {
	if x != nil && x.IsBanModifyAvatar != nil {
		return *x.IsBanModifyAvatar
	}
	return false
}

func (x *UserAvatarInfo) GetAvatarLimit() uint32 {
	if x != nil && x.AvatarLimit != nil {
		return *x.AvatarLimit
	}
	return 0
}

func (x *UserAvatarInfo) GetDefaultAvatarId() uint32 {
	if x != nil && x.DefaultAvatarId != nil {
		return *x.DefaultAvatarId
	}
	return 0
}

func (x *UserAvatarInfo) GetDefaultHeadimgUrl() string {
	if x != nil && x.DefaultHeadimgUrl != nil {
		return *x.DefaultHeadimgUrl
	}
	return ""
}

func (x *UserAvatarInfo) GetDefaultHeadimgFileid() string {
	if x != nil && x.DefaultHeadimgFileid != nil {
		return *x.DefaultHeadimgFileid
	}
	return ""
}

func (x *UserAvatarInfo) GetAvatarWording() string {
	if x != nil && x.AvatarWording != nil {
		return *x.AvatarWording
	}
	return ""
}

func (x *UserAvatarInfo) GetLimitWording() string {
	if x != nil && x.LimitWording != nil {
		return *x.LimitWording
	}
	return ""
}

type AlertPrivacyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedShowPrivacy *bool   `protobuf:"varint,1,opt,name=needShowPrivacy" json:"needShowPrivacy,omitempty"`
	PrivacyWording  *string `protobuf:"bytes,2,opt,name=privacyWording" json:"privacyWording,omitempty"`
}

func (x *AlertPrivacyInfo) Reset() {
	*x = AlertPrivacyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertPrivacyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertPrivacyInfo) ProtoMessage() {}

func (x *AlertPrivacyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertPrivacyInfo.ProtoReflect.Descriptor instead.
func (*AlertPrivacyInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{334}
}

func (x *AlertPrivacyInfo) GetNeedShowPrivacy() bool {
	if x != nil && x.NeedShowPrivacy != nil {
		return *x.NeedShowPrivacy
	}
	return false
}

func (x *AlertPrivacyInfo) GetPrivacyWording() string {
	if x != nil && x.PrivacyWording != nil {
		return *x.PrivacyWording
	}
	return ""
}

type JSOperateWxDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse      *BaseResponse                      `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	JsapiBaseresponse *JSAPIBaseResponse                 `protobuf:"bytes,2,opt,name=jsapiBaseresponse" json:"jsapiBaseresponse,omitempty"`
	Data              []byte                             `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Scope             *ScopeInfo                         `protobuf:"bytes,4,opt,name=scope" json:"scope,omitempty"`
	Appname           *string                            `protobuf:"bytes,5,opt,name=appname" json:"appname,omitempty"`
	AppiconUrl        *string                            `protobuf:"bytes,6,opt,name=appiconUrl" json:"appiconUrl,omitempty"`
	DebugInfo         *JSOperateWxDataResponse_DebugInfo `protobuf:"bytes,7,opt,name=debugInfo" json:"debugInfo,omitempty"`
	NeedHoldLongconn  *bool                              `protobuf:"varint,8,opt,name=needHoldLongconn" json:"needHoldLongconn,omitempty"`
	CancelWording     *string                            `protobuf:"bytes,9,opt,name=cancelWording" json:"cancelWording,omitempty"`
	AllowWording      *string                            `protobuf:"bytes,10,opt,name=allowWording" json:"allowWording,omitempty"`
	ApplyWording      *string                            `protobuf:"bytes,11,opt,name=applyWording" json:"applyWording,omitempty"`
	AvatarInfo        *UserAvatarInfo                    `protobuf:"bytes,12,opt,name=avatarInfo" json:"avatarInfo,omitempty"`
	PrivacyInfo       *AlertPrivacyInfo                  `protobuf:"bytes,13,opt,name=privacyInfo" json:"privacyInfo,omitempty"`
}

func (x *JSOperateWxDataResponse) Reset() {
	*x = JSOperateWxDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSOperateWxDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSOperateWxDataResponse) ProtoMessage() {}

func (x *JSOperateWxDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSOperateWxDataResponse.ProtoReflect.Descriptor instead.
func (*JSOperateWxDataResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{335}
}

func (x *JSOperateWxDataResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *JSOperateWxDataResponse) GetJsapiBaseresponse() *JSAPIBaseResponse {
	if x != nil {
		return x.JsapiBaseresponse
	}
	return nil
}

func (x *JSOperateWxDataResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *JSOperateWxDataResponse) GetScope() *ScopeInfo {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *JSOperateWxDataResponse) GetAppname() string {
	if x != nil && x.Appname != nil {
		return *x.Appname
	}
	return ""
}

func (x *JSOperateWxDataResponse) GetAppiconUrl() string {
	if x != nil && x.AppiconUrl != nil {
		return *x.AppiconUrl
	}
	return ""
}

func (x *JSOperateWxDataResponse) GetDebugInfo() *JSOperateWxDataResponse_DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *JSOperateWxDataResponse) GetNeedHoldLongconn() bool {
	if x != nil && x.NeedHoldLongconn != nil {
		return *x.NeedHoldLongconn
	}
	return false
}

func (x *JSOperateWxDataResponse) GetCancelWording() string {
	if x != nil && x.CancelWording != nil {
		return *x.CancelWording
	}
	return ""
}

func (x *JSOperateWxDataResponse) GetAllowWording() string {
	if x != nil && x.AllowWording != nil {
		return *x.AllowWording
	}
	return ""
}

func (x *JSOperateWxDataResponse) GetApplyWording() string {
	if x != nil && x.ApplyWording != nil {
		return *x.ApplyWording
	}
	return ""
}

func (x *JSOperateWxDataResponse) GetAvatarInfo() *UserAvatarInfo {
	if x != nil {
		return x.AvatarInfo
	}
	return nil
}

func (x *JSOperateWxDataResponse) GetPrivacyInfo() *AlertPrivacyInfo {
	if x != nil {
		return x.PrivacyInfo
	}
	return nil
}

type VerifyPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	Appid       *string      `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	ExtInfo     *string      `protobuf:"bytes,3,opt,name=extInfo" json:"extInfo,omitempty"`
}

func (x *VerifyPluginRequest) Reset() {
	*x = VerifyPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPluginRequest) ProtoMessage() {}

func (x *VerifyPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPluginRequest.ProtoReflect.Descriptor instead.
func (*VerifyPluginRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{336}
}

func (x *VerifyPluginRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *VerifyPluginRequest) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *VerifyPluginRequest) GetExtInfo() string {
	if x != nil && x.ExtInfo != nil {
		return *x.ExtInfo
	}
	return ""
}

type VerifyPluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	JsonResp     *string       `protobuf:"bytes,2,opt,name=jsonResp" json:"jsonResp,omitempty"`
}

func (x *VerifyPluginResponse) Reset() {
	*x = VerifyPluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPluginResponse) ProtoMessage() {}

func (x *VerifyPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPluginResponse.ProtoReflect.Descriptor instead.
func (*VerifyPluginResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{337}
}

func (x *VerifyPluginResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *VerifyPluginResponse) GetJsonResp() string {
	if x != nil && x.JsonResp != nil {
		return *x.JsonResp
	}
	return ""
}

type WxaAttrSyncSingleReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WxaUserName     *string `protobuf:"bytes,1,opt,name=wxaUserName" json:"wxaUserName,omitempty"`
	LastAttrVersion []byte  `protobuf:"bytes,2,opt,name=lastAttrVersion" json:"lastAttrVersion,omitempty"`
}

func (x *WxaAttrSyncSingleReqInfo) Reset() {
	*x = WxaAttrSyncSingleReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaAttrSyncSingleReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaAttrSyncSingleReqInfo) ProtoMessage() {}

func (x *WxaAttrSyncSingleReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaAttrSyncSingleReqInfo.ProtoReflect.Descriptor instead.
func (*WxaAttrSyncSingleReqInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{338}
}

func (x *WxaAttrSyncSingleReqInfo) GetWxaUserName() string {
	if x != nil && x.WxaUserName != nil {
		return *x.WxaUserName
	}
	return ""
}

func (x *WxaAttrSyncSingleReqInfo) GetLastAttrVersion() []byte {
	if x != nil {
		return x.LastAttrVersion
	}
	return nil
}

type BatchWxaAttrSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest                `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	ReqInfoList   []*WxaAttrSyncSingleReqInfo `protobuf:"bytes,2,rep,name=reqInfoList" json:"reqInfoList,omitempty"`
	PublicLib     *WxaClientPublicLibInfo     `protobuf:"bytes,5,opt,name=publicLib" json:"publicLib,omitempty"`
	DeviceModel   *string                     `protobuf:"bytes,6,opt,name=deviceModel" json:"deviceModel,omitempty"`
	DeviceRelease *string                     `protobuf:"bytes,7,opt,name=deviceRelease" json:"deviceRelease,omitempty"`
}

func (x *BatchWxaAttrSyncRequest) Reset() {
	*x = BatchWxaAttrSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchWxaAttrSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchWxaAttrSyncRequest) ProtoMessage() {}

func (x *BatchWxaAttrSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchWxaAttrSyncRequest.ProtoReflect.Descriptor instead.
func (*BatchWxaAttrSyncRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{339}
}

func (x *BatchWxaAttrSyncRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BatchWxaAttrSyncRequest) GetReqInfoList() []*WxaAttrSyncSingleReqInfo {
	if x != nil {
		return x.ReqInfoList
	}
	return nil
}

func (x *BatchWxaAttrSyncRequest) GetPublicLib() *WxaClientPublicLibInfo {
	if x != nil {
		return x.PublicLib
	}
	return nil
}

func (x *BatchWxaAttrSyncRequest) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *BatchWxaAttrSyncRequest) GetDeviceRelease() string {
	if x != nil && x.DeviceRelease != nil {
		return *x.DeviceRelease
	}
	return ""
}

type WxaAttrSyncSingleRespInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WxaUserName     *string                     `protobuf:"bytes,1,req,name=wxaUserName" json:"wxaUserName,omitempty"`
	LastAttrVersion []byte                      `protobuf:"bytes,2,opt,name=lastAttrVersion" json:"lastAttrVersion,omitempty"`
	UpdateInfoList  []*WxaAttrSyncResp_KeyValue `protobuf:"bytes,3,rep,name=updateInfoList" json:"updateInfoList,omitempty"`
}

func (x *WxaAttrSyncSingleRespInfo) Reset() {
	*x = WxaAttrSyncSingleRespInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaAttrSyncSingleRespInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaAttrSyncSingleRespInfo) ProtoMessage() {}

func (x *WxaAttrSyncSingleRespInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaAttrSyncSingleRespInfo.ProtoReflect.Descriptor instead.
func (*WxaAttrSyncSingleRespInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{340}
}

func (x *WxaAttrSyncSingleRespInfo) GetWxaUserName() string {
	if x != nil && x.WxaUserName != nil {
		return *x.WxaUserName
	}
	return ""
}

func (x *WxaAttrSyncSingleRespInfo) GetLastAttrVersion() []byte {
	if x != nil {
		return x.LastAttrVersion
	}
	return nil
}

func (x *WxaAttrSyncSingleRespInfo) GetUpdateInfoList() []*WxaAttrSyncResp_KeyValue {
	if x != nil {
		return x.UpdateInfoList
	}
	return nil
}

type BatchWxaAttrSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse                `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	RespInfoList []*WxaAttrSyncSingleRespInfo `protobuf:"bytes,2,rep,name=respInfoList" json:"respInfoList,omitempty"`
}

func (x *BatchWxaAttrSyncResponse) Reset() {
	*x = BatchWxaAttrSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchWxaAttrSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchWxaAttrSyncResponse) ProtoMessage() {}

func (x *BatchWxaAttrSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchWxaAttrSyncResponse.ProtoReflect.Descriptor instead.
func (*BatchWxaAttrSyncResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{341}
}

func (x *BatchWxaAttrSyncResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *BatchWxaAttrSyncResponse) GetRespInfoList() []*WxaAttrSyncSingleRespInfo {
	if x != nil {
		return x.RespInfoList
	}
	return nil
}

type FinderLiveUserPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq  *FinderBaseRequest  `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	Username       *string             `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	FinderUsername *string             `protobuf:"bytes,4,opt,name=finderUsername" json:"finderUsername,omitempty"`
	LastBuffer     []byte              `protobuf:"bytes,5,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	Status         *FinderClientStatus `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (x *FinderLiveUserPageRequest) Reset() {
	*x = FinderLiveUserPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveUserPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveUserPageRequest) ProtoMessage() {}

func (x *FinderLiveUserPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveUserPageRequest.ProtoReflect.Descriptor instead.
func (*FinderLiveUserPageRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{342}
}

func (x *FinderLiveUserPageRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderLiveUserPageRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderLiveUserPageRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderLiveUserPageRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderLiveUserPageRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderLiveUserPageRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type FinderLiveUserPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse      `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Object       []*FinderObject    `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	PreloadInfo  *FinderPreloadInfo `protobuf:"bytes,3,opt,name=preloadInfo" json:"preloadInfo,omitempty"`
	LastBuffer   []byte             `protobuf:"bytes,4,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag *uint32            `protobuf:"varint,5,opt,name=continueFlag" json:"continueFlag,omitempty"`
}

func (x *FinderLiveUserPageResponse) Reset() {
	*x = FinderLiveUserPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveUserPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveUserPageResponse) ProtoMessage() {}

func (x *FinderLiveUserPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveUserPageResponse.ProtoReflect.Descriptor instead.
func (*FinderLiveUserPageResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{343}
}

func (x *FinderLiveUserPageResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderLiveUserPageResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderLiveUserPageResponse) GetPreloadInfo() *FinderPreloadInfo {
	if x != nil {
		return x.PreloadInfo
	}
	return nil
}

func (x *FinderLiveUserPageResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderLiveUserPageResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

type FinderGetAllWindowProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq  *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	FinderUsername *string            `protobuf:"bytes,3,opt,name=finderUsername" json:"finderUsername,omitempty"`
	LastBuffer     []byte             `protobuf:"bytes,4,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
}

func (x *FinderGetAllWindowProductsRequest) Reset() {
	*x = FinderGetAllWindowProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetAllWindowProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetAllWindowProductsRequest) ProtoMessage() {}

func (x *FinderGetAllWindowProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetAllWindowProductsRequest.ProtoReflect.Descriptor instead.
func (*FinderGetAllWindowProductsRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{344}
}

func (x *FinderGetAllWindowProductsRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetAllWindowProductsRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetAllWindowProductsRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetAllWindowProductsRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

type FinderWindowProductInfo_DetailPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid             *string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Path              *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	HeadimgUrl        *string `protobuf:"bytes,3,opt,name=headimgUrl" json:"headimgUrl,omitempty"`
	Nickname          *string `protobuf:"bytes,4,opt,name=nickname" json:"nickname,omitempty"`
	Username          *string `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	ShowNavigationBar *uint32 `protobuf:"varint,6,opt,name=showNavigationBar" json:"showNavigationBar,omitempty"`
}

func (x *FinderWindowProductInfo_DetailPage) Reset() {
	*x = FinderWindowProductInfo_DetailPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderWindowProductInfo_DetailPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderWindowProductInfo_DetailPage) ProtoMessage() {}

func (x *FinderWindowProductInfo_DetailPage) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderWindowProductInfo_DetailPage.ProtoReflect.Descriptor instead.
func (*FinderWindowProductInfo_DetailPage) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{345}
}

func (x *FinderWindowProductInfo_DetailPage) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *FinderWindowProductInfo_DetailPage) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FinderWindowProductInfo_DetailPage) GetHeadimgUrl() string {
	if x != nil && x.HeadimgUrl != nil {
		return *x.HeadimgUrl
	}
	return ""
}

func (x *FinderWindowProductInfo_DetailPage) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderWindowProductInfo_DetailPage) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderWindowProductInfo_DetailPage) GetShowNavigationBar() uint32 {
	if x != nil && x.ShowNavigationBar != nil {
		return *x.ShowNavigationBar
	}
	return 0
}

type FinderWeChatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KfUrl          *string `protobuf:"bytes,1,opt,name=kfUrl" json:"kfUrl,omitempty"`
	ContactId      *string `protobuf:"bytes,2,opt,name=contactId" json:"contactId,omitempty"`
	ContactWording *string `protobuf:"bytes,3,opt,name=contactWording" json:"contactWording,omitempty"`
}

func (x *FinderWeChatInfo) Reset() {
	*x = FinderWeChatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderWeChatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderWeChatInfo) ProtoMessage() {}

func (x *FinderWeChatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderWeChatInfo.ProtoReflect.Descriptor instead.
func (*FinderWeChatInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{346}
}

func (x *FinderWeChatInfo) GetKfUrl() string {
	if x != nil && x.KfUrl != nil {
		return *x.KfUrl
	}
	return ""
}

func (x *FinderWeChatInfo) GetContactId() string {
	if x != nil && x.ContactId != nil {
		return *x.ContactId
	}
	return ""
}

func (x *FinderWeChatInfo) GetContactWording() string {
	if x != nil && x.ContactWording != nil {
		return *x.ContactWording
	}
	return ""
}

type FinderLiveShopCustomerServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppType   *uint32           `protobuf:"varint,1,opt,name=appType" json:"appType,omitempty"`
	Username  *string           `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	AppInfo   *FinderWxAppInfo  `protobuf:"bytes,3,opt,name=appInfo" json:"appInfo,omitempty"`
	H5Url     *string           `protobuf:"bytes,4,opt,name=h5Url" json:"h5Url,omitempty"`
	WecomInfo *FinderWeChatInfo `protobuf:"bytes,5,opt,name=wecomInfo" json:"wecomInfo,omitempty"`
}

func (x *FinderLiveShopCustomerServiceInfo) Reset() {
	*x = FinderLiveShopCustomerServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveShopCustomerServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveShopCustomerServiceInfo) ProtoMessage() {}

func (x *FinderLiveShopCustomerServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveShopCustomerServiceInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveShopCustomerServiceInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{347}
}

func (x *FinderLiveShopCustomerServiceInfo) GetAppType() uint32 {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return 0
}

func (x *FinderLiveShopCustomerServiceInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderLiveShopCustomerServiceInfo) GetAppInfo() *FinderWxAppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *FinderLiveShopCustomerServiceInfo) GetH5Url() string {
	if x != nil && x.H5Url != nil {
		return *x.H5Url
	}
	return ""
}

func (x *FinderLiveShopCustomerServiceInfo) GetWecomInfo() *FinderWeChatInfo {
	if x != nil {
		return x.WecomInfo
	}
	return nil
}

type FinderWindowProductInfo_CouponInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CouponName  *string `protobuf:"bytes,1,opt,name=couponName" json:"couponName,omitempty"`
	StockId     *string `protobuf:"bytes,2,opt,name=stockId" json:"stockId,omitempty"`
	NeedReceive *uint32 `protobuf:"varint,3,opt,name=needReceive" json:"needReceive,omitempty"`
}

func (x *FinderWindowProductInfo_CouponInfo) Reset() {
	*x = FinderWindowProductInfo_CouponInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderWindowProductInfo_CouponInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderWindowProductInfo_CouponInfo) ProtoMessage() {}

func (x *FinderWindowProductInfo_CouponInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderWindowProductInfo_CouponInfo.ProtoReflect.Descriptor instead.
func (*FinderWindowProductInfo_CouponInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{348}
}

func (x *FinderWindowProductInfo_CouponInfo) GetCouponName() string {
	if x != nil && x.CouponName != nil {
		return *x.CouponName
	}
	return ""
}

func (x *FinderWindowProductInfo_CouponInfo) GetStockId() string {
	if x != nil && x.StockId != nil {
		return *x.StockId
	}
	return ""
}

func (x *FinderWindowProductInfo_CouponInfo) GetNeedReceive() uint32 {
	if x != nil && x.NeedReceive != nil {
		return *x.NeedReceive
	}
	return 0
}

type FinderWindowProductInfo_ExclusiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEffect      *bool                               `protobuf:"varint,1,opt,name=isEffect" json:"isEffect,omitempty"`
	ExclusivePage *FinderWindowProductInfo_DetailPage `protobuf:"bytes,2,opt,name=exclusivePage" json:"exclusivePage,omitempty"`
	Price         *int32                              `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	Stock         *uint32                             `protobuf:"varint,4,opt,name=stock" json:"stock,omitempty"`
}

func (x *FinderWindowProductInfo_ExclusiveInfo) Reset() {
	*x = FinderWindowProductInfo_ExclusiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderWindowProductInfo_ExclusiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderWindowProductInfo_ExclusiveInfo) ProtoMessage() {}

func (x *FinderWindowProductInfo_ExclusiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderWindowProductInfo_ExclusiveInfo.ProtoReflect.Descriptor instead.
func (*FinderWindowProductInfo_ExclusiveInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{349}
}

func (x *FinderWindowProductInfo_ExclusiveInfo) GetIsEffect() bool {
	if x != nil && x.IsEffect != nil {
		return *x.IsEffect
	}
	return false
}

func (x *FinderWindowProductInfo_ExclusiveInfo) GetExclusivePage() *FinderWindowProductInfo_DetailPage {
	if x != nil {
		return x.ExclusivePage
	}
	return nil
}

func (x *FinderWindowProductInfo_ExclusiveInfo) GetPrice() int32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *FinderWindowProductInfo_ExclusiveInfo) GetStock() uint32 {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return 0
}

type FinderWindowProductInfo_ProductReplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveId       *uint64 `protobuf:"varint,1,opt,name=liveId" json:"liveId,omitempty"`
	ObjectId     *uint64 `protobuf:"varint,2,opt,name=objectId" json:"objectId,omitempty"`
	BeginTime    *uint32 `protobuf:"varint,3,opt,name=beginTime" json:"beginTime,omitempty"`
	EndTime      *uint32 `protobuf:"varint,4,opt,name=endTime" json:"endTime,omitempty"`
	ReplayId     *uint64 `protobuf:"varint,5,opt,name=replayId" json:"replayId,omitempty"`
	ReplayStatus *uint32 `protobuf:"varint,6,opt,name=replayStatus" json:"replayStatus,omitempty"`
	Duration     *uint32 `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
}

func (x *FinderWindowProductInfo_ProductReplayInfo) Reset() {
	*x = FinderWindowProductInfo_ProductReplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderWindowProductInfo_ProductReplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderWindowProductInfo_ProductReplayInfo) ProtoMessage() {}

func (x *FinderWindowProductInfo_ProductReplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderWindowProductInfo_ProductReplayInfo.ProtoReflect.Descriptor instead.
func (*FinderWindowProductInfo_ProductReplayInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{350}
}

func (x *FinderWindowProductInfo_ProductReplayInfo) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderWindowProductInfo_ProductReplayInfo) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderWindowProductInfo_ProductReplayInfo) GetBeginTime() uint32 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *FinderWindowProductInfo_ProductReplayInfo) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *FinderWindowProductInfo_ProductReplayInfo) GetReplayId() uint64 {
	if x != nil && x.ReplayId != nil {
		return *x.ReplayId
	}
	return 0
}

func (x *FinderWindowProductInfo_ProductReplayInfo) GetReplayStatus() uint32 {
	if x != nil && x.ReplayStatus != nil {
		return *x.ReplayStatus
	}
	return 0
}

func (x *FinderWindowProductInfo_ProductReplayInfo) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type FinderWindowProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId         *uint64                                    `protobuf:"varint,1,opt,name=productId" json:"productId,omitempty"`
	Title             *string                                    `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	ImgUrls           []string                                   `protobuf:"bytes,3,rep,name=imgUrls" json:"imgUrls,omitempty"`
	Stock             *uint32                                    `protobuf:"varint,4,opt,name=stock" json:"stock,omitempty"`
	MarketPrice       *uint32                                    `protobuf:"varint,5,opt,name=marketPrice" json:"marketPrice,omitempty"`
	SellingPrice      *uint32                                    `protobuf:"varint,6,opt,name=sellingPrice" json:"sellingPrice,omitempty"`
	Status            *uint32                                    `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`
	PlatformName      *string                                    `protobuf:"bytes,8,opt,name=platformName" json:"platformName,omitempty"`
	HalfPage          *FinderWindowProductInfo_DetailPage        `protobuf:"bytes,9,opt,name=halfPage" json:"halfPage,omitempty"`
	FullPage          *FinderWindowProductInfo_DetailPage        `protobuf:"bytes,10,opt,name=fullPage" json:"fullPage,omitempty"`
	IsPromoting       *uint32                                    `protobuf:"varint,11,opt,name=isPromoting" json:"isPromoting,omitempty"`
	PlatformId        *uint32                                    `protobuf:"varint,12,opt,name=platformId" json:"platformId,omitempty"`
	ListId            *uint32                                    `protobuf:"varint,13,opt,name=listId" json:"listId,omitempty"`
	ExtraData         *string                                    `protobuf:"bytes,14,opt,name=extraData" json:"extraData,omitempty"`
	StockId           *string                                    `protobuf:"bytes,15,opt,name=stockId" json:"stockId,omitempty"`
	ButtonWording     *string                                    `protobuf:"bytes,16,opt,name=buttonWording" json:"buttonWording,omitempty"`
	CsInfo            *FinderLiveShopCustomerServiceInfo         `protobuf:"bytes,17,opt,name=csInfo" json:"csInfo,omitempty"`
	RequestId         *string                                    `protobuf:"bytes,18,opt,name=requestId" json:"requestId,omitempty"`
	AssociatedCoupons []*FinderWindowProductInfo_CouponInfo      `protobuf:"bytes,20,rep,name=associatedCoupons" json:"associatedCoupons,omitempty"`
	SpuId             *uint64                                    `protobuf:"varint,21,opt,name=spuId" json:"spuId,omitempty"`
	ProductType       *uint32                                    `protobuf:"varint,22,opt,name=productType" json:"productType,omitempty"`
	ProductExtInfo    []byte                                     `protobuf:"bytes,23,opt,name=productExtInfo" json:"productExtInfo,omitempty"`
	ExclusiveInfo     *FinderWindowProductInfo_ExclusiveInfo     `protobuf:"bytes,24,opt,name=exclusiveInfo" json:"exclusiveInfo,omitempty"`
	ReplayId          *uint64                                    `protobuf:"varint,25,opt,name=replayId" json:"replayId,omitempty"`
	ReplayStatus      *uint32                                    `protobuf:"varint,26,opt,name=replayStatus" json:"replayStatus,omitempty"`
	Dobule11IconUrl   *string                                    `protobuf:"bytes,27,opt,name=dobule11IconUrl" json:"dobule11IconUrl,omitempty"`
	ProductReplayInfo *FinderWindowProductInfo_ProductReplayInfo `protobuf:"bytes,28,opt,name=productReplayInfo" json:"productReplayInfo,omitempty"`
}

func (x *FinderWindowProductInfo) Reset() {
	*x = FinderWindowProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderWindowProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderWindowProductInfo) ProtoMessage() {}

func (x *FinderWindowProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderWindowProductInfo.ProtoReflect.Descriptor instead.
func (*FinderWindowProductInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{351}
}

func (x *FinderWindowProductInfo) GetProductId() uint64 {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return 0
}

func (x *FinderWindowProductInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderWindowProductInfo) GetImgUrls() []string {
	if x != nil {
		return x.ImgUrls
	}
	return nil
}

func (x *FinderWindowProductInfo) GetStock() uint32 {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return 0
}

func (x *FinderWindowProductInfo) GetMarketPrice() uint32 {
	if x != nil && x.MarketPrice != nil {
		return *x.MarketPrice
	}
	return 0
}

func (x *FinderWindowProductInfo) GetSellingPrice() uint32 {
	if x != nil && x.SellingPrice != nil {
		return *x.SellingPrice
	}
	return 0
}

func (x *FinderWindowProductInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *FinderWindowProductInfo) GetPlatformName() string {
	if x != nil && x.PlatformName != nil {
		return *x.PlatformName
	}
	return ""
}

func (x *FinderWindowProductInfo) GetHalfPage() *FinderWindowProductInfo_DetailPage {
	if x != nil {
		return x.HalfPage
	}
	return nil
}

func (x *FinderWindowProductInfo) GetFullPage() *FinderWindowProductInfo_DetailPage {
	if x != nil {
		return x.FullPage
	}
	return nil
}

func (x *FinderWindowProductInfo) GetIsPromoting() uint32 {
	if x != nil && x.IsPromoting != nil {
		return *x.IsPromoting
	}
	return 0
}

func (x *FinderWindowProductInfo) GetPlatformId() uint32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *FinderWindowProductInfo) GetListId() uint32 {
	if x != nil && x.ListId != nil {
		return *x.ListId
	}
	return 0
}

func (x *FinderWindowProductInfo) GetExtraData() string {
	if x != nil && x.ExtraData != nil {
		return *x.ExtraData
	}
	return ""
}

func (x *FinderWindowProductInfo) GetStockId() string {
	if x != nil && x.StockId != nil {
		return *x.StockId
	}
	return ""
}

func (x *FinderWindowProductInfo) GetButtonWording() string {
	if x != nil && x.ButtonWording != nil {
		return *x.ButtonWording
	}
	return ""
}

func (x *FinderWindowProductInfo) GetCsInfo() *FinderLiveShopCustomerServiceInfo {
	if x != nil {
		return x.CsInfo
	}
	return nil
}

func (x *FinderWindowProductInfo) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *FinderWindowProductInfo) GetAssociatedCoupons() []*FinderWindowProductInfo_CouponInfo {
	if x != nil {
		return x.AssociatedCoupons
	}
	return nil
}

func (x *FinderWindowProductInfo) GetSpuId() uint64 {
	if x != nil && x.SpuId != nil {
		return *x.SpuId
	}
	return 0
}

func (x *FinderWindowProductInfo) GetProductType() uint32 {
	if x != nil && x.ProductType != nil {
		return *x.ProductType
	}
	return 0
}

func (x *FinderWindowProductInfo) GetProductExtInfo() []byte {
	if x != nil {
		return x.ProductExtInfo
	}
	return nil
}

func (x *FinderWindowProductInfo) GetExclusiveInfo() *FinderWindowProductInfo_ExclusiveInfo {
	if x != nil {
		return x.ExclusiveInfo
	}
	return nil
}

func (x *FinderWindowProductInfo) GetReplayId() uint64 {
	if x != nil && x.ReplayId != nil {
		return *x.ReplayId
	}
	return 0
}

func (x *FinderWindowProductInfo) GetReplayStatus() uint32 {
	if x != nil && x.ReplayStatus != nil {
		return *x.ReplayStatus
	}
	return 0
}

func (x *FinderWindowProductInfo) GetDobule11IconUrl() string {
	if x != nil && x.Dobule11IconUrl != nil {
		return *x.Dobule11IconUrl
	}
	return ""
}

func (x *FinderWindowProductInfo) GetProductReplayInfo() *FinderWindowProductInfo_ProductReplayInfo {
	if x != nil {
		return x.ProductReplayInfo
	}
	return nil
}

type FinderGetAllWindowProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse              `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Products        []*FinderWindowProductInfo `protobuf:"bytes,2,rep,name=products" json:"products,omitempty"`
	LastBuffer      []byte                     `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag    *uint32                    `protobuf:"varint,4,opt,name=continueFlag" json:"continueFlag,omitempty"`
	ShowShopOpGuide *uint32                    `protobuf:"varint,5,opt,name=showShopOpGuide" json:"showShopOpGuide,omitempty"`
}

func (x *FinderGetAllWindowProductsResponse) Reset() {
	*x = FinderGetAllWindowProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetAllWindowProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetAllWindowProductsResponse) ProtoMessage() {}

func (x *FinderGetAllWindowProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetAllWindowProductsResponse.ProtoReflect.Descriptor instead.
func (*FinderGetAllWindowProductsResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{352}
}

func (x *FinderGetAllWindowProductsResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetAllWindowProductsResponse) GetProducts() []*FinderWindowProductInfo {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *FinderGetAllWindowProductsResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetAllWindowProductsResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderGetAllWindowProductsResponse) GetShowShopOpGuide() uint32 {
	if x != nil && x.ShowShopOpGuide != nil {
		return *x.ShowShopOpGuide
	}
	return 0
}

type FinderMVUserPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq  *FinderBaseRequest  `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	Username       *string             `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	FinderUsername *string             `protobuf:"bytes,4,opt,name=finderUsername" json:"finderUsername,omitempty"`
	LastBuffer     []byte              `protobuf:"bytes,5,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	Status         *FinderClientStatus `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (x *FinderMVUserPageRequest) Reset() {
	*x = FinderMVUserPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMVUserPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMVUserPageRequest) ProtoMessage() {}

func (x *FinderMVUserPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMVUserPageRequest.ProtoReflect.Descriptor instead.
func (*FinderMVUserPageRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{353}
}

func (x *FinderMVUserPageRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderMVUserPageRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderMVUserPageRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderMVUserPageRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderMVUserPageRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderMVUserPageRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type FinderMVUserPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse      `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Object       []*FinderObject    `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	PreloadInfo  *FinderPreloadInfo `protobuf:"bytes,3,opt,name=preloadInfo" json:"preloadInfo,omitempty"`
	LastBuffer   []byte             `protobuf:"bytes,4,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag *uint32            `protobuf:"varint,5,opt,name=continueFlag" json:"continueFlag,omitempty"`
}

func (x *FinderMVUserPageResponse) Reset() {
	*x = FinderMVUserPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMVUserPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMVUserPageResponse) ProtoMessage() {}

func (x *FinderMVUserPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMVUserPageResponse.ProtoReflect.Descriptor instead.
func (*FinderMVUserPageResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{354}
}

func (x *FinderMVUserPageResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderMVUserPageResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderMVUserPageResponse) GetPreloadInfo() *FinderPreloadInfo {
	if x != nil {
		return x.PreloadInfo
	}
	return nil
}

func (x *FinderMVUserPageResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderMVUserPageResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

type FinderMusicUserPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Username       *string             `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	FinderBasereq  *FinderBaseRequest  `protobuf:"bytes,3,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	FinderUsername *string             `protobuf:"bytes,4,opt,name=finderUsername" json:"finderUsername,omitempty"`
	LastBuffer     []byte              `protobuf:"bytes,5,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	EnterType      *uint32             `protobuf:"varint,6,opt,name=enterType" json:"enterType,omitempty"`
	Status         *FinderClientStatus `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
}

func (x *FinderMusicUserPageRequest) Reset() {
	*x = FinderMusicUserPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMusicUserPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMusicUserPageRequest) ProtoMessage() {}

func (x *FinderMusicUserPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMusicUserPageRequest.ProtoReflect.Descriptor instead.
func (*FinderMusicUserPageRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{355}
}

func (x *FinderMusicUserPageRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderMusicUserPageRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderMusicUserPageRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderMusicUserPageRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderMusicUserPageRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderMusicUserPageRequest) GetEnterType() uint32 {
	if x != nil && x.EnterType != nil {
		return *x.EnterType
	}
	return 0
}

func (x *FinderMusicUserPageRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type FinderMusicUserPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse      `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Object       []*FinderObject    `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	Contact      *FinderContact     `protobuf:"bytes,3,opt,name=contact" json:"contact,omitempty"`
	ContinueFlag *uint32            `protobuf:"varint,4,opt,name=continueFlag" json:"continueFlag,omitempty"`
	LastBuffer   []byte             `protobuf:"bytes,5,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	PreloadInfo  *FinderPreloadInfo `protobuf:"bytes,6,opt,name=preloadInfo" json:"preloadInfo,omitempty"`
}

func (x *FinderMusicUserPageResponse) Reset() {
	*x = FinderMusicUserPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMusicUserPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMusicUserPageResponse) ProtoMessage() {}

func (x *FinderMusicUserPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMusicUserPageResponse.ProtoReflect.Descriptor instead.
func (*FinderMusicUserPageResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{356}
}

func (x *FinderMusicUserPageResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderMusicUserPageResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderMusicUserPageResponse) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderMusicUserPageResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderMusicUserPageResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderMusicUserPageResponse) GetPreloadInfo() *FinderPreloadInfo {
	if x != nil {
		return x.PreloadInfo
	}
	return nil
}

type FinderGetMentionedListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	LastDisplayid  *uint64            `protobuf:"varint,2,opt,name=lastDisplayid" json:"lastDisplayid,omitempty"`
	FinderUsername *string            `protobuf:"bytes,3,opt,name=finderUsername" json:"finderUsername,omitempty"`
	LastBuffer     []byte             `protobuf:"bytes,4,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	FinderBasereq  *FinderBaseRequest `protobuf:"bytes,5,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	DisplayOption  *uint32            `protobuf:"varint,6,opt,name=displayOption" json:"displayOption,omitempty"`
}

func (x *FinderGetMentionedListRequest) Reset() {
	*x = FinderGetMentionedListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetMentionedListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetMentionedListRequest) ProtoMessage() {}

func (x *FinderGetMentionedListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetMentionedListRequest.ProtoReflect.Descriptor instead.
func (*FinderGetMentionedListRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{357}
}

func (x *FinderGetMentionedListRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetMentionedListRequest) GetLastDisplayid() uint64 {
	if x != nil && x.LastDisplayid != nil {
		return *x.LastDisplayid
	}
	return 0
}

func (x *FinderGetMentionedListRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetMentionedListRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetMentionedListRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetMentionedListRequest) GetDisplayOption() uint32 {
	if x != nil && x.DisplayOption != nil {
		return *x.DisplayOption
	}
	return 0
}

type FinderGetMentionedListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse              *BaseResponse   `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Object                    []*FinderObject `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	LastBuffer                []byte          `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag              *uint32         `protobuf:"varint,4,opt,name=continueFlag" json:"continueFlag,omitempty"`
	MentionTotalCount         *uint32         `protobuf:"varint,5,opt,name=mentionTotalCount" json:"mentionTotalCount,omitempty"`
	SelectedMentionTotalCount *uint32         `protobuf:"varint,6,opt,name=selectedMentionTotalCount" json:"selectedMentionTotalCount,omitempty"`
}

func (x *FinderGetMentionedListResponse) Reset() {
	*x = FinderGetMentionedListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetMentionedListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetMentionedListResponse) ProtoMessage() {}

func (x *FinderGetMentionedListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetMentionedListResponse.ProtoReflect.Descriptor instead.
func (*FinderGetMentionedListResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{358}
}

func (x *FinderGetMentionedListResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetMentionedListResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderGetMentionedListResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetMentionedListResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderGetMentionedListResponse) GetMentionTotalCount() uint32 {
	if x != nil && x.MentionTotalCount != nil {
		return *x.MentionTotalCount
	}
	return 0
}

func (x *FinderGetMentionedListResponse) GetSelectedMentionTotalCount() uint32 {
	if x != nil && x.SelectedMentionTotalCount != nil {
		return *x.SelectedMentionTotalCount
	}
	return 0
}

type FinderUserPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Username        *string             `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	MaxId           *uint64             `protobuf:"varint,3,opt,name=maxId" json:"maxId,omitempty"`
	FirstPageMd5    *string             `protobuf:"bytes,4,opt,name=firstPageMd5" json:"firstPageMd5,omitempty"`
	FinderUsername  *string             `protobuf:"bytes,5,opt,name=finderUsername" json:"finderUsername,omitempty"`
	NeedFansCount   *uint32             `protobuf:"varint,6,opt,name=needFansCount" json:"needFansCount,omitempty"`
	FinderBasereq   *FinderBaseRequest  `protobuf:"bytes,7,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LastBuffer      []byte              `protobuf:"bytes,8,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	EnterType       *uint32             `protobuf:"varint,9,opt,name=enterType" json:"enterType,omitempty"`
	Status          *FinderClientStatus `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	TopicId         *uint64             `protobuf:"varint,11,opt,name=topicId" json:"topicId,omitempty"`
	TabType         *uint32             `protobuf:"varint,12,opt,name=tabType" json:"tabType,omitempty"`
	ObjectId        *uint64             `protobuf:"varint,13,opt,name=objectId" json:"objectId,omitempty"`
	BizUsername     *string             `protobuf:"bytes,14,opt,name=bizUsername" json:"bizUsername,omitempty"`
	Longitude       *float32            `protobuf:"fixed32,15,opt,name=longitude" json:"longitude,omitempty"`
	Latitude        *float32            `protobuf:"fixed32,16,opt,name=latitude" json:"latitude,omitempty"`
	Scene           *uint32             `protobuf:"varint,17,opt,name=scene" json:"scene,omitempty"`
	RefLiveObjectId *uint64             `protobuf:"varint,18,opt,name=refLiveObjectId" json:"refLiveObjectId,omitempty"`
}

func (x *FinderUserPageRequest) Reset() {
	*x = FinderUserPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPageRequest) ProtoMessage() {}

func (x *FinderUserPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPageRequest.ProtoReflect.Descriptor instead.
func (*FinderUserPageRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{359}
}

func (x *FinderUserPageRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderUserPageRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderUserPageRequest) GetMaxId() uint64 {
	if x != nil && x.MaxId != nil {
		return *x.MaxId
	}
	return 0
}

func (x *FinderUserPageRequest) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *FinderUserPageRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderUserPageRequest) GetNeedFansCount() uint32 {
	if x != nil && x.NeedFansCount != nil {
		return *x.NeedFansCount
	}
	return 0
}

func (x *FinderUserPageRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderUserPageRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderUserPageRequest) GetEnterType() uint32 {
	if x != nil && x.EnterType != nil {
		return *x.EnterType
	}
	return 0
}

func (x *FinderUserPageRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FinderUserPageRequest) GetTopicId() uint64 {
	if x != nil && x.TopicId != nil {
		return *x.TopicId
	}
	return 0
}

func (x *FinderUserPageRequest) GetTabType() uint32 {
	if x != nil && x.TabType != nil {
		return *x.TabType
	}
	return 0
}

func (x *FinderUserPageRequest) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderUserPageRequest) GetBizUsername() string {
	if x != nil && x.BizUsername != nil {
		return *x.BizUsername
	}
	return ""
}

func (x *FinderUserPageRequest) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderUserPageRequest) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderUserPageRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderUserPageRequest) GetRefLiveObjectId() uint64 {
	if x != nil && x.RefLiveObjectId != nil {
		return *x.RefLiveObjectId
	}
	return 0
}

type FinderUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverImgUrl    *string         `protobuf:"bytes,1,opt,name=coverImgUrl" json:"coverImgUrl,omitempty"`
	AuthIconType   *uint32         `protobuf:"varint,2,opt,name=authIconType" json:"authIconType,omitempty"`
	AuthProfession *string         `protobuf:"bytes,3,opt,name=authProfession" json:"authProfession,omitempty"`
	AuthInfo       *FinderAuthInfo `protobuf:"bytes,4,opt,name=authInfo" json:"authInfo,omitempty"`
}

func (x *FinderUserInfo) Reset() {
	*x = FinderUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserInfo) ProtoMessage() {}

func (x *FinderUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserInfo.ProtoReflect.Descriptor instead.
func (*FinderUserInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{360}
}

func (x *FinderUserInfo) GetCoverImgUrl() string {
	if x != nil && x.CoverImgUrl != nil {
		return *x.CoverImgUrl
	}
	return ""
}

func (x *FinderUserInfo) GetAuthIconType() uint32 {
	if x != nil && x.AuthIconType != nil {
		return *x.AuthIconType
	}
	return 0
}

func (x *FinderUserInfo) GetAuthProfession() string {
	if x != nil && x.AuthProfession != nil {
		return *x.AuthProfession
	}
	return ""
}

func (x *FinderUserInfo) GetAuthInfo() *FinderAuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

type OriginalEntranceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorStatement *string `protobuf:"bytes,1,opt,name=authorStatement" json:"authorStatement,omitempty"`
}

func (x *OriginalEntranceInfo) Reset() {
	*x = OriginalEntranceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginalEntranceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginalEntranceInfo) ProtoMessage() {}

func (x *OriginalEntranceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginalEntranceInfo.ProtoReflect.Descriptor instead.
func (*OriginalEntranceInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{361}
}

func (x *OriginalEntranceInfo) GetAuthorStatement() string {
	if x != nil && x.AuthorStatement != nil {
		return *x.AuthorStatement
	}
	return ""
}

type PoiGps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude *float32 `protobuf:"fixed32,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude  *float32 `protobuf:"fixed32,2,opt,name=latitude" json:"latitude,omitempty"`
	Precision *uint32  `protobuf:"varint,3,opt,name=precision" json:"precision,omitempty"`
}

func (x *PoiGps) Reset() {
	*x = PoiGps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiGps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiGps) ProtoMessage() {}

func (x *PoiGps) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiGps.ProtoReflect.Descriptor instead.
func (*PoiGps) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{362}
}

func (x *PoiGps) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *PoiGps) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *PoiGps) GetPrecision() uint32 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

type PoiPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (x *PoiPoint) Reset() {
	*x = PoiPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiPoint) ProtoMessage() {}

func (x *PoiPoint) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiPoint.ProtoReflect.Descriptor instead.
func (*PoiPoint) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{363}
}

func (x *PoiPoint) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *PoiPoint) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type PoiCategories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *PoiCategories) Reset() {
	*x = PoiCategories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiCategories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiCategories) ProtoMessage() {}

func (x *PoiCategories) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiCategories.ProtoReflect.Descriptor instead.
func (*PoiCategories) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{364}
}

func (x *PoiCategories) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *PoiCategories) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type PoiAliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *PoiAliases) Reset() {
	*x = PoiAliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiAliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiAliases) ProtoMessage() {}

func (x *PoiAliases) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiAliases.ProtoReflect.Descriptor instead.
func (*PoiAliases) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{365}
}

func (x *PoiAliases) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *PoiAliases) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type PoiBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            *string          `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Name           *string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MarsGps        *PoiGps          `protobuf:"bytes,3,opt,name=marsGps" json:"marsGps,omitempty"`
	MarsPoint      *PoiPoint        `protobuf:"bytes,4,opt,name=marsPoint" json:"marsPoint,omitempty"`
	Address        *string          `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	Categories     *string          `protobuf:"bytes,6,opt,name=categories" json:"categories,omitempty"`
	CategoriesList []*PoiCategories `protobuf:"bytes,7,rep,name=categoriesList" json:"categoriesList,omitempty"`
	Distance       *float32         `protobuf:"fixed32,8,opt,name=distance" json:"distance,omitempty"`
	Province       *string          `protobuf:"bytes,9,opt,name=province" json:"province,omitempty"`
	City           *string          `protobuf:"bytes,10,opt,name=city" json:"city,omitempty"`
	Region         *string          `protobuf:"bytes,11,opt,name=region" json:"region,omitempty"`
	FullAddress    *string          `protobuf:"bytes,12,opt,name=fullAddress" json:"fullAddress,omitempty"`
	Source         *uint32          `protobuf:"varint,13,opt,name=source" json:"source,omitempty"`
	Country        *string          `protobuf:"bytes,14,opt,name=country" json:"country,omitempty"`
	Aliases        []*PoiAliases    `protobuf:"bytes,15,rep,name=aliases" json:"aliases,omitempty"`
}

func (x *PoiBrief) Reset() {
	*x = PoiBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiBrief) ProtoMessage() {}

func (x *PoiBrief) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiBrief.ProtoReflect.Descriptor instead.
func (*PoiBrief) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{366}
}

func (x *PoiBrief) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *PoiBrief) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PoiBrief) GetMarsGps() *PoiGps {
	if x != nil {
		return x.MarsGps
	}
	return nil
}

func (x *PoiBrief) GetMarsPoint() *PoiPoint {
	if x != nil {
		return x.MarsPoint
	}
	return nil
}

func (x *PoiBrief) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *PoiBrief) GetCategories() string {
	if x != nil && x.Categories != nil {
		return *x.Categories
	}
	return ""
}

func (x *PoiBrief) GetCategoriesList() []*PoiCategories {
	if x != nil {
		return x.CategoriesList
	}
	return nil
}

func (x *PoiBrief) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *PoiBrief) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *PoiBrief) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *PoiBrief) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *PoiBrief) GetFullAddress() string {
	if x != nil && x.FullAddress != nil {
		return *x.FullAddress
	}
	return ""
}

func (x *PoiBrief) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *PoiBrief) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *PoiBrief) GetAliases() []*PoiAliases {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type PoiIntro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchName          *string  `protobuf:"bytes,1,opt,name=branchName" json:"branchName,omitempty"`
	Price               *float32 `protobuf:"fixed32,2,opt,name=price" json:"price,omitempty"`
	Introduction        *string  `protobuf:"bytes,3,opt,name=introduction" json:"introduction,omitempty"`
	Recommend           *string  `protobuf:"bytes,4,opt,name=recommend" json:"recommend,omitempty"`
	Special             *string  `protobuf:"bytes,5,opt,name=special" json:"special,omitempty"`
	Traffic             *string  `protobuf:"bytes,6,opt,name=traffic" json:"traffic,omitempty"`
	Phone               *string  `protobuf:"bytes,7,opt,name=phone" json:"phone,omitempty"`
	PhotoListUrl        *string  `protobuf:"bytes,8,opt,name=photoListUrl" json:"photoListUrl,omitempty"`
	DetailUrl           *string  `protobuf:"bytes,9,opt,name=detailUrl" json:"detailUrl,omitempty"`
	OpenTime            *string  `protobuf:"bytes,10,opt,name=openTime" json:"openTime,omitempty"`
	Popular             *float32 `protobuf:"fixed32,11,opt,name=popular" json:"popular,omitempty"`
	Quality             *int32   `protobuf:"varint,12,opt,name=quality" json:"quality,omitempty"`
	Status              *string  `protobuf:"bytes,13,opt,name=status" json:"status,omitempty"`
	RecommendCategories []string `protobuf:"bytes,14,rep,name=recommendCategories" json:"recommendCategories,omitempty"`
	PriceStr            *string  `protobuf:"bytes,101,opt,name=priceStr" json:"priceStr,omitempty"`
}

func (x *PoiIntro) Reset() {
	*x = PoiIntro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiIntro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiIntro) ProtoMessage() {}

func (x *PoiIntro) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiIntro.ProtoReflect.Descriptor instead.
func (*PoiIntro) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{367}
}

func (x *PoiIntro) GetBranchName() string {
	if x != nil && x.BranchName != nil {
		return *x.BranchName
	}
	return ""
}

func (x *PoiIntro) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *PoiIntro) GetIntroduction() string {
	if x != nil && x.Introduction != nil {
		return *x.Introduction
	}
	return ""
}

func (x *PoiIntro) GetRecommend() string {
	if x != nil && x.Recommend != nil {
		return *x.Recommend
	}
	return ""
}

func (x *PoiIntro) GetSpecial() string {
	if x != nil && x.Special != nil {
		return *x.Special
	}
	return ""
}

func (x *PoiIntro) GetTraffic() string {
	if x != nil && x.Traffic != nil {
		return *x.Traffic
	}
	return ""
}

func (x *PoiIntro) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *PoiIntro) GetPhotoListUrl() string {
	if x != nil && x.PhotoListUrl != nil {
		return *x.PhotoListUrl
	}
	return ""
}

func (x *PoiIntro) GetDetailUrl() string {
	if x != nil && x.DetailUrl != nil {
		return *x.DetailUrl
	}
	return ""
}

func (x *PoiIntro) GetOpenTime() string {
	if x != nil && x.OpenTime != nil {
		return *x.OpenTime
	}
	return ""
}

func (x *PoiIntro) GetPopular() float32 {
	if x != nil && x.Popular != nil {
		return *x.Popular
	}
	return 0
}

func (x *PoiIntro) GetQuality() int32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *PoiIntro) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *PoiIntro) GetRecommendCategories() []string {
	if x != nil {
		return x.RecommendCategories
	}
	return nil
}

func (x *PoiIntro) GetPriceStr() string {
	if x != nil && x.PriceStr != nil {
		return *x.PriceStr
	}
	return ""
}

type PoiRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate       *float32 `protobuf:"fixed32,1,opt,name=rate" json:"rate,omitempty"`
	Taste      *float32 `protobuf:"fixed32,2,opt,name=taste" json:"taste,omitempty"`
	Service    *float32 `protobuf:"fixed32,3,opt,name=service" json:"service,omitempty"`
	Decoration *float32 `protobuf:"fixed32,4,opt,name=decoration" json:"decoration,omitempty"`
}

func (x *PoiRate) Reset() {
	*x = PoiRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiRate) ProtoMessage() {}

func (x *PoiRate) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiRate.ProtoReflect.Descriptor instead.
func (*PoiRate) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{368}
}

func (x *PoiRate) GetRate() float32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *PoiRate) GetTaste() float32 {
	if x != nil && x.Taste != nil {
		return *x.Taste
	}
	return 0
}

func (x *PoiRate) GetService() float32 {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return 0
}

func (x *PoiRate) GetDecoration() float32 {
	if x != nil && x.Decoration != nil {
		return *x.Decoration
	}
	return 0
}

type PoiPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    *string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Url      *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	ThumbUrl *string `protobuf:"bytes,3,opt,name=thumbUrl" json:"thumbUrl,omitempty"`
}

func (x *PoiPhoto) Reset() {
	*x = PoiPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiPhoto) ProtoMessage() {}

func (x *PoiPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiPhoto.ProtoReflect.Descriptor instead.
func (*PoiPhoto) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{369}
}

func (x *PoiPhoto) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PoiPhoto) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PoiPhoto) GetThumbUrl() string {
	if x != nil && x.ThumbUrl != nil {
		return *x.ThumbUrl
	}
	return ""
}

type PoiDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        *string  `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Description  *string  `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	CurrentPrice *float32 `protobuf:"fixed32,3,opt,name=currentPrice" json:"currentPrice,omitempty"`
	ListPrice    *float32 `protobuf:"fixed32,4,opt,name=listPrice" json:"listPrice,omitempty"`
	Url          *string  `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	PhotoUrl     *string  `protobuf:"bytes,6,opt,name=photoUrl" json:"photoUrl,omitempty"`
}

func (x *PoiDeal) Reset() {
	*x = PoiDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiDeal) ProtoMessage() {}

func (x *PoiDeal) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiDeal.ProtoReflect.Descriptor instead.
func (*PoiDeal) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{370}
}

func (x *PoiDeal) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PoiDeal) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PoiDeal) GetCurrentPrice() float32 {
	if x != nil && x.CurrentPrice != nil {
		return *x.CurrentPrice
	}
	return 0
}

func (x *PoiDeal) GetListPrice() float32 {
	if x != nil && x.ListPrice != nil {
		return *x.ListPrice
	}
	return 0
}

func (x *PoiDeal) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PoiDeal) GetPhotoUrl() string {
	if x != nil && x.PhotoUrl != nil {
		return *x.PhotoUrl
	}
	return ""
}

type PoiCoupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     *string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Content   *string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	StartTime *string `protobuf:"bytes,3,opt,name=startTime" json:"startTime,omitempty"`
	EndTime   *string `protobuf:"bytes,4,opt,name=endTime" json:"endTime,omitempty"`
	Rate      *string `protobuf:"bytes,6,opt,name=rate" json:"rate,omitempty"`
	Remark    *string `protobuf:"bytes,7,opt,name=remark" json:"remark,omitempty"`
	Url       *string `protobuf:"bytes,8,opt,name=url" json:"url,omitempty"`
	PhotoUrl  *string `protobuf:"bytes,9,opt,name=photoUrl" json:"photoUrl,omitempty"`
}

func (x *PoiCoupon) Reset() {
	*x = PoiCoupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiCoupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiCoupon) ProtoMessage() {}

func (x *PoiCoupon) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiCoupon.ProtoReflect.Descriptor instead.
func (*PoiCoupon) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{371}
}

func (x *PoiCoupon) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PoiCoupon) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *PoiCoupon) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *PoiCoupon) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *PoiCoupon) GetRate() string {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return ""
}

func (x *PoiCoupon) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *PoiCoupon) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PoiCoupon) GetPhotoUrl() string {
	if x != nil && x.PhotoUrl != nil {
		return *x.PhotoUrl
	}
	return ""
}

type PoiReviewContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User          *string     `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Text          *string     `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	CreateTime    *uint32     `protobuf:"varint,3,opt,name=createTime" json:"createTime,omitempty"`
	Photos        []*PoiPhoto `protobuf:"bytes,4,rep,name=photos" json:"photos,omitempty"`
	UserFace      *string     `protobuf:"bytes,5,opt,name=userFace" json:"userFace,omitempty"`
	GoodCount     *int32      `protobuf:"varint,6,opt,name=goodCount" json:"goodCount,omitempty"`
	IsHighQuality *int32      `protobuf:"varint,7,opt,name=isHighQuality" json:"isHighQuality,omitempty"`
}

func (x *PoiReviewContent) Reset() {
	*x = PoiReviewContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiReviewContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiReviewContent) ProtoMessage() {}

func (x *PoiReviewContent) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiReviewContent.ProtoReflect.Descriptor instead.
func (*PoiReviewContent) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{372}
}

func (x *PoiReviewContent) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *PoiReviewContent) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *PoiReviewContent) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *PoiReviewContent) GetPhotos() []*PoiPhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *PoiReviewContent) GetUserFace() string {
	if x != nil && x.UserFace != nil {
		return *x.UserFace
	}
	return ""
}

func (x *PoiReviewContent) GetGoodCount() int32 {
	if x != nil && x.GoodCount != nil {
		return *x.GoodCount
	}
	return 0
}

func (x *PoiReviewContent) GetIsHighQuality() int32 {
	if x != nil && x.IsHighQuality != nil {
		return *x.IsHighQuality
	}
	return 0
}

type PoiReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Category *string             `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
	Url      *string             `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Count    *uint32             `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	PhotoUrl *string             `protobuf:"bytes,5,opt,name=photoUrl" json:"photoUrl,omitempty"`
	Content  []*PoiReviewContent `protobuf:"bytes,6,rep,name=content" json:"content,omitempty"`
}

func (x *PoiReview) Reset() {
	*x = PoiReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiReview) ProtoMessage() {}

func (x *PoiReview) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiReview.ProtoReflect.Descriptor instead.
func (*PoiReview) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{373}
}

func (x *PoiReview) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PoiReview) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *PoiReview) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PoiReview) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *PoiReview) GetPhotoUrl() string {
	if x != nil && x.PhotoUrl != nil {
		return *x.PhotoUrl
	}
	return ""
}

func (x *PoiReview) GetContent() []*PoiReviewContent {
	if x != nil {
		return x.Content
	}
	return nil
}

type PoiBusinessTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Days         *string  `protobuf:"bytes,1,opt,name=days" json:"days,omitempty"`
	RenderedTime []string `protobuf:"bytes,2,rep,name=renderedTime" json:"renderedTime,omitempty"`
}

func (x *PoiBusinessTime) Reset() {
	*x = PoiBusinessTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiBusinessTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiBusinessTime) ProtoMessage() {}

func (x *PoiBusinessTime) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiBusinessTime.ProtoReflect.Descriptor instead.
func (*PoiBusinessTime) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{374}
}

func (x *PoiBusinessTime) GetDays() string {
	if x != nil && x.Days != nil {
		return *x.Days
	}
	return ""
}

func (x *PoiBusinessTime) GetRenderedTime() []string {
	if x != nil {
		return x.RenderedTime
	}
	return nil
}

type PoiFormatBusinessTime_Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeBegin *string `protobuf:"bytes,1,opt,name=timeBegin" json:"timeBegin,omitempty"`
	TimeEnd   *string `protobuf:"bytes,2,opt,name=timeEnd" json:"timeEnd,omitempty"`
}

func (x *PoiFormatBusinessTime_Time) Reset() {
	*x = PoiFormatBusinessTime_Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiFormatBusinessTime_Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiFormatBusinessTime_Time) ProtoMessage() {}

func (x *PoiFormatBusinessTime_Time) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiFormatBusinessTime_Time.ProtoReflect.Descriptor instead.
func (*PoiFormatBusinessTime_Time) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{375}
}

func (x *PoiFormatBusinessTime_Time) GetTimeBegin() string {
	if x != nil && x.TimeBegin != nil {
		return *x.TimeBegin
	}
	return ""
}

func (x *PoiFormatBusinessTime_Time) GetTimeEnd() string {
	if x != nil && x.TimeEnd != nil {
		return *x.TimeEnd
	}
	return ""
}

type PoiFormatBusinessTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateBegin *string                       `protobuf:"bytes,1,opt,name=dateBegin" json:"dateBegin,omitempty"`
	DateEnd   *string                       `protobuf:"bytes,2,opt,name=dateEnd" json:"dateEnd,omitempty"`
	Times     []*PoiFormatBusinessTime_Time `protobuf:"bytes,3,rep,name=times" json:"times,omitempty"`
	WeekDays  []int32                       `protobuf:"varint,4,rep,name=weekDays" json:"weekDays,omitempty"`
	Months    []int32                       `protobuf:"varint,5,rep,name=months" json:"months,omitempty"`
	Special   *string                       `protobuf:"bytes,6,opt,name=special" json:"special,omitempty"`
	IsDefault *bool                         `protobuf:"varint,7,opt,name=isDefault" json:"isDefault,omitempty"`
}

func (x *PoiFormatBusinessTime) Reset() {
	*x = PoiFormatBusinessTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiFormatBusinessTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiFormatBusinessTime) ProtoMessage() {}

func (x *PoiFormatBusinessTime) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiFormatBusinessTime.ProtoReflect.Descriptor instead.
func (*PoiFormatBusinessTime) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{376}
}

func (x *PoiFormatBusinessTime) GetDateBegin() string {
	if x != nil && x.DateBegin != nil {
		return *x.DateBegin
	}
	return ""
}

func (x *PoiFormatBusinessTime) GetDateEnd() string {
	if x != nil && x.DateEnd != nil {
		return *x.DateEnd
	}
	return ""
}

func (x *PoiFormatBusinessTime) GetTimes() []*PoiFormatBusinessTime_Time {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *PoiFormatBusinessTime) GetWeekDays() []int32 {
	if x != nil {
		return x.WeekDays
	}
	return nil
}

func (x *PoiFormatBusinessTime) GetMonths() []int32 {
	if x != nil {
		return x.Months
	}
	return nil
}

func (x *PoiFormatBusinessTime) GetSpecial() string {
	if x != nil && x.Special != nil {
		return *x.Special
	}
	return ""
}

func (x *PoiFormatBusinessTime) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

type PoiBusinessHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour             *string                  `protobuf:"bytes,1,opt,name=hour" json:"hour,omitempty"`
	Times            []*PoiBusinessTime       `protobuf:"bytes,2,rep,name=times" json:"times,omitempty"`
	FormatOpenTimes  []*PoiFormatBusinessTime `protobuf:"bytes,3,rep,name=formatOpenTimes" json:"formatOpenTimes,omitempty"`
	FormatCloseTimes []*PoiFormatBusinessTime `protobuf:"bytes,4,rep,name=formatCloseTimes" json:"formatCloseTimes,omitempty"`
}

func (x *PoiBusinessHour) Reset() {
	*x = PoiBusinessHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiBusinessHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiBusinessHour) ProtoMessage() {}

func (x *PoiBusinessHour) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiBusinessHour.ProtoReflect.Descriptor instead.
func (*PoiBusinessHour) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{377}
}

func (x *PoiBusinessHour) GetHour() string {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return ""
}

func (x *PoiBusinessHour) GetTimes() []*PoiBusinessTime {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *PoiBusinessHour) GetFormatOpenTimes() []*PoiFormatBusinessTime {
	if x != nil {
		return x.FormatOpenTimes
	}
	return nil
}

func (x *PoiBusinessHour) GetFormatCloseTimes() []*PoiFormatBusinessTime {
	if x != nil {
		return x.FormatCloseTimes
	}
	return nil
}

type PoiReservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    *string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Url      *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Bookable *int32  `protobuf:"varint,3,opt,name=bookable" json:"bookable,omitempty"`
}

func (x *PoiReservation) Reset() {
	*x = PoiReservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiReservation) ProtoMessage() {}

func (x *PoiReservation) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiReservation.ProtoReflect.Descriptor instead.
func (*PoiReservation) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{378}
}

func (x *PoiReservation) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PoiReservation) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PoiReservation) GetBookable() int32 {
	if x != nil && x.Bookable != nil {
		return *x.Bookable
	}
	return 0
}

type PoiTakeAway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        *string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Url          *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	TakeAwayable *int32  `protobuf:"varint,3,opt,name=takeAwayable" json:"takeAwayable,omitempty"`
	LongTag      *string `protobuf:"bytes,4,opt,name=longTag" json:"longTag,omitempty"`
	Tag          *string `protobuf:"bytes,5,opt,name=tag" json:"tag,omitempty"`
}

func (x *PoiTakeAway) Reset() {
	*x = PoiTakeAway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiTakeAway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiTakeAway) ProtoMessage() {}

func (x *PoiTakeAway) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiTakeAway.ProtoReflect.Descriptor instead.
func (*PoiTakeAway) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{379}
}

func (x *PoiTakeAway) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PoiTakeAway) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PoiTakeAway) GetTakeAwayable() int32 {
	if x != nil && x.TakeAwayable != nil {
		return *x.TakeAwayable
	}
	return 0
}

func (x *PoiTakeAway) GetLongTag() string {
	if x != nil && x.LongTag != nil {
		return *x.LongTag
	}
	return ""
}

func (x *PoiTakeAway) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

type PoiAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppUrl *string `protobuf:"bytes,1,opt,name=appUrl" json:"appUrl,omitempty"`
}

func (x *PoiAppInfo) Reset() {
	*x = PoiAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiAppInfo) ProtoMessage() {}

func (x *PoiAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiAppInfo.ProtoReflect.Descriptor instead.
func (*PoiAppInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{380}
}

func (x *PoiAppInfo) GetAppUrl() string {
	if x != nil && x.AppUrl != nil {
		return *x.AppUrl
	}
	return ""
}

type PoiSourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Uid    *string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
}

func (x *PoiSourceInfo) Reset() {
	*x = PoiSourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiSourceInfo) ProtoMessage() {}

func (x *PoiSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiSourceInfo.ProtoReflect.Descriptor instead.
func (*PoiSourceInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{381}
}

func (x *PoiSourceInfo) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *PoiSourceInfo) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

type PoiRecommendMenuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PhotoUrl  *string  `protobuf:"bytes,2,opt,name=photoUrl" json:"photoUrl,omitempty"`
	GoodCount *int32   `protobuf:"varint,3,opt,name=goodCount" json:"goodCount,omitempty"`
	Price     *float32 `protobuf:"fixed32,4,opt,name=price" json:"price,omitempty"`
}

func (x *PoiRecommendMenuInfo) Reset() {
	*x = PoiRecommendMenuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiRecommendMenuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiRecommendMenuInfo) ProtoMessage() {}

func (x *PoiRecommendMenuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiRecommendMenuInfo.ProtoReflect.Descriptor instead.
func (*PoiRecommendMenuInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{382}
}

func (x *PoiRecommendMenuInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PoiRecommendMenuInfo) GetPhotoUrl() string {
	if x != nil && x.PhotoUrl != nil {
		return *x.PhotoUrl
	}
	return ""
}

func (x *PoiRecommendMenuInfo) GetGoodCount() int32 {
	if x != nil && x.GoodCount != nil {
		return *x.GoodCount
	}
	return 0
}

func (x *PoiRecommendMenuInfo) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

type PoiQueueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queueable *int32  `protobuf:"varint,1,opt,name=queueable" json:"queueable,omitempty"`
	Url       *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (x *PoiQueueInfo) Reset() {
	*x = PoiQueueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiQueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiQueueInfo) ProtoMessage() {}

func (x *PoiQueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiQueueInfo.ProtoReflect.Descriptor instead.
func (*PoiQueueInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{383}
}

func (x *PoiQueueInfo) GetQueueable() int32 {
	if x != nil && x.Queueable != nil {
		return *x.Queueable
	}
	return 0
}

func (x *PoiQueueInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type PoiTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Count *int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Type  *int32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (x *PoiTagInfo) Reset() {
	*x = PoiTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiTagInfo) ProtoMessage() {}

func (x *PoiTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiTagInfo.ProtoReflect.Descriptor instead.
func (*PoiTagInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{384}
}

func (x *PoiTagInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PoiTagInfo) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *PoiTagInfo) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type PoiDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brief          *PoiBrief               `protobuf:"bytes,1,opt,name=brief" json:"brief,omitempty"`
	Intro          *PoiIntro               `protobuf:"bytes,2,opt,name=intro" json:"intro,omitempty"`
	Rate           *PoiRate                `protobuf:"bytes,3,opt,name=rate" json:"rate,omitempty"`
	Photos         []*PoiPhoto             `protobuf:"bytes,4,rep,name=photos" json:"photos,omitempty"`
	Deals          []*PoiDeal              `protobuf:"bytes,5,rep,name=deals" json:"deals,omitempty"`
	Coupons        []*PoiCoupon            `protobuf:"bytes,6,rep,name=coupons" json:"coupons,omitempty"`
	Review         *PoiReview              `protobuf:"bytes,7,opt,name=review" json:"review,omitempty"`
	Hour           *PoiBusinessHour        `protobuf:"bytes,8,opt,name=hour" json:"hour,omitempty"`
	Reservation    *PoiReservation         `protobuf:"bytes,9,opt,name=reservation" json:"reservation,omitempty"`
	TakeAway       *PoiTakeAway            `protobuf:"bytes,10,opt,name=takeAway" json:"takeAway,omitempty"`
	AppInfo        *PoiAppInfo             `protobuf:"bytes,11,opt,name=appInfo" json:"appInfo,omitempty"`
	SourceInfo     []*PoiSourceInfo        `protobuf:"bytes,12,rep,name=sourceInfo" json:"sourceInfo,omitempty"`
	HeadPhoto      *PoiPhoto               `protobuf:"bytes,13,opt,name=headPhoto" json:"headPhoto,omitempty"`
	RecommendMenus []*PoiRecommendMenuInfo `protobuf:"bytes,14,rep,name=recommendMenus" json:"recommendMenus,omitempty"`
	Queue          *PoiQueueInfo           `protobuf:"bytes,15,opt,name=queue" json:"queue,omitempty"`
	Tags           []*PoiTagInfo           `protobuf:"bytes,16,rep,name=tags" json:"tags,omitempty"`
}

func (x *PoiDetailInfo) Reset() {
	*x = PoiDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoiDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoiDetailInfo) ProtoMessage() {}

func (x *PoiDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoiDetailInfo.ProtoReflect.Descriptor instead.
func (*PoiDetailInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{385}
}

func (x *PoiDetailInfo) GetBrief() *PoiBrief {
	if x != nil {
		return x.Brief
	}
	return nil
}

func (x *PoiDetailInfo) GetIntro() *PoiIntro {
	if x != nil {
		return x.Intro
	}
	return nil
}

func (x *PoiDetailInfo) GetRate() *PoiRate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *PoiDetailInfo) GetPhotos() []*PoiPhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *PoiDetailInfo) GetDeals() []*PoiDeal {
	if x != nil {
		return x.Deals
	}
	return nil
}

func (x *PoiDetailInfo) GetCoupons() []*PoiCoupon {
	if x != nil {
		return x.Coupons
	}
	return nil
}

func (x *PoiDetailInfo) GetReview() *PoiReview {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *PoiDetailInfo) GetHour() *PoiBusinessHour {
	if x != nil {
		return x.Hour
	}
	return nil
}

func (x *PoiDetailInfo) GetReservation() *PoiReservation {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *PoiDetailInfo) GetTakeAway() *PoiTakeAway {
	if x != nil {
		return x.TakeAway
	}
	return nil
}

func (x *PoiDetailInfo) GetAppInfo() *PoiAppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *PoiDetailInfo) GetSourceInfo() []*PoiSourceInfo {
	if x != nil {
		return x.SourceInfo
	}
	return nil
}

func (x *PoiDetailInfo) GetHeadPhoto() *PoiPhoto {
	if x != nil {
		return x.HeadPhoto
	}
	return nil
}

func (x *PoiDetailInfo) GetRecommendMenus() []*PoiRecommendMenuInfo {
	if x != nil {
		return x.RecommendMenus
	}
	return nil
}

func (x *PoiDetailInfo) GetQueue() *PoiQueueInfo {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *PoiDetailInfo) GetTags() []*PoiTagInfo {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SnsPoiDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoiDetailInfo *PoiDetailInfo `protobuf:"bytes,1,opt,name=poiDetailInfo" json:"poiDetailInfo,omitempty"`
	SourceFlag    *uint32        `protobuf:"varint,2,opt,name=sourceFlag" json:"sourceFlag,omitempty"`
	Idcredirect   *int32         `protobuf:"varint,3,opt,name=idcredirect" json:"idcredirect,omitempty"`
	RealTimeData  *uint32        `protobuf:"varint,4,opt,name=realTimeData" json:"realTimeData,omitempty"`
	Scale         *uint32        `protobuf:"varint,5,opt,name=scale" json:"scale,omitempty"`
}

func (x *SnsPoiDetail) Reset() {
	*x = SnsPoiDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsPoiDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsPoiDetail) ProtoMessage() {}

func (x *SnsPoiDetail) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsPoiDetail.ProtoReflect.Descriptor instead.
func (*SnsPoiDetail) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{386}
}

func (x *SnsPoiDetail) GetPoiDetailInfo() *PoiDetailInfo {
	if x != nil {
		return x.PoiDetailInfo
	}
	return nil
}

func (x *SnsPoiDetail) GetSourceFlag() uint32 {
	if x != nil && x.SourceFlag != nil {
		return *x.SourceFlag
	}
	return 0
}

func (x *SnsPoiDetail) GetIdcredirect() int32 {
	if x != nil && x.Idcredirect != nil {
		return *x.Idcredirect
	}
	return 0
}

func (x *SnsPoiDetail) GetRealTimeData() uint32 {
	if x != nil && x.RealTimeData != nil {
		return *x.RealTimeData
	}
	return 0
}

func (x *SnsPoiDetail) GetScale() uint32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

type FinderUserPagePoi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnsPoiDetail []*SnsPoiDetail `protobuf:"bytes,1,rep,name=snsPoiDetail" json:"snsPoiDetail,omitempty"`
}

func (x *FinderUserPagePoi) Reset() {
	*x = FinderUserPagePoi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPagePoi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPagePoi) ProtoMessage() {}

func (x *FinderUserPagePoi) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPagePoi.ProtoReflect.Descriptor instead.
func (*FinderUserPagePoi) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{387}
}

func (x *FinderUserPagePoi) GetSnsPoiDetail() []*SnsPoiDetail {
	if x != nil {
		return x.SnsPoiDetail
	}
	return nil
}

type FinderJustWatchControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowJustWatch *bool `protobuf:"varint,1,opt,name=showJustWatch" json:"showJustWatch,omitempty"`
	AllowPrefetch *bool `protobuf:"varint,2,opt,name=allowPrefetch" json:"allowPrefetch,omitempty"`
}

func (x *FinderJustWatchControl) Reset() {
	*x = FinderJustWatchControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJustWatchControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJustWatchControl) ProtoMessage() {}

func (x *FinderJustWatchControl) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJustWatchControl.ProtoReflect.Descriptor instead.
func (*FinderJustWatchControl) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{388}
}

func (x *FinderJustWatchControl) GetShowJustWatch() bool {
	if x != nil && x.ShowJustWatch != nil {
		return *x.ShowJustWatch
	}
	return false
}

func (x *FinderJustWatchControl) GetAllowPrefetch() bool {
	if x != nil && x.AllowPrefetch != nil {
		return *x.AllowPrefetch
	}
	return false
}

type FinderUserPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse         *BaseResponse             `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Object               []*FinderObject           `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	FirstPageMd5         *string                   `protobuf:"bytes,3,opt,name=firstPageMd5" json:"firstPageMd5,omitempty"`
	FinderUserInfo       *FinderUserInfo           `protobuf:"bytes,4,opt,name=finderUserInfo" json:"finderUserInfo,omitempty"`
	Contact              *FinderContact            `protobuf:"bytes,5,opt,name=contact" json:"contact,omitempty"`
	FeedsCount           *uint32                   `protobuf:"varint,6,opt,name=feedsCount" json:"feedsCount,omitempty"`
	ContinueFlag         *uint32                   `protobuf:"varint,7,opt,name=continueFlag" json:"continueFlag,omitempty"`
	VerifyInfo           *FinderNicknameVerifyInfo `protobuf:"bytes,8,opt,name=verifyInfo" json:"verifyInfo,omitempty"`
	FansCount            *uint32                   `protobuf:"varint,9,opt,name=fansCount" json:"fansCount,omitempty"`
	LastBuffer           []byte                    `protobuf:"bytes,10,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	FriendFollowCount    *uint32                   `protobuf:"varint,11,opt,name=friendFollowCount" json:"friendFollowCount,omitempty"`
	UserTags             []string                  `protobuf:"bytes,12,rep,name=userTags" json:"userTags,omitempty"`
	OriginalEntranceFlag *uint32                   `protobuf:"varint,13,opt,name=originalEntranceFlag" json:"originalEntranceFlag,omitempty"`
	EntranceInfo         *OriginalEntranceInfo     `protobuf:"bytes,14,opt,name=entranceInfo" json:"entranceInfo,omitempty"`
	PreloadInfo          *FinderPreloadInfo        `protobuf:"bytes,15,opt,name=preloadInfo" json:"preloadInfo,omitempty"`
	LiveObjects          []*FinderObject           `protobuf:"bytes,16,rep,name=liveObjects" json:"liveObjects,omitempty"`
	PrivateLock          *uint32                   `protobuf:"varint,17,opt,name=privateLock" json:"privateLock,omitempty"`
	WxaShopInfo          *FinderWxAppInfo          `protobuf:"bytes,18,opt,name=wxaShopInfo" json:"wxaShopInfo,omitempty"`
	LiveNoticeInfo       *FinderLiveNoticeInfo     `protobuf:"bytes,19,opt,name=liveNoticeInfo" json:"liveNoticeInfo,omitempty"`
	UsualTopics          []*FinderTopicInfo        `protobuf:"bytes,20,rep,name=usualTopics" json:"usualTopics,omitempty"`
	LiveDurationHours    *uint32                   `protobuf:"varint,21,opt,name=liveDurationHours" json:"liveDurationHours,omitempty"`
	LogoutLock           *uint32                   `protobuf:"varint,22,opt,name=logoutLock" json:"logoutLock,omitempty"`
	AcctDetailEntrance   *string                   `protobuf:"bytes,23,opt,name=acctDetailEntrance" json:"acctDetailEntrance,omitempty"`
	LoggingoutWording    *string                   `protobuf:"bytes,24,opt,name=loggingoutWording" json:"loggingoutWording,omitempty"`
	PoiInfo              *FinderUserPagePoi        `protobuf:"bytes,25,opt,name=poiInfo" json:"poiInfo,omitempty"`
	LogoutUrl            *string                   `protobuf:"bytes,26,opt,name=logoutUrl" json:"logoutUrl,omitempty"`
	BizInfo              *FinderBizInfo            `protobuf:"bytes,27,opt,name=bizInfo" json:"bizInfo,omitempty"`
	EventInfoList        []*FinderEventInfo        `protobuf:"bytes,28,rep,name=eventInfoList" json:"eventInfoList,omitempty"`
	JustWatch            *FinderJustWatchControl   `protobuf:"bytes,29,opt,name=justWatch" json:"justWatch,omitempty"`
	JumpInfo             []*FinderJumpInfo         `protobuf:"bytes,31,rep,name=jumpInfo" json:"jumpInfo,omitempty"`
}

func (x *FinderUserPageResponse) Reset() {
	*x = FinderUserPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPageResponse) ProtoMessage() {}

func (x *FinderUserPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPageResponse.ProtoReflect.Descriptor instead.
func (*FinderUserPageResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{389}
}

func (x *FinderUserPageResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderUserPageResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderUserPageResponse) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *FinderUserPageResponse) GetFinderUserInfo() *FinderUserInfo {
	if x != nil {
		return x.FinderUserInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderUserPageResponse) GetFeedsCount() uint32 {
	if x != nil && x.FeedsCount != nil {
		return *x.FeedsCount
	}
	return 0
}

func (x *FinderUserPageResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderUserPageResponse) GetVerifyInfo() *FinderNicknameVerifyInfo {
	if x != nil {
		return x.VerifyInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetFansCount() uint32 {
	if x != nil && x.FansCount != nil {
		return *x.FansCount
	}
	return 0
}

func (x *FinderUserPageResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderUserPageResponse) GetFriendFollowCount() uint32 {
	if x != nil && x.FriendFollowCount != nil {
		return *x.FriendFollowCount
	}
	return 0
}

func (x *FinderUserPageResponse) GetUserTags() []string {
	if x != nil {
		return x.UserTags
	}
	return nil
}

func (x *FinderUserPageResponse) GetOriginalEntranceFlag() uint32 {
	if x != nil && x.OriginalEntranceFlag != nil {
		return *x.OriginalEntranceFlag
	}
	return 0
}

func (x *FinderUserPageResponse) GetEntranceInfo() *OriginalEntranceInfo {
	if x != nil {
		return x.EntranceInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetPreloadInfo() *FinderPreloadInfo {
	if x != nil {
		return x.PreloadInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetLiveObjects() []*FinderObject {
	if x != nil {
		return x.LiveObjects
	}
	return nil
}

func (x *FinderUserPageResponse) GetPrivateLock() uint32 {
	if x != nil && x.PrivateLock != nil {
		return *x.PrivateLock
	}
	return 0
}

func (x *FinderUserPageResponse) GetWxaShopInfo() *FinderWxAppInfo {
	if x != nil {
		return x.WxaShopInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetLiveNoticeInfo() *FinderLiveNoticeInfo {
	if x != nil {
		return x.LiveNoticeInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetUsualTopics() []*FinderTopicInfo {
	if x != nil {
		return x.UsualTopics
	}
	return nil
}

func (x *FinderUserPageResponse) GetLiveDurationHours() uint32 {
	if x != nil && x.LiveDurationHours != nil {
		return *x.LiveDurationHours
	}
	return 0
}

func (x *FinderUserPageResponse) GetLogoutLock() uint32 {
	if x != nil && x.LogoutLock != nil {
		return *x.LogoutLock
	}
	return 0
}

func (x *FinderUserPageResponse) GetAcctDetailEntrance() string {
	if x != nil && x.AcctDetailEntrance != nil {
		return *x.AcctDetailEntrance
	}
	return ""
}

func (x *FinderUserPageResponse) GetLoggingoutWording() string {
	if x != nil && x.LoggingoutWording != nil {
		return *x.LoggingoutWording
	}
	return ""
}

func (x *FinderUserPageResponse) GetPoiInfo() *FinderUserPagePoi {
	if x != nil {
		return x.PoiInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetLogoutUrl() string {
	if x != nil && x.LogoutUrl != nil {
		return *x.LogoutUrl
	}
	return ""
}

func (x *FinderUserPageResponse) GetBizInfo() *FinderBizInfo {
	if x != nil {
		return x.BizInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetEventInfoList() []*FinderEventInfo {
	if x != nil {
		return x.EventInfoList
	}
	return nil
}

func (x *FinderUserPageResponse) GetJustWatch() *FinderJustWatchControl {
	if x != nil {
		return x.JustWatch
	}
	return nil
}

func (x *FinderUserPageResponse) GetJumpInfo() []*FinderJumpInfo {
	if x != nil {
		return x.JumpInfo
	}
	return nil
}

type FinderGetMsgSessionIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest        *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	MyAccountType      *uint32            `protobuf:"varint,2,opt,name=myAccountType" json:"myAccountType,omitempty"`
	ToUsername         *string            `protobuf:"bytes,3,opt,name=toUsername" json:"toUsername,omitempty"`
	FinderBasereq      *FinderBaseRequest `protobuf:"bytes,4,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	ToFansId           *string            `protobuf:"bytes,5,opt,name=toFansId" json:"toFansId,omitempty"`
	ToObjectId         *uint64            `protobuf:"varint,6,opt,name=toObjectId" json:"toObjectId,omitempty"`
	ToCommentId        *uint64            `protobuf:"varint,7,opt,name=toCommentId" json:"toCommentId,omitempty"`
	ToLotteryId        *string            `protobuf:"bytes,8,opt,name=toLotteryId" json:"toLotteryId,omitempty"`
	SourceType         *uint32            `protobuf:"varint,9,opt,name=sourceType" json:"sourceType,omitempty"`
	SupportAlias       *bool              `protobuf:"varint,10,opt,name=supportAlias" json:"supportAlias,omitempty"`
	ToLikeId           *uint64            `protobuf:"varint,11,opt,name=toLikeId" json:"toLikeId,omitempty"`
	LiveContactExtInfo []byte             `protobuf:"bytes,12,opt,name=liveContactExtInfo" json:"liveContactExtInfo,omitempty"`
	MyAccountUsername  *string            `protobuf:"bytes,13,opt,name=myAccountUsername" json:"myAccountUsername,omitempty"`
}

func (x *FinderGetMsgSessionIdRequest) Reset() {
	*x = FinderGetMsgSessionIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetMsgSessionIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetMsgSessionIdRequest) ProtoMessage() {}

func (x *FinderGetMsgSessionIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetMsgSessionIdRequest.ProtoReflect.Descriptor instead.
func (*FinderGetMsgSessionIdRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{390}
}

func (x *FinderGetMsgSessionIdRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetMsgSessionIdRequest) GetMyAccountType() uint32 {
	if x != nil && x.MyAccountType != nil {
		return *x.MyAccountType
	}
	return 0
}

func (x *FinderGetMsgSessionIdRequest) GetToUsername() string {
	if x != nil && x.ToUsername != nil {
		return *x.ToUsername
	}
	return ""
}

func (x *FinderGetMsgSessionIdRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetMsgSessionIdRequest) GetToFansId() string {
	if x != nil && x.ToFansId != nil {
		return *x.ToFansId
	}
	return ""
}

func (x *FinderGetMsgSessionIdRequest) GetToObjectId() uint64 {
	if x != nil && x.ToObjectId != nil {
		return *x.ToObjectId
	}
	return 0
}

func (x *FinderGetMsgSessionIdRequest) GetToCommentId() uint64 {
	if x != nil && x.ToCommentId != nil {
		return *x.ToCommentId
	}
	return 0
}

func (x *FinderGetMsgSessionIdRequest) GetToLotteryId() string {
	if x != nil && x.ToLotteryId != nil {
		return *x.ToLotteryId
	}
	return ""
}

func (x *FinderGetMsgSessionIdRequest) GetSourceType() uint32 {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return 0
}

func (x *FinderGetMsgSessionIdRequest) GetSupportAlias() bool {
	if x != nil && x.SupportAlias != nil {
		return *x.SupportAlias
	}
	return false
}

func (x *FinderGetMsgSessionIdRequest) GetToLikeId() uint64 {
	if x != nil && x.ToLikeId != nil {
		return *x.ToLikeId
	}
	return 0
}

func (x *FinderGetMsgSessionIdRequest) GetLiveContactExtInfo() []byte {
	if x != nil {
		return x.LiveContactExtInfo
	}
	return nil
}

func (x *FinderGetMsgSessionIdRequest) GetMyAccountUsername() string {
	if x != nil && x.MyAccountUsername != nil {
		return *x.MyAccountUsername
	}
	return ""
}

type FinderMsgSessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToUsername   *string `protobuf:"bytes,1,opt,name=toUsername" json:"toUsername,omitempty"`
	SessionId    *string `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
	RejectMsg    *uint32 `protobuf:"varint,3,opt,name=rejectMsg" json:"rejectMsg,omitempty"`
	EnableAction *uint32 `protobuf:"varint,4,opt,name=enableAction" json:"enableAction,omitempty"`
	MsgExtInfo   []byte  `protobuf:"bytes,5,opt,name=msgExtInfo" json:"msgExtInfo,omitempty"`
}

func (x *FinderMsgSessionInfo) Reset() {
	*x = FinderMsgSessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMsgSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMsgSessionInfo) ProtoMessage() {}

func (x *FinderMsgSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMsgSessionInfo.ProtoReflect.Descriptor instead.
func (*FinderMsgSessionInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{391}
}

func (x *FinderMsgSessionInfo) GetToUsername() string {
	if x != nil && x.ToUsername != nil {
		return *x.ToUsername
	}
	return ""
}

func (x *FinderMsgSessionInfo) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *FinderMsgSessionInfo) GetRejectMsg() uint32 {
	if x != nil && x.RejectMsg != nil {
		return *x.RejectMsg
	}
	return 0
}

func (x *FinderMsgSessionInfo) GetEnableAction() uint32 {
	if x != nil && x.EnableAction != nil {
		return *x.EnableAction
	}
	return 0
}

func (x *FinderMsgSessionInfo) GetMsgExtInfo() []byte {
	if x != nil {
		return x.MsgExtInfo
	}
	return nil
}

type FinderGetMsgSessionIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse         `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	SessionId    *string               `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
	EnableAction *uint32               `protobuf:"varint,3,opt,name=enableAction" json:"enableAction,omitempty"`
	ToUsername   *string               `protobuf:"bytes,4,opt,name=toUsername" json:"toUsername,omitempty"`
	SessionInfo  *FinderMsgSessionInfo `protobuf:"bytes,5,opt,name=sessionInfo" json:"sessionInfo,omitempty"`
}

func (x *FinderGetMsgSessionIdResponse) Reset() {
	*x = FinderGetMsgSessionIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetMsgSessionIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetMsgSessionIdResponse) ProtoMessage() {}

func (x *FinderGetMsgSessionIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetMsgSessionIdResponse.ProtoReflect.Descriptor instead.
func (*FinderGetMsgSessionIdResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{392}
}

func (x *FinderGetMsgSessionIdResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetMsgSessionIdResponse) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *FinderGetMsgSessionIdResponse) GetEnableAction() uint32 {
	if x != nil && x.EnableAction != nil {
		return *x.EnableAction
	}
	return 0
}

func (x *FinderGetMsgSessionIdResponse) GetToUsername() string {
	if x != nil && x.ToUsername != nil {
		return *x.ToUsername
	}
	return ""
}

func (x *FinderGetMsgSessionIdResponse) GetSessionInfo() *FinderMsgSessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

type FinderContactFansInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FansId       *string `protobuf:"bytes,1,opt,name=fansId" json:"fansId,omitempty"`
	FansUsername *string `protobuf:"bytes,2,opt,name=fansUsername" json:"fansUsername,omitempty"`
}

func (x *FinderContactFansInfo) Reset() {
	*x = FinderContactFansInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactFansInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactFansInfo) ProtoMessage() {}

func (x *FinderContactFansInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactFansInfo.ProtoReflect.Descriptor instead.
func (*FinderContactFansInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{393}
}

func (x *FinderContactFansInfo) GetFansId() string {
	if x != nil && x.FansId != nil {
		return *x.FansId
	}
	return ""
}

func (x *FinderContactFansInfo) GetFansUsername() string {
	if x != nil && x.FansUsername != nil {
		return *x.FansUsername
	}
	return ""
}

type FinderContactCommentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId        *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	CommentId       *uint64 `protobuf:"varint,2,opt,name=commentId" json:"commentId,omitempty"`
	CommentUsername *string `protobuf:"bytes,3,opt,name=commentUsername" json:"commentUsername,omitempty"`
}

func (x *FinderContactCommentInfo) Reset() {
	*x = FinderContactCommentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactCommentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactCommentInfo) ProtoMessage() {}

func (x *FinderContactCommentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactCommentInfo.ProtoReflect.Descriptor instead.
func (*FinderContactCommentInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{394}
}

func (x *FinderContactCommentInfo) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderContactCommentInfo) GetCommentId() uint64 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *FinderContactCommentInfo) GetCommentUsername() string {
	if x != nil && x.CommentUsername != nil {
		return *x.CommentUsername
	}
	return ""
}

type FinderContactCommentLikeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId     *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
	CommentId    *uint64 `protobuf:"varint,2,opt,name=commentId" json:"commentId,omitempty"`
	LikeId       *uint64 `protobuf:"varint,3,opt,name=likeId" json:"likeId,omitempty"`
	LikeUsername *string `protobuf:"bytes,4,opt,name=likeUsername" json:"likeUsername,omitempty"`
}

func (x *FinderContactCommentLikeInfo) Reset() {
	*x = FinderContactCommentLikeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactCommentLikeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactCommentLikeInfo) ProtoMessage() {}

func (x *FinderContactCommentLikeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactCommentLikeInfo.ProtoReflect.Descriptor instead.
func (*FinderContactCommentLikeInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{395}
}

func (x *FinderContactCommentLikeInfo) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderContactCommentLikeInfo) GetCommentId() uint64 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *FinderContactCommentLikeInfo) GetLikeId() uint64 {
	if x != nil && x.LikeId != nil {
		return *x.LikeId
	}
	return 0
}

func (x *FinderContactCommentLikeInfo) GetLikeUsername() string {
	if x != nil && x.LikeUsername != nil {
		return *x.LikeUsername
	}
	return ""
}

type FinderGetContactListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest            *BaseRequest                    `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq          *FinderBaseRequest              `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	FinderUsernameList     []string                        `protobuf:"bytes,3,rep,name=finderUsernameList" json:"finderUsernameList,omitempty"`
	ContactType            *uint32                         `protobuf:"varint,4,opt,name=contactType" json:"contactType,omitempty"`
	FinderUsername         *string                         `protobuf:"bytes,5,opt,name=finderUsername" json:"finderUsername,omitempty"`
	MsgContactList         []*FinderContactMsgInfo         `protobuf:"bytes,6,rep,name=msgContactList" json:"msgContactList,omitempty"`
	FansContactList        []*FinderContactFansInfo        `protobuf:"bytes,7,rep,name=fansContactList" json:"fansContactList,omitempty"`
	CommentContactList     []*FinderContactCommentInfo     `protobuf:"bytes,8,rep,name=commentContactList" json:"commentContactList,omitempty"`
	CommentLikeContactList []*FinderContactCommentLikeInfo `protobuf:"bytes,9,rep,name=commentLikeContactList" json:"commentLikeContactList,omitempty"`
	EnterType              *uint32                         `protobuf:"varint,10,opt,name=enterType" json:"enterType,omitempty"`
}

func (x *FinderGetContactListReq) Reset() {
	*x = FinderGetContactListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetContactListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetContactListReq) ProtoMessage() {}

func (x *FinderGetContactListReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetContactListReq.ProtoReflect.Descriptor instead.
func (*FinderGetContactListReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{396}
}

func (x *FinderGetContactListReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetContactListReq) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetContactListReq) GetFinderUsernameList() []string {
	if x != nil {
		return x.FinderUsernameList
	}
	return nil
}

func (x *FinderGetContactListReq) GetContactType() uint32 {
	if x != nil && x.ContactType != nil {
		return *x.ContactType
	}
	return 0
}

func (x *FinderGetContactListReq) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetContactListReq) GetMsgContactList() []*FinderContactMsgInfo {
	if x != nil {
		return x.MsgContactList
	}
	return nil
}

func (x *FinderGetContactListReq) GetFansContactList() []*FinderContactFansInfo {
	if x != nil {
		return x.FansContactList
	}
	return nil
}

func (x *FinderGetContactListReq) GetCommentContactList() []*FinderContactCommentInfo {
	if x != nil {
		return x.CommentContactList
	}
	return nil
}

func (x *FinderGetContactListReq) GetCommentLikeContactList() []*FinderContactCommentLikeInfo {
	if x != nil {
		return x.CommentLikeContactList
	}
	return nil
}

func (x *FinderGetContactListReq) GetEnterType() uint32 {
	if x != nil && x.EnterType != nil {
		return *x.EnterType
	}
	return 0
}

type FinderGetContactListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse      *BaseResponse    `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	ContactList       []*FinderContact `protobuf:"bytes,2,rep,name=contactList" json:"contactList,omitempty"`
	NextRetryInterval *uint32          `protobuf:"varint,3,opt,name=nextRetryInterval" json:"nextRetryInterval,omitempty"`
}

func (x *FinderGetContactListResp) Reset() {
	*x = FinderGetContactListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetContactListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetContactListResp) ProtoMessage() {}

func (x *FinderGetContactListResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetContactListResp.ProtoReflect.Descriptor instead.
func (*FinderGetContactListResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{397}
}

func (x *FinderGetContactListResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetContactListResp) GetContactList() []*FinderContact {
	if x != nil {
		return x.ContactList
	}
	return nil
}

func (x *FinderGetContactListResp) GetNextRetryInterval() uint32 {
	if x != nil && x.NextRetryInterval != nil {
		return *x.NextRetryInterval
	}
	return 0
}

type WxaRealTimeReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Content []byte  `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	Appid   *string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
}

func (x *WxaRealTimeReportInfo) Reset() {
	*x = WxaRealTimeReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaRealTimeReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaRealTimeReportInfo) ProtoMessage() {}

func (x *WxaRealTimeReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaRealTimeReportInfo.ProtoReflect.Descriptor instead.
func (*WxaRealTimeReportInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{398}
}

func (x *WxaRealTimeReportInfo) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WxaRealTimeReportInfo) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *WxaRealTimeReportInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

type RouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest             `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	Infos       []*WxaRealTimeReportInfo `protobuf:"bytes,2,rep,name=infos" json:"infos,omitempty"`
}

func (x *RouteRequest) Reset() {
	*x = RouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRequest) ProtoMessage() {}

func (x *RouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRequest.ProtoReflect.Descriptor instead.
func (*RouteRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{399}
}

func (x *RouteRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *RouteRequest) GetInfos() []*WxaRealTimeReportInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type RouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
}

func (x *RouteResponse) Reset() {
	*x = RouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteResponse) ProtoMessage() {}

func (x *RouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteResponse.ProtoReflect.Descriptor instead.
func (*RouteResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{400}
}

func (x *RouteResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type BypMsgText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content *string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (x *BypMsgText) Reset() {
	*x = BypMsgText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypMsgText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypMsgText) ProtoMessage() {}

func (x *BypMsgText) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypMsgText.ProtoReflect.Descriptor instead.
func (*BypMsgText) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{401}
}

func (x *BypMsgText) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

type BypMsgImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aeskey        *string `protobuf:"bytes,1,opt,name=aeskey" json:"aeskey,omitempty"`
	CryptVer      *uint32 `protobuf:"varint,2,opt,name=cryptVer" json:"cryptVer,omitempty"`
	Url           *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	HdSize        *uint32 `protobuf:"varint,4,opt,name=hdSize" json:"hdSize,omitempty"`
	MidSize       *uint32 `protobuf:"varint,5,opt,name=midSize" json:"midSize,omitempty"`
	ThumbSize     *uint32 `protobuf:"varint,6,opt,name=thumbSize" json:"thumbSize,omitempty"`
	ThumbHeight   *uint32 `protobuf:"varint,7,opt,name=thumbHeight" json:"thumbHeight,omitempty"`
	ThumbWidth    *uint32 `protobuf:"varint,8,opt,name=thumbWidth" json:"thumbWidth,omitempty"`
	Md5           *string `protobuf:"bytes,9,opt,name=md5" json:"md5,omitempty"`
	MidHeight     *uint32 `protobuf:"varint,10,opt,name=midHeight" json:"midHeight,omitempty"`
	MidWidth      *uint32 `protobuf:"varint,11,opt,name=midWidth" json:"midWidth,omitempty"`
	HdHeight      *uint32 `protobuf:"varint,12,opt,name=hdHeight" json:"hdHeight,omitempty"`
	HdWidth       *uint32 `protobuf:"varint,13,opt,name=hdWidth" json:"hdWidth,omitempty"`
	HevcHdSize    *uint32 `protobuf:"varint,14,opt,name=hevcHdSize" json:"hevcHdSize,omitempty"`
	HevcMidSize   *uint32 `protobuf:"varint,15,opt,name=hevcMidSize" json:"hevcMidSize,omitempty"`
	HevcThumbSize *uint32 `protobuf:"varint,16,opt,name=hevcThumbSize" json:"hevcThumbSize,omitempty"`
}

func (x *BypMsgImage) Reset() {
	*x = BypMsgImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypMsgImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypMsgImage) ProtoMessage() {}

func (x *BypMsgImage) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypMsgImage.ProtoReflect.Descriptor instead.
func (*BypMsgImage) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{402}
}

func (x *BypMsgImage) GetAeskey() string {
	if x != nil && x.Aeskey != nil {
		return *x.Aeskey
	}
	return ""
}

func (x *BypMsgImage) GetCryptVer() uint32 {
	if x != nil && x.CryptVer != nil {
		return *x.CryptVer
	}
	return 0
}

func (x *BypMsgImage) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *BypMsgImage) GetHdSize() uint32 {
	if x != nil && x.HdSize != nil {
		return *x.HdSize
	}
	return 0
}

func (x *BypMsgImage) GetMidSize() uint32 {
	if x != nil && x.MidSize != nil {
		return *x.MidSize
	}
	return 0
}

func (x *BypMsgImage) GetThumbSize() uint32 {
	if x != nil && x.ThumbSize != nil {
		return *x.ThumbSize
	}
	return 0
}

func (x *BypMsgImage) GetThumbHeight() uint32 {
	if x != nil && x.ThumbHeight != nil {
		return *x.ThumbHeight
	}
	return 0
}

func (x *BypMsgImage) GetThumbWidth() uint32 {
	if x != nil && x.ThumbWidth != nil {
		return *x.ThumbWidth
	}
	return 0
}

func (x *BypMsgImage) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *BypMsgImage) GetMidHeight() uint32 {
	if x != nil && x.MidHeight != nil {
		return *x.MidHeight
	}
	return 0
}

func (x *BypMsgImage) GetMidWidth() uint32 {
	if x != nil && x.MidWidth != nil {
		return *x.MidWidth
	}
	return 0
}

func (x *BypMsgImage) GetHdHeight() uint32 {
	if x != nil && x.HdHeight != nil {
		return *x.HdHeight
	}
	return 0
}

func (x *BypMsgImage) GetHdWidth() uint32 {
	if x != nil && x.HdWidth != nil {
		return *x.HdWidth
	}
	return 0
}

func (x *BypMsgImage) GetHevcHdSize() uint32 {
	if x != nil && x.HevcHdSize != nil {
		return *x.HevcHdSize
	}
	return 0
}

func (x *BypMsgImage) GetHevcMidSize() uint32 {
	if x != nil && x.HevcMidSize != nil {
		return *x.HevcMidSize
	}
	return 0
}

func (x *BypMsgImage) GetHevcThumbSize() uint32 {
	if x != nil && x.HevcThumbSize != nil {
		return *x.HevcThumbSize
	}
	return 0
}

type BypMsgVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aeskey      *string `protobuf:"bytes,1,req,name=aeskey" json:"aeskey,omitempty"`
	Url         *string `protobuf:"bytes,2,req,name=url" json:"url,omitempty"`
	Type        *uint32 `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	Length      *uint32 `protobuf:"varint,4,req,name=length" json:"length,omitempty"`
	Playtime    *uint32 `protobuf:"varint,5,req,name=playtime" json:"playtime,omitempty"`
	ThumbAeskey *string `protobuf:"bytes,6,opt,name=thumbAeskey" json:"thumbAeskey,omitempty"`
	ThumbUrl    *string `protobuf:"bytes,7,opt,name=thumbUrl" json:"thumbUrl,omitempty"`
	ThumbSize   *uint32 `protobuf:"varint,8,opt,name=thumbSize" json:"thumbSize,omitempty"`
	ThumbWidth  *uint32 `protobuf:"varint,9,opt,name=thumbWidth" json:"thumbWidth,omitempty"`
	ThumbHeight *uint32 `protobuf:"varint,10,opt,name=thumbHeight" json:"thumbHeight,omitempty"`
	Md5         *string `protobuf:"bytes,11,opt,name=md5" json:"md5,omitempty"`
	Fileparam   *string `protobuf:"bytes,12,opt,name=fileparam" json:"fileparam,omitempty"`
	Newmd5      *string `protobuf:"bytes,13,opt,name=newmd5" json:"newmd5,omitempty"`
}

func (x *BypMsgVideo) Reset() {
	*x = BypMsgVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypMsgVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypMsgVideo) ProtoMessage() {}

func (x *BypMsgVideo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypMsgVideo.ProtoReflect.Descriptor instead.
func (*BypMsgVideo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{403}
}

func (x *BypMsgVideo) GetAeskey() string {
	if x != nil && x.Aeskey != nil {
		return *x.Aeskey
	}
	return ""
}

func (x *BypMsgVideo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *BypMsgVideo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BypMsgVideo) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *BypMsgVideo) GetPlaytime() uint32 {
	if x != nil && x.Playtime != nil {
		return *x.Playtime
	}
	return 0
}

func (x *BypMsgVideo) GetThumbAeskey() string {
	if x != nil && x.ThumbAeskey != nil {
		return *x.ThumbAeskey
	}
	return ""
}

func (x *BypMsgVideo) GetThumbUrl() string {
	if x != nil && x.ThumbUrl != nil {
		return *x.ThumbUrl
	}
	return ""
}

func (x *BypMsgVideo) GetThumbSize() uint32 {
	if x != nil && x.ThumbSize != nil {
		return *x.ThumbSize
	}
	return 0
}

func (x *BypMsgVideo) GetThumbWidth() uint32 {
	if x != nil && x.ThumbWidth != nil {
		return *x.ThumbWidth
	}
	return 0
}

func (x *BypMsgVideo) GetThumbHeight() uint32 {
	if x != nil && x.ThumbHeight != nil {
		return *x.ThumbHeight
	}
	return 0
}

func (x *BypMsgVideo) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *BypMsgVideo) GetFileparam() string {
	if x != nil && x.Fileparam != nil {
		return *x.Fileparam
	}
	return ""
}

func (x *BypMsgVideo) GetNewmd5() string {
	if x != nil && x.Newmd5 != nil {
		return *x.Newmd5
	}
	return ""
}

type BypMsgEmoji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5               *string `protobuf:"bytes,1,req,name=md5" json:"md5,omitempty"`
	Len               *uint32 `protobuf:"varint,2,req,name=len" json:"len,omitempty"`
	Productid         *string `protobuf:"bytes,3,opt,name=productid" json:"productid,omitempty"`
	Type              *uint32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Extxml            *string `protobuf:"bytes,5,opt,name=extxml" json:"extxml,omitempty"`
	Cdnurl            *string `protobuf:"bytes,6,opt,name=cdnurl" json:"cdnurl,omitempty"`
	Newxmlflag        *uint32 `protobuf:"varint,7,opt,name=newxmlflag" json:"newxmlflag,omitempty"`
	Designerid        *string `protobuf:"bytes,8,opt,name=designerid" json:"designerid,omitempty"`
	Thumburl          *string `protobuf:"bytes,9,opt,name=thumburl" json:"thumburl,omitempty"`
	Encrypturl        *string `protobuf:"bytes,10,opt,name=encrypturl" json:"encrypturl,omitempty"`
	Aeskey            *string `protobuf:"bytes,11,opt,name=aeskey" json:"aeskey,omitempty"`
	Width             *uint32 `protobuf:"varint,12,opt,name=width" json:"width,omitempty"`
	Height            *uint32 `protobuf:"varint,13,opt,name=height" json:"height,omitempty"`
	Externurl         *string `protobuf:"bytes,14,opt,name=externurl" json:"externurl,omitempty"`
	Externmd5         *string `protobuf:"bytes,15,opt,name=externmd5" json:"externmd5,omitempty"`
	Activityid        *string `protobuf:"bytes,16,opt,name=activityid" json:"activityid,omitempty"`
	Tpurl             *string `protobuf:"bytes,17,opt,name=tpurl" json:"tpurl,omitempty"`
	Authkey           *string `protobuf:"bytes,18,opt,name=authkey" json:"authkey,omitempty"`
	Attachedtext      *string `protobuf:"bytes,19,opt,name=attachedtext" json:"attachedtext,omitempty"`
	Attachedtextcolor *string `protobuf:"bytes,20,opt,name=attachedtextcolor" json:"attachedtextcolor,omitempty"`
	Lensid            *string `protobuf:"bytes,21,opt,name=lensid" json:"lensid,omitempty"`
	IsCharge          *bool   `protobuf:"varint,22,opt,name=isCharge" json:"isCharge,omitempty"`
	Emojiattr         *string `protobuf:"bytes,23,opt,name=emojiattr" json:"emojiattr,omitempty"`
}

func (x *BypMsgEmoji) Reset() {
	*x = BypMsgEmoji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypMsgEmoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypMsgEmoji) ProtoMessage() {}

func (x *BypMsgEmoji) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypMsgEmoji.ProtoReflect.Descriptor instead.
func (*BypMsgEmoji) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{404}
}

func (x *BypMsgEmoji) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *BypMsgEmoji) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *BypMsgEmoji) GetProductid() string {
	if x != nil && x.Productid != nil {
		return *x.Productid
	}
	return ""
}

func (x *BypMsgEmoji) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *BypMsgEmoji) GetExtxml() string {
	if x != nil && x.Extxml != nil {
		return *x.Extxml
	}
	return ""
}

func (x *BypMsgEmoji) GetCdnurl() string {
	if x != nil && x.Cdnurl != nil {
		return *x.Cdnurl
	}
	return ""
}

func (x *BypMsgEmoji) GetNewxmlflag() uint32 {
	if x != nil && x.Newxmlflag != nil {
		return *x.Newxmlflag
	}
	return 0
}

func (x *BypMsgEmoji) GetDesignerid() string {
	if x != nil && x.Designerid != nil {
		return *x.Designerid
	}
	return ""
}

func (x *BypMsgEmoji) GetThumburl() string {
	if x != nil && x.Thumburl != nil {
		return *x.Thumburl
	}
	return ""
}

func (x *BypMsgEmoji) GetEncrypturl() string {
	if x != nil && x.Encrypturl != nil {
		return *x.Encrypturl
	}
	return ""
}

func (x *BypMsgEmoji) GetAeskey() string {
	if x != nil && x.Aeskey != nil {
		return *x.Aeskey
	}
	return ""
}

func (x *BypMsgEmoji) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *BypMsgEmoji) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *BypMsgEmoji) GetExternurl() string {
	if x != nil && x.Externurl != nil {
		return *x.Externurl
	}
	return ""
}

func (x *BypMsgEmoji) GetExternmd5() string {
	if x != nil && x.Externmd5 != nil {
		return *x.Externmd5
	}
	return ""
}

func (x *BypMsgEmoji) GetActivityid() string {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return ""
}

func (x *BypMsgEmoji) GetTpurl() string {
	if x != nil && x.Tpurl != nil {
		return *x.Tpurl
	}
	return ""
}

func (x *BypMsgEmoji) GetAuthkey() string {
	if x != nil && x.Authkey != nil {
		return *x.Authkey
	}
	return ""
}

func (x *BypMsgEmoji) GetAttachedtext() string {
	if x != nil && x.Attachedtext != nil {
		return *x.Attachedtext
	}
	return ""
}

func (x *BypMsgEmoji) GetAttachedtextcolor() string {
	if x != nil && x.Attachedtextcolor != nil {
		return *x.Attachedtextcolor
	}
	return ""
}

func (x *BypMsgEmoji) GetLensid() string {
	if x != nil && x.Lensid != nil {
		return *x.Lensid
	}
	return ""
}

func (x *BypMsgEmoji) GetIsCharge() bool {
	if x != nil && x.IsCharge != nil {
		return *x.IsCharge
	}
	return false
}

func (x *BypMsgEmoji) GetEmojiattr() string {
	if x != nil && x.Emojiattr != nil {
		return *x.Emojiattr
	}
	return ""
}

type BypMsgPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType      *uint32      `protobuf:"varint,1,opt,name=msgType" json:"msgType,omitempty"`
	FromUsername *string      `protobuf:"bytes,2,opt,name=fromUsername" json:"fromUsername,omitempty"`
	ToUsername   *string      `protobuf:"bytes,3,opt,name=toUsername" json:"toUsername,omitempty"`
	CliMsgId     *string      `protobuf:"bytes,4,opt,name=cliMsgId" json:"cliMsgId,omitempty"`
	MsgSource    *string      `protobuf:"bytes,5,opt,name=msgSource" json:"msgSource,omitempty"`
	MsgExtInfo   []byte       `protobuf:"bytes,6,opt,name=msgExtInfo" json:"msgExtInfo,omitempty"`
	MsgSessionId *string      `protobuf:"bytes,7,opt,name=msgSessionId" json:"msgSessionId,omitempty"`
	BypText      *BypMsgText  `protobuf:"bytes,101,opt,name=bypText" json:"bypText,omitempty"`
	BypImage     *BypMsgImage `protobuf:"bytes,102,opt,name=bypImage" json:"bypImage,omitempty"`
	BypVideo     *BypMsgVideo `protobuf:"bytes,103,opt,name=bypVideo" json:"bypVideo,omitempty"`
	BypEmoji     *BypMsgEmoji `protobuf:"bytes,107,opt,name=bypEmoji" json:"bypEmoji,omitempty"`
}

func (x *BypMsgPack) Reset() {
	*x = BypMsgPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypMsgPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypMsgPack) ProtoMessage() {}

func (x *BypMsgPack) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypMsgPack.ProtoReflect.Descriptor instead.
func (*BypMsgPack) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{405}
}

func (x *BypMsgPack) GetMsgType() uint32 {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return 0
}

func (x *BypMsgPack) GetFromUsername() string {
	if x != nil && x.FromUsername != nil {
		return *x.FromUsername
	}
	return ""
}

func (x *BypMsgPack) GetToUsername() string {
	if x != nil && x.ToUsername != nil {
		return *x.ToUsername
	}
	return ""
}

func (x *BypMsgPack) GetCliMsgId() string {
	if x != nil && x.CliMsgId != nil {
		return *x.CliMsgId
	}
	return ""
}

func (x *BypMsgPack) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

func (x *BypMsgPack) GetMsgExtInfo() []byte {
	if x != nil {
		return x.MsgExtInfo
	}
	return nil
}

func (x *BypMsgPack) GetMsgSessionId() string {
	if x != nil && x.MsgSessionId != nil {
		return *x.MsgSessionId
	}
	return ""
}

func (x *BypMsgPack) GetBypText() *BypMsgText {
	if x != nil {
		return x.BypText
	}
	return nil
}

func (x *BypMsgPack) GetBypImage() *BypMsgImage {
	if x != nil {
		return x.BypImage
	}
	return nil
}

func (x *BypMsgPack) GetBypVideo() *BypMsgVideo {
	if x != nil {
		return x.BypVideo
	}
	return nil
}

func (x *BypMsgPack) GetBypEmoji() *BypMsgEmoji {
	if x != nil {
		return x.BypEmoji
	}
	return nil
}

type BypSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	BizType     *int32       `protobuf:"varint,2,opt,name=bizType" json:"bizType,omitempty"`
	MsgPack     *BypMsgPack  `protobuf:"bytes,3,opt,name=msgPack" json:"msgPack,omitempty"`
}

func (x *BypSendRequest) Reset() {
	*x = BypSendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypSendRequest) ProtoMessage() {}

func (x *BypSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypSendRequest.ProtoReflect.Descriptor instead.
func (*BypSendRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{406}
}

func (x *BypSendRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BypSendRequest) GetBizType() int32 {
	if x != nil && x.BizType != nil {
		return *x.BizType
	}
	return 0
}

func (x *BypSendRequest) GetMsgPack() *BypMsgPack {
	if x != nil {
		return x.MsgPack
	}
	return nil
}

type BypSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Newmsgid     *uint64       `protobuf:"varint,2,opt,name=newmsgid" json:"newmsgid,omitempty"`
}

func (x *BypSendResponse) Reset() {
	*x = BypSendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypSendResponse) ProtoMessage() {}

func (x *BypSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypSendResponse.ProtoReflect.Descriptor instead.
func (*BypSendResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{407}
}

func (x *BypSendResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *BypSendResponse) GetNewmsgid() uint64 {
	if x != nil && x.Newmsgid != nil {
		return *x.Newmsgid
	}
	return 0
}

type BypSyncKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SynckeyId    *uint32 `protobuf:"varint,1,opt,name=synckeyId" json:"synckeyId,omitempty"`
	SynckeyValue *uint64 `protobuf:"varint,2,opt,name=synckeyValue" json:"synckeyValue,omitempty"`
}

func (x *BypSyncKeyPair) Reset() {
	*x = BypSyncKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypSyncKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypSyncKeyPair) ProtoMessage() {}

func (x *BypSyncKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypSyncKeyPair.ProtoReflect.Descriptor instead.
func (*BypSyncKeyPair) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{408}
}

func (x *BypSyncKeyPair) GetSynckeyId() uint32 {
	if x != nil && x.SynckeyId != nil {
		return *x.SynckeyId
	}
	return 0
}

func (x *BypSyncKeyPair) GetSynckeyValue() uint64 {
	if x != nil && x.SynckeyValue != nil {
		return *x.SynckeyValue
	}
	return 0
}

type BypSyncKeyBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncKeyPairList []*BypSyncKeyPair `protobuf:"bytes,1,rep,name=syncKeyPairList" json:"syncKeyPairList,omitempty"`
	Reset_          *bool             `protobuf:"varint,2,opt,name=reset" json:"reset,omitempty"`
}

func (x *BypSyncKeyBuff) Reset() {
	*x = BypSyncKeyBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypSyncKeyBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypSyncKeyBuff) ProtoMessage() {}

func (x *BypSyncKeyBuff) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypSyncKeyBuff.ProtoReflect.Descriptor instead.
func (*BypSyncKeyBuff) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{409}
}

func (x *BypSyncKeyBuff) GetSyncKeyPairList() []*BypSyncKeyPair {
	if x != nil {
		return x.SyncKeyPairList
	}
	return nil
}

func (x *BypSyncKeyBuff) GetReset_() bool {
	if x != nil && x.Reset_ != nil {
		return *x.Reset_
	}
	return false
}

type BypSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest    `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	Selector       []uint32        `protobuf:"varint,2,rep,name=selector" json:"selector,omitempty"`
	CliSyncKeyBuff *BypSyncKeyBuff `protobuf:"bytes,3,opt,name=cliSyncKeyBuff" json:"cliSyncKeyBuff,omitempty"`
	Scene          *int32          `protobuf:"varint,4,opt,name=scene" json:"scene,omitempty"`
}

func (x *BypSyncRequest) Reset() {
	*x = BypSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypSyncRequest) ProtoMessage() {}

func (x *BypSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypSyncRequest.ProtoReflect.Descriptor instead.
func (*BypSyncRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{410}
}

func (x *BypSyncRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BypSyncRequest) GetSelector() []uint32 {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *BypSyncRequest) GetCliSyncKeyBuff() *BypSyncKeyBuff {
	if x != nil {
		return x.CliSyncKeyBuff
	}
	return nil
}

func (x *BypSyncRequest) GetScene() int32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type BypSyncItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncKeyType *uint32 `protobuf:"varint,1,opt,name=syncKeyType" json:"syncKeyType,omitempty"`
	ItemType    *uint32 `protobuf:"varint,2,opt,name=itemType" json:"itemType,omitempty"`
	Buff        []byte  `protobuf:"bytes,3,opt,name=buff" json:"buff,omitempty"`
	SubType     *uint32 `protobuf:"varint,4,opt,name=subType" json:"subType,omitempty"`
}

func (x *BypSyncItem) Reset() {
	*x = BypSyncItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypSyncItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypSyncItem) ProtoMessage() {}

func (x *BypSyncItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypSyncItem.ProtoReflect.Descriptor instead.
func (*BypSyncItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{411}
}

func (x *BypSyncItem) GetSyncKeyType() uint32 {
	if x != nil && x.SyncKeyType != nil {
		return *x.SyncKeyType
	}
	return 0
}

func (x *BypSyncItem) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *BypSyncItem) GetBuff() []byte {
	if x != nil {
		return x.Buff
	}
	return nil
}

func (x *BypSyncItem) GetSubType() uint32 {
	if x != nil && x.SubType != nil {
		return *x.SubType
	}
	return 0
}

type BypSyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse     *BaseResponse   `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	RespContinueFlag []uint32        `protobuf:"varint,2,rep,name=respContinueFlag" json:"respContinueFlag,omitempty"`
	RespSyncKeyBuff  *BypSyncKeyBuff `protobuf:"bytes,3,opt,name=respSyncKeyBuff" json:"respSyncKeyBuff,omitempty"`
	SyncItemList     []*BypSyncItem  `protobuf:"bytes,4,rep,name=syncItemList" json:"syncItemList,omitempty"`
}

func (x *BypSyncResponse) Reset() {
	*x = BypSyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypSyncResponse) ProtoMessage() {}

func (x *BypSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypSyncResponse.ProtoReflect.Descriptor instead.
func (*BypSyncResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{412}
}

func (x *BypSyncResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *BypSyncResponse) GetRespContinueFlag() []uint32 {
	if x != nil {
		return x.RespContinueFlag
	}
	return nil
}

func (x *BypSyncResponse) GetRespSyncKeyBuff() *BypSyncKeyBuff {
	if x != nil {
		return x.RespSyncKeyBuff
	}
	return nil
}

func (x *BypSyncResponse) GetSyncItemList() []*BypSyncItem {
	if x != nil {
		return x.SyncItemList
	}
	return nil
}

type WxaAppRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Appid         *string `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	NsId          *string `protobuf:"bytes,3,opt,name=nsId" json:"nsId,omitempty"`
	Key           *uint32 `protobuf:"varint,4,opt,name=key" json:"key,omitempty"`
	Time          *uint32 `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	Value         *uint32 `protobuf:"varint,6,opt,name=value" json:"value,omitempty"`
	Ext           *string `protobuf:"bytes,7,opt,name=ext" json:"ext,omitempty"`
	Appstate      *int32  `protobuf:"varint,8,opt,name=appstate" json:"appstate,omitempty"`
	SessionId     *string `protobuf:"bytes,9,opt,name=sessionId" json:"sessionId,omitempty"`
	NetworkType   *string `protobuf:"bytes,10,opt,name=networkType" json:"networkType,omitempty"`
	EnterScene    *int32  `protobuf:"varint,11,opt,name=enterScene" json:"enterScene,omitempty"`
	UsedState     *int32  `protobuf:"varint,12,opt,name=usedState" json:"usedState,omitempty"`
	SceneNote     *string `protobuf:"bytes,13,opt,name=sceneNote" json:"sceneNote,omitempty"`
	ReferPagePath *string `protobuf:"bytes,14,opt,name=referPagePath" json:"referPagePath,omitempty"`
	PreScene      *uint32 `protobuf:"varint,15,opt,name=preScene" json:"preScene,omitempty"`
	PreSceneNote  *string `protobuf:"bytes,16,opt,name=preSceneNote" json:"preSceneNote,omitempty"`
	IsEntrance    *uint32 `protobuf:"varint,17,opt,name=isEntrance" json:"isEntrance,omitempty"`
}

func (x *WxaAppRecord) Reset() {
	*x = WxaAppRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaAppRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaAppRecord) ProtoMessage() {}

func (x *WxaAppRecord) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaAppRecord.ProtoReflect.Descriptor instead.
func (*WxaAppRecord) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{413}
}

func (x *WxaAppRecord) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *WxaAppRecord) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *WxaAppRecord) GetNsId() string {
	if x != nil && x.NsId != nil {
		return *x.NsId
	}
	return ""
}

func (x *WxaAppRecord) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *WxaAppRecord) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *WxaAppRecord) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *WxaAppRecord) GetExt() string {
	if x != nil && x.Ext != nil {
		return *x.Ext
	}
	return ""
}

func (x *WxaAppRecord) GetAppstate() int32 {
	if x != nil && x.Appstate != nil {
		return *x.Appstate
	}
	return 0
}

func (x *WxaAppRecord) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *WxaAppRecord) GetNetworkType() string {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return ""
}

func (x *WxaAppRecord) GetEnterScene() int32 {
	if x != nil && x.EnterScene != nil {
		return *x.EnterScene
	}
	return 0
}

func (x *WxaAppRecord) GetUsedState() int32 {
	if x != nil && x.UsedState != nil {
		return *x.UsedState
	}
	return 0
}

func (x *WxaAppRecord) GetSceneNote() string {
	if x != nil && x.SceneNote != nil {
		return *x.SceneNote
	}
	return ""
}

func (x *WxaAppRecord) GetReferPagePath() string {
	if x != nil && x.ReferPagePath != nil {
		return *x.ReferPagePath
	}
	return ""
}

func (x *WxaAppRecord) GetPreScene() uint32 {
	if x != nil && x.PreScene != nil {
		return *x.PreScene
	}
	return 0
}

func (x *WxaAppRecord) GetPreSceneNote() string {
	if x != nil && x.PreSceneNote != nil {
		return *x.PreSceneNote
	}
	return ""
}

func (x *WxaAppRecord) GetIsEntrance() uint32 {
	if x != nil && x.IsEntrance != nil {
		return *x.IsEntrance
	}
	return 0
}

type ReportDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manufacturer    *string `protobuf:"bytes,1,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Device          *uint32 `protobuf:"varint,2,opt,name=device" json:"device,omitempty"`
	DeviceModel     *string `protobuf:"bytes,3,opt,name=deviceModel" json:"deviceModel,omitempty"`
	DeviceBrand     *string `protobuf:"bytes,4,opt,name=deviceBrand" json:"deviceBrand,omitempty"`
	ScreenWidth     *uint32 `protobuf:"varint,5,opt,name=screenWidth" json:"screenWidth,omitempty"`
	ScreenHeight    *uint32 `protobuf:"varint,6,opt,name=screenHeight" json:"screenHeight,omitempty"`
	OsName          *string `protobuf:"bytes,7,opt,name=osName" json:"osName,omitempty"`
	OsVersion       *string `protobuf:"bytes,8,opt,name=osVersion" json:"osVersion,omitempty"`
	LanguageVersion *string `protobuf:"bytes,9,opt,name=languageVersion" json:"languageVersion,omitempty"`
}

func (x *ReportDeviceInfo) Reset() {
	*x = ReportDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDeviceInfo) ProtoMessage() {}

func (x *ReportDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDeviceInfo.ProtoReflect.Descriptor instead.
func (*ReportDeviceInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{414}
}

func (x *ReportDeviceInfo) GetManufacturer() string {
	if x != nil && x.Manufacturer != nil {
		return *x.Manufacturer
	}
	return ""
}

func (x *ReportDeviceInfo) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *ReportDeviceInfo) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *ReportDeviceInfo) GetDeviceBrand() string {
	if x != nil && x.DeviceBrand != nil {
		return *x.DeviceBrand
	}
	return ""
}

func (x *ReportDeviceInfo) GetScreenWidth() uint32 {
	if x != nil && x.ScreenWidth != nil {
		return *x.ScreenWidth
	}
	return 0
}

func (x *ReportDeviceInfo) GetScreenHeight() uint32 {
	if x != nil && x.ScreenHeight != nil {
		return *x.ScreenHeight
	}
	return 0
}

func (x *ReportDeviceInfo) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *ReportDeviceInfo) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *ReportDeviceInfo) GetLanguageVersion() string {
	if x != nil && x.LanguageVersion != nil {
		return *x.LanguageVersion
	}
	return ""
}

type WxaAppIDKeyBatchReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest      *BaseRequest      `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	RecordList       []*WxaAppRecord   `protobuf:"bytes,2,rep,name=recordList" json:"recordList,omitempty"`
	ReportDeviceInfo *ReportDeviceInfo `protobuf:"bytes,3,opt,name=reportDeviceInfo" json:"reportDeviceInfo,omitempty"`
}

func (x *WxaAppIDKeyBatchReportRequest) Reset() {
	*x = WxaAppIDKeyBatchReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaAppIDKeyBatchReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaAppIDKeyBatchReportRequest) ProtoMessage() {}

func (x *WxaAppIDKeyBatchReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaAppIDKeyBatchReportRequest.ProtoReflect.Descriptor instead.
func (*WxaAppIDKeyBatchReportRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{415}
}

func (x *WxaAppIDKeyBatchReportRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *WxaAppIDKeyBatchReportRequest) GetRecordList() []*WxaAppRecord {
	if x != nil {
		return x.RecordList
	}
	return nil
}

func (x *WxaAppIDKeyBatchReportRequest) GetReportDeviceInfo() *ReportDeviceInfo {
	if x != nil {
		return x.ReportDeviceInfo
	}
	return nil
}

type WxaAppIDKeyBatchReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	ReportFreq   *uint32       `protobuf:"varint,2,opt,name=reportFreq" json:"reportFreq,omitempty"`
}

func (x *WxaAppIDKeyBatchReportResponse) Reset() {
	*x = WxaAppIDKeyBatchReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaAppIDKeyBatchReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaAppIDKeyBatchReportResponse) ProtoMessage() {}

func (x *WxaAppIDKeyBatchReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaAppIDKeyBatchReportResponse.ProtoReflect.Descriptor instead.
func (*WxaAppIDKeyBatchReportResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{416}
}

func (x *WxaAppIDKeyBatchReportResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *WxaAppIDKeyBatchReportResponse) GetReportFreq() uint32 {
	if x != nil && x.ReportFreq != nil {
		return *x.ReportFreq
	}
	return 0
}

type FinderGetLiveTabsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest       *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq     *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	Longitude         *float32           `protobuf:"fixed32,3,opt,name=longitude" json:"longitude,omitempty"`
	Latitude          *float32           `protobuf:"fixed32,4,opt,name=latitude" json:"latitude,omitempty"`
	Scene             *uint32            `protobuf:"varint,5,opt,name=scene" json:"scene,omitempty"`
	ByPass            *string            `protobuf:"bytes,6,opt,name=byPass" json:"byPass,omitempty"`
	Title             *string            `protobuf:"bytes,7,opt,name=title" json:"title,omitempty"`
	EncryptedObjectId *string            `protobuf:"bytes,8,opt,name=encryptedObjectId" json:"encryptedObjectId,omitempty"`
	ObjectNonceId     *string            `protobuf:"bytes,9,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
}

func (x *FinderGetLiveTabsRequest) Reset() {
	*x = FinderGetLiveTabsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveTabsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveTabsRequest) ProtoMessage() {}

func (x *FinderGetLiveTabsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveTabsRequest.ProtoReflect.Descriptor instead.
func (*FinderGetLiveTabsRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{417}
}

func (x *FinderGetLiveTabsRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetLiveTabsRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetLiveTabsRequest) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderGetLiveTabsRequest) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderGetLiveTabsRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderGetLiveTabsRequest) GetByPass() string {
	if x != nil && x.ByPass != nil {
		return *x.ByPass
	}
	return ""
}

func (x *FinderGetLiveTabsRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderGetLiveTabsRequest) GetEncryptedObjectId() string {
	if x != nil && x.EncryptedObjectId != nil {
		return *x.EncryptedObjectId
	}
	return ""
}

func (x *FinderGetLiveTabsRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

type FinderLiveLbsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityName     *string `protobuf:"bytes,1,opt,name=cityName" json:"cityName,omitempty"`
	GpsValid     *bool   `protobuf:"varint,2,opt,name=gpsValid" json:"gpsValid,omitempty"`
	VideoTabName *string `protobuf:"bytes,3,opt,name=videoTabName" json:"videoTabName,omitempty"`
	LiveTabName  *string `protobuf:"bytes,4,opt,name=liveTabName" json:"liveTabName,omitempty"`
}

func (x *FinderLiveLbsInfo) Reset() {
	*x = FinderLiveLbsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveLbsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveLbsInfo) ProtoMessage() {}

func (x *FinderLiveLbsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveLbsInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveLbsInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{418}
}

func (x *FinderLiveLbsInfo) GetCityName() string {
	if x != nil && x.CityName != nil {
		return *x.CityName
	}
	return ""
}

func (x *FinderLiveLbsInfo) GetGpsValid() bool {
	if x != nil && x.GpsValid != nil {
		return *x.GpsValid
	}
	return false
}

func (x *FinderLiveLbsInfo) GetVideoTabName() string {
	if x != nil && x.VideoTabName != nil {
		return *x.VideoTabName
	}
	return ""
}

func (x *FinderLiveLbsInfo) GetLiveTabName() string {
	if x != nil && x.LiveTabName != nil {
		return *x.LiveTabName
	}
	return ""
}

type FinderGetLiveTabsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse           *BaseResponse        `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	TabList                []*FinderLiveTabInfo `protobuf:"bytes,2,rep,name=tabList" json:"tabList,omitempty"`
	LbsInfo                *FinderLiveLbsInfo   `protobuf:"bytes,3,opt,name=lbsInfo" json:"lbsInfo,omitempty"`
	PrefechMinInterval     *uint32              `protobuf:"varint,4,opt,name=prefechMinInterval" json:"prefechMinInterval,omitempty"`
	PrefechTabPullType     *uint32              `protobuf:"varint,5,opt,name=prefechTabPullType" json:"prefechTabPullType,omitempty"`
	PrefechPreTabPullType  *uint32              `protobuf:"varint,6,opt,name=prefechPreTabPullType" json:"prefechPreTabPullType,omitempty"`
	PrefechNextTabPullType *uint32              `protobuf:"varint,7,opt,name=prefechNextTabPullType" json:"prefechNextTabPullType,omitempty"`
	Title                  *string              `protobuf:"bytes,8,opt,name=title" json:"title,omitempty"`
	HideTabs               *uint32              `protobuf:"varint,9,opt,name=hideTabs" json:"hideTabs,omitempty"`
}

func (x *FinderGetLiveTabsResponse) Reset() {
	*x = FinderGetLiveTabsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveTabsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveTabsResponse) ProtoMessage() {}

func (x *FinderGetLiveTabsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveTabsResponse.ProtoReflect.Descriptor instead.
func (*FinderGetLiveTabsResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{419}
}

func (x *FinderGetLiveTabsResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetLiveTabsResponse) GetTabList() []*FinderLiveTabInfo {
	if x != nil {
		return x.TabList
	}
	return nil
}

func (x *FinderGetLiveTabsResponse) GetLbsInfo() *FinderLiveLbsInfo {
	if x != nil {
		return x.LbsInfo
	}
	return nil
}

func (x *FinderGetLiveTabsResponse) GetPrefechMinInterval() uint32 {
	if x != nil && x.PrefechMinInterval != nil {
		return *x.PrefechMinInterval
	}
	return 0
}

func (x *FinderGetLiveTabsResponse) GetPrefechTabPullType() uint32 {
	if x != nil && x.PrefechTabPullType != nil {
		return *x.PrefechTabPullType
	}
	return 0
}

func (x *FinderGetLiveTabsResponse) GetPrefechPreTabPullType() uint32 {
	if x != nil && x.PrefechPreTabPullType != nil {
		return *x.PrefechPreTabPullType
	}
	return 0
}

func (x *FinderGetLiveTabsResponse) GetPrefechNextTabPullType() uint32 {
	if x != nil && x.PrefechNextTabPullType != nil {
		return *x.PrefechNextTabPullType
	}
	return 0
}

func (x *FinderGetLiveTabsResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderGetLiveTabsResponse) GetHideTabs() uint32 {
	if x != nil && x.HideTabs != nil {
		return *x.HideTabs
	}
	return 0
}

type FinderLbsTabTipsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabTipsObjectId      *uint64 `protobuf:"varint,1,opt,name=tabTipsObjectId" json:"tabTipsObjectId,omitempty"`
	TabTipsObjectNonceId *string `protobuf:"bytes,2,opt,name=tabTipsObjectNonceId" json:"tabTipsObjectNonceId,omitempty"`
	TabTipsByPassInfo    []byte  `protobuf:"bytes,3,opt,name=tabTipsByPassInfo" json:"tabTipsByPassInfo,omitempty"`
	TabTipsPath          *string `protobuf:"bytes,4,opt,name=tabTipsPath" json:"tabTipsPath,omitempty"`
}

func (x *FinderLbsTabTipsInfo) Reset() {
	*x = FinderLbsTabTipsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLbsTabTipsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLbsTabTipsInfo) ProtoMessage() {}

func (x *FinderLbsTabTipsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLbsTabTipsInfo.ProtoReflect.Descriptor instead.
func (*FinderLbsTabTipsInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{420}
}

func (x *FinderLbsTabTipsInfo) GetTabTipsObjectId() uint64 {
	if x != nil && x.TabTipsObjectId != nil {
		return *x.TabTipsObjectId
	}
	return 0
}

func (x *FinderLbsTabTipsInfo) GetTabTipsObjectNonceId() string {
	if x != nil && x.TabTipsObjectNonceId != nil {
		return *x.TabTipsObjectNonceId
	}
	return ""
}

func (x *FinderLbsTabTipsInfo) GetTabTipsByPassInfo() []byte {
	if x != nil {
		return x.TabTipsByPassInfo
	}
	return nil
}

func (x *FinderLbsTabTipsInfo) GetTabTipsPath() string {
	if x != nil && x.TabTipsPath != nil {
		return *x.TabTipsPath
	}
	return ""
}

type FinderPressureCtrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveRecSystem *uint32 `protobuf:"varint,1,opt,name=liveRecSystem" json:"liveRecSystem,omitempty"`
}

func (x *FinderPressureCtrl) Reset() {
	*x = FinderPressureCtrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPressureCtrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPressureCtrl) ProtoMessage() {}

func (x *FinderPressureCtrl) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPressureCtrl.ProtoReflect.Descriptor instead.
func (*FinderPressureCtrl) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{421}
}

func (x *FinderPressureCtrl) GetLiveRecSystem() uint32 {
	if x != nil && x.LiveRecSystem != nil {
		return *x.LiveRecSystem
	}
	return 0
}

type FinderLbsLiveStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest              *BaseRequest                        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq            *FinderBaseRequest                  `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LastBuffer               []byte                              `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	Longitude                *float32                            `protobuf:"fixed32,4,opt,name=longitude" json:"longitude,omitempty"`
	Latitude                 *float32                            `protobuf:"fixed32,5,opt,name=latitude" json:"latitude,omitempty"`
	Status                   *FinderClientStatus                 `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
	LiveStatus               *FinderLiveClientStatus             `protobuf:"bytes,7,opt,name=liveStatus" json:"liveStatus,omitempty"`
	PullType                 *uint32                             `protobuf:"varint,8,opt,name=pullType" json:"pullType,omitempty"`
	FinderSwitch             *FinderSwitch                       `protobuf:"bytes,9,opt,name=finderSwitch" json:"finderSwitch,omitempty"`
	ReadStats                []*MarkReadStat                     `protobuf:"bytes,10,rep,name=readStats" json:"readStats,omitempty"`
	MarkUnreadObjectList     []*FinderUnreadItem                 `protobuf:"bytes,11,rep,name=markUnreadObjectList" json:"markUnreadObjectList,omitempty"`
	LiveTab                  *FinderLiveTabInfo                  `protobuf:"bytes,12,opt,name=liveTab" json:"liveTab,omitempty"`
	FromScene                *uint32                             `protobuf:"varint,13,opt,name=fromScene" json:"fromScene,omitempty"`
	LbsTabTipsInfo           *FinderLbsTabTipsInfo               `protobuf:"bytes,14,opt,name=lbsTabTipsInfo" json:"lbsTabTipsInfo,omitempty"`
	IsFreqControl            *uint32                             `protobuf:"varint,15,opt,name=isFreqControl" json:"isFreqControl,omitempty"`
	PressureCtrl             *FinderPressureCtrl                 `protobuf:"bytes,16,opt,name=pressureCtrl" json:"pressureCtrl,omitempty"`
	ByPass                   *string                             `protobuf:"bytes,17,opt,name=byPass" json:"byPass,omitempty"`
	OnlyFollowFeed           *uint32                             `protobuf:"varint,18,opt,name=onlyFollowFeed" json:"onlyFollowFeed,omitempty"`
	RelatedObjectId          *uint64                             `protobuf:"varint,19,opt,name=relatedObjectId" json:"relatedObjectId,omitempty"`
	BeforeJoinLiveRoomStatus *FinderLiveBeforeJoinLiveRoomStatus `protobuf:"bytes,20,opt,name=beforeJoinLiveRoomStatus" json:"beforeJoinLiveRoomStatus,omitempty"`
	NeedBannerCardStyle      *uint32                             `protobuf:"varint,21,opt,name=needBannerCardStyle" json:"needBannerCardStyle,omitempty"`
}

func (x *FinderLbsLiveStreamRequest) Reset() {
	*x = FinderLbsLiveStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLbsLiveStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLbsLiveStreamRequest) ProtoMessage() {}

func (x *FinderLbsLiveStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLbsLiveStreamRequest.ProtoReflect.Descriptor instead.
func (*FinderLbsLiveStreamRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{422}
}

func (x *FinderLbsLiveStreamRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderLbsLiveStreamRequest) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderLbsLiveStreamRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetLiveStatus() *FinderLiveClientStatus {
	if x != nil {
		return x.LiveStatus
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetPullType() uint32 {
	if x != nil && x.PullType != nil {
		return *x.PullType
	}
	return 0
}

func (x *FinderLbsLiveStreamRequest) GetFinderSwitch() *FinderSwitch {
	if x != nil {
		return x.FinderSwitch
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetReadStats() []*MarkReadStat {
	if x != nil {
		return x.ReadStats
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetMarkUnreadObjectList() []*FinderUnreadItem {
	if x != nil {
		return x.MarkUnreadObjectList
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetLiveTab() *FinderLiveTabInfo {
	if x != nil {
		return x.LiveTab
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetFromScene() uint32 {
	if x != nil && x.FromScene != nil {
		return *x.FromScene
	}
	return 0
}

func (x *FinderLbsLiveStreamRequest) GetLbsTabTipsInfo() *FinderLbsTabTipsInfo {
	if x != nil {
		return x.LbsTabTipsInfo
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetIsFreqControl() uint32 {
	if x != nil && x.IsFreqControl != nil {
		return *x.IsFreqControl
	}
	return 0
}

func (x *FinderLbsLiveStreamRequest) GetPressureCtrl() *FinderPressureCtrl {
	if x != nil {
		return x.PressureCtrl
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetByPass() string {
	if x != nil && x.ByPass != nil {
		return *x.ByPass
	}
	return ""
}

func (x *FinderLbsLiveStreamRequest) GetOnlyFollowFeed() uint32 {
	if x != nil && x.OnlyFollowFeed != nil {
		return *x.OnlyFollowFeed
	}
	return 0
}

func (x *FinderLbsLiveStreamRequest) GetRelatedObjectId() uint64 {
	if x != nil && x.RelatedObjectId != nil {
		return *x.RelatedObjectId
	}
	return 0
}

func (x *FinderLbsLiveStreamRequest) GetBeforeJoinLiveRoomStatus() *FinderLiveBeforeJoinLiveRoomStatus {
	if x != nil {
		return x.BeforeJoinLiveRoomStatus
	}
	return nil
}

func (x *FinderLbsLiveStreamRequest) GetNeedBannerCardStyle() uint32 {
	if x != nil && x.NeedBannerCardStyle != nil {
		return *x.NeedBannerCardStyle
	}
	return 0
}

type FinderJumpLiveTab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wording *string            `protobuf:"bytes,1,opt,name=wording" json:"wording,omitempty"`
	TabInfo *FinderLiveTabInfo `protobuf:"bytes,2,opt,name=tabInfo" json:"tabInfo,omitempty"`
}

func (x *FinderJumpLiveTab) Reset() {
	*x = FinderJumpLiveTab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJumpLiveTab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJumpLiveTab) ProtoMessage() {}

func (x *FinderJumpLiveTab) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJumpLiveTab.ProtoReflect.Descriptor instead.
func (*FinderJumpLiveTab) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{423}
}

func (x *FinderJumpLiveTab) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *FinderJumpLiveTab) GetTabInfo() *FinderLiveTabInfo {
	if x != nil {
		return x.TabInfo
	}
	return nil
}

type FinderLbsLiveStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse       *BaseResponse           `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Object             []*FinderObject         `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	LastBuffer         []byte                  `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag       *uint32                 `protobuf:"varint,4,opt,name=continueFlag" json:"continueFlag,omitempty"`
	LivePreloadInfo    *FinderLivePreloadInfo  `protobuf:"bytes,5,opt,name=livePreloadInfo" json:"livePreloadInfo,omitempty"`
	LayoutInfo         *FinderStreamLayoutInfo `protobuf:"bytes,6,opt,name=layoutInfo" json:"layoutInfo,omitempty"`
	JumpLiveTab        *FinderJumpLiveTab      `protobuf:"bytes,7,opt,name=jumpLiveTab" json:"jumpLiveTab,omitempty"`
	PrefechMinInterval *uint32                 `protobuf:"varint,8,opt,name=prefechMinInterval" json:"prefechMinInterval,omitempty"`
	DebugMessage       []byte                  `protobuf:"bytes,9,opt,name=debugMessage" json:"debugMessage,omitempty"`
	RefreshInterval    *uint32                 `protobuf:"varint,10,opt,name=refreshInterval" json:"refreshInterval,omitempty"`
	SkipFeedsReport    *bool                   `protobuf:"varint,11,opt,name=skipFeedsReport" json:"skipFeedsReport,omitempty"`
}

func (x *FinderLbsLiveStreamResponse) Reset() {
	*x = FinderLbsLiveStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLbsLiveStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLbsLiveStreamResponse) ProtoMessage() {}

func (x *FinderLbsLiveStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLbsLiveStreamResponse.ProtoReflect.Descriptor instead.
func (*FinderLbsLiveStreamResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{424}
}

func (x *FinderLbsLiveStreamResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderLbsLiveStreamResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderLbsLiveStreamResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderLbsLiveStreamResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderLbsLiveStreamResponse) GetLivePreloadInfo() *FinderLivePreloadInfo {
	if x != nil {
		return x.LivePreloadInfo
	}
	return nil
}

func (x *FinderLbsLiveStreamResponse) GetLayoutInfo() *FinderStreamLayoutInfo {
	if x != nil {
		return x.LayoutInfo
	}
	return nil
}

func (x *FinderLbsLiveStreamResponse) GetJumpLiveTab() *FinderJumpLiveTab {
	if x != nil {
		return x.JumpLiveTab
	}
	return nil
}

func (x *FinderLbsLiveStreamResponse) GetPrefechMinInterval() uint32 {
	if x != nil && x.PrefechMinInterval != nil {
		return *x.PrefechMinInterval
	}
	return 0
}

func (x *FinderLbsLiveStreamResponse) GetDebugMessage() []byte {
	if x != nil {
		return x.DebugMessage
	}
	return nil
}

func (x *FinderLbsLiveStreamResponse) GetRefreshInterval() uint32 {
	if x != nil && x.RefreshInterval != nil {
		return *x.RefreshInterval
	}
	return 0
}

func (x *FinderLbsLiveStreamResponse) GetSkipFeedsReport() bool {
	if x != nil && x.SkipFeedsReport != nil {
		return *x.SkipFeedsReport
	}
	return false
}

type GetMidasSdkInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
}

func (x *GetMidasSdkInfoRequest) Reset() {
	*x = GetMidasSdkInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMidasSdkInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMidasSdkInfoRequest) ProtoMessage() {}

func (x *GetMidasSdkInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMidasSdkInfoRequest.ProtoReflect.Descriptor instead.
func (*GetMidasSdkInfoRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{425}
}

func (x *GetMidasSdkInfoRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

type GetMidasSdkInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	SdkInfo      *MidasSdkInfo `protobuf:"bytes,2,opt,name=sdkInfo" json:"sdkInfo,omitempty"`
}

func (x *GetMidasSdkInfoResponse) Reset() {
	*x = GetMidasSdkInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMidasSdkInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMidasSdkInfoResponse) ProtoMessage() {}

func (x *GetMidasSdkInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMidasSdkInfoResponse.ProtoReflect.Descriptor instead.
func (*GetMidasSdkInfoResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{426}
}

func (x *GetMidasSdkInfoResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetMidasSdkInfoResponse) GetSdkInfo() *MidasSdkInfo {
	if x != nil {
		return x.SdkInfo
	}
	return nil
}

type FinderGetLiveOnlineMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest              *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq            *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LiveId                   *uint64            `protobuf:"varint,3,opt,name=liveId" json:"liveId,omitempty"`
	ObjectId                 *uint64            `protobuf:"varint,4,opt,name=objectId" json:"objectId,omitempty"`
	FinderUsername           *string            `protobuf:"bytes,5,opt,name=finderUsername" json:"finderUsername,omitempty"`
	ObjectNonceId            *string            `protobuf:"bytes,6,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	Scene                    *uint32            `protobuf:"varint,7,opt,name=scene" json:"scene,omitempty"`
	LiveContactsLastBuffer   []byte             `protobuf:"bytes,8,opt,name=liveContactsLastBuffer" json:"liveContactsLastBuffer,omitempty"`
	ClearRecentRewardHistory *bool              `protobuf:"varint,9,opt,name=clearRecentRewardHistory" json:"clearRecentRewardHistory,omitempty"`
}

func (x *FinderGetLiveOnlineMemberReq) Reset() {
	*x = FinderGetLiveOnlineMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveOnlineMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveOnlineMemberReq) ProtoMessage() {}

func (x *FinderGetLiveOnlineMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveOnlineMemberReq.ProtoReflect.Descriptor instead.
func (*FinderGetLiveOnlineMemberReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{427}
}

func (x *FinderGetLiveOnlineMemberReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetLiveOnlineMemberReq) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetLiveOnlineMemberReq) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderGetLiveOnlineMemberReq) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderGetLiveOnlineMemberReq) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetLiveOnlineMemberReq) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderGetLiveOnlineMemberReq) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderGetLiveOnlineMemberReq) GetLiveContactsLastBuffer() []byte {
	if x != nil {
		return x.LiveContactsLastBuffer
	}
	return nil
}

func (x *FinderGetLiveOnlineMemberReq) GetClearRecentRewardHistory() bool {
	if x != nil && x.ClearRecentRewardHistory != nil {
		return *x.ClearRecentRewardHistory
	}
	return false
}

type FinderLiveGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardProductId     *string  `protobuf:"bytes,1,opt,name=rewardProductId" json:"rewardProductId,omitempty"`
	BusinessType        *uint32  `protobuf:"varint,2,opt,name=businessType" json:"businessType,omitempty"`
	ThumbnailFileUrl    *string  `protobuf:"bytes,3,opt,name=thumbnailFileUrl" json:"thumbnailFileUrl,omitempty"`
	PreviewPagUrl       *string  `protobuf:"bytes,4,opt,name=previewPagUrl" json:"previewPagUrl,omitempty"`
	AnimationPagUrl     *string  `protobuf:"bytes,5,opt,name=animationPagUrl" json:"animationPagUrl,omitempty"`
	ThumbnailFileMd5    *string  `protobuf:"bytes,6,opt,name=thumbnailFileMd5" json:"thumbnailFileMd5,omitempty"`
	PreviewPagMd5       *string  `protobuf:"bytes,7,opt,name=previewPagMd5" json:"previewPagMd5,omitempty"`
	AnimationPagMd5     *string  `protobuf:"bytes,8,opt,name=animationPagMd5" json:"animationPagMd5,omitempty"`
	Name                *string  `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	Price               *float32 `protobuf:"fixed32,10,opt,name=price" json:"price,omitempty"`
	GiftType            *uint32  `protobuf:"varint,11,opt,name=giftType" json:"giftType,omitempty"`
	UnlockIntimacyLevel *uint32  `protobuf:"varint,12,opt,name=unlockIntimacyLevel" json:"unlockIntimacyLevel,omitempty"`
	Flag                *uint32  `protobuf:"varint,13,opt,name=flag" json:"flag,omitempty"`
}

func (x *FinderLiveGift) Reset() {
	*x = FinderLiveGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveGift) ProtoMessage() {}

func (x *FinderLiveGift) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveGift.ProtoReflect.Descriptor instead.
func (*FinderLiveGift) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{428}
}

func (x *FinderLiveGift) GetRewardProductId() string {
	if x != nil && x.RewardProductId != nil {
		return *x.RewardProductId
	}
	return ""
}

func (x *FinderLiveGift) GetBusinessType() uint32 {
	if x != nil && x.BusinessType != nil {
		return *x.BusinessType
	}
	return 0
}

func (x *FinderLiveGift) GetThumbnailFileUrl() string {
	if x != nil && x.ThumbnailFileUrl != nil {
		return *x.ThumbnailFileUrl
	}
	return ""
}

func (x *FinderLiveGift) GetPreviewPagUrl() string {
	if x != nil && x.PreviewPagUrl != nil {
		return *x.PreviewPagUrl
	}
	return ""
}

func (x *FinderLiveGift) GetAnimationPagUrl() string {
	if x != nil && x.AnimationPagUrl != nil {
		return *x.AnimationPagUrl
	}
	return ""
}

func (x *FinderLiveGift) GetThumbnailFileMd5() string {
	if x != nil && x.ThumbnailFileMd5 != nil {
		return *x.ThumbnailFileMd5
	}
	return ""
}

func (x *FinderLiveGift) GetPreviewPagMd5() string {
	if x != nil && x.PreviewPagMd5 != nil {
		return *x.PreviewPagMd5
	}
	return ""
}

func (x *FinderLiveGift) GetAnimationPagMd5() string {
	if x != nil && x.AnimationPagMd5 != nil {
		return *x.AnimationPagMd5
	}
	return ""
}

func (x *FinderLiveGift) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FinderLiveGift) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *FinderLiveGift) GetGiftType() uint32 {
	if x != nil && x.GiftType != nil {
		return *x.GiftType
	}
	return 0
}

func (x *FinderLiveGift) GetUnlockIntimacyLevel() uint32 {
	if x != nil && x.UnlockIntimacyLevel != nil {
		return *x.UnlockIntimacyLevel
	}
	return 0
}

func (x *FinderLiveGift) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

type FinderLiveRecentRewardOnlineMember_GiftItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gift         *FinderLiveGift `protobuf:"bytes,1,opt,name=gift" json:"gift,omitempty"`
	ProductCount *uint32         `protobuf:"varint,2,opt,name=productCount" json:"productCount,omitempty"`
}

func (x *FinderLiveRecentRewardOnlineMember_GiftItem) Reset() {
	*x = FinderLiveRecentRewardOnlineMember_GiftItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveRecentRewardOnlineMember_GiftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveRecentRewardOnlineMember_GiftItem) ProtoMessage() {}

func (x *FinderLiveRecentRewardOnlineMember_GiftItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveRecentRewardOnlineMember_GiftItem.ProtoReflect.Descriptor instead.
func (*FinderLiveRecentRewardOnlineMember_GiftItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{429}
}

func (x *FinderLiveRecentRewardOnlineMember_GiftItem) GetGift() *FinderLiveGift {
	if x != nil {
		return x.Gift
	}
	return nil
}

func (x *FinderLiveRecentRewardOnlineMember_GiftItem) GetProductCount() uint32 {
	if x != nil && x.ProductCount != nil {
		return *x.ProductCount
	}
	return 0
}

type FinderLiveRecentRewardOnlineMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact            *FinderLiveContact                             `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
	Items              []*FinderLiveRecentRewardOnlineMember_GiftItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	RewardAmountInHeat *uint32                                        `protobuf:"varint,3,opt,name=rewardAmountInHeat" json:"rewardAmountInHeat,omitempty"`
}

func (x *FinderLiveRecentRewardOnlineMember) Reset() {
	*x = FinderLiveRecentRewardOnlineMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveRecentRewardOnlineMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveRecentRewardOnlineMember) ProtoMessage() {}

func (x *FinderLiveRecentRewardOnlineMember) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveRecentRewardOnlineMember.ProtoReflect.Descriptor instead.
func (*FinderLiveRecentRewardOnlineMember) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{430}
}

func (x *FinderLiveRecentRewardOnlineMember) GetContact() *FinderLiveContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderLiveRecentRewardOnlineMember) GetItems() []*FinderLiveRecentRewardOnlineMember_GiftItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *FinderLiveRecentRewardOnlineMember) GetRewardAmountInHeat() uint32 {
	if x != nil && x.RewardAmountInHeat != nil {
		return *x.RewardAmountInHeat
	}
	return 0
}

type FinderGetLiveOnlineMemberResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse                *BaseResponse                         `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	LiveContacts                []*FinderLiveContact                  `protobuf:"bytes,2,rep,name=liveContacts" json:"liveContacts,omitempty"`
	LiveId                      *uint64                               `protobuf:"varint,3,opt,name=liveId" json:"liveId,omitempty"`
	OfflineContacts             []*FinderLiveContact                  `protobuf:"bytes,4,rep,name=offlineContacts" json:"offlineContacts,omitempty"`
	RewardTotalAmountInHeat     *uint64                               `protobuf:"varint,5,opt,name=rewardTotalAmountInHeat" json:"rewardTotalAmountInHeat,omitempty"`
	OnlineMemberCount           *uint32                               `protobuf:"varint,6,opt,name=onlineMemberCount" json:"onlineMemberCount,omitempty"`
	OfflineMemberCount          *uint32                               `protobuf:"varint,7,opt,name=offlineMemberCount" json:"offlineMemberCount,omitempty"`
	SelfContact                 *FinderLiveContact                    `protobuf:"bytes,8,opt,name=selfContact" json:"selfContact,omitempty"`
	LiveContactsLastBuffer      []byte                                `protobuf:"bytes,9,opt,name=liveContactsLastBuffer" json:"liveContactsLastBuffer,omitempty"`
	LiveContactsContinueFlag    *uint32                               `protobuf:"varint,10,opt,name=liveContactsContinueFlag" json:"liveContactsContinueFlag,omitempty"`
	LiveContactsMaxDisplayCount *uint32                               `protobuf:"varint,11,opt,name=liveContactsMaxDisplayCount" json:"liveContactsMaxDisplayCount,omitempty"`
	RecentRewardContacts        []*FinderLiveRecentRewardOnlineMember `protobuf:"bytes,12,rep,name=recentRewardContacts" json:"recentRewardContacts,omitempty"`
}

func (x *FinderGetLiveOnlineMemberResp) Reset() {
	*x = FinderGetLiveOnlineMemberResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveOnlineMemberResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveOnlineMemberResp) ProtoMessage() {}

func (x *FinderGetLiveOnlineMemberResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveOnlineMemberResp.ProtoReflect.Descriptor instead.
func (*FinderGetLiveOnlineMemberResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{431}
}

func (x *FinderGetLiveOnlineMemberResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetLiveOnlineMemberResp) GetLiveContacts() []*FinderLiveContact {
	if x != nil {
		return x.LiveContacts
	}
	return nil
}

func (x *FinderGetLiveOnlineMemberResp) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderGetLiveOnlineMemberResp) GetOfflineContacts() []*FinderLiveContact {
	if x != nil {
		return x.OfflineContacts
	}
	return nil
}

func (x *FinderGetLiveOnlineMemberResp) GetRewardTotalAmountInHeat() uint64 {
	if x != nil && x.RewardTotalAmountInHeat != nil {
		return *x.RewardTotalAmountInHeat
	}
	return 0
}

func (x *FinderGetLiveOnlineMemberResp) GetOnlineMemberCount() uint32 {
	if x != nil && x.OnlineMemberCount != nil {
		return *x.OnlineMemberCount
	}
	return 0
}

func (x *FinderGetLiveOnlineMemberResp) GetOfflineMemberCount() uint32 {
	if x != nil && x.OfflineMemberCount != nil {
		return *x.OfflineMemberCount
	}
	return 0
}

func (x *FinderGetLiveOnlineMemberResp) GetSelfContact() *FinderLiveContact {
	if x != nil {
		return x.SelfContact
	}
	return nil
}

func (x *FinderGetLiveOnlineMemberResp) GetLiveContactsLastBuffer() []byte {
	if x != nil {
		return x.LiveContactsLastBuffer
	}
	return nil
}

func (x *FinderGetLiveOnlineMemberResp) GetLiveContactsContinueFlag() uint32 {
	if x != nil && x.LiveContactsContinueFlag != nil {
		return *x.LiveContactsContinueFlag
	}
	return 0
}

func (x *FinderGetLiveOnlineMemberResp) GetLiveContactsMaxDisplayCount() uint32 {
	if x != nil && x.LiveContactsMaxDisplayCount != nil {
		return *x.LiveContactsMaxDisplayCount
	}
	return 0
}

func (x *FinderGetLiveOnlineMemberResp) GetRecentRewardContacts() []*FinderLiveRecentRewardOnlineMember {
	if x != nil {
		return x.RecentRewardContacts
	}
	return nil
}

type GetInitDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
}

func (x *GetInitDataReq) Reset() {
	*x = GetInitDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInitDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInitDataReq) ProtoMessage() {}

func (x *GetInitDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInitDataReq.ProtoReflect.Descriptor instead.
func (*GetInitDataReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{432}
}

func (x *GetInitDataReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

type GetInitDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Openid          *string       `protobuf:"bytes,2,opt,name=openid" json:"openid,omitempty"`
	OpenKey         *string       `protobuf:"bytes,3,opt,name=openKey" json:"openKey,omitempty"`
	Offerid         *string       `protobuf:"bytes,4,opt,name=offerid" json:"offerid,omitempty"`
	SessionId       *string       `protobuf:"bytes,5,opt,name=sessionId" json:"sessionId,omitempty"`
	SessionType     *string       `protobuf:"bytes,6,opt,name=sessionType" json:"sessionType,omitempty"`
	Pf              *string       `protobuf:"bytes,7,opt,name=pf" json:"pf,omitempty"`
	ErrCode         *int32        `protobuf:"varint,8,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg          *string       `protobuf:"bytes,9,opt,name=errMsg" json:"errMsg,omitempty"`
	UsableProductId *string       `protobuf:"bytes,10,opt,name=usableProductId" json:"usableProductId,omitempty"`
	Environment     *uint32       `protobuf:"varint,11,opt,name=environment" json:"environment,omitempty"`
}

func (x *GetInitDataResp) Reset() {
	*x = GetInitDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInitDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInitDataResp) ProtoMessage() {}

func (x *GetInitDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInitDataResp.ProtoReflect.Descriptor instead.
func (*GetInitDataResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{433}
}

func (x *GetInitDataResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetInitDataResp) GetOpenid() string {
	if x != nil && x.Openid != nil {
		return *x.Openid
	}
	return ""
}

func (x *GetInitDataResp) GetOpenKey() string {
	if x != nil && x.OpenKey != nil {
		return *x.OpenKey
	}
	return ""
}

func (x *GetInitDataResp) GetOfferid() string {
	if x != nil && x.Offerid != nil {
		return *x.Offerid
	}
	return ""
}

func (x *GetInitDataResp) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *GetInitDataResp) GetSessionType() string {
	if x != nil && x.SessionType != nil {
		return *x.SessionType
	}
	return ""
}

func (x *GetInitDataResp) GetPf() string {
	if x != nil && x.Pf != nil {
		return *x.Pf
	}
	return ""
}

func (x *GetInitDataResp) GetErrCode() int32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

func (x *GetInitDataResp) GetErrMsg() string {
	if x != nil && x.ErrMsg != nil {
		return *x.ErrMsg
	}
	return ""
}

func (x *GetInitDataResp) GetUsableProductId() string {
	if x != nil && x.UsableProductId != nil {
		return *x.UsableProductId
	}
	return ""
}

func (x *GetInitDataResp) GetEnvironment() uint32 {
	if x != nil && x.Environment != nil {
		return *x.Environment
	}
	return 0
}

type FinderLiveRelatedListReadStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId *uint64 `protobuf:"varint,1,opt,name=objectId" json:"objectId,omitempty"`
}

func (x *FinderLiveRelatedListReadStat) Reset() {
	*x = FinderLiveRelatedListReadStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveRelatedListReadStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveRelatedListReadStat) ProtoMessage() {}

func (x *FinderLiveRelatedListReadStat) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveRelatedListReadStat.ProtoReflect.Descriptor instead.
func (*FinderLiveRelatedListReadStat) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{434}
}

func (x *FinderLiveRelatedListReadStat) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

type FinderGetLiveRelatedListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest              *BaseRequest                        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq            *FinderBaseRequest                  `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LastBuffer               []byte                              `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ObjectId                 *uint64                             `protobuf:"varint,4,opt,name=objectId" json:"objectId,omitempty"`
	ObjectNonceId            *string                             `protobuf:"bytes,5,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	Longitude                *float32                            `protobuf:"fixed32,6,opt,name=longitude" json:"longitude,omitempty"`
	Latitude                 *float32                            `protobuf:"fixed32,7,opt,name=latitude" json:"latitude,omitempty"`
	Scene                    *uint32                             `protobuf:"varint,8,opt,name=scene" json:"scene,omitempty"`
	Status                   *FinderClientStatus                 `protobuf:"bytes,9,opt,name=status" json:"status,omitempty"`
	LiveStatus               *FinderLiveClientStatus             `protobuf:"bytes,10,opt,name=liveStatus" json:"liveStatus,omitempty"`
	SessionBuffer            *string                             `protobuf:"bytes,11,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	LbsTabTipsInfo           *FinderLbsTabTipsInfo               `protobuf:"bytes,12,opt,name=lbsTabTipsInfo" json:"lbsTabTipsInfo,omitempty"`
	PressureCtrl             *FinderPressureCtrl                 `protobuf:"bytes,13,opt,name=pressureCtrl" json:"pressureCtrl,omitempty"`
	ByPass                   *string                             `protobuf:"bytes,14,opt,name=byPass" json:"byPass,omitempty"`
	CommByPass               *FinderCommByPass                   `protobuf:"bytes,16,opt,name=commByPass" json:"commByPass,omitempty"`
	PullType                 *uint32                             `protobuf:"varint,18,opt,name=pullType" json:"pullType,omitempty"`
	BeforeJoinLiveRoomStatus *FinderLiveBeforeJoinLiveRoomStatus `protobuf:"bytes,19,opt,name=beforeJoinLiveRoomStatus" json:"beforeJoinLiveRoomStatus,omitempty"`
	ReadStat                 []*FinderLiveRelatedListReadStat    `protobuf:"bytes,20,rep,name=readStat" json:"readStat,omitempty"`
	CurObjectIndex           *int32                              `protobuf:"varint,21,opt,name=curObjectIndex" json:"curObjectIndex,omitempty"`
}

func (x *FinderGetLiveRelatedListRequest) Reset() {
	*x = FinderGetLiveRelatedListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveRelatedListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveRelatedListRequest) ProtoMessage() {}

func (x *FinderGetLiveRelatedListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveRelatedListRequest.ProtoReflect.Descriptor instead.
func (*FinderGetLiveRelatedListRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{435}
}

func (x *FinderGetLiveRelatedListRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetLiveRelatedListRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetLiveRelatedListRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetLiveRelatedListRequest) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderGetLiveRelatedListRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderGetLiveRelatedListRequest) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderGetLiveRelatedListRequest) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderGetLiveRelatedListRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderGetLiveRelatedListRequest) GetStatus() *FinderClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FinderGetLiveRelatedListRequest) GetLiveStatus() *FinderLiveClientStatus {
	if x != nil {
		return x.LiveStatus
	}
	return nil
}

func (x *FinderGetLiveRelatedListRequest) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *FinderGetLiveRelatedListRequest) GetLbsTabTipsInfo() *FinderLbsTabTipsInfo {
	if x != nil {
		return x.LbsTabTipsInfo
	}
	return nil
}

func (x *FinderGetLiveRelatedListRequest) GetPressureCtrl() *FinderPressureCtrl {
	if x != nil {
		return x.PressureCtrl
	}
	return nil
}

func (x *FinderGetLiveRelatedListRequest) GetByPass() string {
	if x != nil && x.ByPass != nil {
		return *x.ByPass
	}
	return ""
}

func (x *FinderGetLiveRelatedListRequest) GetCommByPass() *FinderCommByPass {
	if x != nil {
		return x.CommByPass
	}
	return nil
}

func (x *FinderGetLiveRelatedListRequest) GetPullType() uint32 {
	if x != nil && x.PullType != nil {
		return *x.PullType
	}
	return 0
}

func (x *FinderGetLiveRelatedListRequest) GetBeforeJoinLiveRoomStatus() *FinderLiveBeforeJoinLiveRoomStatus {
	if x != nil {
		return x.BeforeJoinLiveRoomStatus
	}
	return nil
}

func (x *FinderGetLiveRelatedListRequest) GetReadStat() []*FinderLiveRelatedListReadStat {
	if x != nil {
		return x.ReadStat
	}
	return nil
}

func (x *FinderGetLiveRelatedListRequest) GetCurObjectIndex() int32 {
	if x != nil && x.CurObjectIndex != nil {
		return *x.CurObjectIndex
	}
	return 0
}

type FinderGetLiveRelatedListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse          `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Object          []*FinderObject        `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	LastBuffer      []byte                 `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag    *uint32                `protobuf:"varint,4,opt,name=continueFlag" json:"continueFlag,omitempty"`
	LivePreloadInfo *FinderLivePreloadInfo `protobuf:"bytes,5,opt,name=livePreloadInfo" json:"livePreloadInfo,omitempty"`
	RefreshInterval *uint32                `protobuf:"varint,6,opt,name=refreshInterval" json:"refreshInterval,omitempty"`
}

func (x *FinderGetLiveRelatedListResponse) Reset() {
	*x = FinderGetLiveRelatedListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveRelatedListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveRelatedListResponse) ProtoMessage() {}

func (x *FinderGetLiveRelatedListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveRelatedListResponse.ProtoReflect.Descriptor instead.
func (*FinderGetLiveRelatedListResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{436}
}

func (x *FinderGetLiveRelatedListResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetLiveRelatedListResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderGetLiveRelatedListResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetLiveRelatedListResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderGetLiveRelatedListResponse) GetLivePreloadInfo() *FinderLivePreloadInfo {
	if x != nil {
		return x.LivePreloadInfo
	}
	return nil
}

func (x *FinderGetLiveRelatedListResponse) GetRefreshInterval() uint32 {
	if x != nil && x.RefreshInterval != nil {
		return *x.RefreshInterval
	}
	return 0
}

type FinderJoinLiveTabTipsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabTipsObjectId   *uint64 `protobuf:"varint,1,opt,name=tabTipsObjectId" json:"tabTipsObjectId,omitempty"`
	TabTipsByPassInfo []byte  `protobuf:"bytes,2,opt,name=tabTipsByPassInfo" json:"tabTipsByPassInfo,omitempty"`
}

func (x *FinderJoinLiveTabTipsInfo) Reset() {
	*x = FinderJoinLiveTabTipsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJoinLiveTabTipsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJoinLiveTabTipsInfo) ProtoMessage() {}

func (x *FinderJoinLiveTabTipsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJoinLiveTabTipsInfo.ProtoReflect.Descriptor instead.
func (*FinderJoinLiveTabTipsInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{437}
}

func (x *FinderJoinLiveTabTipsInfo) GetTabTipsObjectId() uint64 {
	if x != nil && x.TabTipsObjectId != nil {
		return *x.TabTipsObjectId
	}
	return 0
}

func (x *FinderJoinLiveTabTipsInfo) GetTabTipsByPassInfo() []byte {
	if x != nil {
		return x.TabTipsByPassInfo
	}
	return nil
}

type FinderJoinLiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest              *BaseRequest                        `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq            *FinderBaseRequest                  `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LiveId                   *uint64                             `protobuf:"varint,3,opt,name=liveId" json:"liveId,omitempty"`
	LiveCookies              []byte                              `protobuf:"bytes,4,opt,name=liveCookies" json:"liveCookies,omitempty"`
	ObjectId                 *uint64                             `protobuf:"varint,5,opt,name=objectId" json:"objectId,omitempty"`
	FinderUsername           *string                             `protobuf:"bytes,6,opt,name=finderUsername" json:"finderUsername,omitempty"`
	Scene                    *uint32                             `protobuf:"varint,7,opt,name=scene" json:"scene,omitempty"`
	LivePkId                 *string                             `protobuf:"bytes,8,opt,name=livePkId" json:"livePkId,omitempty"`
	ObjectNonceId            *string                             `protobuf:"bytes,9,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	SessionBuffer            *string                             `protobuf:"bytes,10,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	JoinType                 *uint32                             `protobuf:"varint,11,opt,name=joinType" json:"joinType,omitempty"`
	ShareUsername            *string                             `protobuf:"bytes,12,opt,name=shareUsername" json:"shareUsername,omitempty"`
	FromScene                *uint32                             `protobuf:"varint,13,opt,name=fromScene" json:"fromScene,omitempty"`
	RefObjectId              *uint64                             `protobuf:"varint,14,opt,name=refObjectId" json:"refObjectId,omitempty"`
	JoinliveTabTipsInfo      *FinderJoinLiveTabTipsInfo          `protobuf:"bytes,15,opt,name=joinliveTabTipsInfo" json:"joinliveTabTipsInfo,omitempty"`
	LiveSei                  []byte                              `protobuf:"bytes,16,opt,name=liveSei" json:"liveSei,omitempty"`
	EcSource                 *string                             `protobuf:"bytes,17,opt,name=ecSource" json:"ecSource,omitempty"`
	BeforeJoinLiveRoomStatus *FinderLiveBeforeJoinLiveRoomStatus `protobuf:"bytes,18,opt,name=beforeJoinLiveRoomStatus" json:"beforeJoinLiveRoomStatus,omitempty"`
	LiveReportBaseInfo       *FinderLiveReportBaseInfo           `protobuf:"bytes,20,opt,name=liveReportBaseInfo" json:"liveReportBaseInfo,omitempty"`
}

func (x *FinderJoinLiveReq) Reset() {
	*x = FinderJoinLiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJoinLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJoinLiveReq) ProtoMessage() {}

func (x *FinderJoinLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJoinLiveReq.ProtoReflect.Descriptor instead.
func (*FinderJoinLiveReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{438}
}

func (x *FinderJoinLiveReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderJoinLiveReq) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderJoinLiveReq) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderJoinLiveReq) GetLiveCookies() []byte {
	if x != nil {
		return x.LiveCookies
	}
	return nil
}

func (x *FinderJoinLiveReq) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderJoinLiveReq) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderJoinLiveReq) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderJoinLiveReq) GetLivePkId() string {
	if x != nil && x.LivePkId != nil {
		return *x.LivePkId
	}
	return ""
}

func (x *FinderJoinLiveReq) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderJoinLiveReq) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *FinderJoinLiveReq) GetJoinType() uint32 {
	if x != nil && x.JoinType != nil {
		return *x.JoinType
	}
	return 0
}

func (x *FinderJoinLiveReq) GetShareUsername() string {
	if x != nil && x.ShareUsername != nil {
		return *x.ShareUsername
	}
	return ""
}

func (x *FinderJoinLiveReq) GetFromScene() uint32 {
	if x != nil && x.FromScene != nil {
		return *x.FromScene
	}
	return 0
}

func (x *FinderJoinLiveReq) GetRefObjectId() uint64 {
	if x != nil && x.RefObjectId != nil {
		return *x.RefObjectId
	}
	return 0
}

func (x *FinderJoinLiveReq) GetJoinliveTabTipsInfo() *FinderJoinLiveTabTipsInfo {
	if x != nil {
		return x.JoinliveTabTipsInfo
	}
	return nil
}

func (x *FinderJoinLiveReq) GetLiveSei() []byte {
	if x != nil {
		return x.LiveSei
	}
	return nil
}

func (x *FinderJoinLiveReq) GetEcSource() string {
	if x != nil && x.EcSource != nil {
		return *x.EcSource
	}
	return ""
}

func (x *FinderJoinLiveReq) GetBeforeJoinLiveRoomStatus() *FinderLiveBeforeJoinLiveRoomStatus {
	if x != nil {
		return x.BeforeJoinLiveRoomStatus
	}
	return nil
}

func (x *FinderJoinLiveReq) GetLiveReportBaseInfo() *FinderLiveReportBaseInfo {
	if x != nil {
		return x.LiveReportBaseInfo
	}
	return nil
}

type FinderLiveUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableComment    *uint32 `protobuf:"varint,1,opt,name=enableComment" json:"enableComment,omitempty"`
	EnableFriendChat *uint32 `protobuf:"varint,2,opt,name=enableFriendChat" json:"enableFriendChat,omitempty"`
}

func (x *FinderLiveUserInfo) Reset() {
	*x = FinderLiveUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveUserInfo) ProtoMessage() {}

func (x *FinderLiveUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveUserInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveUserInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{439}
}

func (x *FinderLiveUserInfo) GetEnableComment() uint32 {
	if x != nil && x.EnableComment != nil {
		return *x.EnableComment
	}
	return 0
}

func (x *FinderLiveUserInfo) GetEnableFriendChat() uint32 {
	if x != nil && x.EnableFriendChat != nil {
		return *x.EnableFriendChat
	}
	return 0
}

type FinderLiveShopWindowProductItem_ProductPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId *string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	Path  *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (x *FinderLiveShopWindowProductItem_ProductPage) Reset() {
	*x = FinderLiveShopWindowProductItem_ProductPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveShopWindowProductItem_ProductPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveShopWindowProductItem_ProductPage) ProtoMessage() {}

func (x *FinderLiveShopWindowProductItem_ProductPage) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveShopWindowProductItem_ProductPage.ProtoReflect.Descriptor instead.
func (*FinderLiveShopWindowProductItem_ProductPage) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{440}
}

func (x *FinderLiveShopWindowProductItem_ProductPage) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *FinderLiveShopWindowProductItem_ProductPage) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type FinderLiveShopWindowProductItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId        *uint64                                      `protobuf:"varint,1,opt,name=productId" json:"productId,omitempty"`
	ProductPage      *FinderLiveShopWindowProductItem_ProductPage `protobuf:"bytes,2,opt,name=productPage" json:"productPage,omitempty"`
	Title            *string                                      `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	ImgUrl           *string                                      `protobuf:"bytes,4,opt,name=imgUrl" json:"imgUrl,omitempty"`
	Stock            *uint32                                      `protobuf:"varint,5,opt,name=stock" json:"stock,omitempty"`
	MinPrice         *uint32                                      `protobuf:"varint,6,opt,name=minPrice" json:"minPrice,omitempty"`
	MaxPrice         *uint32                                      `protobuf:"varint,7,opt,name=maxPrice" json:"maxPrice,omitempty"`
	Promoting        *uint32                                      `protobuf:"varint,8,opt,name=promoting" json:"promoting,omitempty"`
	ExtBuff          *string                                      `protobuf:"bytes,9,opt,name=extBuff" json:"extBuff,omitempty"`
	PlatformName     *string                                      `protobuf:"bytes,10,opt,name=platformName" json:"platformName,omitempty"`
	Status           *uint32                                      `protobuf:"varint,11,opt,name=status" json:"status,omitempty"`
	UserPurchasePage *FinderLiveShopWindowProductItem_ProductPage `protobuf:"bytes,12,opt,name=userPurchasePage" json:"userPurchasePage,omitempty"`
	PlatformId       *uint32                                      `protobuf:"varint,13,opt,name=platformId" json:"platformId,omitempty"`
	ExtraData        *string                                      `protobuf:"bytes,14,opt,name=extraData" json:"extraData,omitempty"`
	AppUsername      *string                                      `protobuf:"bytes,15,opt,name=appUsername" json:"appUsername,omitempty"`
	ShopExtraData    *string                                      `protobuf:"bytes,16,opt,name=shopExtraData" json:"shopExtraData,omitempty"`
}

func (x *FinderLiveShopWindowProductItem) Reset() {
	*x = FinderLiveShopWindowProductItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveShopWindowProductItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveShopWindowProductItem) ProtoMessage() {}

func (x *FinderLiveShopWindowProductItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveShopWindowProductItem.ProtoReflect.Descriptor instead.
func (*FinderLiveShopWindowProductItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{441}
}

func (x *FinderLiveShopWindowProductItem) GetProductId() uint64 {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return 0
}

func (x *FinderLiveShopWindowProductItem) GetProductPage() *FinderLiveShopWindowProductItem_ProductPage {
	if x != nil {
		return x.ProductPage
	}
	return nil
}

func (x *FinderLiveShopWindowProductItem) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderLiveShopWindowProductItem) GetImgUrl() string {
	if x != nil && x.ImgUrl != nil {
		return *x.ImgUrl
	}
	return ""
}

func (x *FinderLiveShopWindowProductItem) GetStock() uint32 {
	if x != nil && x.Stock != nil {
		return *x.Stock
	}
	return 0
}

func (x *FinderLiveShopWindowProductItem) GetMinPrice() uint32 {
	if x != nil && x.MinPrice != nil {
		return *x.MinPrice
	}
	return 0
}

func (x *FinderLiveShopWindowProductItem) GetMaxPrice() uint32 {
	if x != nil && x.MaxPrice != nil {
		return *x.MaxPrice
	}
	return 0
}

func (x *FinderLiveShopWindowProductItem) GetPromoting() uint32 {
	if x != nil && x.Promoting != nil {
		return *x.Promoting
	}
	return 0
}

func (x *FinderLiveShopWindowProductItem) GetExtBuff() string {
	if x != nil && x.ExtBuff != nil {
		return *x.ExtBuff
	}
	return ""
}

func (x *FinderLiveShopWindowProductItem) GetPlatformName() string {
	if x != nil && x.PlatformName != nil {
		return *x.PlatformName
	}
	return ""
}

func (x *FinderLiveShopWindowProductItem) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *FinderLiveShopWindowProductItem) GetUserPurchasePage() *FinderLiveShopWindowProductItem_ProductPage {
	if x != nil {
		return x.UserPurchasePage
	}
	return nil
}

func (x *FinderLiveShopWindowProductItem) GetPlatformId() uint32 {
	if x != nil && x.PlatformId != nil {
		return *x.PlatformId
	}
	return 0
}

func (x *FinderLiveShopWindowProductItem) GetExtraData() string {
	if x != nil && x.ExtraData != nil {
		return *x.ExtraData
	}
	return ""
}

func (x *FinderLiveShopWindowProductItem) GetAppUsername() string {
	if x != nil && x.AppUsername != nil {
		return *x.AppUsername
	}
	return ""
}

func (x *FinderLiveShopWindowProductItem) GetShopExtraData() string {
	if x != nil && x.ShopExtraData != nil {
		return *x.ShopExtraData
	}
	return ""
}

type FinderLiveTemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoType       *uint32 `protobuf:"varint,1,opt,name=infoType" json:"infoType,omitempty"`
	InfoBuffer     []byte  `protobuf:"bytes,2,opt,name=infoBuffer" json:"infoBuffer,omitempty"`
	VersionWording *string `protobuf:"bytes,3,opt,name=versionWording" json:"versionWording,omitempty"`
	Seq            *uint32 `protobuf:"varint,4,opt,name=seq" json:"seq,omitempty"`
}

func (x *FinderLiveTemplateInfo) Reset() {
	*x = FinderLiveTemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveTemplateInfo) ProtoMessage() {}

func (x *FinderLiveTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveTemplateInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveTemplateInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{442}
}

func (x *FinderLiveTemplateInfo) GetInfoType() uint32 {
	if x != nil && x.InfoType != nil {
		return *x.InfoType
	}
	return 0
}

func (x *FinderLiveTemplateInfo) GetInfoBuffer() []byte {
	if x != nil {
		return x.InfoBuffer
	}
	return nil
}

func (x *FinderLiveTemplateInfo) GetVersionWording() string {
	if x != nil && x.VersionWording != nil {
		return *x.VersionWording
	}
	return ""
}

func (x *FinderLiveTemplateInfo) GetSeq() uint32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

type CheerIconInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IconUrl  *string `protobuf:"bytes,1,opt,name=iconUrl" json:"iconUrl,omitempty"`
	SampRate *uint32 `protobuf:"varint,2,opt,name=sampRate" json:"sampRate,omitempty"`
}

func (x *CheerIconInfo) Reset() {
	*x = CheerIconInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheerIconInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheerIconInfo) ProtoMessage() {}

func (x *CheerIconInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheerIconInfo.ProtoReflect.Descriptor instead.
func (*CheerIconInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{443}
}

func (x *CheerIconInfo) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *CheerIconInfo) GetSampRate() uint32 {
	if x != nil && x.SampRate != nil {
		return *x.SampRate
	}
	return 0
}

type FinderLiveAdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheerIconInfo []*CheerIconInfo `protobuf:"bytes,1,rep,name=cheerIconInfo" json:"cheerIconInfo,omitempty"`
}

func (x *FinderLiveAdInfo) Reset() {
	*x = FinderLiveAdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveAdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveAdInfo) ProtoMessage() {}

func (x *FinderLiveAdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveAdInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveAdInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{444}
}

func (x *FinderLiveAdInfo) GetCheerIconInfo() []*CheerIconInfo {
	if x != nil {
		return x.CheerIconInfo
	}
	return nil
}

type FinderJoinLiveResp_PromotingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromoteType *uint32 `protobuf:"varint,1,opt,name=promoteType" json:"promoteType,omitempty"`
	ExtInfo     []byte  `protobuf:"bytes,2,opt,name=extInfo" json:"extInfo,omitempty"`
}

func (x *FinderJoinLiveResp_PromotingInfo) Reset() {
	*x = FinderJoinLiveResp_PromotingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJoinLiveResp_PromotingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJoinLiveResp_PromotingInfo) ProtoMessage() {}

func (x *FinderJoinLiveResp_PromotingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJoinLiveResp_PromotingInfo.ProtoReflect.Descriptor instead.
func (*FinderJoinLiveResp_PromotingInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{445}
}

func (x *FinderJoinLiveResp_PromotingInfo) GetPromoteType() uint32 {
	if x != nil && x.PromoteType != nil {
		return *x.PromoteType
	}
	return 0
}

func (x *FinderJoinLiveResp_PromotingInfo) GetExtInfo() []byte {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

type FinderLiveBackgroundMusicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SongIdList []uint32 `protobuf:"varint,1,rep,name=songIdList" json:"songIdList,omitempty"`
}

func (x *FinderLiveBackgroundMusicInfo) Reset() {
	*x = FinderLiveBackgroundMusicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveBackgroundMusicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveBackgroundMusicInfo) ProtoMessage() {}

func (x *FinderLiveBackgroundMusicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveBackgroundMusicInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveBackgroundMusicInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{446}
}

func (x *FinderLiveBackgroundMusicInfo) GetSongIdList() []uint32 {
	if x != nil {
		return x.SongIdList
	}
	return nil
}

type GameTeamUpPaymentSetting_DefaultPaymentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Payment *uint32 `protobuf:"varint,2,opt,name=payment" json:"payment,omitempty"`
}

func (x *GameTeamUpPaymentSetting_DefaultPaymentItem) Reset() {
	*x = GameTeamUpPaymentSetting_DefaultPaymentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameTeamUpPaymentSetting_DefaultPaymentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTeamUpPaymentSetting_DefaultPaymentItem) ProtoMessage() {}

func (x *GameTeamUpPaymentSetting_DefaultPaymentItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTeamUpPaymentSetting_DefaultPaymentItem.ProtoReflect.Descriptor instead.
func (*GameTeamUpPaymentSetting_DefaultPaymentItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{447}
}

func (x *GameTeamUpPaymentSetting_DefaultPaymentItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GameTeamUpPaymentSetting_DefaultPaymentItem) GetPayment() uint32 {
	if x != nil && x.Payment != nil {
		return *x.Payment
	}
	return 0
}

type GameTeamUpPaymentSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumPayment     *uint32                                        `protobuf:"varint,1,opt,name=maximumPayment" json:"maximumPayment,omitempty"`
	SettedPayment      *uint32                                        `protobuf:"varint,2,opt,name=settedPayment" json:"settedPayment,omitempty"`
	DefaultPaymentList []*GameTeamUpPaymentSetting_DefaultPaymentItem `protobuf:"bytes,3,rep,name=defaultPaymentList" json:"defaultPaymentList,omitempty"`
}

func (x *GameTeamUpPaymentSetting) Reset() {
	*x = GameTeamUpPaymentSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameTeamUpPaymentSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTeamUpPaymentSetting) ProtoMessage() {}

func (x *GameTeamUpPaymentSetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTeamUpPaymentSetting.ProtoReflect.Descriptor instead.
func (*GameTeamUpPaymentSetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{448}
}

func (x *GameTeamUpPaymentSetting) GetMaximumPayment() uint32 {
	if x != nil && x.MaximumPayment != nil {
		return *x.MaximumPayment
	}
	return 0
}

func (x *GameTeamUpPaymentSetting) GetSettedPayment() uint32 {
	if x != nil && x.SettedPayment != nil {
		return *x.SettedPayment
	}
	return 0
}

func (x *GameTeamUpPaymentSetting) GetDefaultPaymentList() []*GameTeamUpPaymentSetting_DefaultPaymentItem {
	if x != nil {
		return x.DefaultPaymentList
	}
	return nil
}

type GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tips           *string                   `protobuf:"bytes,1,opt,name=tips" json:"tips,omitempty"`
	Value          *uint32                   `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	PaymentSetting *GameTeamUpPaymentSetting `protobuf:"bytes,3,opt,name=paymentSetting" json:"paymentSetting,omitempty"`
}

func (x *GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo) Reset() {
	*x = GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo) ProtoMessage() {}

func (x *GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo.ProtoReflect.Descriptor instead.
func (*GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{449}
}

func (x *GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo) GetTips() string {
	if x != nil && x.Tips != nil {
		return *x.Tips
	}
	return ""
}

func (x *GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo) GetPaymentSetting() *GameTeamUpPaymentSetting {
	if x != nil {
		return x.PaymentSetting
	}
	return nil
}

type GameLiveJoinTeamSettingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QualificationsInfos []*GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo `protobuf:"bytes,1,rep,name=qualificationsInfos" json:"qualificationsInfos,omitempty"`
}

func (x *GameLiveJoinTeamSettingInfo) Reset() {
	*x = GameLiveJoinTeamSettingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLiveJoinTeamSettingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLiveJoinTeamSettingInfo) ProtoMessage() {}

func (x *GameLiveJoinTeamSettingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLiveJoinTeamSettingInfo.ProtoReflect.Descriptor instead.
func (*GameLiveJoinTeamSettingInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{450}
}

func (x *GameLiveJoinTeamSettingInfo) GetQualificationsInfos() []*GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo {
	if x != nil {
		return x.QualificationsInfos
	}
	return nil
}

type FinderLiveGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinTeamUpSettingInfo *GameLiveJoinTeamSettingInfo `protobuf:"bytes,1,opt,name=joinTeamUpSettingInfo" json:"joinTeamUpSettingInfo,omitempty"`
	LastJoinTeamUpSetting *uint32                      `protobuf:"varint,2,opt,name=lastJoinTeamUpSetting" json:"lastJoinTeamUpSetting,omitempty"`
	GameAppid             *string                      `protobuf:"bytes,3,opt,name=gameAppid" json:"gameAppid,omitempty"`
	GameName              *string                      `protobuf:"bytes,4,opt,name=gameName" json:"gameName,omitempty"`
	GameDownloadUrl       *string                      `protobuf:"bytes,5,opt,name=gameDownloadUrl" json:"gameDownloadUrl,omitempty"`
	ShowTeamupButton      *uint32                      `protobuf:"varint,6,opt,name=showTeamupButton" json:"showTeamupButton,omitempty"`
}

func (x *FinderLiveGameInfo) Reset() {
	*x = FinderLiveGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveGameInfo) ProtoMessage() {}

func (x *FinderLiveGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveGameInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveGameInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{451}
}

func (x *FinderLiveGameInfo) GetJoinTeamUpSettingInfo() *GameLiveJoinTeamSettingInfo {
	if x != nil {
		return x.JoinTeamUpSettingInfo
	}
	return nil
}

func (x *FinderLiveGameInfo) GetLastJoinTeamUpSetting() uint32 {
	if x != nil && x.LastJoinTeamUpSetting != nil {
		return *x.LastJoinTeamUpSetting
	}
	return 0
}

func (x *FinderLiveGameInfo) GetGameAppid() string {
	if x != nil && x.GameAppid != nil {
		return *x.GameAppid
	}
	return ""
}

func (x *FinderLiveGameInfo) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *FinderLiveGameInfo) GetGameDownloadUrl() string {
	if x != nil && x.GameDownloadUrl != nil {
		return *x.GameDownloadUrl
	}
	return ""
}

func (x *FinderLiveGameInfo) GetShowTeamupButton() uint32 {
	if x != nil && x.ShowTeamupButton != nil {
		return *x.ShowTeamupButton
	}
	return 0
}

type FinderLiveErrorPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Wording    *string `protobuf:"bytes,2,opt,name=wording" json:"wording,omitempty"`
	Title      *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	JumpUrl    *string `protobuf:"bytes,4,opt,name=jumpUrl" json:"jumpUrl,omitempty"`
	UrlWording *string `protobuf:"bytes,5,opt,name=urlWording" json:"urlWording,omitempty"`
}

func (x *FinderLiveErrorPage) Reset() {
	*x = FinderLiveErrorPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveErrorPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveErrorPage) ProtoMessage() {}

func (x *FinderLiveErrorPage) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveErrorPage.ProtoReflect.Descriptor instead.
func (*FinderLiveErrorPage) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{452}
}

func (x *FinderLiveErrorPage) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderLiveErrorPage) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

func (x *FinderLiveErrorPage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderLiveErrorPage) GetJumpUrl() string {
	if x != nil && x.JumpUrl != nil {
		return *x.JumpUrl
	}
	return ""
}

func (x *FinderLiveErrorPage) GetUrlWording() string {
	if x != nil && x.UrlWording != nil {
		return *x.UrlWording
	}
	return ""
}

type FinderLiveBulletin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Image      *string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	ShowNotice *bool   `protobuf:"varint,3,opt,name=showNotice" json:"showNotice,omitempty"`
	Seq        *uint64 `protobuf:"varint,4,opt,name=seq" json:"seq,omitempty"`
}

func (x *FinderLiveBulletin) Reset() {
	*x = FinderLiveBulletin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveBulletin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveBulletin) ProtoMessage() {}

func (x *FinderLiveBulletin) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveBulletin.ProtoReflect.Descriptor instead.
func (*FinderLiveBulletin) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{453}
}

func (x *FinderLiveBulletin) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *FinderLiveBulletin) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *FinderLiveBulletin) GetShowNotice() bool {
	if x != nil && x.ShowNotice != nil {
		return *x.ShowNotice
	}
	return false
}

func (x *FinderLiveBulletin) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

type FinderLiveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Visibility             *uint32 `protobuf:"varint,1,opt,name=visibility" json:"visibility,omitempty"`
	GameData               []byte  `protobuf:"bytes,2,opt,name=gameData" json:"gameData,omitempty"`
	GameFramesetVisibility *uint32 `protobuf:"varint,3,opt,name=gameFramesetVisibility" json:"gameFramesetVisibility,omitempty"`
	Updated                *bool   `protobuf:"varint,4,opt,name=updated" json:"updated,omitempty"`
}

func (x *FinderLiveGameData) Reset() {
	*x = FinderLiveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveGameData) ProtoMessage() {}

func (x *FinderLiveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveGameData.ProtoReflect.Descriptor instead.
func (*FinderLiveGameData) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{454}
}

func (x *FinderLiveGameData) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *FinderLiveGameData) GetGameData() []byte {
	if x != nil {
		return x.GameData
	}
	return nil
}

func (x *FinderLiveGameData) GetGameFramesetVisibility() uint32 {
	if x != nil && x.GameFramesetVisibility != nil {
		return *x.GameFramesetVisibility
	}
	return 0
}

func (x *FinderLiveGameData) GetUpdated() bool {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return false
}

type FinderLiveCheerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheerIconInfo  []*CheerIconInfo `protobuf:"bytes,1,rep,name=cheerIconInfo" json:"cheerIconInfo,omitempty"`
	CheerButtonUrl *string          `protobuf:"bytes,2,opt,name=cheerButtonUrl" json:"cheerButtonUrl,omitempty"`
	Enable         *uint32          `protobuf:"varint,3,opt,name=enable" json:"enable,omitempty"`
}

func (x *FinderLiveCheerInfo) Reset() {
	*x = FinderLiveCheerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveCheerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveCheerInfo) ProtoMessage() {}

func (x *FinderLiveCheerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveCheerInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveCheerInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{455}
}

func (x *FinderLiveCheerInfo) GetCheerIconInfo() []*CheerIconInfo {
	if x != nil {
		return x.CheerIconInfo
	}
	return nil
}

func (x *FinderLiveCheerInfo) GetCheerButtonUrl() string {
	if x != nil && x.CheerButtonUrl != nil {
		return *x.CheerButtonUrl
	}
	return ""
}

func (x *FinderLiveCheerInfo) GetEnable() uint32 {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return 0
}

type GameLiveJumpInfo_FinderLiveWeappJumpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid        *string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Path         *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	GameLiveInfo *string `protobuf:"bytes,3,opt,name=gameLiveInfo" json:"gameLiveInfo,omitempty"`
	VersionType  *uint32 `protobuf:"varint,4,opt,name=versionType" json:"versionType,omitempty"`
}

func (x *GameLiveJumpInfo_FinderLiveWeappJumpInfo) Reset() {
	*x = GameLiveJumpInfo_FinderLiveWeappJumpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLiveJumpInfo_FinderLiveWeappJumpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLiveJumpInfo_FinderLiveWeappJumpInfo) ProtoMessage() {}

func (x *GameLiveJumpInfo_FinderLiveWeappJumpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLiveJumpInfo_FinderLiveWeappJumpInfo.ProtoReflect.Descriptor instead.
func (*GameLiveJumpInfo_FinderLiveWeappJumpInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{456}
}

func (x *GameLiveJumpInfo_FinderLiveWeappJumpInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *GameLiveJumpInfo_FinderLiveWeappJumpInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *GameLiveJumpInfo_FinderLiveWeappJumpInfo) GetGameLiveInfo() string {
	if x != nil && x.GameLiveInfo != nil {
		return *x.GameLiveInfo
	}
	return ""
}

func (x *GameLiveJumpInfo_FinderLiveWeappJumpInfo) GetVersionType() uint32 {
	if x != nil && x.VersionType != nil {
		return *x.VersionType
	}
	return 0
}

type GameLiveJumpInfo_FinderLiveJumpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JumpType       *uint32                                   `protobuf:"varint,1,opt,name=jumpType" json:"jumpType,omitempty"`
	JumpUrl        *string                                   `protobuf:"bytes,2,opt,name=jumpUrl" json:"jumpUrl,omitempty"`
	WeappJumpInfo  *GameLiveJumpInfo_FinderLiveWeappJumpInfo `protobuf:"bytes,3,opt,name=weappJumpInfo" json:"weappJumpInfo,omitempty"`
	IsShowEntrance *bool                                     `protobuf:"varint,4,opt,name=isShowEntrance" json:"isShowEntrance,omitempty"`
}

func (x *GameLiveJumpInfo_FinderLiveJumpInfo) Reset() {
	*x = GameLiveJumpInfo_FinderLiveJumpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLiveJumpInfo_FinderLiveJumpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLiveJumpInfo_FinderLiveJumpInfo) ProtoMessage() {}

func (x *GameLiveJumpInfo_FinderLiveJumpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLiveJumpInfo_FinderLiveJumpInfo.ProtoReflect.Descriptor instead.
func (*GameLiveJumpInfo_FinderLiveJumpInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{457}
}

func (x *GameLiveJumpInfo_FinderLiveJumpInfo) GetJumpType() uint32 {
	if x != nil && x.JumpType != nil {
		return *x.JumpType
	}
	return 0
}

func (x *GameLiveJumpInfo_FinderLiveJumpInfo) GetJumpUrl() string {
	if x != nil && x.JumpUrl != nil {
		return *x.JumpUrl
	}
	return ""
}

func (x *GameLiveJumpInfo_FinderLiveJumpInfo) GetWeappJumpInfo() *GameLiveJumpInfo_FinderLiveWeappJumpInfo {
	if x != nil {
		return x.WeappJumpInfo
	}
	return nil
}

func (x *GameLiveJumpInfo_FinderLiveJumpInfo) GetIsShowEntrance() bool {
	if x != nil && x.IsShowEntrance != nil {
		return *x.IsShowEntrance
	}
	return false
}

type GameLiveJumpInfo_FinderLiveFineGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IosJumpInfo     *GameLiveJumpInfo_FinderLiveJumpInfo `protobuf:"bytes,1,opt,name=iosJumpInfo" json:"iosJumpInfo,omitempty"`
	AndroidJumpInfo *GameLiveJumpInfo_FinderLiveJumpInfo `protobuf:"bytes,2,opt,name=androidJumpInfo" json:"androidJumpInfo,omitempty"`
	Appid           *string                              `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
}

func (x *GameLiveJumpInfo_FinderLiveFineGameInfo) Reset() {
	*x = GameLiveJumpInfo_FinderLiveFineGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLiveJumpInfo_FinderLiveFineGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLiveJumpInfo_FinderLiveFineGameInfo) ProtoMessage() {}

func (x *GameLiveJumpInfo_FinderLiveFineGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLiveJumpInfo_FinderLiveFineGameInfo.ProtoReflect.Descriptor instead.
func (*GameLiveJumpInfo_FinderLiveFineGameInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{458}
}

func (x *GameLiveJumpInfo_FinderLiveFineGameInfo) GetIosJumpInfo() *GameLiveJumpInfo_FinderLiveJumpInfo {
	if x != nil {
		return x.IosJumpInfo
	}
	return nil
}

func (x *GameLiveJumpInfo_FinderLiveFineGameInfo) GetAndroidJumpInfo() *GameLiveJumpInfo_FinderLiveJumpInfo {
	if x != nil {
		return x.AndroidJumpInfo
	}
	return nil
}

func (x *GameLiveJumpInfo_FinderLiveFineGameInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

type GameLiveJumpInfo_FinderLiveWxaGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IosJumpInfo     *GameLiveJumpInfo_FinderLiveJumpInfo `protobuf:"bytes,1,opt,name=iosJumpInfo" json:"iosJumpInfo,omitempty"`
	AndroidJumpInfo *GameLiveJumpInfo_FinderLiveJumpInfo `protobuf:"bytes,2,opt,name=androidJumpInfo" json:"androidJumpInfo,omitempty"`
	Appid           *string                              `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
}

func (x *GameLiveJumpInfo_FinderLiveWxaGameInfo) Reset() {
	*x = GameLiveJumpInfo_FinderLiveWxaGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLiveJumpInfo_FinderLiveWxaGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLiveJumpInfo_FinderLiveWxaGameInfo) ProtoMessage() {}

func (x *GameLiveJumpInfo_FinderLiveWxaGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLiveJumpInfo_FinderLiveWxaGameInfo.ProtoReflect.Descriptor instead.
func (*GameLiveJumpInfo_FinderLiveWxaGameInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{459}
}

func (x *GameLiveJumpInfo_FinderLiveWxaGameInfo) GetIosJumpInfo() *GameLiveJumpInfo_FinderLiveJumpInfo {
	if x != nil {
		return x.IosJumpInfo
	}
	return nil
}

func (x *GameLiveJumpInfo_FinderLiveWxaGameInfo) GetAndroidJumpInfo() *GameLiveJumpInfo_FinderLiveJumpInfo {
	if x != nil {
		return x.AndroidJumpInfo
	}
	return nil
}

func (x *GameLiveJumpInfo_FinderLiveWxaGameInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

type GameLiveJumpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      *uint32                                  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	GameName       *string                                  `protobuf:"bytes,2,opt,name=gameName" json:"gameName,omitempty"`
	GameType       *uint32                                  `protobuf:"varint,3,opt,name=gameType" json:"gameType,omitempty"`
	FineGameInfo   *GameLiveJumpInfo_FinderLiveFineGameInfo `protobuf:"bytes,4,opt,name=fineGameInfo" json:"fineGameInfo,omitempty"`
	WxaGameInfo    *GameLiveJumpInfo_FinderLiveWxaGameInfo  `protobuf:"bytes,5,opt,name=wxaGameInfo" json:"wxaGameInfo,omitempty"`
	IsShowEntrance *bool                                    `protobuf:"varint,6,opt,name=isShowEntrance" json:"isShowEntrance,omitempty"`
	ReportInfo     *string                                  `protobuf:"bytes,7,opt,name=reportInfo" json:"reportInfo,omitempty"`
}

func (x *GameLiveJumpInfo) Reset() {
	*x = GameLiveJumpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLiveJumpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLiveJumpInfo) ProtoMessage() {}

func (x *GameLiveJumpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLiveJumpInfo.ProtoReflect.Descriptor instead.
func (*GameLiveJumpInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{460}
}

func (x *GameLiveJumpInfo) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *GameLiveJumpInfo) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *GameLiveJumpInfo) GetGameType() uint32 {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return 0
}

func (x *GameLiveJumpInfo) GetFineGameInfo() *GameLiveJumpInfo_FinderLiveFineGameInfo {
	if x != nil {
		return x.FineGameInfo
	}
	return nil
}

func (x *GameLiveJumpInfo) GetWxaGameInfo() *GameLiveJumpInfo_FinderLiveWxaGameInfo {
	if x != nil {
		return x.WxaGameInfo
	}
	return nil
}

func (x *GameLiveJumpInfo) GetIsShowEntrance() bool {
	if x != nil && x.IsShowEntrance != nil {
		return *x.IsShowEntrance
	}
	return false
}

func (x *GameLiveJumpInfo) GetReportInfo() string {
	if x != nil && x.ReportInfo != nil {
		return *x.ReportInfo
	}
	return ""
}

type FinderLiveFanClubInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClubName                *string `protobuf:"bytes,1,opt,name=clubName" json:"clubName,omitempty"`
	ClubCreated             *bool   `protobuf:"varint,2,opt,name=clubCreated" json:"clubCreated,omitempty"`
	MemberCount             *uint32 `protobuf:"varint,3,opt,name=memberCount" json:"memberCount,omitempty"`
	DetailPageUrl           *string `protobuf:"bytes,4,opt,name=detailPageUrl" json:"detailPageUrl,omitempty"`
	EnableFanClub           *bool   `protobuf:"varint,5,opt,name=enableFanClub" json:"enableFanClub,omitempty"`
	DefaultIntimacy         *uint32 `protobuf:"varint,6,opt,name=defaultIntimacy" json:"defaultIntimacy,omitempty"`
	IntimacyRefreshInterval *uint32 `protobuf:"varint,7,opt,name=intimacyRefreshInterval" json:"intimacyRefreshInterval,omitempty"`
}

func (x *FinderLiveFanClubInfo) Reset() {
	*x = FinderLiveFanClubInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveFanClubInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveFanClubInfo) ProtoMessage() {}

func (x *FinderLiveFanClubInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveFanClubInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveFanClubInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{461}
}

func (x *FinderLiveFanClubInfo) GetClubName() string {
	if x != nil && x.ClubName != nil {
		return *x.ClubName
	}
	return ""
}

func (x *FinderLiveFanClubInfo) GetClubCreated() bool {
	if x != nil && x.ClubCreated != nil {
		return *x.ClubCreated
	}
	return false
}

func (x *FinderLiveFanClubInfo) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *FinderLiveFanClubInfo) GetDetailPageUrl() string {
	if x != nil && x.DetailPageUrl != nil {
		return *x.DetailPageUrl
	}
	return ""
}

func (x *FinderLiveFanClubInfo) GetEnableFanClub() bool {
	if x != nil && x.EnableFanClub != nil {
		return *x.EnableFanClub
	}
	return false
}

func (x *FinderLiveFanClubInfo) GetDefaultIntimacy() uint32 {
	if x != nil && x.DefaultIntimacy != nil {
		return *x.DefaultIntimacy
	}
	return 0
}

func (x *FinderLiveFanClubInfo) GetIntimacyRefreshInterval() uint32 {
	if x != nil && x.IntimacyRefreshInterval != nil {
		return *x.IntimacyRefreshInterval
	}
	return 0
}

type FinderLivePromoteMsgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	NeedGetJumpInfo   *bool   `protobuf:"varint,2,opt,name=needGetJumpInfo" json:"needGetJumpInfo,omitempty"`
	PromoteInfoBuffer []byte  `protobuf:"bytes,3,opt,name=promoteInfoBuffer" json:"promoteInfoBuffer,omitempty"`
	Cancel            *uint32 `protobuf:"varint,4,opt,name=cancel" json:"cancel,omitempty"`
	Id                *uint64 `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
	JumpId            *string `protobuf:"bytes,6,opt,name=jumpId" json:"jumpId,omitempty"`
	ExtBuffer         []byte  `protobuf:"bytes,7,opt,name=extBuffer" json:"extBuffer,omitempty"`
}

func (x *FinderLivePromoteMsgInfo) Reset() {
	*x = FinderLivePromoteMsgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLivePromoteMsgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLivePromoteMsgInfo) ProtoMessage() {}

func (x *FinderLivePromoteMsgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLivePromoteMsgInfo.ProtoReflect.Descriptor instead.
func (*FinderLivePromoteMsgInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{462}
}

func (x *FinderLivePromoteMsgInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderLivePromoteMsgInfo) GetNeedGetJumpInfo() bool {
	if x != nil && x.NeedGetJumpInfo != nil {
		return *x.NeedGetJumpInfo
	}
	return false
}

func (x *FinderLivePromoteMsgInfo) GetPromoteInfoBuffer() []byte {
	if x != nil {
		return x.PromoteInfoBuffer
	}
	return nil
}

func (x *FinderLivePromoteMsgInfo) GetCancel() uint32 {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return 0
}

func (x *FinderLivePromoteMsgInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FinderLivePromoteMsgInfo) GetJumpId() string {
	if x != nil && x.JumpId != nil {
		return *x.JumpId
	}
	return ""
}

func (x *FinderLivePromoteMsgInfo) GetExtBuffer() []byte {
	if x != nil {
		return x.ExtBuffer
	}
	return nil
}

type GeneralGameLiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableGameFeature *bool   `protobuf:"varint,1,opt,name=enableGameFeature" json:"enableGameFeature,omitempty"`
	ExtFlag           *uint32 `protobuf:"varint,2,opt,name=extFlag" json:"extFlag,omitempty"`
	LiveType          *uint32 `protobuf:"varint,3,opt,name=liveType" json:"liveType,omitempty"`
}

func (x *GeneralGameLiveInfo) Reset() {
	*x = GeneralGameLiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralGameLiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralGameLiveInfo) ProtoMessage() {}

func (x *GeneralGameLiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralGameLiveInfo.ProtoReflect.Descriptor instead.
func (*GeneralGameLiveInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{463}
}

func (x *GeneralGameLiveInfo) GetEnableGameFeature() bool {
	if x != nil && x.EnableGameFeature != nil {
		return *x.EnableGameFeature
	}
	return false
}

func (x *GeneralGameLiveInfo) GetExtFlag() uint32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *GeneralGameLiveInfo) GetLiveType() uint32 {
	if x != nil && x.LiveType != nil {
		return *x.LiveType
	}
	return 0
}

type FinderLiveAudienceEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventToken *string `protobuf:"bytes,1,opt,name=eventToken" json:"eventToken,omitempty"`
}

func (x *FinderLiveAudienceEventInfo) Reset() {
	*x = FinderLiveAudienceEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveAudienceEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveAudienceEventInfo) ProtoMessage() {}

func (x *FinderLiveAudienceEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveAudienceEventInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveAudienceEventInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{464}
}

func (x *FinderLiveAudienceEventInfo) GetEventToken() string {
	if x != nil && x.EventToken != nil {
		return *x.EventToken
	}
	return ""
}

type FinderJoinLiveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse                 *BaseResponse                     `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	LiveCookies                  []byte                            `protobuf:"bytes,2,opt,name=liveCookies" json:"liveCookies,omitempty"`
	LiveSdkInfo                  *LiveSdkInfo                      `protobuf:"bytes,3,opt,name=liveSdkInfo" json:"liveSdkInfo,omitempty"`
	LiveInfo                     *FinderLiveInfo                   `protobuf:"bytes,4,opt,name=liveInfo" json:"liveInfo,omitempty"`
	LiveMicInfo                  *FinderLiveMicInfo                `protobuf:"bytes,5,opt,name=liveMicInfo" json:"liveMicInfo,omitempty"`
	UserInfo                     *FinderLiveUserInfo               `protobuf:"bytes,6,opt,name=userInfo" json:"userInfo,omitempty"`
	PromotingProduct             *FinderLiveShopWindowProductItem  `protobuf:"bytes,7,opt,name=promotingProduct" json:"promotingProduct,omitempty"`
	SelfContact                  *FinderLiveContact                `protobuf:"bytes,8,opt,name=selfContact" json:"selfContact,omitempty"`
	Tips                         *FinderJoinLiveTips               `protobuf:"bytes,9,opt,name=tips" json:"tips,omitempty"`
	TemplateInfoList             []*FinderLiveTemplateInfo         `protobuf:"bytes,10,rep,name=templateInfoList" json:"templateInfoList,omitempty"`
	AliasInfo                    []*FinderLiveAliasInfo            `protobuf:"bytes,11,rep,name=aliasInfo" json:"aliasInfo,omitempty"`
	CurrentAliasRoleType         *uint32                           `protobuf:"varint,12,opt,name=currentAliasRoleType" json:"currentAliasRoleType,omitempty"`
	JoinLiveFlag                 *uint32                           `protobuf:"varint,13,opt,name=joinLiveFlag" json:"joinLiveFlag,omitempty"`
	NextAliasModAvailableTime    *uint64                           `protobuf:"varint,14,opt,name=nextAliasModAvailableTime" json:"nextAliasModAvailableTime,omitempty"`
	VerifyInfoBuf                *string                           `protobuf:"bytes,15,opt,name=verifyInfoBuf" json:"verifyInfoBuf,omitempty"`
	Location                     *FinderLocation                   `protobuf:"bytes,16,opt,name=location" json:"location,omitempty"`
	WxaShopInfo                  *FinderWxAppInfo                  `protobuf:"bytes,17,opt,name=wxaShopInfo" json:"wxaShopInfo,omitempty"`
	RedpacketCliBuff             *string                           `protobuf:"bytes,18,opt,name=redpacketCliBuff" json:"redpacketCliBuff,omitempty"`
	RedpacketReferChatroomIdList []string                          `protobuf:"bytes,19,rep,name=redpacketReferChatroomIdList" json:"redpacketReferChatroomIdList,omitempty"`
	LiveAdInfo                   *FinderLiveAdInfo                 `protobuf:"bytes,20,opt,name=liveAdInfo" json:"liveAdInfo,omitempty"`
	PromotingInfo                *FinderJoinLiveResp_PromotingInfo `protobuf:"bytes,21,opt,name=promotingInfo" json:"promotingInfo,omitempty"`
	BgMusicInfo                  *FinderLiveBackgroundMusicInfo    `protobuf:"bytes,22,opt,name=bgMusicInfo" json:"bgMusicInfo,omitempty"`
	LiveGameInfo                 *FinderLiveGameInfo               `protobuf:"bytes,23,opt,name=liveGameInfo" json:"liveGameInfo,omitempty"`
	ShoppingNotAvailable         *uint32                           `protobuf:"varint,24,opt,name=shoppingNotAvailable" json:"shoppingNotAvailable,omitempty"`
	BizUserInfo                  *FinderBizUserInfo                `protobuf:"bytes,25,opt,name=bizUserInfo" json:"bizUserInfo,omitempty"`
	ErrorPage                    *FinderLiveErrorPage              `protobuf:"bytes,26,opt,name=errorPage" json:"errorPage,omitempty"`
	Bulletin                     *FinderLiveBulletin               `protobuf:"bytes,27,opt,name=bulletin" json:"bulletin,omitempty"`
	LiveGameData                 *FinderLiveGameData               `protobuf:"bytes,28,opt,name=liveGameData" json:"liveGameData,omitempty"`
	EcSource                     *string                           `protobuf:"bytes,29,opt,name=ecSource" json:"ecSource,omitempty"`
	CheerInfo                    *FinderLiveCheerInfo              `protobuf:"bytes,30,opt,name=cheerInfo" json:"cheerInfo,omitempty"`
	GameLiveJumpInfo             *GameLiveJumpInfo                 `protobuf:"bytes,31,opt,name=gameLiveJumpInfo" json:"gameLiveJumpInfo,omitempty"`
	EnableCheerSpecialEffect     *uint32                           `protobuf:"varint,32,opt,name=enableCheerSpecialEffect" json:"enableCheerSpecialEffect,omitempty"`
	AnchorLiveroomFunctionSwitch *uint64                           `protobuf:"varint,33,opt,name=anchorLiveroomFunctionSwitch" json:"anchorLiveroomFunctionSwitch,omitempty"`
	GameRankSwitch               *GameRankSwitchInfo               `protobuf:"bytes,34,opt,name=gameRankSwitch" json:"gameRankSwitch,omitempty"`
	DisableExtraSyncCmds         []uint32                          `protobuf:"varint,35,rep,name=disableExtraSyncCmds" json:"disableExtraSyncCmds,omitempty"`
	EnableExtraSyncCmds          []uint32                          `protobuf:"varint,36,rep,name=enableExtraSyncCmds" json:"enableExtraSyncCmds,omitempty"`
	FanClubInfo                  *FinderLiveFanClubInfo            `protobuf:"bytes,37,opt,name=fanClubInfo" json:"fanClubInfo,omitempty"`
	IsFanClubMember              *bool                             `protobuf:"varint,38,opt,name=isFanClubMember" json:"isFanClubMember,omitempty"`
	LiveDescription              *string                           `protobuf:"bytes,39,opt,name=liveDescription" json:"liveDescription,omitempty"`
	IsAssistantRole              *bool                             `protobuf:"varint,40,opt,name=isAssistantRole" json:"isAssistantRole,omitempty"`
	NewPromoteInfo               *FinderLivePromoteMsgInfo         `protobuf:"bytes,41,opt,name=newPromoteInfo" json:"newPromoteInfo,omitempty"`
	AnchorSwitchFlag             *uint32                           `protobuf:"varint,42,opt,name=anchorSwitchFlag" json:"anchorSwitchFlag,omitempty"`
	LiveFunctionSwitchFlags      *uint64                           `protobuf:"varint,44,opt,name=liveFunctionSwitchFlags" json:"liveFunctionSwitchFlags,omitempty"`
	AnchorLiveExtFlag            *uint64                           `protobuf:"varint,45,opt,name=anchorLiveExtFlag" json:"anchorLiveExtFlag,omitempty"`
	GeneralGameLiveInfo          *GeneralGameLiveInfo              `protobuf:"bytes,46,opt,name=generalGameLiveInfo" json:"generalGameLiveInfo,omitempty"`
	AudienceEventInfo            *FinderLiveAudienceEventInfo      `protobuf:"bytes,47,opt,name=audienceEventInfo" json:"audienceEventInfo,omitempty"`
}

func (x *FinderJoinLiveResp) Reset() {
	*x = FinderJoinLiveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJoinLiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJoinLiveResp) ProtoMessage() {}

func (x *FinderJoinLiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJoinLiveResp.ProtoReflect.Descriptor instead.
func (*FinderJoinLiveResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{465}
}

func (x *FinderJoinLiveResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderJoinLiveResp) GetLiveCookies() []byte {
	if x != nil {
		return x.LiveCookies
	}
	return nil
}

func (x *FinderJoinLiveResp) GetLiveSdkInfo() *LiveSdkInfo {
	if x != nil {
		return x.LiveSdkInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetLiveInfo() *FinderLiveInfo {
	if x != nil {
		return x.LiveInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetLiveMicInfo() *FinderLiveMicInfo {
	if x != nil {
		return x.LiveMicInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetUserInfo() *FinderLiveUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetPromotingProduct() *FinderLiveShopWindowProductItem {
	if x != nil {
		return x.PromotingProduct
	}
	return nil
}

func (x *FinderJoinLiveResp) GetSelfContact() *FinderLiveContact {
	if x != nil {
		return x.SelfContact
	}
	return nil
}

func (x *FinderJoinLiveResp) GetTips() *FinderJoinLiveTips {
	if x != nil {
		return x.Tips
	}
	return nil
}

func (x *FinderJoinLiveResp) GetTemplateInfoList() []*FinderLiveTemplateInfo {
	if x != nil {
		return x.TemplateInfoList
	}
	return nil
}

func (x *FinderJoinLiveResp) GetAliasInfo() []*FinderLiveAliasInfo {
	if x != nil {
		return x.AliasInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetCurrentAliasRoleType() uint32 {
	if x != nil && x.CurrentAliasRoleType != nil {
		return *x.CurrentAliasRoleType
	}
	return 0
}

func (x *FinderJoinLiveResp) GetJoinLiveFlag() uint32 {
	if x != nil && x.JoinLiveFlag != nil {
		return *x.JoinLiveFlag
	}
	return 0
}

func (x *FinderJoinLiveResp) GetNextAliasModAvailableTime() uint64 {
	if x != nil && x.NextAliasModAvailableTime != nil {
		return *x.NextAliasModAvailableTime
	}
	return 0
}

func (x *FinderJoinLiveResp) GetVerifyInfoBuf() string {
	if x != nil && x.VerifyInfoBuf != nil {
		return *x.VerifyInfoBuf
	}
	return ""
}

func (x *FinderJoinLiveResp) GetLocation() *FinderLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FinderJoinLiveResp) GetWxaShopInfo() *FinderWxAppInfo {
	if x != nil {
		return x.WxaShopInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetRedpacketCliBuff() string {
	if x != nil && x.RedpacketCliBuff != nil {
		return *x.RedpacketCliBuff
	}
	return ""
}

func (x *FinderJoinLiveResp) GetRedpacketReferChatroomIdList() []string {
	if x != nil {
		return x.RedpacketReferChatroomIdList
	}
	return nil
}

func (x *FinderJoinLiveResp) GetLiveAdInfo() *FinderLiveAdInfo {
	if x != nil {
		return x.LiveAdInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetPromotingInfo() *FinderJoinLiveResp_PromotingInfo {
	if x != nil {
		return x.PromotingInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetBgMusicInfo() *FinderLiveBackgroundMusicInfo {
	if x != nil {
		return x.BgMusicInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetLiveGameInfo() *FinderLiveGameInfo {
	if x != nil {
		return x.LiveGameInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetShoppingNotAvailable() uint32 {
	if x != nil && x.ShoppingNotAvailable != nil {
		return *x.ShoppingNotAvailable
	}
	return 0
}

func (x *FinderJoinLiveResp) GetBizUserInfo() *FinderBizUserInfo {
	if x != nil {
		return x.BizUserInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetErrorPage() *FinderLiveErrorPage {
	if x != nil {
		return x.ErrorPage
	}
	return nil
}

func (x *FinderJoinLiveResp) GetBulletin() *FinderLiveBulletin {
	if x != nil {
		return x.Bulletin
	}
	return nil
}

func (x *FinderJoinLiveResp) GetLiveGameData() *FinderLiveGameData {
	if x != nil {
		return x.LiveGameData
	}
	return nil
}

func (x *FinderJoinLiveResp) GetEcSource() string {
	if x != nil && x.EcSource != nil {
		return *x.EcSource
	}
	return ""
}

func (x *FinderJoinLiveResp) GetCheerInfo() *FinderLiveCheerInfo {
	if x != nil {
		return x.CheerInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetGameLiveJumpInfo() *GameLiveJumpInfo {
	if x != nil {
		return x.GameLiveJumpInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetEnableCheerSpecialEffect() uint32 {
	if x != nil && x.EnableCheerSpecialEffect != nil {
		return *x.EnableCheerSpecialEffect
	}
	return 0
}

func (x *FinderJoinLiveResp) GetAnchorLiveroomFunctionSwitch() uint64 {
	if x != nil && x.AnchorLiveroomFunctionSwitch != nil {
		return *x.AnchorLiveroomFunctionSwitch
	}
	return 0
}

func (x *FinderJoinLiveResp) GetGameRankSwitch() *GameRankSwitchInfo {
	if x != nil {
		return x.GameRankSwitch
	}
	return nil
}

func (x *FinderJoinLiveResp) GetDisableExtraSyncCmds() []uint32 {
	if x != nil {
		return x.DisableExtraSyncCmds
	}
	return nil
}

func (x *FinderJoinLiveResp) GetEnableExtraSyncCmds() []uint32 {
	if x != nil {
		return x.EnableExtraSyncCmds
	}
	return nil
}

func (x *FinderJoinLiveResp) GetFanClubInfo() *FinderLiveFanClubInfo {
	if x != nil {
		return x.FanClubInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetIsFanClubMember() bool {
	if x != nil && x.IsFanClubMember != nil {
		return *x.IsFanClubMember
	}
	return false
}

func (x *FinderJoinLiveResp) GetLiveDescription() string {
	if x != nil && x.LiveDescription != nil {
		return *x.LiveDescription
	}
	return ""
}

func (x *FinderJoinLiveResp) GetIsAssistantRole() bool {
	if x != nil && x.IsAssistantRole != nil {
		return *x.IsAssistantRole
	}
	return false
}

func (x *FinderJoinLiveResp) GetNewPromoteInfo() *FinderLivePromoteMsgInfo {
	if x != nil {
		return x.NewPromoteInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetAnchorSwitchFlag() uint32 {
	if x != nil && x.AnchorSwitchFlag != nil {
		return *x.AnchorSwitchFlag
	}
	return 0
}

func (x *FinderJoinLiveResp) GetLiveFunctionSwitchFlags() uint64 {
	if x != nil && x.LiveFunctionSwitchFlags != nil {
		return *x.LiveFunctionSwitchFlags
	}
	return 0
}

func (x *FinderJoinLiveResp) GetAnchorLiveExtFlag() uint64 {
	if x != nil && x.AnchorLiveExtFlag != nil {
		return *x.AnchorLiveExtFlag
	}
	return 0
}

func (x *FinderJoinLiveResp) GetGeneralGameLiveInfo() *GeneralGameLiveInfo {
	if x != nil {
		return x.GeneralGameLiveInfo
	}
	return nil
}

func (x *FinderJoinLiveResp) GetAudienceEventInfo() *FinderLiveAudienceEventInfo {
	if x != nil {
		return x.AudienceEventInfo
	}
	return nil
}

type FinderLiveSyncExtraInfoRequest_SyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdId     *uint32 `protobuf:"varint,1,opt,name=cmdId" json:"cmdId,omitempty"`
	ReqBuffer []byte  `protobuf:"bytes,2,opt,name=reqBuffer" json:"reqBuffer,omitempty"`
}

func (x *FinderLiveSyncExtraInfoRequest_SyncReq) Reset() {
	*x = FinderLiveSyncExtraInfoRequest_SyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveSyncExtraInfoRequest_SyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveSyncExtraInfoRequest_SyncReq) ProtoMessage() {}

func (x *FinderLiveSyncExtraInfoRequest_SyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveSyncExtraInfoRequest_SyncReq.ProtoReflect.Descriptor instead.
func (*FinderLiveSyncExtraInfoRequest_SyncReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{466}
}

func (x *FinderLiveSyncExtraInfoRequest_SyncReq) GetCmdId() uint32 {
	if x != nil && x.CmdId != nil {
		return *x.CmdId
	}
	return 0
}

func (x *FinderLiveSyncExtraInfoRequest_SyncReq) GetReqBuffer() []byte {
	if x != nil {
		return x.ReqBuffer
	}
	return nil
}

type FinderLiveSyncExtraInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest          *BaseRequest                              `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq        *FinderBaseRequest                        `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	AnchorFinderusername *string                                   `protobuf:"bytes,3,opt,name=anchorFinderusername" json:"anchorFinderusername,omitempty"`
	FinderUsername       *string                                   `protobuf:"bytes,4,opt,name=finderUsername" json:"finderUsername,omitempty"`
	LiveCookies          []byte                                    `protobuf:"bytes,5,opt,name=liveCookies" json:"liveCookies,omitempty"`
	ObjectId             *uint64                                   `protobuf:"varint,6,opt,name=objectId" json:"objectId,omitempty"`
	LiveId               *uint64                                   `protobuf:"varint,7,opt,name=liveId" json:"liveId,omitempty"`
	SyncReqList          []*FinderLiveSyncExtraInfoRequest_SyncReq `protobuf:"bytes,8,rep,name=syncReqList" json:"syncReqList,omitempty"`
	ObjectNonceId        *string                                   `protobuf:"bytes,9,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	UxInfo               []byte                                    `protobuf:"bytes,10,opt,name=uxInfo" json:"uxInfo,omitempty"`
}

func (x *FinderLiveSyncExtraInfoRequest) Reset() {
	*x = FinderLiveSyncExtraInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveSyncExtraInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveSyncExtraInfoRequest) ProtoMessage() {}

func (x *FinderLiveSyncExtraInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveSyncExtraInfoRequest.ProtoReflect.Descriptor instead.
func (*FinderLiveSyncExtraInfoRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{467}
}

func (x *FinderLiveSyncExtraInfoRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderLiveSyncExtraInfoRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderLiveSyncExtraInfoRequest) GetAnchorFinderusername() string {
	if x != nil && x.AnchorFinderusername != nil {
		return *x.AnchorFinderusername
	}
	return ""
}

func (x *FinderLiveSyncExtraInfoRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderLiveSyncExtraInfoRequest) GetLiveCookies() []byte {
	if x != nil {
		return x.LiveCookies
	}
	return nil
}

func (x *FinderLiveSyncExtraInfoRequest) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderLiveSyncExtraInfoRequest) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderLiveSyncExtraInfoRequest) GetSyncReqList() []*FinderLiveSyncExtraInfoRequest_SyncReq {
	if x != nil {
		return x.SyncReqList
	}
	return nil
}

func (x *FinderLiveSyncExtraInfoRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderLiveSyncExtraInfoRequest) GetUxInfo() []byte {
	if x != nil {
		return x.UxInfo
	}
	return nil
}

type FinderLiveSyncExtraInfoResponse_SyncResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdId              *uint32 `protobuf:"varint,1,opt,name=cmdId" json:"cmdId,omitempty"`
	Ret                *uint32 `protobuf:"varint,2,opt,name=ret" json:"ret,omitempty"`
	RespBuffer         []byte  `protobuf:"bytes,3,opt,name=respBuffer" json:"respBuffer,omitempty"`
	RequestIntervalSec *uint32 `protobuf:"varint,4,opt,name=requestIntervalSec" json:"requestIntervalSec,omitempty"`
}

func (x *FinderLiveSyncExtraInfoResponse_SyncResp) Reset() {
	*x = FinderLiveSyncExtraInfoResponse_SyncResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveSyncExtraInfoResponse_SyncResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveSyncExtraInfoResponse_SyncResp) ProtoMessage() {}

func (x *FinderLiveSyncExtraInfoResponse_SyncResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveSyncExtraInfoResponse_SyncResp.ProtoReflect.Descriptor instead.
func (*FinderLiveSyncExtraInfoResponse_SyncResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{468}
}

func (x *FinderLiveSyncExtraInfoResponse_SyncResp) GetCmdId() uint32 {
	if x != nil && x.CmdId != nil {
		return *x.CmdId
	}
	return 0
}

func (x *FinderLiveSyncExtraInfoResponse_SyncResp) GetRet() uint32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *FinderLiveSyncExtraInfoResponse_SyncResp) GetRespBuffer() []byte {
	if x != nil {
		return x.RespBuffer
	}
	return nil
}

func (x *FinderLiveSyncExtraInfoResponse_SyncResp) GetRequestIntervalSec() uint32 {
	if x != nil && x.RequestIntervalSec != nil {
		return *x.RequestIntervalSec
	}
	return 0
}

type FinderLiveSyncExtraInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse                               `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	SyncResp     []*FinderLiveSyncExtraInfoResponse_SyncResp `protobuf:"bytes,2,rep,name=syncResp" json:"syncResp,omitempty"`
}

func (x *FinderLiveSyncExtraInfoResponse) Reset() {
	*x = FinderLiveSyncExtraInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveSyncExtraInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveSyncExtraInfoResponse) ProtoMessage() {}

func (x *FinderLiveSyncExtraInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveSyncExtraInfoResponse.ProtoReflect.Descriptor instead.
func (*FinderLiveSyncExtraInfoResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{469}
}

func (x *FinderLiveSyncExtraInfoResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderLiveSyncExtraInfoResponse) GetSyncResp() []*FinderLiveSyncExtraInfoResponse_SyncResp {
	if x != nil {
		return x.SyncResp
	}
	return nil
}

type FinderGetLiveRewardGiftListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LiveId        *uint64            `protobuf:"varint,3,opt,name=liveId" json:"liveId,omitempty"`
	ObjectId      *uint64            `protobuf:"varint,4,opt,name=objectId" json:"objectId,omitempty"`
	ObjectNonceId *string            `protobuf:"bytes,5,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	Username      *string            `protobuf:"bytes,6,opt,name=username" json:"username,omitempty"`
	LastBuffer    []byte             `protobuf:"bytes,7,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	Scene         *uint32            `protobuf:"varint,8,opt,name=scene" json:"scene,omitempty"`
}

func (x *FinderGetLiveRewardGiftListRequest) Reset() {
	*x = FinderGetLiveRewardGiftListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveRewardGiftListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveRewardGiftListRequest) ProtoMessage() {}

func (x *FinderGetLiveRewardGiftListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveRewardGiftListRequest.ProtoReflect.Descriptor instead.
func (*FinderGetLiveRewardGiftListRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{470}
}

func (x *FinderGetLiveRewardGiftListRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetLiveRewardGiftListRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetLiveRewardGiftListRequest) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderGetLiveRewardGiftListRequest) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderGetLiveRewardGiftListRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderGetLiveRewardGiftListRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderGetLiveRewardGiftListRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetLiveRewardGiftListRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type FinderGetLiveRewardGiftListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse        *BaseResponse     `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	GiftList            []*FinderLiveGift `protobuf:"bytes,2,rep,name=giftList" json:"giftList,omitempty"`
	LastBuffer          []byte            `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ComboBatchSize      *uint32           `protobuf:"varint,4,opt,name=comboBatchSize" json:"comboBatchSize,omitempty"`
	ComboBatchTimeoutMs *uint32           `protobuf:"varint,5,opt,name=comboBatchTimeoutMs" json:"comboBatchTimeoutMs,omitempty"`
}

func (x *FinderGetLiveRewardGiftListResponse) Reset() {
	*x = FinderGetLiveRewardGiftListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveRewardGiftListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveRewardGiftListResponse) ProtoMessage() {}

func (x *FinderGetLiveRewardGiftListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveRewardGiftListResponse.ProtoReflect.Descriptor instead.
func (*FinderGetLiveRewardGiftListResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{471}
}

func (x *FinderGetLiveRewardGiftListResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetLiveRewardGiftListResponse) GetGiftList() []*FinderLiveGift {
	if x != nil {
		return x.GiftList
	}
	return nil
}

func (x *FinderGetLiveRewardGiftListResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetLiveRewardGiftListResponse) GetComboBatchSize() uint32 {
	if x != nil && x.ComboBatchSize != nil {
		return *x.ComboBatchSize
	}
	return 0
}

func (x *FinderGetLiveRewardGiftListResponse) GetComboBatchTimeoutMs() uint32 {
	if x != nil && x.ComboBatchTimeoutMs != nil {
		return *x.ComboBatchTimeoutMs
	}
	return 0
}

type FinderGetLiveMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest        *BaseRequest              `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq      *FinderBaseRequest        `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LiveCookies        []byte                    `protobuf:"bytes,3,opt,name=liveCookies" json:"liveCookies,omitempty"`
	LiveId             *uint64                   `protobuf:"varint,4,opt,name=liveId" json:"liveId,omitempty"`
	FinderUsername     *string                   `protobuf:"bytes,5,opt,name=finderUsername" json:"finderUsername,omitempty"`
	Scene              *uint32                   `protobuf:"varint,6,opt,name=scene" json:"scene,omitempty"`
	ObjectId           *uint64                   `protobuf:"varint,7,opt,name=objectId" json:"objectId,omitempty"`
	Offline            *bool                     `protobuf:"varint,8,opt,name=offline" json:"offline,omitempty"`
	ObjectNonceId      *string                   `protobuf:"bytes,9,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	Status             *FinderLiveClientStatus   `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	LiveSei            []byte                    `protobuf:"bytes,11,opt,name=liveSei" json:"liveSei,omitempty"`
	LiveReportBaseInfo *FinderLiveReportBaseInfo `protobuf:"bytes,15,opt,name=liveReportBaseInfo" json:"liveReportBaseInfo,omitempty"`
}

func (x *FinderGetLiveMsgReq) Reset() {
	*x = FinderGetLiveMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveMsgReq) ProtoMessage() {}

func (x *FinderGetLiveMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveMsgReq.ProtoReflect.Descriptor instead.
func (*FinderGetLiveMsgReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{472}
}

func (x *FinderGetLiveMsgReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetLiveMsgReq) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetLiveMsgReq) GetLiveCookies() []byte {
	if x != nil {
		return x.LiveCookies
	}
	return nil
}

func (x *FinderGetLiveMsgReq) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderGetLiveMsgReq) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetLiveMsgReq) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderGetLiveMsgReq) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderGetLiveMsgReq) GetOffline() bool {
	if x != nil && x.Offline != nil {
		return *x.Offline
	}
	return false
}

func (x *FinderGetLiveMsgReq) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderGetLiveMsgReq) GetStatus() *FinderLiveClientStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *FinderGetLiveMsgReq) GetLiveSei() []byte {
	if x != nil {
		return x.LiveSei
	}
	return nil
}

func (x *FinderGetLiveMsgReq) GetLiveReportBaseInfo() *FinderLiveReportBaseInfo {
	if x != nil {
		return x.LiveReportBaseInfo
	}
	return nil
}

type FinderLiveMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname            *string            `protobuf:"bytes,1,opt,name=nickname" json:"nickname,omitempty"`
	HeadUrl             *string            `protobuf:"bytes,2,opt,name=headUrl" json:"headUrl,omitempty"`
	Content             *string            `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Type                *uint32            `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Username            *string            `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	Seq                 *uint64            `protobuf:"varint,6,opt,name=seq" json:"seq,omitempty"`
	ClientMsgId         *string            `protobuf:"bytes,7,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	LikeCnt             *uint32            `protobuf:"varint,8,opt,name=likeCnt" json:"likeCnt,omitempty"`
	FinderLiveContact   *FinderLiveContact `protobuf:"bytes,9,opt,name=finderLiveContact" json:"finderLiveContact,omitempty"`
	LocalClientMsgId    *string            `protobuf:"bytes,10,opt,name=localClientMsgId" json:"localClientMsgId,omitempty"`
	ExtInfo             []byte             `protobuf:"bytes,11,opt,name=extInfo" json:"extInfo,omitempty"`
	ToFinderLiveContact *FinderLiveContact `protobuf:"bytes,12,opt,name=toFinderLiveContact" json:"toFinderLiveContact,omitempty"`
}

func (x *FinderLiveMsg) Reset() {
	*x = FinderLiveMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveMsg) ProtoMessage() {}

func (x *FinderLiveMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveMsg.ProtoReflect.Descriptor instead.
func (*FinderLiveMsg) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{473}
}

func (x *FinderLiveMsg) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderLiveMsg) GetHeadUrl() string {
	if x != nil && x.HeadUrl != nil {
		return *x.HeadUrl
	}
	return ""
}

func (x *FinderLiveMsg) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *FinderLiveMsg) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderLiveMsg) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderLiveMsg) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *FinderLiveMsg) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *FinderLiveMsg) GetLikeCnt() uint32 {
	if x != nil && x.LikeCnt != nil {
		return *x.LikeCnt
	}
	return 0
}

func (x *FinderLiveMsg) GetFinderLiveContact() *FinderLiveContact {
	if x != nil {
		return x.FinderLiveContact
	}
	return nil
}

func (x *FinderLiveMsg) GetLocalClientMsgId() string {
	if x != nil && x.LocalClientMsgId != nil {
		return *x.LocalClientMsgId
	}
	return ""
}

func (x *FinderLiveMsg) GetExtInfo() []byte {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

func (x *FinderLiveMsg) GetToFinderLiveContact() *FinderLiveContact {
	if x != nil {
		return x.ToFinderLiveContact
	}
	return nil
}

type FinderLiveAppMsgOption_VersionControlInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompatibleVisible *bool   `protobuf:"varint,1,opt,name=compatibleVisible" json:"compatibleVisible,omitempty"`
	CompatibleText    *string `protobuf:"bytes,2,opt,name=compatibleText" json:"compatibleText,omitempty"`
	CompatibleUrl     *string `protobuf:"bytes,3,opt,name=compatibleUrl" json:"compatibleUrl,omitempty"`
}

func (x *FinderLiveAppMsgOption_VersionControlInfo) Reset() {
	*x = FinderLiveAppMsgOption_VersionControlInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveAppMsgOption_VersionControlInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveAppMsgOption_VersionControlInfo) ProtoMessage() {}

func (x *FinderLiveAppMsgOption_VersionControlInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveAppMsgOption_VersionControlInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveAppMsgOption_VersionControlInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{474}
}

func (x *FinderLiveAppMsgOption_VersionControlInfo) GetCompatibleVisible() bool {
	if x != nil && x.CompatibleVisible != nil {
		return *x.CompatibleVisible
	}
	return false
}

func (x *FinderLiveAppMsgOption_VersionControlInfo) GetCompatibleText() string {
	if x != nil && x.CompatibleText != nil {
		return *x.CompatibleText
	}
	return ""
}

func (x *FinderLiveAppMsgOption_VersionControlInfo) GetCompatibleUrl() string {
	if x != nil && x.CompatibleUrl != nil {
		return *x.CompatibleUrl
	}
	return ""
}

type FinderLiveAppMsgOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionControlInfo *FinderLiveAppMsgOption_VersionControlInfo `protobuf:"bytes,1,opt,name=versionControlInfo" json:"versionControlInfo,omitempty"`
}

func (x *FinderLiveAppMsgOption) Reset() {
	*x = FinderLiveAppMsgOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveAppMsgOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveAppMsgOption) ProtoMessage() {}

func (x *FinderLiveAppMsgOption) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveAppMsgOption.ProtoReflect.Descriptor instead.
func (*FinderLiveAppMsgOption) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{475}
}

func (x *FinderLiveAppMsgOption) GetVersionControlInfo() *FinderLiveAppMsgOption_VersionControlInfo {
	if x != nil {
		return x.VersionControlInfo
	}
	return nil
}

type FinderLiveAppMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToUserContact        *FinderLiveContact      `protobuf:"bytes,1,opt,name=toUserContact" json:"toUserContact,omitempty"`
	MsgType              *uint32                 `protobuf:"varint,2,opt,name=msgType" json:"msgType,omitempty"`
	ClientMsgId          *string                 `protobuf:"bytes,3,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	QuotedMsgSeq         *uint64                 `protobuf:"varint,4,opt,name=quotedMsgSeq" json:"quotedMsgSeq,omitempty"`
	Payload              []byte                  `protobuf:"bytes,5,opt,name=payload" json:"payload,omitempty"`
	Option               *FinderLiveAppMsgOption `protobuf:"bytes,6,opt,name=option" json:"option,omitempty"`
	RecipientContactList []*FinderLiveContact    `protobuf:"bytes,7,rep,name=recipientContactList" json:"recipientContactList,omitempty"`
	SessionId            *string                 `protobuf:"bytes,51,opt,name=sessionId" json:"sessionId,omitempty"`
	Seq                  *uint64                 `protobuf:"varint,101,opt,name=seq" json:"seq,omitempty"`
	FromUserContact      *FinderLiveContact      `protobuf:"bytes,102,opt,name=fromUserContact" json:"fromUserContact,omitempty"`
	LocalClientMsgId     *string                 `protobuf:"bytes,103,opt,name=localClientMsgId" json:"localClientMsgId,omitempty"`
}

func (x *FinderLiveAppMsg) Reset() {
	*x = FinderLiveAppMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveAppMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveAppMsg) ProtoMessage() {}

func (x *FinderLiveAppMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveAppMsg.ProtoReflect.Descriptor instead.
func (*FinderLiveAppMsg) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{476}
}

func (x *FinderLiveAppMsg) GetToUserContact() *FinderLiveContact {
	if x != nil {
		return x.ToUserContact
	}
	return nil
}

func (x *FinderLiveAppMsg) GetMsgType() uint32 {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return 0
}

func (x *FinderLiveAppMsg) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *FinderLiveAppMsg) GetQuotedMsgSeq() uint64 {
	if x != nil && x.QuotedMsgSeq != nil {
		return *x.QuotedMsgSeq
	}
	return 0
}

func (x *FinderLiveAppMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *FinderLiveAppMsg) GetOption() *FinderLiveAppMsgOption {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *FinderLiveAppMsg) GetRecipientContactList() []*FinderLiveContact {
	if x != nil {
		return x.RecipientContactList
	}
	return nil
}

func (x *FinderLiveAppMsg) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *FinderLiveAppMsg) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *FinderLiveAppMsg) GetFromUserContact() *FinderLiveContact {
	if x != nil {
		return x.FromUserContact
	}
	return nil
}

func (x *FinderLiveAppMsg) GetLocalClientMsgId() string {
	if x != nil && x.LocalClientMsgId != nil {
		return *x.LocalClientMsgId
	}
	return ""
}

type FinderGetLiveMsgResp_LiveMsgClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCommentCacheSize              *uint32 `protobuf:"varint,1,opt,name=maxCommentCacheSize" json:"maxCommentCacheSize,omitempty"`
	RefreshCommentSizePerTime        *uint32 `protobuf:"varint,2,opt,name=refreshCommentSizePerTime" json:"refreshCommentSizePerTime,omitempty"`
	RefreshCommentInterval           *uint32 `protobuf:"varint,3,opt,name=refreshCommentInterval" json:"refreshCommentInterval,omitempty"`
	HistoryRefreshCommentSizePerTime *uint32 `protobuf:"varint,4,opt,name=historyRefreshCommentSizePerTime" json:"historyRefreshCommentSizePerTime,omitempty"`
	HistoryRefreshCommentInterval    *uint32 `protobuf:"varint,5,opt,name=historyRefreshCommentInterval" json:"historyRefreshCommentInterval,omitempty"`
	RefreshCommentIntervalMs         *uint32 `protobuf:"varint,6,opt,name=refreshCommentIntervalMs" json:"refreshCommentIntervalMs,omitempty"`
}

func (x *FinderGetLiveMsgResp_LiveMsgClientConfig) Reset() {
	*x = FinderGetLiveMsgResp_LiveMsgClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveMsgResp_LiveMsgClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveMsgResp_LiveMsgClientConfig) ProtoMessage() {}

func (x *FinderGetLiveMsgResp_LiveMsgClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveMsgResp_LiveMsgClientConfig.ProtoReflect.Descriptor instead.
func (*FinderGetLiveMsgResp_LiveMsgClientConfig) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{477}
}

func (x *FinderGetLiveMsgResp_LiveMsgClientConfig) GetMaxCommentCacheSize() uint32 {
	if x != nil && x.MaxCommentCacheSize != nil {
		return *x.MaxCommentCacheSize
	}
	return 0
}

func (x *FinderGetLiveMsgResp_LiveMsgClientConfig) GetRefreshCommentSizePerTime() uint32 {
	if x != nil && x.RefreshCommentSizePerTime != nil {
		return *x.RefreshCommentSizePerTime
	}
	return 0
}

func (x *FinderGetLiveMsgResp_LiveMsgClientConfig) GetRefreshCommentInterval() uint32 {
	if x != nil && x.RefreshCommentInterval != nil {
		return *x.RefreshCommentInterval
	}
	return 0
}

func (x *FinderGetLiveMsgResp_LiveMsgClientConfig) GetHistoryRefreshCommentSizePerTime() uint32 {
	if x != nil && x.HistoryRefreshCommentSizePerTime != nil {
		return *x.HistoryRefreshCommentSizePerTime
	}
	return 0
}

func (x *FinderGetLiveMsgResp_LiveMsgClientConfig) GetHistoryRefreshCommentInterval() uint32 {
	if x != nil && x.HistoryRefreshCommentInterval != nil {
		return *x.HistoryRefreshCommentInterval
	}
	return 0
}

func (x *FinderGetLiveMsgResp_LiveMsgClientConfig) GetRefreshCommentIntervalMs() uint32 {
	if x != nil && x.RefreshCommentIntervalMs != nil {
		return *x.RefreshCommentIntervalMs
	}
	return 0
}

type FinderGetLiveMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse            *BaseResponse                             `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	OnlineContacts          []*FinderContact                          `protobuf:"bytes,2,rep,name=onlineContacts" json:"onlineContacts,omitempty"`
	MsgList                 []*FinderLiveMsg                          `protobuf:"bytes,3,rep,name=msgList" json:"msgList,omitempty"`
	LiveInfo                *FinderLiveInfo                           `protobuf:"bytes,4,opt,name=liveInfo" json:"liveInfo,omitempty"`
	LiveCookies             []byte                                    `protobuf:"bytes,5,opt,name=liveCookies" json:"liveCookies,omitempty"`
	CurOnlineCount          *uint32                                   `protobuf:"varint,6,opt,name=curOnlineCount" json:"curOnlineCount,omitempty"`
	LiveInfoEnableFlag      *uint32                                   `protobuf:"varint,7,opt,name=liveInfoEnableFlag" json:"liveInfoEnableFlag,omitempty"`
	LiveCloseFlag           *uint32                                   `protobuf:"varint,8,opt,name=liveCloseFlag" json:"liveCloseFlag,omitempty"`
	LiveMicInfo             *FinderLiveMicInfo                        `protobuf:"bytes,9,opt,name=liveMicInfo" json:"liveMicInfo,omitempty"`
	LiveMicInfoEnableFlag   *uint32                                   `protobuf:"varint,10,opt,name=liveMicInfoEnableFlag" json:"liveMicInfoEnableFlag,omitempty"`
	PkCloseFlag             *uint32                                   `protobuf:"varint,11,opt,name=pkCloseFlag" json:"pkCloseFlag,omitempty"`
	LiveExtFlag             *uint32                                   `protobuf:"varint,12,opt,name=liveExtFlag" json:"liveExtFlag,omitempty"`
	LivePreloadInfo         *FinderLivePreloadInfo                    `protobuf:"bytes,13,opt,name=livePreloadInfo" json:"livePreloadInfo,omitempty"`
	CurParticipantCount     *uint32                                   `protobuf:"varint,14,opt,name=curParticipantCount" json:"curParticipantCount,omitempty"`
	AppMsgList              []*FinderLiveAppMsg                       `protobuf:"bytes,15,rep,name=appMsgList" json:"appMsgList,omitempty"`
	TemplateInfoList        []*FinderLiveTemplateInfo                 `protobuf:"bytes,16,rep,name=templateInfoList" json:"templateInfoList,omitempty"`
	BadgeInfo               *FinderLiveBadgeInfo                      `protobuf:"bytes,17,opt,name=badgeInfo" json:"badgeInfo,omitempty"`
	NextRetryInterval       *uint32                                   `protobuf:"varint,18,opt,name=nextRetryInterval" json:"nextRetryInterval,omitempty"`
	CurLikeCnt              *uint64                                   `protobuf:"varint,19,opt,name=curLikeCnt" json:"curLikeCnt,omitempty"`
	BadgeInfos              []*FinderLiveBadgeInfo                    `protobuf:"bytes,20,rep,name=badgeInfos" json:"badgeInfos,omitempty"`
	LiveGameData            *FinderLiveGameData                       `protobuf:"bytes,21,opt,name=liveGameData" json:"liveGameData,omitempty"`
	ClientConfig            *FinderGetLiveMsgResp_LiveMsgClientConfig `protobuf:"bytes,22,opt,name=clientConfig" json:"clientConfig,omitempty"`
	IsHistoryMsg            *uint32                                   `protobuf:"varint,23,opt,name=isHistoryMsg" json:"isHistoryMsg,omitempty"`
	EnableExtraSyncCmds     []uint32                                  `protobuf:"varint,24,rep,name=enableExtraSyncCmds" json:"enableExtraSyncCmds,omitempty"`
	NotifyExtraSyncCmds     []uint32                                  `protobuf:"varint,25,rep,name=notifyExtraSyncCmds" json:"notifyExtraSyncCmds,omitempty"`
	DisableExtraSyncCmds    []uint32                                  `protobuf:"varint,26,rep,name=disableExtraSyncCmds" json:"disableExtraSyncCmds,omitempty"`
	BackendAnchorStatusFlag *uint64                                   `protobuf:"varint,27,opt,name=backendAnchorStatusFlag" json:"backendAnchorStatusFlag,omitempty"`
	IsFanClubMember         *bool                                     `protobuf:"varint,28,opt,name=isFanClubMember" json:"isFanClubMember,omitempty"`
	FanClubInfo             *FinderLiveFanClubInfo                    `protobuf:"bytes,29,opt,name=fanClubInfo" json:"fanClubInfo,omitempty"`
	AudienceEventInfo       *FinderLiveAudienceEventInfo              `protobuf:"bytes,33,opt,name=audienceEventInfo" json:"audienceEventInfo,omitempty"`
}

func (x *FinderGetLiveMsgResp) Reset() {
	*x = FinderGetLiveMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetLiveMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetLiveMsgResp) ProtoMessage() {}

func (x *FinderGetLiveMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetLiveMsgResp.ProtoReflect.Descriptor instead.
func (*FinderGetLiveMsgResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{478}
}

func (x *FinderGetLiveMsgResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetOnlineContacts() []*FinderContact {
	if x != nil {
		return x.OnlineContacts
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetMsgList() []*FinderLiveMsg {
	if x != nil {
		return x.MsgList
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetLiveInfo() *FinderLiveInfo {
	if x != nil {
		return x.LiveInfo
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetLiveCookies() []byte {
	if x != nil {
		return x.LiveCookies
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetCurOnlineCount() uint32 {
	if x != nil && x.CurOnlineCount != nil {
		return *x.CurOnlineCount
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetLiveInfoEnableFlag() uint32 {
	if x != nil && x.LiveInfoEnableFlag != nil {
		return *x.LiveInfoEnableFlag
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetLiveCloseFlag() uint32 {
	if x != nil && x.LiveCloseFlag != nil {
		return *x.LiveCloseFlag
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetLiveMicInfo() *FinderLiveMicInfo {
	if x != nil {
		return x.LiveMicInfo
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetLiveMicInfoEnableFlag() uint32 {
	if x != nil && x.LiveMicInfoEnableFlag != nil {
		return *x.LiveMicInfoEnableFlag
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetPkCloseFlag() uint32 {
	if x != nil && x.PkCloseFlag != nil {
		return *x.PkCloseFlag
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetLiveExtFlag() uint32 {
	if x != nil && x.LiveExtFlag != nil {
		return *x.LiveExtFlag
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetLivePreloadInfo() *FinderLivePreloadInfo {
	if x != nil {
		return x.LivePreloadInfo
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetCurParticipantCount() uint32 {
	if x != nil && x.CurParticipantCount != nil {
		return *x.CurParticipantCount
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetAppMsgList() []*FinderLiveAppMsg {
	if x != nil {
		return x.AppMsgList
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetTemplateInfoList() []*FinderLiveTemplateInfo {
	if x != nil {
		return x.TemplateInfoList
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetBadgeInfo() *FinderLiveBadgeInfo {
	if x != nil {
		return x.BadgeInfo
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetNextRetryInterval() uint32 {
	if x != nil && x.NextRetryInterval != nil {
		return *x.NextRetryInterval
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetCurLikeCnt() uint64 {
	if x != nil && x.CurLikeCnt != nil {
		return *x.CurLikeCnt
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetBadgeInfos() []*FinderLiveBadgeInfo {
	if x != nil {
		return x.BadgeInfos
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetLiveGameData() *FinderLiveGameData {
	if x != nil {
		return x.LiveGameData
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetClientConfig() *FinderGetLiveMsgResp_LiveMsgClientConfig {
	if x != nil {
		return x.ClientConfig
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetIsHistoryMsg() uint32 {
	if x != nil && x.IsHistoryMsg != nil {
		return *x.IsHistoryMsg
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetEnableExtraSyncCmds() []uint32 {
	if x != nil {
		return x.EnableExtraSyncCmds
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetNotifyExtraSyncCmds() []uint32 {
	if x != nil {
		return x.NotifyExtraSyncCmds
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetDisableExtraSyncCmds() []uint32 {
	if x != nil {
		return x.DisableExtraSyncCmds
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetBackendAnchorStatusFlag() uint64 {
	if x != nil && x.BackendAnchorStatusFlag != nil {
		return *x.BackendAnchorStatusFlag
	}
	return 0
}

func (x *FinderGetLiveMsgResp) GetIsFanClubMember() bool {
	if x != nil && x.IsFanClubMember != nil {
		return *x.IsFanClubMember
	}
	return false
}

func (x *FinderGetLiveMsgResp) GetFanClubInfo() *FinderLiveFanClubInfo {
	if x != nil {
		return x.FanClubInfo
	}
	return nil
}

func (x *FinderGetLiveMsgResp) GetAudienceEventInfo() *FinderLiveAudienceEventInfo {
	if x != nil {
		return x.AudienceEventInfo
	}
	return nil
}

type FinderLiveGetShopShelfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest          *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq        *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	ObjectId             *uint64            `protobuf:"varint,3,opt,name=objectId" json:"objectId,omitempty"`
	LiveId               *uint64            `protobuf:"varint,4,opt,name=liveId" json:"liveId,omitempty"`
	LiveCookies          []byte             `protobuf:"bytes,5,opt,name=liveCookies" json:"liveCookies,omitempty"`
	AnchorFinderUsername *string            `protobuf:"bytes,6,opt,name=anchorFinderUsername" json:"anchorFinderUsername,omitempty"`
	Scene                *uint32            `protobuf:"varint,7,opt,name=scene" json:"scene,omitempty"`
	ShopRequestId        *string            `protobuf:"bytes,9,opt,name=shopRequestId" json:"shopRequestId,omitempty"`
	StockId              *string            `protobuf:"bytes,10,opt,name=stockId" json:"stockId,omitempty"`
	PullScene            *uint32            `protobuf:"varint,11,opt,name=pullScene" json:"pullScene,omitempty"`
	UxInfo               []byte             `protobuf:"bytes,12,opt,name=uxInfo" json:"uxInfo,omitempty"`
	SpuId                *uint64            `protobuf:"varint,13,opt,name=spuId" json:"spuId,omitempty"`
	ProductType          *uint32            `protobuf:"varint,14,opt,name=productType" json:"productType,omitempty"`
	ProductExtInfo       []byte             `protobuf:"bytes,15,opt,name=productExtInfo" json:"productExtInfo,omitempty"`
	EcSource             *string            `protobuf:"bytes,16,opt,name=ecSource" json:"ecSource,omitempty"`
	LastBuffer           []byte             `protobuf:"bytes,100,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
}

func (x *FinderLiveGetShopShelfRequest) Reset() {
	*x = FinderLiveGetShopShelfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveGetShopShelfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveGetShopShelfRequest) ProtoMessage() {}

func (x *FinderLiveGetShopShelfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveGetShopShelfRequest.ProtoReflect.Descriptor instead.
func (*FinderLiveGetShopShelfRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{479}
}

func (x *FinderLiveGetShopShelfRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderLiveGetShopShelfRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderLiveGetShopShelfRequest) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderLiveGetShopShelfRequest) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderLiveGetShopShelfRequest) GetLiveCookies() []byte {
	if x != nil {
		return x.LiveCookies
	}
	return nil
}

func (x *FinderLiveGetShopShelfRequest) GetAnchorFinderUsername() string {
	if x != nil && x.AnchorFinderUsername != nil {
		return *x.AnchorFinderUsername
	}
	return ""
}

func (x *FinderLiveGetShopShelfRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderLiveGetShopShelfRequest) GetShopRequestId() string {
	if x != nil && x.ShopRequestId != nil {
		return *x.ShopRequestId
	}
	return ""
}

func (x *FinderLiveGetShopShelfRequest) GetStockId() string {
	if x != nil && x.StockId != nil {
		return *x.StockId
	}
	return ""
}

func (x *FinderLiveGetShopShelfRequest) GetPullScene() uint32 {
	if x != nil && x.PullScene != nil {
		return *x.PullScene
	}
	return 0
}

func (x *FinderLiveGetShopShelfRequest) GetUxInfo() []byte {
	if x != nil {
		return x.UxInfo
	}
	return nil
}

func (x *FinderLiveGetShopShelfRequest) GetSpuId() uint64 {
	if x != nil && x.SpuId != nil {
		return *x.SpuId
	}
	return 0
}

func (x *FinderLiveGetShopShelfRequest) GetProductType() uint32 {
	if x != nil && x.ProductType != nil {
		return *x.ProductType
	}
	return 0
}

func (x *FinderLiveGetShopShelfRequest) GetProductExtInfo() []byte {
	if x != nil {
		return x.ProductExtInfo
	}
	return nil
}

func (x *FinderLiveGetShopShelfRequest) GetEcSource() string {
	if x != nil && x.EcSource != nil {
		return *x.EcSource
	}
	return ""
}

func (x *FinderLiveGetShopShelfRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

type FinderLiveShopWindowItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType *uint32 `protobuf:"varint,1,opt,name=itemType" json:"itemType,omitempty"`
	ExtInfo  []byte  `protobuf:"bytes,2,opt,name=extInfo" json:"extInfo,omitempty"`
}

func (x *FinderLiveShopWindowItem) Reset() {
	*x = FinderLiveShopWindowItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveShopWindowItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveShopWindowItem) ProtoMessage() {}

func (x *FinderLiveShopWindowItem) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveShopWindowItem.ProtoReflect.Descriptor instead.
func (*FinderLiveShopWindowItem) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{480}
}

func (x *FinderLiveShopWindowItem) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *FinderLiveShopWindowItem) GetExtInfo() []byte {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

type FinderReplayRecordSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplaySwitch *uint32 `protobuf:"varint,1,opt,name=replaySwitch" json:"replaySwitch,omitempty"`
	ReplayType   *uint32 `protobuf:"varint,2,opt,name=replayType" json:"replayType,omitempty"`
}

func (x *FinderReplayRecordSetting) Reset() {
	*x = FinderReplayRecordSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderReplayRecordSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderReplayRecordSetting) ProtoMessage() {}

func (x *FinderReplayRecordSetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderReplayRecordSetting.ProtoReflect.Descriptor instead.
func (*FinderReplayRecordSetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{481}
}

func (x *FinderReplayRecordSetting) GetReplaySwitch() uint32 {
	if x != nil && x.ReplaySwitch != nil {
		return *x.ReplaySwitch
	}
	return 0
}

func (x *FinderReplayRecordSetting) GetReplayType() uint32 {
	if x != nil && x.ReplayType != nil {
		return *x.ReplayType
	}
	return 0
}

type FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Path  *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Query *string `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo) Reset() {
	*x = FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo) ProtoMessage() {}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{482}
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

type FinderLiveGetShopShelfResponse_ShopWindowProfileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopWindowProfileName     *string                                                               `protobuf:"bytes,1,opt,name=shopWindowProfileName" json:"shopWindowProfileName,omitempty"`
	ProfileJumpType           *uint32                                                               `protobuf:"varint,2,opt,name=profileJumpType" json:"profileJumpType,omitempty"`
	JumpWxaInfo               *FinderWxAppInfo                                                      `protobuf:"bytes,3,opt,name=jumpWxaInfo" json:"jumpWxaInfo,omitempty"`
	JumpLiteappInfo           *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo `protobuf:"bytes,4,opt,name=jumpLiteappInfo" json:"jumpLiteappInfo,omitempty"`
	HasReputationInfo         *uint32                                                               `protobuf:"varint,10,opt,name=hasReputationInfo" json:"hasReputationInfo,omitempty"`
	ReputationScore           *uint32                                                               `protobuf:"varint,11,opt,name=reputationScore" json:"reputationScore,omitempty"`
	ReputationWording         *string                                                               `protobuf:"bytes,12,opt,name=reputationWording" json:"reputationWording,omitempty"`
	ReputationBackgroundColor *string                                                               `protobuf:"bytes,13,opt,name=reputationBackgroundColor" json:"reputationBackgroundColor,omitempty"`
	ReputationTextColor       *string                                                               `protobuf:"bytes,14,opt,name=reputationTextColor" json:"reputationTextColor,omitempty"`
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) Reset() {
	*x = FinderLiveGetShopShelfResponse_ShopWindowProfileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) ProtoMessage() {}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveGetShopShelfResponse_ShopWindowProfileInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{483}
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) GetShopWindowProfileName() string {
	if x != nil && x.ShopWindowProfileName != nil {
		return *x.ShopWindowProfileName
	}
	return ""
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) GetProfileJumpType() uint32 {
	if x != nil && x.ProfileJumpType != nil {
		return *x.ProfileJumpType
	}
	return 0
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) GetJumpWxaInfo() *FinderWxAppInfo {
	if x != nil {
		return x.JumpWxaInfo
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) GetJumpLiteappInfo() *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo {
	if x != nil {
		return x.JumpLiteappInfo
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) GetHasReputationInfo() uint32 {
	if x != nil && x.HasReputationInfo != nil {
		return *x.HasReputationInfo
	}
	return 0
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) GetReputationScore() uint32 {
	if x != nil && x.ReputationScore != nil {
		return *x.ReputationScore
	}
	return 0
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) GetReputationWording() string {
	if x != nil && x.ReputationWording != nil {
		return *x.ReputationWording
	}
	return ""
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) GetReputationBackgroundColor() string {
	if x != nil && x.ReputationBackgroundColor != nil {
		return *x.ReputationBackgroundColor
	}
	return ""
}

func (x *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo) GetReputationTextColor() string {
	if x != nil && x.ReputationTextColor != nil {
		return *x.ReputationTextColor
	}
	return ""
}

type FinderLiveGetShopShelfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse           *BaseResponse                                         `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	ItemList               []*FinderLiveShopWindowItem                           `protobuf:"bytes,2,rep,name=itemList" json:"itemList,omitempty"`
	AddProductUrl          *FinderWxAppInfo                                      `protobuf:"bytes,3,opt,name=addProductUrl" json:"addProductUrl,omitempty"`
	LiveCookies            []byte                                                `protobuf:"bytes,4,opt,name=liveCookies" json:"liveCookies,omitempty"`
	CustomedCsApp          *FinderWxAppInfo                                      `protobuf:"bytes,5,opt,name=customedCsApp" json:"customedCsApp,omitempty"`
	PreloadInfo            *FinderLiveWxaPreloadInfo                             `protobuf:"bytes,6,opt,name=preloadInfo" json:"preloadInfo,omitempty"`
	LiveId                 *uint64                                               `protobuf:"varint,7,opt,name=liveId" json:"liveId,omitempty"`
	OrderInfoUrl           *FinderWxAppInfo                                      `protobuf:"bytes,8,opt,name=orderInfoUrl" json:"orderInfoUrl,omitempty"`
	ShopRequestId          *string                                               `protobuf:"bytes,9,opt,name=shopRequestId" json:"shopRequestId,omitempty"`
	ProductCount           *uint32                                               `protobuf:"varint,10,opt,name=productCount" json:"productCount,omitempty"`
	CouponCount            *uint32                                               `protobuf:"varint,11,opt,name=couponCount" json:"couponCount,omitempty"`
	DirectCsInfo           *FinderLiveShopCustomerServiceInfo                    `protobuf:"bytes,12,opt,name=directCsInfo" json:"directCsInfo,omitempty"`
	ReplayRecordSetting    *FinderReplayRecordSetting                            `protobuf:"bytes,13,opt,name=replayRecordSetting" json:"replayRecordSetting,omitempty"`
	ExtFlag                *uint64                                               `protobuf:"varint,14,opt,name=extFlag" json:"extFlag,omitempty"`
	HasVirtualProduct      *bool                                                 `protobuf:"varint,15,opt,name=hasVirtualProduct" json:"hasVirtualProduct,omitempty"`
	BusinessLicensePath    *string                                               `protobuf:"bytes,16,opt,name=businessLicensePath" json:"businessLicensePath,omitempty"`
	ShopWindowProfileInfo  *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo `protobuf:"bytes,17,opt,name=shopWindowProfileInfo" json:"shopWindowProfileInfo,omitempty"`
	CouponListWording      *string                                               `protobuf:"bytes,18,opt,name=couponListWording" json:"couponListWording,omitempty"`
	LastBuffer             []byte                                                `protobuf:"bytes,100,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag           *uint32                                               `protobuf:"varint,101,opt,name=continueFlag" json:"continueFlag,omitempty"`
	CouponListLastBuffer   []byte                                                `protobuf:"bytes,102,opt,name=couponListLastBuffer" json:"couponListLastBuffer,omitempty"`
	CouponListContinueFlag *uint32                                               `protobuf:"varint,103,opt,name=couponListContinueFlag" json:"couponListContinueFlag,omitempty"`
}

func (x *FinderLiveGetShopShelfResponse) Reset() {
	*x = FinderLiveGetShopShelfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveGetShopShelfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveGetShopShelfResponse) ProtoMessage() {}

func (x *FinderLiveGetShopShelfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveGetShopShelfResponse.ProtoReflect.Descriptor instead.
func (*FinderLiveGetShopShelfResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{484}
}

func (x *FinderLiveGetShopShelfResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetItemList() []*FinderLiveShopWindowItem {
	if x != nil {
		return x.ItemList
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetAddProductUrl() *FinderWxAppInfo {
	if x != nil {
		return x.AddProductUrl
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetLiveCookies() []byte {
	if x != nil {
		return x.LiveCookies
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetCustomedCsApp() *FinderWxAppInfo {
	if x != nil {
		return x.CustomedCsApp
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetPreloadInfo() *FinderLiveWxaPreloadInfo {
	if x != nil {
		return x.PreloadInfo
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderLiveGetShopShelfResponse) GetOrderInfoUrl() *FinderWxAppInfo {
	if x != nil {
		return x.OrderInfoUrl
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetShopRequestId() string {
	if x != nil && x.ShopRequestId != nil {
		return *x.ShopRequestId
	}
	return ""
}

func (x *FinderLiveGetShopShelfResponse) GetProductCount() uint32 {
	if x != nil && x.ProductCount != nil {
		return *x.ProductCount
	}
	return 0
}

func (x *FinderLiveGetShopShelfResponse) GetCouponCount() uint32 {
	if x != nil && x.CouponCount != nil {
		return *x.CouponCount
	}
	return 0
}

func (x *FinderLiveGetShopShelfResponse) GetDirectCsInfo() *FinderLiveShopCustomerServiceInfo {
	if x != nil {
		return x.DirectCsInfo
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetReplayRecordSetting() *FinderReplayRecordSetting {
	if x != nil {
		return x.ReplayRecordSetting
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetExtFlag() uint64 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *FinderLiveGetShopShelfResponse) GetHasVirtualProduct() bool {
	if x != nil && x.HasVirtualProduct != nil {
		return *x.HasVirtualProduct
	}
	return false
}

func (x *FinderLiveGetShopShelfResponse) GetBusinessLicensePath() string {
	if x != nil && x.BusinessLicensePath != nil {
		return *x.BusinessLicensePath
	}
	return ""
}

func (x *FinderLiveGetShopShelfResponse) GetShopWindowProfileInfo() *FinderLiveGetShopShelfResponse_ShopWindowProfileInfo {
	if x != nil {
		return x.ShopWindowProfileInfo
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetCouponListWording() string {
	if x != nil && x.CouponListWording != nil {
		return *x.CouponListWording
	}
	return ""
}

func (x *FinderLiveGetShopShelfResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderLiveGetShopShelfResponse) GetCouponListLastBuffer() []byte {
	if x != nil {
		return x.CouponListLastBuffer
	}
	return nil
}

func (x *FinderLiveGetShopShelfResponse) GetCouponListContinueFlag() uint32 {
	if x != nil && x.CouponListContinueFlag != nil {
		return *x.CouponListContinueFlag
	}
	return 0
}

type FinderMarkReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	ReadStats     []*MarkReadStat    `protobuf:"bytes,3,rep,name=readStats" json:"readStats,omitempty"`
}

func (x *FinderMarkReadRequest) Reset() {
	*x = FinderMarkReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMarkReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMarkReadRequest) ProtoMessage() {}

func (x *FinderMarkReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMarkReadRequest.ProtoReflect.Descriptor instead.
func (*FinderMarkReadRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{485}
}

func (x *FinderMarkReadRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderMarkReadRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderMarkReadRequest) GetReadStats() []*MarkReadStat {
	if x != nil {
		return x.ReadStats
	}
	return nil
}

type FinderMarkReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
}

func (x *FinderMarkReadResponse) Reset() {
	*x = FinderMarkReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMarkReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMarkReadResponse) ProtoMessage() {}

func (x *FinderMarkReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMarkReadResponse.ProtoReflect.Descriptor instead.
func (*FinderMarkReadResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{486}
}

func (x *FinderMarkReadResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type SyncVersionSingleReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WxaUserName        *string `protobuf:"bytes,1,opt,name=wxaUserName" json:"wxaUserName,omitempty"`
	LocalAppVersion    *uint32 `protobuf:"varint,2,opt,name=localAppVersion" json:"localAppVersion,omitempty"`
	CodePackageVersion *uint32 `protobuf:"varint,3,opt,name=codePackageVersion" json:"codePackageVersion,omitempty"`
	Path               *string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	AppId              *string `protobuf:"bytes,5,opt,name=appId" json:"appId,omitempty"`
}

func (x *SyncVersionSingleReqInfo) Reset() {
	*x = SyncVersionSingleReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncVersionSingleReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncVersionSingleReqInfo) ProtoMessage() {}

func (x *SyncVersionSingleReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncVersionSingleReqInfo.ProtoReflect.Descriptor instead.
func (*SyncVersionSingleReqInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{487}
}

func (x *SyncVersionSingleReqInfo) GetWxaUserName() string {
	if x != nil && x.WxaUserName != nil {
		return *x.WxaUserName
	}
	return ""
}

func (x *SyncVersionSingleReqInfo) GetLocalAppVersion() uint32 {
	if x != nil && x.LocalAppVersion != nil {
		return *x.LocalAppVersion
	}
	return 0
}

func (x *SyncVersionSingleReqInfo) GetCodePackageVersion() uint32 {
	if x != nil && x.CodePackageVersion != nil {
		return *x.CodePackageVersion
	}
	return 0
}

func (x *SyncVersionSingleReqInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *SyncVersionSingleReqInfo) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

type PreDownloadCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest              `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	Req         *SyncVersionSingleReqInfo `protobuf:"bytes,2,opt,name=req" json:"req,omitempty"`
	Separate    *bool                     `protobuf:"varint,3,opt,name=separate" json:"separate,omitempty"`
	Scene       *uint32                   `protobuf:"varint,4,opt,name=scene" json:"scene,omitempty"`
}

func (x *PreDownloadCodeReq) Reset() {
	*x = PreDownloadCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreDownloadCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreDownloadCodeReq) ProtoMessage() {}

func (x *PreDownloadCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreDownloadCodeReq.ProtoReflect.Descriptor instead.
func (*PreDownloadCodeReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{488}
}

func (x *PreDownloadCodeReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *PreDownloadCodeReq) GetReq() *SyncVersionSingleReqInfo {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *PreDownloadCodeReq) GetSeparate() bool {
	if x != nil && x.Separate != nil {
		return *x.Separate
	}
	return false
}

func (x *PreDownloadCodeReq) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type WxaSyncBaseCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealEndTime     *uint32 `protobuf:"varint,1,opt,name=dealEndTime" json:"dealEndTime,omitempty"`
	CmdSequnce      *uint32 `protobuf:"varint,2,opt,name=cmdSequnce" json:"cmdSequnce,omitempty"`
	ReportIdKey     *uint32 `protobuf:"varint,3,opt,name=reportIdKey" json:"reportIdKey,omitempty"`
	ReportKeyOffset *uint32 `protobuf:"varint,4,opt,name=reportKeyOffset" json:"reportKeyOffset,omitempty"`
	CmdKey          *string `protobuf:"bytes,5,opt,name=cmdKey" json:"cmdKey,omitempty"`
}

func (x *WxaSyncBaseCmd) Reset() {
	*x = WxaSyncBaseCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncBaseCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncBaseCmd) ProtoMessage() {}

func (x *WxaSyncBaseCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncBaseCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncBaseCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{489}
}

func (x *WxaSyncBaseCmd) GetDealEndTime() uint32 {
	if x != nil && x.DealEndTime != nil {
		return *x.DealEndTime
	}
	return 0
}

func (x *WxaSyncBaseCmd) GetCmdSequnce() uint32 {
	if x != nil && x.CmdSequnce != nil {
		return *x.CmdSequnce
	}
	return 0
}

func (x *WxaSyncBaseCmd) GetReportIdKey() uint32 {
	if x != nil && x.ReportIdKey != nil {
		return *x.ReportIdKey
	}
	return 0
}

func (x *WxaSyncBaseCmd) GetReportKeyOffset() uint32 {
	if x != nil && x.ReportKeyOffset != nil {
		return *x.ReportKeyOffset
	}
	return 0
}

func (x *WxaSyncBaseCmd) GetCmdKey() string {
	if x != nil && x.CmdKey != nil {
		return *x.CmdKey
	}
	return ""
}

type WxaSyncGetContactCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (x *WxaSyncGetContactCmd) Reset() {
	*x = WxaSyncGetContactCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncGetContactCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncGetContactCmd) ProtoMessage() {}

func (x *WxaSyncGetContactCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncGetContactCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncGetContactCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{490}
}

func (x *WxaSyncGetContactCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

type WxaSyncGetCodeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base                     *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	NetWork                  *uint32         `protobuf:"varint,2,opt,name=netWork" json:"netWork,omitempty"`
	RetryTime                *uint32         `protobuf:"varint,3,opt,name=retryTime" json:"retryTime,omitempty"`
	RetryInterval            *uint32         `protobuf:"varint,4,opt,name=retryInterval" json:"retryInterval,omitempty"`
	IsEncrypt                *bool           `protobuf:"varint,5,opt,name=isEncrypt" json:"isEncrypt,omitempty"`
	AppVersion               *uint32         `protobuf:"varint,6,opt,name=appVersion" json:"appVersion,omitempty"`
	Md5                      *string         `protobuf:"bytes,7,opt,name=md5" json:"md5,omitempty"`
	PackageKey               *string         `protobuf:"bytes,8,opt,name=packageKey" json:"packageKey,omitempty"`
	PackageType              *uint32         `protobuf:"varint,9,opt,name=packageType" json:"packageType,omitempty"`
	NeedRouteNewGetCdnUrlCgi *bool           `protobuf:"varint,10,opt,name=needRouteNewGetCdnUrlCgi" json:"needRouteNewGetCdnUrlCgi,omitempty"`
	NeedBackupDomain         *string         `protobuf:"bytes,13,opt,name=needBackupDomain" json:"needBackupDomain,omitempty"`
}

func (x *WxaSyncGetCodeCmd) Reset() {
	*x = WxaSyncGetCodeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncGetCodeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncGetCodeCmd) ProtoMessage() {}

func (x *WxaSyncGetCodeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncGetCodeCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncGetCodeCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{491}
}

func (x *WxaSyncGetCodeCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WxaSyncGetCodeCmd) GetNetWork() uint32 {
	if x != nil && x.NetWork != nil {
		return *x.NetWork
	}
	return 0
}

func (x *WxaSyncGetCodeCmd) GetRetryTime() uint32 {
	if x != nil && x.RetryTime != nil {
		return *x.RetryTime
	}
	return 0
}

func (x *WxaSyncGetCodeCmd) GetRetryInterval() uint32 {
	if x != nil && x.RetryInterval != nil {
		return *x.RetryInterval
	}
	return 0
}

func (x *WxaSyncGetCodeCmd) GetIsEncrypt() bool {
	if x != nil && x.IsEncrypt != nil {
		return *x.IsEncrypt
	}
	return false
}

func (x *WxaSyncGetCodeCmd) GetAppVersion() uint32 {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return 0
}

func (x *WxaSyncGetCodeCmd) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *WxaSyncGetCodeCmd) GetPackageKey() string {
	if x != nil && x.PackageKey != nil {
		return *x.PackageKey
	}
	return ""
}

func (x *WxaSyncGetCodeCmd) GetPackageType() uint32 {
	if x != nil && x.PackageType != nil {
		return *x.PackageType
	}
	return 0
}

func (x *WxaSyncGetCodeCmd) GetNeedRouteNewGetCdnUrlCgi() bool {
	if x != nil && x.NeedRouteNewGetCdnUrlCgi != nil {
		return *x.NeedRouteNewGetCdnUrlCgi
	}
	return false
}

func (x *WxaSyncGetCodeCmd) GetNeedBackupDomain() string {
	if x != nil && x.NeedBackupDomain != nil {
		return *x.NeedBackupDomain
	}
	return ""
}

type WxaSyncIssueContactCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Contact *string         `protobuf:"bytes,2,opt,name=contact" json:"contact,omitempty"`
}

func (x *WxaSyncIssueContactCmd) Reset() {
	*x = WxaSyncIssueContactCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncIssueContactCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncIssueContactCmd) ProtoMessage() {}

func (x *WxaSyncIssueContactCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncIssueContactCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncIssueContactCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{492}
}

func (x *WxaSyncIssueContactCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WxaSyncIssueContactCmd) GetContact() string {
	if x != nil && x.Contact != nil {
		return *x.Contact
	}
	return ""
}

type WxaSyncIssueLaunchCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Launch       *string         `protobuf:"bytes,2,opt,name=launch" json:"launch,omitempty"`
	SceneList    []uint32        `protobuf:"varint,3,rep,name=sceneList" json:"sceneList,omitempty"`
	UseBeginTime *uint32         `protobuf:"varint,4,opt,name=useBeginTime" json:"useBeginTime,omitempty"`
	UseEndTime   *uint32         `protobuf:"varint,5,opt,name=useEndTime" json:"useEndTime,omitempty"`
}

func (x *WxaSyncIssueLaunchCmd) Reset() {
	*x = WxaSyncIssueLaunchCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncIssueLaunchCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncIssueLaunchCmd) ProtoMessage() {}

func (x *WxaSyncIssueLaunchCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncIssueLaunchCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncIssueLaunchCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{493}
}

func (x *WxaSyncIssueLaunchCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WxaSyncIssueLaunchCmd) GetLaunch() string {
	if x != nil && x.Launch != nil {
		return *x.Launch
	}
	return ""
}

func (x *WxaSyncIssueLaunchCmd) GetSceneList() []uint32 {
	if x != nil {
		return x.SceneList
	}
	return nil
}

func (x *WxaSyncIssueLaunchCmd) GetUseBeginTime() uint32 {
	if x != nil && x.UseBeginTime != nil {
		return *x.UseBeginTime
	}
	return 0
}

func (x *WxaSyncIssueLaunchCmd) GetUseEndTime() uint32 {
	if x != nil && x.UseEndTime != nil {
		return *x.UseEndTime
	}
	return 0
}

type WxaSyncIssueDecryptKeyCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	DecryptKey *string         `protobuf:"bytes,2,opt,name=decryptKey" json:"decryptKey,omitempty"`
	AppVersion *uint32         `protobuf:"varint,3,opt,name=appVersion" json:"appVersion,omitempty"`
	Md5        *string         `protobuf:"bytes,4,opt,name=md5" json:"md5,omitempty"`
}

func (x *WxaSyncIssueDecryptKeyCmd) Reset() {
	*x = WxaSyncIssueDecryptKeyCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncIssueDecryptKeyCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncIssueDecryptKeyCmd) ProtoMessage() {}

func (x *WxaSyncIssueDecryptKeyCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncIssueDecryptKeyCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncIssueDecryptKeyCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{494}
}

func (x *WxaSyncIssueDecryptKeyCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WxaSyncIssueDecryptKeyCmd) GetDecryptKey() string {
	if x != nil && x.DecryptKey != nil {
		return *x.DecryptKey
	}
	return ""
}

func (x *WxaSyncIssueDecryptKeyCmd) GetAppVersion() uint32 {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return 0
}

func (x *WxaSyncIssueDecryptKeyCmd) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

type WxaSyncUpdateVersionCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base        *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	LastVersion *uint32         `protobuf:"varint,2,opt,name=lastVersion" json:"lastVersion,omitempty"`
}

func (x *WxaSyncUpdateVersionCmd) Reset() {
	*x = WxaSyncUpdateVersionCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncUpdateVersionCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncUpdateVersionCmd) ProtoMessage() {}

func (x *WxaSyncUpdateVersionCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncUpdateVersionCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncUpdateVersionCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{495}
}

func (x *WxaSyncUpdateVersionCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WxaSyncUpdateVersionCmd) GetLastVersion() uint32 {
	if x != nil && x.LastVersion != nil {
		return *x.LastVersion
	}
	return 0
}

type WxaSyncBlockCgiRequestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base           *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	BlockCgis      []uint32        `protobuf:"varint,2,rep,name=blockCgis" json:"blockCgis,omitempty"`
	SceneList      []uint32        `protobuf:"varint,3,rep,name=sceneList" json:"sceneList,omitempty"`
	BlockBeginTime *uint32         `protobuf:"varint,4,opt,name=blockBeginTime" json:"blockBeginTime,omitempty"`
	BlockEndTime   *uint32         `protobuf:"varint,5,opt,name=blockEndTime" json:"blockEndTime,omitempty"`
}

func (x *WxaSyncBlockCgiRequestCmd) Reset() {
	*x = WxaSyncBlockCgiRequestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncBlockCgiRequestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncBlockCgiRequestCmd) ProtoMessage() {}

func (x *WxaSyncBlockCgiRequestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncBlockCgiRequestCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncBlockCgiRequestCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{496}
}

func (x *WxaSyncBlockCgiRequestCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *WxaSyncBlockCgiRequestCmd) GetBlockCgis() []uint32 {
	if x != nil {
		return x.BlockCgis
	}
	return nil
}

func (x *WxaSyncBlockCgiRequestCmd) GetSceneList() []uint32 {
	if x != nil {
		return x.SceneList
	}
	return nil
}

func (x *WxaSyncBlockCgiRequestCmd) GetBlockBeginTime() uint32 {
	if x != nil && x.BlockBeginTime != nil {
		return *x.BlockBeginTime
	}
	return 0
}

func (x *WxaSyncBlockCgiRequestCmd) GetBlockEndTime() uint32 {
	if x != nil && x.BlockEndTime != nil {
		return *x.BlockEndTime
	}
	return 0
}

type WxaSyncPreLaunchCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (x *WxaSyncPreLaunchCmd) Reset() {
	*x = WxaSyncPreLaunchCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncPreLaunchCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncPreLaunchCmd) ProtoMessage() {}

func (x *WxaSyncPreLaunchCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncPreLaunchCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncPreLaunchCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{497}
}

func (x *WxaSyncPreLaunchCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

type WxaSyncInvalidCodeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (x *WxaSyncInvalidCodeCmd) Reset() {
	*x = WxaSyncInvalidCodeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncInvalidCodeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncInvalidCodeCmd) ProtoMessage() {}

func (x *WxaSyncInvalidCodeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncInvalidCodeCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncInvalidCodeCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{498}
}

func (x *WxaSyncInvalidCodeCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

type WxaSyncInvalidContactCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (x *WxaSyncInvalidContactCmd) Reset() {
	*x = WxaSyncInvalidContactCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncInvalidContactCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncInvalidContactCmd) ProtoMessage() {}

func (x *WxaSyncInvalidContactCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncInvalidContactCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncInvalidContactCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{499}
}

func (x *WxaSyncInvalidContactCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

type WxaSyncPullGlobalConfCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base *WxaSyncBaseCmd `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (x *WxaSyncPullGlobalConfCmd) Reset() {
	*x = WxaSyncPullGlobalConfCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncPullGlobalConfCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncPullGlobalConfCmd) ProtoMessage() {}

func (x *WxaSyncPullGlobalConfCmd) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncPullGlobalConfCmd.ProtoReflect.Descriptor instead.
func (*WxaSyncPullGlobalConfCmd) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{500}
}

func (x *WxaSyncPullGlobalConfCmd) GetBase() *WxaSyncBaseCmd {
	if x != nil {
		return x.Base
	}
	return nil
}

type WxaSyncCmds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetContact      *WxaSyncGetContactCmd      `protobuf:"bytes,1,opt,name=getContact" json:"getContact,omitempty"`
	GetCode         *WxaSyncGetCodeCmd         `protobuf:"bytes,2,opt,name=getCode" json:"getCode,omitempty"`
	IssueContact    *WxaSyncIssueContactCmd    `protobuf:"bytes,3,opt,name=issueContact" json:"issueContact,omitempty"`
	IssueLaunch     *WxaSyncIssueLaunchCmd     `protobuf:"bytes,4,opt,name=issueLaunch" json:"issueLaunch,omitempty"`
	IssueDecryptKey *WxaSyncIssueDecryptKeyCmd `protobuf:"bytes,5,opt,name=issueDecryptKey" json:"issueDecryptKey,omitempty"`
	UpdateVersion   *WxaSyncUpdateVersionCmd   `protobuf:"bytes,6,opt,name=updateVersion" json:"updateVersion,omitempty"`
	BlockCgiRequest *WxaSyncBlockCgiRequestCmd `protobuf:"bytes,7,opt,name=blockCgiRequest" json:"blockCgiRequest,omitempty"`
	PreLaunch       *WxaSyncPreLaunchCmd       `protobuf:"bytes,8,opt,name=preLaunch" json:"preLaunch,omitempty"`
	InvalidCode     *WxaSyncInvalidCodeCmd     `protobuf:"bytes,9,opt,name=invalidCode" json:"invalidCode,omitempty"`
	InvalidContact  *WxaSyncInvalidContactCmd  `protobuf:"bytes,10,opt,name=invalidContact" json:"invalidContact,omitempty"`
	PullGlobalConf  *WxaSyncPullGlobalConfCmd  `protobuf:"bytes,11,opt,name=pullGlobalConf" json:"pullGlobalConf,omitempty"`
}

func (x *WxaSyncCmds) Reset() {
	*x = WxaSyncCmds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxaSyncCmds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxaSyncCmds) ProtoMessage() {}

func (x *WxaSyncCmds) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxaSyncCmds.ProtoReflect.Descriptor instead.
func (*WxaSyncCmds) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{501}
}

func (x *WxaSyncCmds) GetGetContact() *WxaSyncGetContactCmd {
	if x != nil {
		return x.GetContact
	}
	return nil
}

func (x *WxaSyncCmds) GetGetCode() *WxaSyncGetCodeCmd {
	if x != nil {
		return x.GetCode
	}
	return nil
}

func (x *WxaSyncCmds) GetIssueContact() *WxaSyncIssueContactCmd {
	if x != nil {
		return x.IssueContact
	}
	return nil
}

func (x *WxaSyncCmds) GetIssueLaunch() *WxaSyncIssueLaunchCmd {
	if x != nil {
		return x.IssueLaunch
	}
	return nil
}

func (x *WxaSyncCmds) GetIssueDecryptKey() *WxaSyncIssueDecryptKeyCmd {
	if x != nil {
		return x.IssueDecryptKey
	}
	return nil
}

func (x *WxaSyncCmds) GetUpdateVersion() *WxaSyncUpdateVersionCmd {
	if x != nil {
		return x.UpdateVersion
	}
	return nil
}

func (x *WxaSyncCmds) GetBlockCgiRequest() *WxaSyncBlockCgiRequestCmd {
	if x != nil {
		return x.BlockCgiRequest
	}
	return nil
}

func (x *WxaSyncCmds) GetPreLaunch() *WxaSyncPreLaunchCmd {
	if x != nil {
		return x.PreLaunch
	}
	return nil
}

func (x *WxaSyncCmds) GetInvalidCode() *WxaSyncInvalidCodeCmd {
	if x != nil {
		return x.InvalidCode
	}
	return nil
}

func (x *WxaSyncCmds) GetInvalidContact() *WxaSyncInvalidContactCmd {
	if x != nil {
		return x.InvalidContact
	}
	return nil
}

func (x *WxaSyncCmds) GetPullGlobalConf() *WxaSyncPullGlobalConfCmd {
	if x != nil {
		return x.PullGlobalConf
	}
	return nil
}

type SyncVersionSingleRespInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WxaUserName    *string      `protobuf:"bytes,1,req,name=wxaUserName" json:"wxaUserName,omitempty"`
	Cmds           *WxaSyncCmds `protobuf:"bytes,2,opt,name=cmds" json:"cmds,omitempty"`
	Appid          *string      `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	AppServiceType *uint32      `protobuf:"varint,4,opt,name=appServiceType" json:"appServiceType,omitempty"`
}

func (x *SyncVersionSingleRespInfo) Reset() {
	*x = SyncVersionSingleRespInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncVersionSingleRespInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncVersionSingleRespInfo) ProtoMessage() {}

func (x *SyncVersionSingleRespInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncVersionSingleRespInfo.ProtoReflect.Descriptor instead.
func (*SyncVersionSingleRespInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{502}
}

func (x *SyncVersionSingleRespInfo) GetWxaUserName() string {
	if x != nil && x.WxaUserName != nil {
		return *x.WxaUserName
	}
	return ""
}

func (x *SyncVersionSingleRespInfo) GetCmds() *WxaSyncCmds {
	if x != nil {
		return x.Cmds
	}
	return nil
}

func (x *SyncVersionSingleRespInfo) GetAppid() string {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return ""
}

func (x *SyncVersionSingleRespInfo) GetAppServiceType() uint32 {
	if x != nil && x.AppServiceType != nil {
		return *x.AppServiceType
	}
	return 0
}

type PreDownloadCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse                `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Resp         *SyncVersionSingleRespInfo   `protobuf:"bytes,2,opt,name=resp" json:"resp,omitempty"`
	ListResp     []*SyncVersionSingleRespInfo `protobuf:"bytes,3,rep,name=listResp" json:"listResp,omitempty"`
}

func (x *PreDownloadCodeResp) Reset() {
	*x = PreDownloadCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreDownloadCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreDownloadCodeResp) ProtoMessage() {}

func (x *PreDownloadCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreDownloadCodeResp.ProtoReflect.Descriptor instead.
func (*PreDownloadCodeResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{503}
}

func (x *PreDownloadCodeResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *PreDownloadCodeResp) GetResp() *SyncVersionSingleRespInfo {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *PreDownloadCodeResp) GetListResp() []*SyncVersionSingleRespInfo {
	if x != nil {
		return x.ListResp
	}
	return nil
}

type FinderPostLiveMsgReportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SdkResolvedServerIp *string `protobuf:"bytes,1,opt,name=sdkResolvedServerIp" json:"sdkResolvedServerIp,omitempty"`
}

func (x *FinderPostLiveMsgReportInfo) Reset() {
	*x = FinderPostLiveMsgReportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPostLiveMsgReportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPostLiveMsgReportInfo) ProtoMessage() {}

func (x *FinderPostLiveMsgReportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPostLiveMsgReportInfo.ProtoReflect.Descriptor instead.
func (*FinderPostLiveMsgReportInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{504}
}

func (x *FinderPostLiveMsgReportInfo) GetSdkResolvedServerIp() string {
	if x != nil && x.SdkResolvedServerIp != nil {
		return *x.SdkResolvedServerIp
	}
	return ""
}

type FinderPostLiveMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest        *BaseRequest                 `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq      *FinderBaseRequest           `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LiveCookies        []byte                       `protobuf:"bytes,3,opt,name=liveCookies" json:"liveCookies,omitempty"`
	Msg                *FinderLiveMsg               `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
	LiveId             *uint64                      `protobuf:"varint,5,opt,name=liveId" json:"liveId,omitempty"`
	ClientMsgId        *string                      `protobuf:"bytes,6,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	ObjectId           *uint64                      `protobuf:"varint,7,opt,name=objectId" json:"objectId,omitempty"`
	ObjectNonceId      *string                      `protobuf:"bytes,8,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	FinderUsername     *string                      `protobuf:"bytes,9,opt,name=finderUsername" json:"finderUsername,omitempty"`
	ReportInfo         *FinderPostLiveMsgReportInfo `protobuf:"bytes,10,opt,name=reportInfo" json:"reportInfo,omitempty"`
	LiveReportBaseInfo *FinderLiveReportBaseInfo    `protobuf:"bytes,11,opt,name=liveReportBaseInfo" json:"liveReportBaseInfo,omitempty"`
}

func (x *FinderPostLiveMsgReq) Reset() {
	*x = FinderPostLiveMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPostLiveMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPostLiveMsgReq) ProtoMessage() {}

func (x *FinderPostLiveMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPostLiveMsgReq.ProtoReflect.Descriptor instead.
func (*FinderPostLiveMsgReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{505}
}

func (x *FinderPostLiveMsgReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderPostLiveMsgReq) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderPostLiveMsgReq) GetLiveCookies() []byte {
	if x != nil {
		return x.LiveCookies
	}
	return nil
}

func (x *FinderPostLiveMsgReq) GetMsg() *FinderLiveMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *FinderPostLiveMsgReq) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderPostLiveMsgReq) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *FinderPostLiveMsgReq) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderPostLiveMsgReq) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderPostLiveMsgReq) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderPostLiveMsgReq) GetReportInfo() *FinderPostLiveMsgReportInfo {
	if x != nil {
		return x.ReportInfo
	}
	return nil
}

func (x *FinderPostLiveMsgReq) GetLiveReportBaseInfo() *FinderLiveReportBaseInfo {
	if x != nil {
		return x.LiveReportBaseInfo
	}
	return nil
}

type FinderPostLiveMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	RealnameUrl  *string       `protobuf:"bytes,2,opt,name=realnameUrl" json:"realnameUrl,omitempty"`
	StatusFlag   *uint32       `protobuf:"varint,3,opt,name=statusFlag" json:"statusFlag,omitempty"`
}

func (x *FinderPostLiveMsgResp) Reset() {
	*x = FinderPostLiveMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPostLiveMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPostLiveMsgResp) ProtoMessage() {}

func (x *FinderPostLiveMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPostLiveMsgResp.ProtoReflect.Descriptor instead.
func (*FinderPostLiveMsgResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{506}
}

func (x *FinderPostLiveMsgResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderPostLiveMsgResp) GetRealnameUrl() string {
	if x != nil && x.RealnameUrl != nil {
		return *x.RealnameUrl
	}
	return ""
}

func (x *FinderPostLiveMsgResp) GetStatusFlag() uint32 {
	if x != nil && x.StatusFlag != nil {
		return *x.StatusFlag
	}
	return 0
}

type GetWecoinBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
}

func (x *GetWecoinBalanceRequest) Reset() {
	*x = GetWecoinBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWecoinBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWecoinBalanceRequest) ProtoMessage() {}

func (x *GetWecoinBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWecoinBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetWecoinBalanceRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{507}
}

func (x *GetWecoinBalanceRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

type GetWecoinBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Balance      *int64        `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
}

func (x *GetWecoinBalanceResponse) Reset() {
	*x = GetWecoinBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWecoinBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWecoinBalanceResponse) ProtoMessage() {}

func (x *GetWecoinBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWecoinBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetWecoinBalanceResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{508}
}

func (x *GetWecoinBalanceResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetWecoinBalanceResponse) GetBalance() int64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

type FinderLikeLiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest        *BaseRequest              `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq      *FinderBaseRequest        `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LiveId             *uint64                   `protobuf:"varint,3,opt,name=liveId" json:"liveId,omitempty"`
	Count              *uint64                   `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	LiveCookies        []byte                    `protobuf:"bytes,5,opt,name=liveCookies" json:"liveCookies,omitempty"`
	ObjectId           *uint64                   `protobuf:"varint,6,opt,name=objectId" json:"objectId,omitempty"`
	Seq                *uint64                   `protobuf:"varint,7,opt,name=seq" json:"seq,omitempty"`
	LiveMsgType        *uint32                   `protobuf:"varint,8,opt,name=liveMsgType" json:"liveMsgType,omitempty"`
	ClientMsgId        *string                   `protobuf:"bytes,9,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	Scene              *uint32                   `protobuf:"varint,10,opt,name=scene" json:"scene,omitempty"`
	Optype             *uint32                   `protobuf:"varint,11,opt,name=optype" json:"optype,omitempty"`
	ObjectNonceId      *string                   `protobuf:"bytes,12,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	FinderUsername     *string                   `protobuf:"bytes,13,opt,name=finderUsername" json:"finderUsername,omitempty"`
	LiveReportBaseInfo *FinderLiveReportBaseInfo `protobuf:"bytes,14,opt,name=liveReportBaseInfo" json:"liveReportBaseInfo,omitempty"`
}

func (x *FinderLikeLiveReq) Reset() {
	*x = FinderLikeLiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLikeLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLikeLiveReq) ProtoMessage() {}

func (x *FinderLikeLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLikeLiveReq.ProtoReflect.Descriptor instead.
func (*FinderLikeLiveReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{509}
}

func (x *FinderLikeLiveReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderLikeLiveReq) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderLikeLiveReq) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderLikeLiveReq) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *FinderLikeLiveReq) GetLiveCookies() []byte {
	if x != nil {
		return x.LiveCookies
	}
	return nil
}

func (x *FinderLikeLiveReq) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderLikeLiveReq) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *FinderLikeLiveReq) GetLiveMsgType() uint32 {
	if x != nil && x.LiveMsgType != nil {
		return *x.LiveMsgType
	}
	return 0
}

func (x *FinderLikeLiveReq) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *FinderLikeLiveReq) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderLikeLiveReq) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *FinderLikeLiveReq) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderLikeLiveReq) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderLikeLiveReq) GetLiveReportBaseInfo() *FinderLiveReportBaseInfo {
	if x != nil {
		return x.LiveReportBaseInfo
	}
	return nil
}

type FinderLikeLiveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	StatusFlag   *uint32       `protobuf:"varint,2,opt,name=statusFlag" json:"statusFlag,omitempty"`
}

func (x *FinderLikeLiveResp) Reset() {
	*x = FinderLikeLiveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLikeLiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLikeLiveResp) ProtoMessage() {}

func (x *FinderLikeLiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLikeLiveResp.ProtoReflect.Descriptor instead.
func (*FinderLikeLiveResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{510}
}

func (x *FinderLikeLiveResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderLikeLiveResp) GetStatusFlag() uint32 {
	if x != nil && x.StatusFlag != nil {
		return *x.StatusFlag
	}
	return 0
}

type HongBaoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	CgiCmd      *uint32           `protobuf:"varint,2,opt,name=cgiCmd" json:"cgiCmd,omitempty"`
	OutPutType  *uint32           `protobuf:"varint,3,opt,name=outPutType" json:"outPutType,omitempty"`
	ReqText     *SKBuiltinBufferT `protobuf:"bytes,4,req,name=reqText" json:"reqText,omitempty"`
}

func (x *HongBaoReq) Reset() {
	*x = HongBaoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HongBaoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HongBaoReq) ProtoMessage() {}

func (x *HongBaoReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HongBaoReq.ProtoReflect.Descriptor instead.
func (*HongBaoReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{511}
}

func (x *HongBaoReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *HongBaoReq) GetCgiCmd() uint32 {
	if x != nil && x.CgiCmd != nil {
		return *x.CgiCmd
	}
	return 0
}

func (x *HongBaoReq) GetOutPutType() uint32 {
	if x != nil && x.OutPutType != nil {
		return *x.OutPutType
	}
	return 0
}

func (x *HongBaoReq) GetReqText() *SKBuiltinBufferT {
	if x != nil {
		return x.ReqText
	}
	return nil
}

type HongBaoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse     `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	RetText      *SKBuiltinBufferT `protobuf:"bytes,2,opt,name=retText" json:"retText,omitempty"`
	PlatRet      *int32            `protobuf:"varint,3,req,name=platRet" json:"platRet,omitempty"`
	PlatMsg      *string           `protobuf:"bytes,4,opt,name=platMsg" json:"platMsg,omitempty"`
	CgiCmdid     *int32            `protobuf:"varint,5,req,name=cgiCmdid" json:"cgiCmdid,omitempty"`
	ErrorType    *int32            `protobuf:"varint,6,opt,name=errorType" json:"errorType,omitempty"`
	ErrorMsg     *string           `protobuf:"bytes,7,opt,name=errorMsg" json:"errorMsg,omitempty"`
}

func (x *HongBaoRes) Reset() {
	*x = HongBaoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HongBaoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HongBaoRes) ProtoMessage() {}

func (x *HongBaoRes) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HongBaoRes.ProtoReflect.Descriptor instead.
func (*HongBaoRes) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{512}
}

func (x *HongBaoRes) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *HongBaoRes) GetRetText() *SKBuiltinBufferT {
	if x != nil {
		return x.RetText
	}
	return nil
}

func (x *HongBaoRes) GetPlatRet() int32 {
	if x != nil && x.PlatRet != nil {
		return *x.PlatRet
	}
	return 0
}

func (x *HongBaoRes) GetPlatMsg() string {
	if x != nil && x.PlatMsg != nil {
		return *x.PlatMsg
	}
	return ""
}

func (x *HongBaoRes) GetCgiCmdid() int32 {
	if x != nil && x.CgiCmdid != nil {
		return *x.CgiCmdid
	}
	return 0
}

func (x *HongBaoRes) GetErrorType() int32 {
	if x != nil && x.ErrorType != nil {
		return *x.ErrorType
	}
	return 0
}

func (x *HongBaoRes) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

type GetRedPacketStoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=baseRequest" json:"baseRequest,omitempty"`
	PacketId    *string      `protobuf:"bytes,2,opt,name=packetId" json:"packetId,omitempty"`
}

func (x *GetRedPacketStoryRequest) Reset() {
	*x = GetRedPacketStoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRedPacketStoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedPacketStoryRequest) ProtoMessage() {}

func (x *GetRedPacketStoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedPacketStoryRequest.ProtoReflect.Descriptor instead.
func (*GetRedPacketStoryRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{513}
}

func (x *GetRedPacketStoryRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *GetRedPacketStoryRequest) GetPacketId() string {
	if x != nil && x.PacketId != nil {
		return *x.PacketId
	}
	return ""
}

type RedPacketStoryInfo_StoryDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaType              *uint32 `protobuf:"varint,1,opt,name=mediaType" json:"mediaType,omitempty"`
	MediaUrl               *string `protobuf:"bytes,2,opt,name=mediaUrl" json:"mediaUrl,omitempty"`
	MediaMd5               *string `protobuf:"bytes,3,opt,name=mediaMd5" json:"mediaMd5,omitempty"`
	Height                 *uint32 `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	Width                  *uint32 `protobuf:"varint,5,opt,name=width" json:"width,omitempty"`
	MediaFuzzyThumbnailUrl *string `protobuf:"bytes,6,opt,name=mediaFuzzyThumbnailUrl" json:"mediaFuzzyThumbnailUrl,omitempty"`
	MediaFuzzyThumbnailMd5 *string `protobuf:"bytes,7,opt,name=mediaFuzzyThumbnailMd5" json:"mediaFuzzyThumbnailMd5,omitempty"`
}

func (x *RedPacketStoryInfo_StoryDetail) Reset() {
	*x = RedPacketStoryInfo_StoryDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketStoryInfo_StoryDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketStoryInfo_StoryDetail) ProtoMessage() {}

func (x *RedPacketStoryInfo_StoryDetail) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketStoryInfo_StoryDetail.ProtoReflect.Descriptor instead.
func (*RedPacketStoryInfo_StoryDetail) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{514}
}

func (x *RedPacketStoryInfo_StoryDetail) GetMediaType() uint32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *RedPacketStoryInfo_StoryDetail) GetMediaUrl() string {
	if x != nil && x.MediaUrl != nil {
		return *x.MediaUrl
	}
	return ""
}

func (x *RedPacketStoryInfo_StoryDetail) GetMediaMd5() string {
	if x != nil && x.MediaMd5 != nil {
		return *x.MediaMd5
	}
	return ""
}

func (x *RedPacketStoryInfo_StoryDetail) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *RedPacketStoryInfo_StoryDetail) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *RedPacketStoryInfo_StoryDetail) GetMediaFuzzyThumbnailUrl() string {
	if x != nil && x.MediaFuzzyThumbnailUrl != nil {
		return *x.MediaFuzzyThumbnailUrl
	}
	return ""
}

func (x *RedPacketStoryInfo_StoryDetail) GetMediaFuzzyThumbnailMd5() string {
	if x != nil && x.MediaFuzzyThumbnailMd5 != nil {
		return *x.MediaFuzzyThumbnailMd5
	}
	return ""
}

type CoverInfoDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderC2CUrl         *string `protobuf:"bytes,1,opt,name=senderC2CUrl" json:"senderC2CUrl,omitempty"`
	SenderC2CMd5         *string `protobuf:"bytes,2,opt,name=senderC2CMd5" json:"senderC2CMd5,omitempty"`
	ReceiverC2CUrl       *string `protobuf:"bytes,3,opt,name=receiverC2CUrl" json:"receiverC2CUrl,omitempty"`
	ReceiverC2CMd5       *string `protobuf:"bytes,4,opt,name=receiverC2CMd5" json:"receiverC2CMd5,omitempty"`
	RecUrl               *string `protobuf:"bytes,5,opt,name=recUrl" json:"recUrl,omitempty"`
	RecMd5               *string `protobuf:"bytes,6,opt,name=recMd5" json:"recMd5,omitempty"`
	DetailUrl            *string `protobuf:"bytes,7,opt,name=detailUrl" json:"detailUrl,omitempty"`
	DetailMd5            *string `protobuf:"bytes,8,opt,name=detailMd5" json:"detailMd5,omitempty"`
	AboutUrl             *string `protobuf:"bytes,9,opt,name=aboutUrl" json:"aboutUrl,omitempty"`
	PacketId             *string `protobuf:"bytes,10,opt,name=packetId" json:"packetId,omitempty"`
	PacketSource         *uint32 `protobuf:"varint,11,opt,name=packetSource" json:"packetSource,omitempty"`
	LogoUrl              *string `protobuf:"bytes,12,opt,name=logoUrl" json:"logoUrl,omitempty"`
	LogoMd5              *string `protobuf:"bytes,13,opt,name=logoMd5" json:"logoMd5,omitempty"`
	HasStory             *bool   `protobuf:"varint,14,opt,name=hasStory" json:"hasStory,omitempty"`
	MaterialFlag         *uint32 `protobuf:"varint,15,opt,name=materialFlag" json:"materialFlag,omitempty"`
	RecWidgetUrl         *string `protobuf:"bytes,16,opt,name=recWidgetUrl" json:"recWidgetUrl,omitempty"`
	RecWidgetMd5         *string `protobuf:"bytes,17,opt,name=recWidgetMd5" json:"recWidgetMd5,omitempty"`
	SenderC2CWidgetUrl   *string `protobuf:"bytes,18,opt,name=senderC2CWidgetUrl" json:"senderC2CWidgetUrl,omitempty"`
	SenderC2CWidgetMd5   *string `protobuf:"bytes,19,opt,name=senderC2CWidgetMd5" json:"senderC2CWidgetMd5,omitempty"`
	ReceiverC2CWidgetUrl *string `protobuf:"bytes,20,opt,name=receiverC2CWidgetUrl" json:"receiverC2CWidgetUrl,omitempty"`
	ReceiverC2CWidgetMd5 *string `protobuf:"bytes,21,opt,name=receiverC2CWidgetMd5" json:"receiverC2CWidgetMd5,omitempty"`
	StatusFlag           *uint32 `protobuf:"varint,22,opt,name=statusFlag" json:"statusFlag,omitempty"`
	PacketFissionInfo    []byte  `protobuf:"bytes,23,opt,name=packetFissionInfo" json:"packetFissionInfo,omitempty"`
}

func (x *CoverInfoDetail) Reset() {
	*x = CoverInfoDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverInfoDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverInfoDetail) ProtoMessage() {}

func (x *CoverInfoDetail) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverInfoDetail.ProtoReflect.Descriptor instead.
func (*CoverInfoDetail) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{515}
}

func (x *CoverInfoDetail) GetSenderC2CUrl() string {
	if x != nil && x.SenderC2CUrl != nil {
		return *x.SenderC2CUrl
	}
	return ""
}

func (x *CoverInfoDetail) GetSenderC2CMd5() string {
	if x != nil && x.SenderC2CMd5 != nil {
		return *x.SenderC2CMd5
	}
	return ""
}

func (x *CoverInfoDetail) GetReceiverC2CUrl() string {
	if x != nil && x.ReceiverC2CUrl != nil {
		return *x.ReceiverC2CUrl
	}
	return ""
}

func (x *CoverInfoDetail) GetReceiverC2CMd5() string {
	if x != nil && x.ReceiverC2CMd5 != nil {
		return *x.ReceiverC2CMd5
	}
	return ""
}

func (x *CoverInfoDetail) GetRecUrl() string {
	if x != nil && x.RecUrl != nil {
		return *x.RecUrl
	}
	return ""
}

func (x *CoverInfoDetail) GetRecMd5() string {
	if x != nil && x.RecMd5 != nil {
		return *x.RecMd5
	}
	return ""
}

func (x *CoverInfoDetail) GetDetailUrl() string {
	if x != nil && x.DetailUrl != nil {
		return *x.DetailUrl
	}
	return ""
}

func (x *CoverInfoDetail) GetDetailMd5() string {
	if x != nil && x.DetailMd5 != nil {
		return *x.DetailMd5
	}
	return ""
}

func (x *CoverInfoDetail) GetAboutUrl() string {
	if x != nil && x.AboutUrl != nil {
		return *x.AboutUrl
	}
	return ""
}

func (x *CoverInfoDetail) GetPacketId() string {
	if x != nil && x.PacketId != nil {
		return *x.PacketId
	}
	return ""
}

func (x *CoverInfoDetail) GetPacketSource() uint32 {
	if x != nil && x.PacketSource != nil {
		return *x.PacketSource
	}
	return 0
}

func (x *CoverInfoDetail) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

func (x *CoverInfoDetail) GetLogoMd5() string {
	if x != nil && x.LogoMd5 != nil {
		return *x.LogoMd5
	}
	return ""
}

func (x *CoverInfoDetail) GetHasStory() bool {
	if x != nil && x.HasStory != nil {
		return *x.HasStory
	}
	return false
}

func (x *CoverInfoDetail) GetMaterialFlag() uint32 {
	if x != nil && x.MaterialFlag != nil {
		return *x.MaterialFlag
	}
	return 0
}

func (x *CoverInfoDetail) GetRecWidgetUrl() string {
	if x != nil && x.RecWidgetUrl != nil {
		return *x.RecWidgetUrl
	}
	return ""
}

func (x *CoverInfoDetail) GetRecWidgetMd5() string {
	if x != nil && x.RecWidgetMd5 != nil {
		return *x.RecWidgetMd5
	}
	return ""
}

func (x *CoverInfoDetail) GetSenderC2CWidgetUrl() string {
	if x != nil && x.SenderC2CWidgetUrl != nil {
		return *x.SenderC2CWidgetUrl
	}
	return ""
}

func (x *CoverInfoDetail) GetSenderC2CWidgetMd5() string {
	if x != nil && x.SenderC2CWidgetMd5 != nil {
		return *x.SenderC2CWidgetMd5
	}
	return ""
}

func (x *CoverInfoDetail) GetReceiverC2CWidgetUrl() string {
	if x != nil && x.ReceiverC2CWidgetUrl != nil {
		return *x.ReceiverC2CWidgetUrl
	}
	return ""
}

func (x *CoverInfoDetail) GetReceiverC2CWidgetMd5() string {
	if x != nil && x.ReceiverC2CWidgetMd5 != nil {
		return *x.ReceiverC2CWidgetMd5
	}
	return ""
}

func (x *CoverInfoDetail) GetStatusFlag() uint32 {
	if x != nil && x.StatusFlag != nil {
		return *x.StatusFlag
	}
	return 0
}

func (x *CoverInfoDetail) GetPacketFissionInfo() []byte {
	if x != nil {
		return x.PacketFissionInfo
	}
	return nil
}

type RedPacketStoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                    *string                           `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	LogoUrl                  *string                           `protobuf:"bytes,2,opt,name=logoUrl" json:"logoUrl,omitempty"`
	LogoMd5                  *string                           `protobuf:"bytes,3,opt,name=logoMd5" json:"logoMd5,omitempty"`
	Description              *string                           `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	CorpName                 *string                           `protobuf:"bytes,9,opt,name=corpName" json:"corpName,omitempty"`
	DetailList               []*RedPacketStoryInfo_StoryDetail `protobuf:"bytes,10,rep,name=detailList" json:"detailList,omitempty"`
	ActionType               *uint32                           `protobuf:"varint,11,opt,name=actionType" json:"actionType,omitempty"`
	ActionUrl                *string                           `protobuf:"bytes,12,opt,name=actionUrl" json:"actionUrl,omitempty"`
	ActionAppUsername        *string                           `protobuf:"bytes,13,opt,name=actionAppUsername" json:"actionAppUsername,omitempty"`
	ActionAppNickname        *string                           `protobuf:"bytes,14,opt,name=actionAppNickname" json:"actionAppNickname,omitempty"`
	PacketId                 *string                           `protobuf:"bytes,15,opt,name=packetId" json:"packetId,omitempty"`
	CoverInfo                *CoverInfoDetail                  `protobuf:"bytes,16,opt,name=coverInfo" json:"coverInfo,omitempty"`
	ActionButtonText         *string                           `protobuf:"bytes,17,opt,name=actionButtonText" json:"actionButtonText,omitempty"`
	ActionEmotionDesignerUin *uint32                           `protobuf:"varint,18,opt,name=actionEmotionDesignerUin" json:"actionEmotionDesignerUin,omitempty"`
	DisableAutoPlay          *uint32                           `protobuf:"varint,19,opt,name=disableAutoPlay" json:"disableAutoPlay,omitempty"`
	AutoPlayDelayMs          *uint32                           `protobuf:"varint,20,opt,name=autoPlayDelayMs" json:"autoPlayDelayMs,omitempty"`
	ActionJumpText           *string                           `protobuf:"bytes,21,opt,name=actionJumpText" json:"actionJumpText,omitempty"`
	SameReceiveLink          *string                           `protobuf:"bytes,22,opt,name=sameReceiveLink" json:"sameReceiveLink,omitempty"`
}

func (x *RedPacketStoryInfo) Reset() {
	*x = RedPacketStoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketStoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketStoryInfo) ProtoMessage() {}

func (x *RedPacketStoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketStoryInfo.ProtoReflect.Descriptor instead.
func (*RedPacketStoryInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{516}
}

func (x *RedPacketStoryInfo) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *RedPacketStoryInfo) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

func (x *RedPacketStoryInfo) GetLogoMd5() string {
	if x != nil && x.LogoMd5 != nil {
		return *x.LogoMd5
	}
	return ""
}

func (x *RedPacketStoryInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *RedPacketStoryInfo) GetCorpName() string {
	if x != nil && x.CorpName != nil {
		return *x.CorpName
	}
	return ""
}

func (x *RedPacketStoryInfo) GetDetailList() []*RedPacketStoryInfo_StoryDetail {
	if x != nil {
		return x.DetailList
	}
	return nil
}

func (x *RedPacketStoryInfo) GetActionType() uint32 {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return 0
}

func (x *RedPacketStoryInfo) GetActionUrl() string {
	if x != nil && x.ActionUrl != nil {
		return *x.ActionUrl
	}
	return ""
}

func (x *RedPacketStoryInfo) GetActionAppUsername() string {
	if x != nil && x.ActionAppUsername != nil {
		return *x.ActionAppUsername
	}
	return ""
}

func (x *RedPacketStoryInfo) GetActionAppNickname() string {
	if x != nil && x.ActionAppNickname != nil {
		return *x.ActionAppNickname
	}
	return ""
}

func (x *RedPacketStoryInfo) GetPacketId() string {
	if x != nil && x.PacketId != nil {
		return *x.PacketId
	}
	return ""
}

func (x *RedPacketStoryInfo) GetCoverInfo() *CoverInfoDetail {
	if x != nil {
		return x.CoverInfo
	}
	return nil
}

func (x *RedPacketStoryInfo) GetActionButtonText() string {
	if x != nil && x.ActionButtonText != nil {
		return *x.ActionButtonText
	}
	return ""
}

func (x *RedPacketStoryInfo) GetActionEmotionDesignerUin() uint32 {
	if x != nil && x.ActionEmotionDesignerUin != nil {
		return *x.ActionEmotionDesignerUin
	}
	return 0
}

func (x *RedPacketStoryInfo) GetDisableAutoPlay() uint32 {
	if x != nil && x.DisableAutoPlay != nil {
		return *x.DisableAutoPlay
	}
	return 0
}

func (x *RedPacketStoryInfo) GetAutoPlayDelayMs() uint32 {
	if x != nil && x.AutoPlayDelayMs != nil {
		return *x.AutoPlayDelayMs
	}
	return 0
}

func (x *RedPacketStoryInfo) GetActionJumpText() string {
	if x != nil && x.ActionJumpText != nil {
		return *x.ActionJumpText
	}
	return ""
}

func (x *RedPacketStoryInfo) GetSameReceiveLink() string {
	if x != nil && x.SameReceiveLink != nil {
		return *x.SameReceiveLink
	}
	return ""
}

type GetRedPacketStoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse       `protobuf:"bytes,1,req,name=baseResponse" json:"baseResponse,omitempty"`
	Info            *RedPacketStoryInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	SubtypeId       *uint32             `protobuf:"varint,3,opt,name=subtypeId" json:"subtypeId,omitempty"`
	LocalUpdateTime *uint32             `protobuf:"varint,100,opt,name=localUpdateTime" json:"localUpdateTime,omitempty"`
}

func (x *GetRedPacketStoryResponse) Reset() {
	*x = GetRedPacketStoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRedPacketStoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRedPacketStoryResponse) ProtoMessage() {}

func (x *GetRedPacketStoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRedPacketStoryResponse.ProtoReflect.Descriptor instead.
func (*GetRedPacketStoryResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{517}
}

func (x *GetRedPacketStoryResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetRedPacketStoryResponse) GetInfo() *RedPacketStoryInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetRedPacketStoryResponse) GetSubtypeId() uint32 {
	if x != nil && x.SubtypeId != nil {
		return *x.SubtypeId
	}
	return 0
}

func (x *GetRedPacketStoryResponse) GetLocalUpdateTime() uint32 {
	if x != nil && x.LocalUpdateTime != nil {
		return *x.LocalUpdateTime
	}
	return 0
}

type ChatRoomWatchMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
}

func (x *ChatRoomWatchMember) Reset() {
	*x = ChatRoomWatchMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRoomWatchMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRoomWatchMember) ProtoMessage() {}

func (x *ChatRoomWatchMember) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRoomWatchMember.ProtoReflect.Descriptor instead.
func (*ChatRoomWatchMember) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{518}
}

func (x *ChatRoomWatchMember) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type RingBackSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderObjectId *uint64 `protobuf:"varint,1,req,name=finderObjectId" json:"finderObjectId,omitempty"`
	FinderNonceId  *string `protobuf:"bytes,2,req,name=finderNonceId" json:"finderNonceId,omitempty"`
	StartTs        *uint32 `protobuf:"varint,3,req,name=startTs" json:"startTs,omitempty"`
	EndTs          *uint32 `protobuf:"varint,4,req,name=endTs" json:"endTs,omitempty"`
}

func (x *RingBackSetting) Reset() {
	*x = RingBackSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RingBackSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RingBackSetting) ProtoMessage() {}

func (x *RingBackSetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RingBackSetting.ProtoReflect.Descriptor instead.
func (*RingBackSetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{519}
}

func (x *RingBackSetting) GetFinderObjectId() uint64 {
	if x != nil && x.FinderObjectId != nil {
		return *x.FinderObjectId
	}
	return 0
}

func (x *RingBackSetting) GetFinderNonceId() string {
	if x != nil && x.FinderNonceId != nil {
		return *x.FinderNonceId
	}
	return ""
}

func (x *RingBackSetting) GetStartTs() uint32 {
	if x != nil && x.StartTs != nil {
		return *x.StartTs
	}
	return 0
}

func (x *RingBackSetting) GetEndTs() uint32 {
	if x != nil && x.EndTs != nil {
		return *x.EndTs
	}
	return 0
}

type SendMsgTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	Ticket   *string `protobuf:"bytes,2,opt,name=ticket" json:"ticket,omitempty"`
}

func (x *SendMsgTicket) Reset() {
	*x = SendMsgTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgTicket) ProtoMessage() {}

func (x *SendMsgTicket) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgTicket.ProtoReflect.Descriptor instead.
func (*SendMsgTicket) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{520}
}

func (x *SendMsgTicket) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *SendMsgTicket) GetTicket() string {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return ""
}

type FinderSearchSuggestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	Query         *string            `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	SessionBuffer []byte             `protobuf:"bytes,5,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
	Scene         *uint32            `protobuf:"varint,6,opt,name=scene" json:"scene,omitempty"`
}

func (x *FinderSearchSuggestRequest) Reset() {
	*x = FinderSearchSuggestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchSuggestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchSuggestRequest) ProtoMessage() {}

func (x *FinderSearchSuggestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchSuggestRequest.ProtoReflect.Descriptor instead.
func (*FinderSearchSuggestRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{521}
}

func (x *FinderSearchSuggestRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderSearchSuggestRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderSearchSuggestRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *FinderSearchSuggestRequest) GetSessionBuffer() []byte {
	if x != nil {
		return x.SessionBuffer
	}
	return nil
}

func (x *FinderSearchSuggestRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type FinderSearchSuggestResponse_Suggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suggest          *string `protobuf:"bytes,1,opt,name=suggest" json:"suggest,omitempty"`
	HighlightSuggest *string `protobuf:"bytes,2,opt,name=highlightSuggest" json:"highlightSuggest,omitempty"`
}

func (x *FinderSearchSuggestResponse_Suggestion) Reset() {
	*x = FinderSearchSuggestResponse_Suggestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchSuggestResponse_Suggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchSuggestResponse_Suggestion) ProtoMessage() {}

func (x *FinderSearchSuggestResponse_Suggestion) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchSuggestResponse_Suggestion.ProtoReflect.Descriptor instead.
func (*FinderSearchSuggestResponse_Suggestion) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{522}
}

func (x *FinderSearchSuggestResponse_Suggestion) GetSuggest() string {
	if x != nil && x.Suggest != nil {
		return *x.Suggest
	}
	return ""
}

func (x *FinderSearchSuggestResponse_Suggestion) GetHighlightSuggest() string {
	if x != nil && x.HighlightSuggest != nil {
		return *x.HighlightSuggest
	}
	return ""
}

type FinderSearchSuggestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse  *BaseResponse                             `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Suggest       []*FinderSearchSuggestResponse_Suggestion `protobuf:"bytes,2,rep,name=suggest" json:"suggest,omitempty"`
	SessionBuffer []byte                                    `protobuf:"bytes,3,opt,name=sessionBuffer" json:"sessionBuffer,omitempty"`
}

func (x *FinderSearchSuggestResponse) Reset() {
	*x = FinderSearchSuggestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchSuggestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchSuggestResponse) ProtoMessage() {}

func (x *FinderSearchSuggestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchSuggestResponse.ProtoReflect.Descriptor instead.
func (*FinderSearchSuggestResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{523}
}

func (x *FinderSearchSuggestResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderSearchSuggestResponse) GetSuggest() []*FinderSearchSuggestResponse_Suggestion {
	if x != nil {
		return x.Suggest
	}
	return nil
}

func (x *FinderSearchSuggestResponse) GetSessionBuffer() []byte {
	if x != nil {
		return x.SessionBuffer
	}
	return nil
}

type FinderSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest          *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Query                *string            `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	Offset               *uint32            `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	LastBuff             []byte             `protobuf:"bytes,4,opt,name=lastBuff" json:"lastBuff,omitempty"`
	Scene                *uint32            `protobuf:"varint,5,opt,name=scene" json:"scene,omitempty"`
	RequestId            *string            `protobuf:"bytes,6,opt,name=requestId" json:"requestId,omitempty"`
	FinderBasereq        *FinderBaseRequest `protobuf:"bytes,7,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	HotwordSessionBuffer []byte             `protobuf:"bytes,8,opt,name=hotwordSessionBuffer" json:"hotwordSessionBuffer,omitempty"`
	TopicBuffer          []byte             `protobuf:"bytes,9,opt,name=topicBuffer" json:"topicBuffer,omitempty"`
	ObjHotwordInfoBuff   []byte             `protobuf:"bytes,10,opt,name=objHotwordInfoBuff" json:"objHotwordInfoBuff,omitempty"`
}

func (x *FinderSearchRequest) Reset() {
	*x = FinderSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchRequest) ProtoMessage() {}

func (x *FinderSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchRequest.ProtoReflect.Descriptor instead.
func (*FinderSearchRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{524}
}

func (x *FinderSearchRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderSearchRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *FinderSearchRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *FinderSearchRequest) GetLastBuff() []byte {
	if x != nil {
		return x.LastBuff
	}
	return nil
}

func (x *FinderSearchRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderSearchRequest) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *FinderSearchRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderSearchRequest) GetHotwordSessionBuffer() []byte {
	if x != nil {
		return x.HotwordSessionBuffer
	}
	return nil
}

func (x *FinderSearchRequest) GetTopicBuffer() []byte {
	if x != nil {
		return x.TopicBuffer
	}
	return nil
}

func (x *FinderSearchRequest) GetObjHotwordInfoBuff() []byte {
	if x != nil {
		return x.ObjHotwordInfoBuff
	}
	return nil
}

type FinderSearchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact             *FinderContact `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
	HighlightNickname   *string        `protobuf:"bytes,2,opt,name=highlightNickname" json:"highlightNickname,omitempty"`
	HighlightSignature  *string        `protobuf:"bytes,3,opt,name=highlightSignature" json:"highlightSignature,omitempty"`
	FansCount           *uint32        `protobuf:"varint,4,opt,name=fansCount" json:"fansCount,omitempty"`
	FriendFollowCount   *uint32        `protobuf:"varint,5,opt,name=friendFollowCount" json:"friendFollowCount,omitempty"`
	HighlightProfession *string        `protobuf:"bytes,6,opt,name=highlightProfession" json:"highlightProfession,omitempty"`
}

func (x *FinderSearchInfo) Reset() {
	*x = FinderSearchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchInfo) ProtoMessage() {}

func (x *FinderSearchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchInfo.ProtoReflect.Descriptor instead.
func (*FinderSearchInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{525}
}

func (x *FinderSearchInfo) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderSearchInfo) GetHighlightNickname() string {
	if x != nil && x.HighlightNickname != nil {
		return *x.HighlightNickname
	}
	return ""
}

func (x *FinderSearchInfo) GetHighlightSignature() string {
	if x != nil && x.HighlightSignature != nil {
		return *x.HighlightSignature
	}
	return ""
}

func (x *FinderSearchInfo) GetFansCount() uint32 {
	if x != nil && x.FansCount != nil {
		return *x.FansCount
	}
	return 0
}

func (x *FinderSearchInfo) GetFriendFollowCount() uint32 {
	if x != nil && x.FriendFollowCount != nil {
		return *x.FriendFollowCount
	}
	return 0
}

func (x *FinderSearchInfo) GetHighlightProfession() string {
	if x != nil && x.HighlightProfession != nil {
		return *x.HighlightProfession
	}
	return ""
}

type FinderTopicSearchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicInfo      *FinderTopicInfo `protobuf:"bytes,1,opt,name=topicInfo" json:"topicInfo,omitempty"`
	HighlightTopic *string          `protobuf:"bytes,2,opt,name=highlightTopic" json:"highlightTopic,omitempty"`
}

func (x *FinderTopicSearchInfo) Reset() {
	*x = FinderTopicSearchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTopicSearchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTopicSearchInfo) ProtoMessage() {}

func (x *FinderTopicSearchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTopicSearchInfo.ProtoReflect.Descriptor instead.
func (*FinderTopicSearchInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{526}
}

func (x *FinderTopicSearchInfo) GetTopicInfo() *FinderTopicInfo {
	if x != nil {
		return x.TopicInfo
	}
	return nil
}

func (x *FinderTopicSearchInfo) GetHighlightTopic() string {
	if x != nil && x.HighlightTopic != nil {
		return *x.HighlightTopic
	}
	return ""
}

type FinderMusicSearchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MusicInfo          *FinderMusicInfo `protobuf:"bytes,1,opt,name=musicInfo" json:"musicInfo,omitempty"`
	HighlightSongName  *string          `protobuf:"bytes,2,opt,name=highlightSongName" json:"highlightSongName,omitempty"`
	HighlightArtist    *string          `protobuf:"bytes,3,opt,name=highlightArtist" json:"highlightArtist,omitempty"`
	HighlightAlbumName *string          `protobuf:"bytes,4,opt,name=highlightAlbumName" json:"highlightAlbumName,omitempty"`
}

func (x *FinderMusicSearchInfo) Reset() {
	*x = FinderMusicSearchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMusicSearchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMusicSearchInfo) ProtoMessage() {}

func (x *FinderMusicSearchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMusicSearchInfo.ProtoReflect.Descriptor instead.
func (*FinderMusicSearchInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{527}
}

func (x *FinderMusicSearchInfo) GetMusicInfo() *FinderMusicInfo {
	if x != nil {
		return x.MusicInfo
	}
	return nil
}

func (x *FinderMusicSearchInfo) GetHighlightSongName() string {
	if x != nil && x.HighlightSongName != nil {
		return *x.HighlightSongName
	}
	return ""
}

func (x *FinderMusicSearchInfo) GetHighlightArtist() string {
	if x != nil && x.HighlightArtist != nil {
		return *x.HighlightArtist
	}
	return ""
}

func (x *FinderMusicSearchInfo) GetHighlightAlbumName() string {
	if x != nil && x.HighlightAlbumName != nil {
		return *x.HighlightAlbumName
	}
	return ""
}

type FinderSearchSecurityTips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipsText *string `protobuf:"bytes,1,opt,name=tipsText" json:"tipsText,omitempty"`
}

func (x *FinderSearchSecurityTips) Reset() {
	*x = FinderSearchSecurityTips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchSecurityTips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchSecurityTips) ProtoMessage() {}

func (x *FinderSearchSecurityTips) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchSecurityTips.ProtoReflect.Descriptor instead.
func (*FinderSearchSecurityTips) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{528}
}

func (x *FinderSearchSecurityTips) GetTipsText() string {
	if x != nil && x.TipsText != nil {
		return *x.TipsText
	}
	return ""
}

type FinderSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse       *BaseResponse             `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	InfoList           []*FinderSearchInfo       `protobuf:"bytes,2,rep,name=infoList" json:"infoList,omitempty"`
	Offset             *uint32                   `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	ContinueFlag       *uint32                   `protobuf:"varint,4,opt,name=continueFlag" json:"continueFlag,omitempty"`
	ObjectList         []*FinderObject           `protobuf:"bytes,5,rep,name=objectList" json:"objectList,omitempty"`
	LastBuff           []byte                    `protobuf:"bytes,6,opt,name=lastBuff" json:"lastBuff,omitempty"`
	RequsetId          *string                   `protobuf:"bytes,7,opt,name=requsetId" json:"requsetId,omitempty"`
	TopicInfoList      []*FinderTopicSearchInfo  `protobuf:"bytes,8,rep,name=topicInfoList" json:"topicInfoList,omitempty"`
	ObjectContinueFlag *uint32                   `protobuf:"varint,9,opt,name=objectContinueFlag" json:"objectContinueFlag,omitempty"`
	TopicContinueFlag  *uint32                   `protobuf:"varint,10,opt,name=topicContinueFlag" json:"topicContinueFlag,omitempty"`
	MusicInfoList      []*FinderMusicSearchInfo  `protobuf:"bytes,11,rep,name=musicInfoList" json:"musicInfoList,omitempty"`
	MusicContinueFlag  *uint32                   `protobuf:"varint,12,opt,name=musicContinueFlag" json:"musicContinueFlag,omitempty"`
	SecurityTips       *FinderSearchSecurityTips `protobuf:"bytes,13,opt,name=securityTips" json:"securityTips,omitempty"`
	HotwordInfo        *FinderSearchHotWord      `protobuf:"bytes,14,opt,name=hotwordInfo" json:"hotwordInfo,omitempty"`
}

func (x *FinderSearchResponse) Reset() {
	*x = FinderSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchResponse) ProtoMessage() {}

func (x *FinderSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchResponse.ProtoReflect.Descriptor instead.
func (*FinderSearchResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{529}
}

func (x *FinderSearchResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderSearchResponse) GetInfoList() []*FinderSearchInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

func (x *FinderSearchResponse) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *FinderSearchResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderSearchResponse) GetObjectList() []*FinderObject {
	if x != nil {
		return x.ObjectList
	}
	return nil
}

func (x *FinderSearchResponse) GetLastBuff() []byte {
	if x != nil {
		return x.LastBuff
	}
	return nil
}

func (x *FinderSearchResponse) GetRequsetId() string {
	if x != nil && x.RequsetId != nil {
		return *x.RequsetId
	}
	return ""
}

func (x *FinderSearchResponse) GetTopicInfoList() []*FinderTopicSearchInfo {
	if x != nil {
		return x.TopicInfoList
	}
	return nil
}

func (x *FinderSearchResponse) GetObjectContinueFlag() uint32 {
	if x != nil && x.ObjectContinueFlag != nil {
		return *x.ObjectContinueFlag
	}
	return 0
}

func (x *FinderSearchResponse) GetTopicContinueFlag() uint32 {
	if x != nil && x.TopicContinueFlag != nil {
		return *x.TopicContinueFlag
	}
	return 0
}

func (x *FinderSearchResponse) GetMusicInfoList() []*FinderMusicSearchInfo {
	if x != nil {
		return x.MusicInfoList
	}
	return nil
}

func (x *FinderSearchResponse) GetMusicContinueFlag() uint32 {
	if x != nil && x.MusicContinueFlag != nil {
		return *x.MusicContinueFlag
	}
	return 0
}

func (x *FinderSearchResponse) GetSecurityTips() *FinderSearchSecurityTips {
	if x != nil {
		return x.SecurityTips
	}
	return nil
}

func (x *FinderSearchResponse) GetHotwordInfo() *FinderSearchHotWord {
	if x != nil {
		return x.HotwordInfo
	}
	return nil
}

type FinderInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Keybuf        *SKBuiltinBufferT  `protobuf:"bytes,2,opt,name=keybuf" json:"keybuf,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,3,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
}

func (x *FinderInitRequest) Reset() {
	*x = FinderInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderInitRequest) ProtoMessage() {}

func (x *FinderInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderInitRequest.ProtoReflect.Descriptor instead.
func (*FinderInitRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{530}
}

func (x *FinderInitRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderInitRequest) GetKeybuf() *SKBuiltinBufferT {
	if x != nil {
		return x.Keybuf
	}
	return nil
}

func (x *FinderInitRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

type FinderTabInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayTabType *uint32 `protobuf:"varint,1,opt,name=displayTabType" json:"displayTabType,omitempty"`
	TabName        *string `protobuf:"bytes,2,opt,name=tabName" json:"tabName,omitempty"`
}

func (x *FinderTabInfo) Reset() {
	*x = FinderTabInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTabInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTabInfo) ProtoMessage() {}

func (x *FinderTabInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTabInfo.ProtoReflect.Descriptor instead.
func (*FinderTabInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{531}
}

func (x *FinderTabInfo) GetDisplayTabType() uint32 {
	if x != nil && x.DisplayTabType != nil {
		return *x.DisplayTabType
	}
	return 0
}

func (x *FinderTabInfo) GetTabName() string {
	if x != nil && x.TabName != nil {
		return *x.TabName
	}
	return ""
}

type WXUserAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotAvailableFlag *uint32 `protobuf:"varint,1,opt,name=notAvailableFlag" json:"notAvailableFlag,omitempty"`
	Wording          *string `protobuf:"bytes,2,opt,name=wording" json:"wording,omitempty"`
}

func (x *WXUserAttr) Reset() {
	*x = WXUserAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WXUserAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WXUserAttr) ProtoMessage() {}

func (x *WXUserAttr) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WXUserAttr.ProtoReflect.Descriptor instead.
func (*WXUserAttr) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{532}
}

func (x *WXUserAttr) GetNotAvailableFlag() uint32 {
	if x != nil && x.NotAvailableFlag != nil {
		return *x.NotAvailableFlag
	}
	return 0
}

func (x *WXUserAttr) GetWording() string {
	if x != nil && x.Wording != nil {
		return *x.Wording
	}
	return ""
}

type FinderTeenModeTipsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TipsWording  *string `protobuf:"bytes,1,opt,name=tipsWording" json:"tipsWording,omitempty"`
	TipsDurian   *uint64 `protobuf:"varint,2,opt,name=tipsDurian" json:"tipsDurian,omitempty"`
	TipsLocation *uint32 `protobuf:"varint,3,opt,name=tipsLocation" json:"tipsLocation,omitempty"`
	TipsUiStyle  *uint32 `protobuf:"varint,4,opt,name=tipsUiStyle" json:"tipsUiStyle,omitempty"`
}

func (x *FinderTeenModeTipsConfig) Reset() {
	*x = FinderTeenModeTipsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTeenModeTipsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTeenModeTipsConfig) ProtoMessage() {}

func (x *FinderTeenModeTipsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTeenModeTipsConfig.ProtoReflect.Descriptor instead.
func (*FinderTeenModeTipsConfig) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{533}
}

func (x *FinderTeenModeTipsConfig) GetTipsWording() string {
	if x != nil && x.TipsWording != nil {
		return *x.TipsWording
	}
	return ""
}

func (x *FinderTeenModeTipsConfig) GetTipsDurian() uint64 {
	if x != nil && x.TipsDurian != nil {
		return *x.TipsDurian
	}
	return 0
}

func (x *FinderTeenModeTipsConfig) GetTipsLocation() uint32 {
	if x != nil && x.TipsLocation != nil {
		return *x.TipsLocation
	}
	return 0
}

func (x *FinderTeenModeTipsConfig) GetTipsUiStyle() uint32 {
	if x != nil && x.TipsUiStyle != nil {
		return *x.TipsUiStyle
	}
	return 0
}

type FinderTeenModeSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeenagerSetting *uint32 `protobuf:"varint,1,opt,name=teenagerSetting" json:"teenagerSetting,omitempty"`
	IsTeenagerMode  *bool   `protobuf:"varint,2,opt,name=isTeenagerMode" json:"isTeenagerMode,omitempty"`
}

func (x *FinderTeenModeSetting) Reset() {
	*x = FinderTeenModeSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTeenModeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTeenModeSetting) ProtoMessage() {}

func (x *FinderTeenModeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTeenModeSetting.ProtoReflect.Descriptor instead.
func (*FinderTeenModeSetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{534}
}

func (x *FinderTeenModeSetting) GetTeenagerSetting() uint32 {
	if x != nil && x.TeenagerSetting != nil {
		return *x.TeenagerSetting
	}
	return 0
}

func (x *FinderTeenModeSetting) GetIsTeenagerMode() bool {
	if x != nil && x.IsTeenagerMode != nil {
		return *x.IsTeenagerMode
	}
	return false
}

type FinderSlideUpGuideConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	GuideAppearTime      *uint32 `protobuf:"varint,2,opt,name=guideAppearTime" json:"guideAppearTime,omitempty"`
	GuideDisappearTime   *uint32 `protobuf:"varint,3,opt,name=guideDisappearTime" json:"guideDisappearTime,omitempty"`
	GuideAppearFrequency *uint32 `protobuf:"varint,4,opt,name=guideAppearFrequency" json:"guideAppearFrequency,omitempty"`
	AppearTimeSecond     *uint32 `protobuf:"varint,5,opt,name=appearTimeSecond" json:"appearTimeSecond,omitempty"`
	AppearTimePercent    *uint32 `protobuf:"varint,6,opt,name=appearTimePercent" json:"appearTimePercent,omitempty"`
	DisappearTimeSecond  *uint32 `protobuf:"varint,7,opt,name=disappearTimeSecond" json:"disappearTimeSecond,omitempty"`
	FrequencyLimit       *uint32 `protobuf:"varint,8,opt,name=frequencyLimit" json:"frequencyLimit,omitempty"`
}

func (x *FinderSlideUpGuideConfig) Reset() {
	*x = FinderSlideUpGuideConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSlideUpGuideConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSlideUpGuideConfig) ProtoMessage() {}

func (x *FinderSlideUpGuideConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSlideUpGuideConfig.ProtoReflect.Descriptor instead.
func (*FinderSlideUpGuideConfig) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{535}
}

func (x *FinderSlideUpGuideConfig) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *FinderSlideUpGuideConfig) GetGuideAppearTime() uint32 {
	if x != nil && x.GuideAppearTime != nil {
		return *x.GuideAppearTime
	}
	return 0
}

func (x *FinderSlideUpGuideConfig) GetGuideDisappearTime() uint32 {
	if x != nil && x.GuideDisappearTime != nil {
		return *x.GuideDisappearTime
	}
	return 0
}

func (x *FinderSlideUpGuideConfig) GetGuideAppearFrequency() uint32 {
	if x != nil && x.GuideAppearFrequency != nil {
		return *x.GuideAppearFrequency
	}
	return 0
}

func (x *FinderSlideUpGuideConfig) GetAppearTimeSecond() uint32 {
	if x != nil && x.AppearTimeSecond != nil {
		return *x.AppearTimeSecond
	}
	return 0
}

func (x *FinderSlideUpGuideConfig) GetAppearTimePercent() uint32 {
	if x != nil && x.AppearTimePercent != nil {
		return *x.AppearTimePercent
	}
	return 0
}

func (x *FinderSlideUpGuideConfig) GetDisappearTimeSecond() uint32 {
	if x != nil && x.DisappearTimeSecond != nil {
		return *x.DisappearTimeSecond
	}
	return 0
}

func (x *FinderSlideUpGuideConfig) GetFrequencyLimit() uint32 {
	if x != nil && x.FrequencyLimit != nil {
		return *x.FrequencyLimit
	}
	return 0
}

type FinderWxPersonalizedSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowRecommendVideo *bool `protobuf:"varint,1,opt,name=allowRecommendVideo" json:"allowRecommendVideo,omitempty"`
	AllowRecommendLive  *bool `protobuf:"varint,2,opt,name=allowRecommendLive" json:"allowRecommendLive,omitempty"`
}

func (x *FinderWxPersonalizedSetting) Reset() {
	*x = FinderWxPersonalizedSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderWxPersonalizedSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderWxPersonalizedSetting) ProtoMessage() {}

func (x *FinderWxPersonalizedSetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderWxPersonalizedSetting.ProtoReflect.Descriptor instead.
func (*FinderWxPersonalizedSetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{536}
}

func (x *FinderWxPersonalizedSetting) GetAllowRecommendVideo() bool {
	if x != nil && x.AllowRecommendVideo != nil {
		return *x.AllowRecommendVideo
	}
	return false
}

func (x *FinderWxPersonalizedSetting) GetAllowRecommendLive() bool {
	if x != nil && x.AllowRecommendLive != nil {
		return *x.AllowRecommendLive
	}
	return false
}

type FinderRingtoneConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThresholdWithoutName      *uint32 `protobuf:"varint,1,opt,name=thresholdWithoutName" json:"thresholdWithoutName,omitempty"`
	ThresholdWithName         *uint32 `protobuf:"varint,2,opt,name=thresholdWithName" json:"thresholdWithName,omitempty"`
	SetRingtoneFrequencyLimit *uint32 `protobuf:"varint,3,opt,name=setRingtoneFrequencyLimit" json:"setRingtoneFrequencyLimit,omitempty"`
	NotifyFrequencyLimit      *uint32 `protobuf:"varint,4,opt,name=notifyFrequencyLimit" json:"notifyFrequencyLimit,omitempty"`
}

func (x *FinderRingtoneConfig) Reset() {
	*x = FinderRingtoneConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderRingtoneConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderRingtoneConfig) ProtoMessage() {}

func (x *FinderRingtoneConfig) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderRingtoneConfig.ProtoReflect.Descriptor instead.
func (*FinderRingtoneConfig) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{537}
}

func (x *FinderRingtoneConfig) GetThresholdWithoutName() uint32 {
	if x != nil && x.ThresholdWithoutName != nil {
		return *x.ThresholdWithoutName
	}
	return 0
}

func (x *FinderRingtoneConfig) GetThresholdWithName() uint32 {
	if x != nil && x.ThresholdWithName != nil {
		return *x.ThresholdWithName
	}
	return 0
}

func (x *FinderRingtoneConfig) GetSetRingtoneFrequencyLimit() uint32 {
	if x != nil && x.SetRingtoneFrequencyLimit != nil {
		return *x.SetRingtoneFrequencyLimit
	}
	return 0
}

func (x *FinderRingtoneConfig) GetNotifyFrequencyLimit() uint32 {
	if x != nil && x.NotifyFrequencyLimit != nil {
		return *x.NotifyFrequencyLimit
	}
	return 0
}

type FinderInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse              *BaseResponse                `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Myacct                    []*FinderContact             `protobuf:"bytes,2,rep,name=myacct" json:"myacct,omitempty"`
	Keybuf                    *SKBuiltinBufferT            `protobuf:"bytes,3,opt,name=keybuf" json:"keybuf,omitempty"`
	Cmdlist                   []*FinderCmdItem             `protobuf:"bytes,4,rep,name=cmdlist" json:"cmdlist,omitempty"`
	ContinueFlag              *uint32                      `protobuf:"varint,5,opt,name=continueFlag" json:"continueFlag,omitempty"`
	Userver                   *uint32                      `protobuf:"varint,6,opt,name=userver" json:"userver,omitempty"`
	TabInfos                  []*FinderTabInfo             `protobuf:"bytes,7,rep,name=tabInfos" json:"tabInfos,omitempty"`
	UserverForH5              *uint32                      `protobuf:"varint,8,opt,name=userverForH5" json:"userverForH5,omitempty"`
	UserNotCreatedFlag        *uint32                      `protobuf:"varint,9,opt,name=userNotCreatedFlag" json:"userNotCreatedFlag,omitempty"`
	WxUserAttr                *WXUserAttr                  `protobuf:"bytes,10,opt,name=wxUserAttr" json:"wxUserAttr,omitempty"`
	AliasInfo                 []*FinderLiveAliasInfo       `protobuf:"bytes,11,rep,name=aliasInfo" json:"aliasInfo,omitempty"`
	CurrentAliasRoleType      *uint32                      `protobuf:"varint,12,opt,name=currentAliasRoleType" json:"currentAliasRoleType,omitempty"`
	NextAliasModAvailableTime *uint64                      `protobuf:"varint,13,opt,name=nextAliasModAvailableTime" json:"nextAliasModAvailableTime,omitempty"`
	TeenmodeTipsConfig        *FinderTeenModeTipsConfig    `protobuf:"bytes,14,opt,name=teenmodeTipsConfig" json:"teenmodeTipsConfig,omitempty"`
	FinderUsernameList        []string                     `protobuf:"bytes,15,rep,name=finderUsernameList" json:"finderUsernameList,omitempty"`
	WxUsernameForH5           *string                      `protobuf:"bytes,16,opt,name=wxUsernameForH5" json:"wxUsernameForH5,omitempty"`
	RetryDelaySecond          *uint32                      `protobuf:"varint,17,opt,name=retryDelaySecond" json:"retryDelaySecond,omitempty"`
	TeenmodeSetting           *FinderTeenModeSetting       `protobuf:"bytes,18,opt,name=teenmodeSetting" json:"teenmodeSetting,omitempty"`
	SlideUpGuideConfig        []*FinderSlideUpGuideConfig  `protobuf:"bytes,19,rep,name=slideUpGuideConfig" json:"slideUpGuideConfig,omitempty"`
	WxPersonalizedSetting     *FinderWxPersonalizedSetting `protobuf:"bytes,20,opt,name=wxPersonalizedSetting" json:"wxPersonalizedSetting,omitempty"`
	RingtoneConfig            *FinderRingtoneConfig        `protobuf:"bytes,21,opt,name=ringtoneConfig" json:"ringtoneConfig,omitempty"`
}

func (x *FinderInitResponse) Reset() {
	*x = FinderInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderInitResponse) ProtoMessage() {}

func (x *FinderInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderInitResponse.ProtoReflect.Descriptor instead.
func (*FinderInitResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{538}
}

func (x *FinderInitResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderInitResponse) GetMyacct() []*FinderContact {
	if x != nil {
		return x.Myacct
	}
	return nil
}

func (x *FinderInitResponse) GetKeybuf() *SKBuiltinBufferT {
	if x != nil {
		return x.Keybuf
	}
	return nil
}

func (x *FinderInitResponse) GetCmdlist() []*FinderCmdItem {
	if x != nil {
		return x.Cmdlist
	}
	return nil
}

func (x *FinderInitResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderInitResponse) GetUserver() uint32 {
	if x != nil && x.Userver != nil {
		return *x.Userver
	}
	return 0
}

func (x *FinderInitResponse) GetTabInfos() []*FinderTabInfo {
	if x != nil {
		return x.TabInfos
	}
	return nil
}

func (x *FinderInitResponse) GetUserverForH5() uint32 {
	if x != nil && x.UserverForH5 != nil {
		return *x.UserverForH5
	}
	return 0
}

func (x *FinderInitResponse) GetUserNotCreatedFlag() uint32 {
	if x != nil && x.UserNotCreatedFlag != nil {
		return *x.UserNotCreatedFlag
	}
	return 0
}

func (x *FinderInitResponse) GetWxUserAttr() *WXUserAttr {
	if x != nil {
		return x.WxUserAttr
	}
	return nil
}

func (x *FinderInitResponse) GetAliasInfo() []*FinderLiveAliasInfo {
	if x != nil {
		return x.AliasInfo
	}
	return nil
}

func (x *FinderInitResponse) GetCurrentAliasRoleType() uint32 {
	if x != nil && x.CurrentAliasRoleType != nil {
		return *x.CurrentAliasRoleType
	}
	return 0
}

func (x *FinderInitResponse) GetNextAliasModAvailableTime() uint64 {
	if x != nil && x.NextAliasModAvailableTime != nil {
		return *x.NextAliasModAvailableTime
	}
	return 0
}

func (x *FinderInitResponse) GetTeenmodeTipsConfig() *FinderTeenModeTipsConfig {
	if x != nil {
		return x.TeenmodeTipsConfig
	}
	return nil
}

func (x *FinderInitResponse) GetFinderUsernameList() []string {
	if x != nil {
		return x.FinderUsernameList
	}
	return nil
}

func (x *FinderInitResponse) GetWxUsernameForH5() string {
	if x != nil && x.WxUsernameForH5 != nil {
		return *x.WxUsernameForH5
	}
	return ""
}

func (x *FinderInitResponse) GetRetryDelaySecond() uint32 {
	if x != nil && x.RetryDelaySecond != nil {
		return *x.RetryDelaySecond
	}
	return 0
}

func (x *FinderInitResponse) GetTeenmodeSetting() *FinderTeenModeSetting {
	if x != nil {
		return x.TeenmodeSetting
	}
	return nil
}

func (x *FinderInitResponse) GetSlideUpGuideConfig() []*FinderSlideUpGuideConfig {
	if x != nil {
		return x.SlideUpGuideConfig
	}
	return nil
}

func (x *FinderInitResponse) GetWxPersonalizedSetting() *FinderWxPersonalizedSetting {
	if x != nil {
		return x.WxPersonalizedSetting
	}
	return nil
}

func (x *FinderInitResponse) GetRingtoneConfig() *FinderRingtoneConfig {
	if x != nil {
		return x.RingtoneConfig
	}
	return nil
}

type FinderLiveSetSockPuppetAttrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	Nickname      *string            `protobuf:"bytes,3,opt,name=nickname" json:"nickname,omitempty"`
	HeadImgUrl    *string            `protobuf:"bytes,4,opt,name=headImgUrl" json:"headImgUrl,omitempty"`
}

func (x *FinderLiveSetSockPuppetAttrRequest) Reset() {
	*x = FinderLiveSetSockPuppetAttrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveSetSockPuppetAttrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveSetSockPuppetAttrRequest) ProtoMessage() {}

func (x *FinderLiveSetSockPuppetAttrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveSetSockPuppetAttrRequest.ProtoReflect.Descriptor instead.
func (*FinderLiveSetSockPuppetAttrRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{539}
}

func (x *FinderLiveSetSockPuppetAttrRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderLiveSetSockPuppetAttrRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderLiveSetSockPuppetAttrRequest) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderLiveSetSockPuppetAttrRequest) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

type FinderLiveSetSockPuppetAttrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse        `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	AliasInfo    *FinderLiveAliasInfo `protobuf:"bytes,2,opt,name=aliasInfo" json:"aliasInfo,omitempty"`
}

func (x *FinderLiveSetSockPuppetAttrResponse) Reset() {
	*x = FinderLiveSetSockPuppetAttrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveSetSockPuppetAttrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveSetSockPuppetAttrResponse) ProtoMessage() {}

func (x *FinderLiveSetSockPuppetAttrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveSetSockPuppetAttrResponse.ProtoReflect.Descriptor instead.
func (*FinderLiveSetSockPuppetAttrResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{540}
}

func (x *FinderLiveSetSockPuppetAttrResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderLiveSetSockPuppetAttrResponse) GetAliasInfo() *FinderLiveAliasInfo {
	if x != nil {
		return x.AliasInfo
	}
	return nil
}

type FinderLiveSwitchIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq   *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	TargetAliasRole *uint32            `protobuf:"varint,3,opt,name=targetAliasRole" json:"targetAliasRole,omitempty"`
	FinderUsername  *string            `protobuf:"bytes,4,opt,name=finderUsername" json:"finderUsername,omitempty"`
	ObjectId        *uint64            `protobuf:"varint,5,opt,name=objectId" json:"objectId,omitempty"`
	LiveId          *uint64            `protobuf:"varint,6,opt,name=liveId" json:"liveId,omitempty"`
}

func (x *FinderLiveSwitchIdentityRequest) Reset() {
	*x = FinderLiveSwitchIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveSwitchIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveSwitchIdentityRequest) ProtoMessage() {}

func (x *FinderLiveSwitchIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveSwitchIdentityRequest.ProtoReflect.Descriptor instead.
func (*FinderLiveSwitchIdentityRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{541}
}

func (x *FinderLiveSwitchIdentityRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderLiveSwitchIdentityRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderLiveSwitchIdentityRequest) GetTargetAliasRole() uint32 {
	if x != nil && x.TargetAliasRole != nil {
		return *x.TargetAliasRole
	}
	return 0
}

func (x *FinderLiveSwitchIdentityRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderLiveSwitchIdentityRequest) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderLiveSwitchIdentityRequest) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

type FinderLiveSwitchIdentityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
}

func (x *FinderLiveSwitchIdentityResponse) Reset() {
	*x = FinderLiveSwitchIdentityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveSwitchIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveSwitchIdentityResponse) ProtoMessage() {}

func (x *FinderLiveSwitchIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveSwitchIdentityResponse.ProtoReflect.Descriptor instead.
func (*FinderLiveSwitchIdentityResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{542}
}

func (x *FinderLiveSwitchIdentityResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type FinderLiveClearAliasRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
}

func (x *FinderLiveClearAliasRoleRequest) Reset() {
	*x = FinderLiveClearAliasRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveClearAliasRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveClearAliasRoleRequest) ProtoMessage() {}

func (x *FinderLiveClearAliasRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveClearAliasRoleRequest.ProtoReflect.Descriptor instead.
func (*FinderLiveClearAliasRoleRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{543}
}

func (x *FinderLiveClearAliasRoleRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderLiveClearAliasRoleRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

type FinderLiveClearAliasRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
}

func (x *FinderLiveClearAliasRoleResponse) Reset() {
	*x = FinderLiveClearAliasRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveClearAliasRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveClearAliasRoleResponse) ProtoMessage() {}

func (x *FinderLiveClearAliasRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveClearAliasRoleResponse.ProtoReflect.Descriptor instead.
func (*FinderLiveClearAliasRoleResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{544}
}

func (x *FinderLiveClearAliasRoleResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type FinderOplogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Username      *string            `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	CmdList       []*FinderCmdItem   `protobuf:"bytes,3,rep,name=cmdList" json:"cmdList,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,4,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
}

func (x *FinderOplogRequest) Reset() {
	*x = FinderOplogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderOplogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderOplogRequest) ProtoMessage() {}

func (x *FinderOplogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderOplogRequest.ProtoReflect.Descriptor instead.
func (*FinderOplogRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{545}
}

func (x *FinderOplogRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderOplogRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderOplogRequest) GetCmdList() []*FinderCmdItem {
	if x != nil {
		return x.CmdList
	}
	return nil
}

func (x *FinderOplogRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

type FinderCmdRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdId   *uint32 `protobuf:"varint,1,opt,name=cmdId" json:"cmdId,omitempty"`
	RetCode *int32  `protobuf:"varint,2,opt,name=retCode" json:"retCode,omitempty"`
	RetMsg  *string `protobuf:"bytes,3,opt,name=retMsg" json:"retMsg,omitempty"`
	RetBuf  []byte  `protobuf:"bytes,4,opt,name=retBuf" json:"retBuf,omitempty"`
}

func (x *FinderCmdRet) Reset() {
	*x = FinderCmdRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCmdRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCmdRet) ProtoMessage() {}

func (x *FinderCmdRet) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCmdRet.ProtoReflect.Descriptor instead.
func (*FinderCmdRet) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{546}
}

func (x *FinderCmdRet) GetCmdId() uint32 {
	if x != nil && x.CmdId != nil {
		return *x.CmdId
	}
	return 0
}

func (x *FinderCmdRet) GetRetCode() int32 {
	if x != nil && x.RetCode != nil {
		return *x.RetCode
	}
	return 0
}

func (x *FinderCmdRet) GetRetMsg() string {
	if x != nil && x.RetMsg != nil {
		return *x.RetMsg
	}
	return ""
}

func (x *FinderCmdRet) GetRetBuf() []byte {
	if x != nil {
		return x.RetBuf
	}
	return nil
}

type FinderOplogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse   `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	RetList      []*FinderCmdRet `protobuf:"bytes,2,rep,name=retList" json:"retList,omitempty"`
}

func (x *FinderOplogResponse) Reset() {
	*x = FinderOplogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderOplogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderOplogResponse) ProtoMessage() {}

func (x *FinderOplogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderOplogResponse.ProtoReflect.Descriptor instead.
func (*FinderOplogResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{547}
}

func (x *FinderOplogResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderOplogResponse) GetRetList() []*FinderCmdRet {
	if x != nil {
		return x.RetList
	}
	return nil
}

type FinderRemoveFansSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fansid *string `protobuf:"bytes,1,opt,name=fansid" json:"fansid,omitempty"`
}

func (x *FinderRemoveFansSetting) Reset() {
	*x = FinderRemoveFansSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderRemoveFansSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderRemoveFansSetting) ProtoMessage() {}

func (x *FinderRemoveFansSetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderRemoveFansSetting.ProtoReflect.Descriptor instead.
func (*FinderRemoveFansSetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{548}
}

func (x *FinderRemoveFansSetting) GetFansid() string {
	if x != nil && x.Fansid != nil {
		return *x.Fansid
	}
	return ""
}

type FinderModBlockPosterSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderUsername *string `protobuf:"bytes,1,opt,name=finderUsername" json:"finderUsername,omitempty"`
	Optype         *uint32 `protobuf:"varint,2,opt,name=optype" json:"optype,omitempty"`
}

func (x *FinderModBlockPosterSetting) Reset() {
	*x = FinderModBlockPosterSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderModBlockPosterSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderModBlockPosterSetting) ProtoMessage() {}

func (x *FinderModBlockPosterSetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderModBlockPosterSetting.ProtoReflect.Descriptor instead.
func (*FinderModBlockPosterSetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{549}
}

func (x *FinderModBlockPosterSetting) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderModBlockPosterSetting) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

type FinderModProfileStickySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objectid      *uint64 `protobuf:"varint,1,opt,name=objectid" json:"objectid,omitempty"`
	Optype        *uint32 `protobuf:"varint,2,opt,name=optype" json:"optype,omitempty"`
	ObjectNonceId *string `protobuf:"bytes,3,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
}

func (x *FinderModProfileStickySetting) Reset() {
	*x = FinderModProfileStickySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderModProfileStickySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderModProfileStickySetting) ProtoMessage() {}

func (x *FinderModProfileStickySetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderModProfileStickySetting.ProtoReflect.Descriptor instead.
func (*FinderModProfileStickySetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{550}
}

func (x *FinderModProfileStickySetting) GetObjectid() uint64 {
	if x != nil && x.Objectid != nil {
		return *x.Objectid
	}
	return 0
}

func (x *FinderModProfileStickySetting) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *FinderModProfileStickySetting) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

type FinderModMsgSessionMuteSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Optype    *uint32 `protobuf:"varint,1,opt,name=optype" json:"optype,omitempty"`
	SessionId *string `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (x *FinderModMsgSessionMuteSetting) Reset() {
	*x = FinderModMsgSessionMuteSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderModMsgSessionMuteSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderModMsgSessionMuteSetting) ProtoMessage() {}

func (x *FinderModMsgSessionMuteSetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderModMsgSessionMuteSetting.ProtoReflect.Descriptor instead.
func (*FinderModMsgSessionMuteSetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{551}
}

func (x *FinderModMsgSessionMuteSetting) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *FinderModMsgSessionMuteSetting) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type FinderLiveAppMsgLocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *FinderLocation `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Content  *string         `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (x *FinderLiveAppMsgLocationInfo) Reset() {
	*x = FinderLiveAppMsgLocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLiveAppMsgLocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLiveAppMsgLocationInfo) ProtoMessage() {}

func (x *FinderLiveAppMsgLocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLiveAppMsgLocationInfo.ProtoReflect.Descriptor instead.
func (*FinderLiveAppMsgLocationInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{552}
}

func (x *FinderLiveAppMsgLocationInfo) GetLocation() *FinderLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FinderLiveAppMsgLocationInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

type FinderPostLiveAppMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBasereq  *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LiveCookies    []byte             `protobuf:"bytes,3,opt,name=liveCookies" json:"liveCookies,omitempty"`
	Msg            *FinderLiveAppMsg  `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
	LiveId         *uint64            `protobuf:"varint,5,opt,name=liveId" json:"liveId,omitempty"`
	ObjectId       *uint64            `protobuf:"varint,6,opt,name=objectId" json:"objectId,omitempty"`
	ObjectNonceId  *string            `protobuf:"bytes,7,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	Scene          *uint32            `protobuf:"varint,8,opt,name=scene" json:"scene,omitempty"`
	FinderUsername *string            `protobuf:"bytes,9,opt,name=finderUsername" json:"finderUsername,omitempty"`
}

func (x *FinderPostLiveAppMsgRequest) Reset() {
	*x = FinderPostLiveAppMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPostLiveAppMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPostLiveAppMsgRequest) ProtoMessage() {}

func (x *FinderPostLiveAppMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPostLiveAppMsgRequest.ProtoReflect.Descriptor instead.
func (*FinderPostLiveAppMsgRequest) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{553}
}

func (x *FinderPostLiveAppMsgRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderPostLiveAppMsgRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderPostLiveAppMsgRequest) GetLiveCookies() []byte {
	if x != nil {
		return x.LiveCookies
	}
	return nil
}

func (x *FinderPostLiveAppMsgRequest) GetMsg() *FinderLiveAppMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *FinderPostLiveAppMsgRequest) GetLiveId() uint64 {
	if x != nil && x.LiveId != nil {
		return *x.LiveId
	}
	return 0
}

func (x *FinderPostLiveAppMsgRequest) GetObjectId() uint64 {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return 0
}

func (x *FinderPostLiveAppMsgRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderPostLiveAppMsgRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderPostLiveAppMsgRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

type FinderPostLiveAppMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	RealnameUrl  *string       `protobuf:"bytes,2,opt,name=realnameUrl" json:"realnameUrl,omitempty"`
	ServerMsgId  *uint64       `protobuf:"varint,3,opt,name=serverMsgId" json:"serverMsgId,omitempty"`
	SessionId    *string       `protobuf:"bytes,4,opt,name=sessionId" json:"sessionId,omitempty"`
}

func (x *FinderPostLiveAppMsgResponse) Reset() {
	*x = FinderPostLiveAppMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPostLiveAppMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPostLiveAppMsgResponse) ProtoMessage() {}

func (x *FinderPostLiveAppMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPostLiveAppMsgResponse.ProtoReflect.Descriptor instead.
func (*FinderPostLiveAppMsgResponse) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{554}
}

func (x *FinderPostLiveAppMsgResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderPostLiveAppMsgResponse) GetRealnameUrl() string {
	if x != nil && x.RealnameUrl != nil {
		return *x.RealnameUrl
	}
	return ""
}

func (x *FinderPostLiveAppMsgResponse) GetServerMsgId() uint64 {
	if x != nil && x.ServerMsgId != nil {
		return *x.ServerMsgId
	}
	return 0
}

func (x *FinderPostLiveAppMsgResponse) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type AddBypMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg          *AddMsg `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	MsgSessionId *string `protobuf:"bytes,2,opt,name=msgSessionId" json:"msgSessionId,omitempty"`
	Seq          *uint64 `protobuf:"varint,3,opt,name=seq" json:"seq,omitempty"`
	Extinfo      []byte  `protobuf:"bytes,4,opt,name=extinfo" json:"extinfo,omitempty"`
	IsSender     *bool   `protobuf:"varint,5,opt,name=isSender" json:"isSender,omitempty"`
}

func (x *AddBypMsg) Reset() {
	*x = AddBypMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBypMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBypMsg) ProtoMessage() {}

func (x *AddBypMsg) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBypMsg.ProtoReflect.Descriptor instead.
func (*AddBypMsg) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{555}
}

func (x *AddBypMsg) GetMsg() *AddMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *AddBypMsg) GetMsgSessionId() string {
	if x != nil && x.MsgSessionId != nil {
		return *x.MsgSessionId
	}
	return ""
}

func (x *AddBypMsg) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *AddBypMsg) GetExtinfo() []byte {
	if x != nil {
		return x.Extinfo
	}
	return nil
}

func (x *AddBypMsg) GetIsSender() bool {
	if x != nil && x.IsSender != nil {
		return *x.IsSender
	}
	return false
}

type GetOpenIMKefuContactContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	KfUsername *string `protobuf:"bytes,2,opt,name=kfUsername" json:"kfUsername,omitempty"`
}

func (x *GetOpenIMKefuContactContext) Reset() {
	*x = GetOpenIMKefuContactContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenIMKefuContactContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenIMKefuContactContext) ProtoMessage() {}

func (x *GetOpenIMKefuContactContext) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenIMKefuContactContext.ProtoReflect.Descriptor instead.
func (*GetOpenIMKefuContactContext) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{556}
}

func (x *GetOpenIMKefuContactContext) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *GetOpenIMKefuContactContext) GetKfUsername() string {
	if x != nil && x.KfUsername != nil {
		return *x.KfUsername
	}
	return ""
}

type GetOpenIMKefuContactClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasChatrecord *uint32 `protobuf:"varint,1,opt,name=hasChatrecord" json:"hasChatrecord,omitempty"`
}

func (x *GetOpenIMKefuContactClientStatus) Reset() {
	*x = GetOpenIMKefuContactClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenIMKefuContactClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenIMKefuContactClientStatus) ProtoMessage() {}

func (x *GetOpenIMKefuContactClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenIMKefuContactClientStatus.ProtoReflect.Descriptor instead.
func (*GetOpenIMKefuContactClientStatus) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{557}
}

func (x *GetOpenIMKefuContactClientStatus) GetHasChatrecord() uint32 {
	if x != nil && x.HasChatrecord != nil {
		return *x.HasChatrecord
	}
	return 0
}

type GetOpenIMKefuContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context      *GetOpenIMKefuContactContext      `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Scene        *uint32                           `protobuf:"varint,2,opt,name=scene" json:"scene,omitempty"`
	ClientStatus *GetOpenIMKefuContactClientStatus `protobuf:"bytes,3,opt,name=clientStatus" json:"clientStatus,omitempty"`
}

func (x *GetOpenIMKefuContactReq) Reset() {
	*x = GetOpenIMKefuContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenIMKefuContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenIMKefuContactReq) ProtoMessage() {}

func (x *GetOpenIMKefuContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenIMKefuContactReq.ProtoReflect.Descriptor instead.
func (*GetOpenIMKefuContactReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{558}
}

func (x *GetOpenIMKefuContactReq) GetContext() *GetOpenIMKefuContactContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GetOpenIMKefuContactReq) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *GetOpenIMKefuContactReq) GetClientStatus() *GetOpenIMKefuContactClientStatus {
	if x != nil {
		return x.ClientStatus
	}
	return nil
}

type LocationOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BNeedLocation *bool   `protobuf:"varint,1,opt,name=bNeedLocation" json:"bNeedLocation,omitempty"`
	Type          *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (x *LocationOption) Reset() {
	*x = LocationOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationOption) ProtoMessage() {}

func (x *LocationOption) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationOption.ProtoReflect.Descriptor instead.
func (*LocationOption) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{559}
}

func (x *LocationOption) GetBNeedLocation() bool {
	if x != nil && x.BNeedLocation != nil {
		return *x.BNeedLocation
	}
	return false
}

func (x *LocationOption) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type OpenIMKefuPersonalSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag           *uint64         `protobuf:"varint,1,opt,name=flag" json:"flag,omitempty"`
	LocationOption *LocationOption `protobuf:"bytes,2,opt,name=locationOption" json:"locationOption,omitempty"`
}

func (x *OpenIMKefuPersonalSetting) Reset() {
	*x = OpenIMKefuPersonalSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIMKefuPersonalSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIMKefuPersonalSetting) ProtoMessage() {}

func (x *OpenIMKefuPersonalSetting) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIMKefuPersonalSetting.ProtoReflect.Descriptor instead.
func (*OpenIMKefuPersonalSetting) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{560}
}

func (x *OpenIMKefuPersonalSetting) GetFlag() uint64 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *OpenIMKefuPersonalSetting) GetLocationOption() *LocationOption {
	if x != nil {
		return x.LocationOption
	}
	return nil
}

type OpenIMContactCustomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailVisible *uint32 `protobuf:"varint,1,opt,name=detailVisible" json:"detailVisible,omitempty"`
	Detail        *string `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
}

func (x *OpenIMContactCustomInfo) Reset() {
	*x = OpenIMContactCustomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIMContactCustomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIMContactCustomInfo) ProtoMessage() {}

func (x *OpenIMContactCustomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIMContactCustomInfo.ProtoReflect.Descriptor instead.
func (*OpenIMContactCustomInfo) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{561}
}

func (x *OpenIMContactCustomInfo) GetDetailVisible() uint32 {
	if x != nil && x.DetailVisible != nil {
		return *x.DetailVisible
	}
	return 0
}

func (x *OpenIMContactCustomInfo) GetDetail() string {
	if x != nil && x.Detail != nil {
		return *x.Detail
	}
	return ""
}

type OpenIMKefuContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KfUsername      *string                    `protobuf:"bytes,1,opt,name=kfUsername" json:"kfUsername,omitempty"`
	Nickname        *string                    `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	BigHeadimg      *string                    `protobuf:"bytes,3,opt,name=bigHeadimg" json:"bigHeadimg,omitempty"`
	SmallHeadimg    *string                    `protobuf:"bytes,4,opt,name=smallHeadimg" json:"smallHeadimg,omitempty"`
	NicknamePyinit  *string                    `protobuf:"bytes,5,opt,name=nicknamePyinit" json:"nicknamePyinit,omitempty"`
	NicknameQuanpin *string                    `protobuf:"bytes,6,opt,name=nicknameQuanpin" json:"nicknameQuanpin,omitempty"`
	AppId           *string                    `protobuf:"bytes,7,opt,name=appId" json:"appId,omitempty"`
	DescWordingId   *string                    `protobuf:"bytes,8,opt,name=descWordingId" json:"descWordingId,omitempty"`
	Source          *uint32                    `protobuf:"varint,9,opt,name=source" json:"source,omitempty"`
	CustomInfo      *OpenIMContactCustomInfo   `protobuf:"bytes,10,opt,name=customInfo" json:"customInfo,omitempty"`
	Ticket          *string                    `protobuf:"bytes,11,opt,name=ticket" json:"ticket,omitempty"`
	Setting         *OpenIMKefuPersonalSetting `protobuf:"bytes,12,opt,name=setting" json:"setting,omitempty"`
	FinderUsername  *string                    `protobuf:"bytes,13,opt,name=finderUsername" json:"finderUsername,omitempty"`
}

func (x *OpenIMKefuContact) Reset() {
	*x = OpenIMKefuContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIMKefuContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIMKefuContact) ProtoMessage() {}

func (x *OpenIMKefuContact) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIMKefuContact.ProtoReflect.Descriptor instead.
func (*OpenIMKefuContact) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{562}
}

func (x *OpenIMKefuContact) GetKfUsername() string {
	if x != nil && x.KfUsername != nil {
		return *x.KfUsername
	}
	return ""
}

func (x *OpenIMKefuContact) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *OpenIMKefuContact) GetBigHeadimg() string {
	if x != nil && x.BigHeadimg != nil {
		return *x.BigHeadimg
	}
	return ""
}

func (x *OpenIMKefuContact) GetSmallHeadimg() string {
	if x != nil && x.SmallHeadimg != nil {
		return *x.SmallHeadimg
	}
	return ""
}

func (x *OpenIMKefuContact) GetNicknamePyinit() string {
	if x != nil && x.NicknamePyinit != nil {
		return *x.NicknamePyinit
	}
	return ""
}

func (x *OpenIMKefuContact) GetNicknameQuanpin() string {
	if x != nil && x.NicknameQuanpin != nil {
		return *x.NicknameQuanpin
	}
	return ""
}

func (x *OpenIMKefuContact) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *OpenIMKefuContact) GetDescWordingId() string {
	if x != nil && x.DescWordingId != nil {
		return *x.DescWordingId
	}
	return ""
}

func (x *OpenIMKefuContact) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *OpenIMKefuContact) GetCustomInfo() *OpenIMContactCustomInfo {
	if x != nil {
		return x.CustomInfo
	}
	return nil
}

func (x *OpenIMKefuContact) GetTicket() string {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return ""
}

func (x *OpenIMKefuContact) GetSetting() *OpenIMKefuPersonalSetting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *OpenIMKefuContact) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

type OpenIMKefuNotifyCtx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scene    *uint32 `protobuf:"varint,1,opt,name=scene" json:"scene,omitempty"`
	Entityid *string `protobuf:"bytes,2,opt,name=entityid" json:"entityid,omitempty"`
	Url      *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (x *OpenIMKefuNotifyCtx) Reset() {
	*x = OpenIMKefuNotifyCtx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIMKefuNotifyCtx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIMKefuNotifyCtx) ProtoMessage() {}

func (x *OpenIMKefuNotifyCtx) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIMKefuNotifyCtx.ProtoReflect.Descriptor instead.
func (*OpenIMKefuNotifyCtx) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{563}
}

func (x *OpenIMKefuNotifyCtx) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *OpenIMKefuNotifyCtx) GetEntityid() string {
	if x != nil && x.Entityid != nil {
		return *x.Entityid
	}
	return ""
}

func (x *OpenIMKefuNotifyCtx) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type AddOpenIMKefuContactContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url             *string              `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	NotifyCtx       *string              `protobuf:"bytes,2,opt,name=notifyCtx" json:"notifyCtx,omitempty"`
	SharecardTicket *string              `protobuf:"bytes,3,opt,name=sharecardTicket" json:"sharecardTicket,omitempty"`
	NewNotifyCtx    *OpenIMKefuNotifyCtx `protobuf:"bytes,4,opt,name=newNotifyCtx" json:"newNotifyCtx,omitempty"`
}

func (x *AddOpenIMKefuContactContext) Reset() {
	*x = AddOpenIMKefuContactContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOpenIMKefuContactContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOpenIMKefuContactContext) ProtoMessage() {}

func (x *AddOpenIMKefuContactContext) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOpenIMKefuContactContext.ProtoReflect.Descriptor instead.
func (*AddOpenIMKefuContactContext) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{564}
}

func (x *AddOpenIMKefuContactContext) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *AddOpenIMKefuContactContext) GetNotifyCtx() string {
	if x != nil && x.NotifyCtx != nil {
		return *x.NotifyCtx
	}
	return ""
}

func (x *AddOpenIMKefuContactContext) GetSharecardTicket() string {
	if x != nil && x.SharecardTicket != nil {
		return *x.SharecardTicket
	}
	return ""
}

func (x *AddOpenIMKefuContactContext) GetNewNotifyCtx() *OpenIMKefuNotifyCtx {
	if x != nil {
		return x.NewNotifyCtx
	}
	return nil
}

type GetOpenIMKefuContactResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse      `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Contact      *OpenIMKefuContact `protobuf:"bytes,2,opt,name=contact" json:"contact,omitempty"`
	ConfirmType  *uint32            `protobuf:"varint,3,opt,name=confirmType" json:"confirmType,omitempty"`
	AntispamTips *string            `protobuf:"bytes,4,opt,name=antispamTips" json:"antispamTips,omitempty"`
}

func (x *GetOpenIMKefuContactResp) Reset() {
	*x = GetOpenIMKefuContactResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpenIMKefuContactResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpenIMKefuContactResp) ProtoMessage() {}

func (x *GetOpenIMKefuContactResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpenIMKefuContactResp.ProtoReflect.Descriptor instead.
func (*GetOpenIMKefuContactResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{565}
}

func (x *GetOpenIMKefuContactResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *GetOpenIMKefuContactResp) GetContact() *OpenIMKefuContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *GetOpenIMKefuContactResp) GetConfirmType() uint32 {
	if x != nil && x.ConfirmType != nil {
		return *x.ConfirmType
	}
	return 0
}

func (x *GetOpenIMKefuContactResp) GetAntispamTips() string {
	if x != nil && x.AntispamTips != nil {
		return *x.AntispamTips
	}
	return ""
}

type AddOpenIMKefuContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KfUsername *string                      `protobuf:"bytes,1,opt,name=kfUsername" json:"kfUsername,omitempty"`
	Context    *AddOpenIMKefuContactContext `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (x *AddOpenIMKefuContactReq) Reset() {
	*x = AddOpenIMKefuContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOpenIMKefuContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOpenIMKefuContactReq) ProtoMessage() {}

func (x *AddOpenIMKefuContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOpenIMKefuContactReq.ProtoReflect.Descriptor instead.
func (*AddOpenIMKefuContactReq) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{566}
}

func (x *AddOpenIMKefuContactReq) GetKfUsername() string {
	if x != nil && x.KfUsername != nil {
		return *x.KfUsername
	}
	return ""
}

func (x *AddOpenIMKefuContactReq) GetContext() *AddOpenIMKefuContactContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type AddOpenIMKefuContactResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Source       *uint32       `protobuf:"varint,2,opt,name=source" json:"source,omitempty"`
}

func (x *AddOpenIMKefuContactResp) Reset() {
	*x = AddOpenIMKefuContactResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Finder_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOpenIMKefuContactResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOpenIMKefuContactResp) ProtoMessage() {}

func (x *AddOpenIMKefuContactResp) ProtoReflect() protoreflect.Message {
	mi := &file_Finder_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOpenIMKefuContactResp.ProtoReflect.Descriptor instead.
func (*AddOpenIMKefuContactResp) Descriptor() ([]byte, []int) {
	return file_Finder_proto_rawDescGZIP(), []int{567}
}

func (x *AddOpenIMKefuContactResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *AddOpenIMKefuContactResp) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

var File_Finder_proto protoreflect.FileDescriptor

var file_Finder_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x41, 0x64, 0x64, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x79, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6b,
	0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x52, 0x05, 0x72, 0x65, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x47, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xba, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x40, 0x0a, 0x13, 0x65, 0x63, 0x63, 0x6d, 0x64, 0x35, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13,
	0x65, 0x63, 0x63, 0x6d, 0x64, 0x35, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x4d, 0x64, 0x35, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x31, 0x22, 0x45, 0x0a,
	0x0b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x4b, 0x65, 0x79, 0x22, 0xef, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x4b, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x72,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x0e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x49,
	0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x47, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x75, 0x74,
	0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcc, 0x01,
	0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73,
	0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79, 0x22, 0xf2, 0x01, 0x0a,
	0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x72, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72,
	0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x50, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x59, 0x65, 0x61, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x59, 0x65, 0x61, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x70, 0x6f, 0x73, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6c, 0x61,
	0x67, 0x22, 0x56, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x73, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x73, 0x67, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x14, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5c, 0x0a, 0x0a, 0x4d, 0x69,
	0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x56, 0x0a, 0x12, 0x4c, 0x69, 0x76, 0x65,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xcd, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x69, 0x63,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0x4b, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a,
	0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x42,
	0x69, 0x7a, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75,
	0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x22, 0xf9, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69,
	0x7a, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x69, 0x7a, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x69, 0x7a, 0x55, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x62, 0x69, 0x7a, 0x55, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x42, 0x69, 0x7a, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01, 0x0a,
	0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x6b, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x61, 0x70, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x69, 0x61, 0x70, 0x70, 0x73, 0x22, 0x6d, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57,
	0x65, 0x63, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x66, 0x55, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x66, 0x55, 0x72, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x49, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x51, 0x51,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22,
	0x27, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x73, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x64, 0x65, 0x73, 0x75, 0x69, 0x6e, 0x22, 0xa6, 0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x77, 0x65, 0x63, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x65, 0x63,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x77, 0x65, 0x63, 0x6f, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x71, 0x71, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x51,
	0x51, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x71, 0x71, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x30, 0x0a, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x1f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x48, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x48, 0x64, 0x22, 0x5f, 0x0a,
	0x0f, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4c, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x47, 0x61, 0x6d,
	0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x67, 0x61,
	0x6d, 0x65, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa8,
	0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x18, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x48, 0x74, 0x6d, 0x6c,
	0x35, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x63, 0x65, 0x73,
	0x73, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x19, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x34,
	0x0a, 0x15, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x4c,
	0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x44,
	0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd5, 0x05, 0x0a,
	0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x6a, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6a, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3d, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37,
	0x0a, 0x09, 0x68, 0x74, 0x6d, 0x6c, 0x35, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x48, 0x74, 0x6d, 0x6c, 0x35, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x68, 0x74,
	0x6d, 0x6c, 0x35, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x44, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x42, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x42, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x78, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x52, 0x06, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x0a, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x70, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2f, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x32, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x6f, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x78, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x56, 0x35, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x78, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x35, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x73,
	0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x65, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x66, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x47, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3c,
	0x0a, 0x10, 0x61, 0x72, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x04,
	0x6d, 0x65, 0x6e, 0x75, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6e,
	0x75, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x8b, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x66, 0x66, 0x22, 0xf8, 0x01,
	0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x64, 0x66, 0x4b, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x64, 0x66, 0x4b, 0x76, 0x22, 0xb2, 0x02, 0x0a, 0x11, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x70, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x07,
	0x63, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x63, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6f, 0x0a,
	0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6f, 0x6f, 0x62, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x53,
	0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x70, 0x73, 0x53, 0x68, 0x6f, 0x77,
	0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x72, 0x6b, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x72, 0x6b,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x6a, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x43, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x05, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x69, 0x70, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x6f,
	0x77, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x65, 0x71, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x72,
	0x65, 0x71, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x70, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x49, 0x63, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x37, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x62, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf1,
	0x02, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x43,
	0x74, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x70,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x70, 0x73, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x70, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55,
	0x72, 0x6c, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x1e, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x24, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x24, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x48, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68,
	0x61, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x64, 0x64, 0x6f,
	0x74, 0x22, 0xbd, 0x06, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x12,
	0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x73,
	0x65, 0x6c, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12,
	0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x74, 0x72, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x43, 0x74, 0x72, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x74, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69,
	0x70, 0x73, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x70, 0x73, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x12, 0x6e, 0x65,
	0x61, 0x72, 0x62, 0x79, 0x43, 0x74, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x64, 0x44, 0x6f, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6e,
	0x65, 0x61, 0x72, 0x62, 0x79, 0x43, 0x74, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x69, 0x70, 0x73, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x69, 0x70, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x79, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x73, 0x74, 0x61, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x65,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x66, 0x72, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x72, 0x65, 0x71, 0x63, 0x74, 0x72, 0x6c, 0x53, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x63, 0x74, 0x72, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x35, 0x0a,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x3d, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6d, 0x64, 0x42,
	0x75, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6d, 0x64, 0x42, 0x75, 0x66,
	0x22, 0xad, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x30,
	0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb9, 0x03, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x10, 0x63, 0x6d,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10,
	0x63, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x42, 0x75, 0x66,
	0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x04,
	0x73, 0x65, 0x6c, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66,
	0x12, 0x28, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x6f, 0x62,
	0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a, 0x0a,
	0x42, 0x69, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x76, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x22, 0xf5, 0x07, 0x0a, 0x09,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x56, 0x69, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x56, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x65, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x76, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x73, 0x74, 0x53, 0x6c, 0x69, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x73, 0x74, 0x53, 0x6c, 0x69, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x56, 0x69,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x56, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x6e,
	0x75, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x72, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x72, 0x61, 0x67,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x22, 0x9f, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x62, 0x69, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x42, 0x69, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x62, 0x69, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x61, 0x6c,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x56, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x52,
	0x06, 0x6f, 0x72, 0x67, 0x56, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65,
	0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x65,
	0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x45, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x45, 0x78, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x67, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x67, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x67, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x67,
	0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c,
	0x69, 0x76, 0x65, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57,
	0x61, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x69, 0x74, 0x4d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x61, 0x69, 0x74, 0x4d, 0x73, 0x22,
	0xeb, 0x01, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x73, 0x74, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63,
	0x6f, 0x73, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x22, 0xbb, 0x07,
	0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4b, 0x62, 0x70,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x77, 0x61,
	0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x61, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x74, 0x74, 0x4d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x74,
	0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x76, 0x72, 0x49, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x76, 0x72, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x76, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x76, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x42, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x83, 0x07, 0x0a, 0x11,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49,
	0x6e, 0x69, 0x74, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x6c,
	0x6c, 0x43, 0x67, 0x69, 0x4d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x75,
	0x6c, 0x6c, 0x43, 0x67, 0x69, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x55,
	0x69, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x55,
	0x69, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x4d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x67, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x67, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x74, 0x6c, 0x73, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x6e, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x61,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65, 0x61, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xfe, 0x05, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4b, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4b, 0x62,
	0x70, 0x73, 0x12, 0x4b, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x40, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x4c, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x19, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x19, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x13, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x57,
	0x61, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x69, 0x74, 0x4d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x61, 0x69, 0x74, 0x4d, 0x73, 0x22,
	0xf7, 0x05, 0x0a, 0x15, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x65,
	0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4b, 0x62, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4b, 0x62, 0x70, 0x73, 0x12,
	0x36, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x57, 0x61, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x74, 0x74, 0x4d, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x74, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x76, 0x72,
	0x49, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x76, 0x72, 0x49, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x76, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x76, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x14, 0x4d, 0x65,
	0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x49, 0x6e, 0x69, 0x74, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75,
	0x6c, 0x6c, 0x43, 0x67, 0x69, 0x4d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x75, 0x6c, 0x6c, 0x43, 0x67, 0x69, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77,
	0x55, 0x69, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77,
	0x55, 0x69, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x4d, 0x73, 0x22, 0xb6, 0x03, 0x0a, 0x15, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4b, 0x62, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16,
	0x6c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6c, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf5, 0x02, 0x0a, 0x18,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x45, 0x78, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x45, 0x78,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x65,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65,
	0x71, 0x22, 0x51, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x65, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x66, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74,
	0x6f, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x75,
	0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x22,
	0xa2, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x57, 0x61, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61,
	0x69, 0x74, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x61, 0x69, 0x74,
	0x4d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0xf0, 0x08, 0x0a,
	0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x46, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x46, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x6f, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x6d,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x63, 0x76, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x63, 0x76, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x4a, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x4a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x77, 0x61,
	0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x57, 0x61, 0x69, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x74, 0x74, 0x4d, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x72, 0x74, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x64, 0x6e, 0x53, 0x76, 0x72, 0x49,
	0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x64, 0x6e, 0x53, 0x76, 0x72, 0x49,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x64, 0x6e, 0x53, 0x76, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x64, 0x6e, 0x53, 0x76, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x74, 0x63, 0x55, 0x70, 0x4c, 0x6f, 0x73,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x74, 0x63, 0x55, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x74, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x4c,
	0x6f, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x74, 0x63, 0x44,
	0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x42, 0x75,
	0x66, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x78, 0x74, 0x42, 0x75, 0x66, 0x22,
	0xee, 0x02, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4b, 0x62, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x4b, 0x62, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x51, 0x6f,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x28, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x24, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x70, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x5f,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a,
	0x10, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x42, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x81, 0x02, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x64, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x64, 0x6f, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64,
	0x64, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x61,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6a, 0x0a, 0x4c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x67, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x22, 0x99, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x73, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x4e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7f, 0x0a,
	0x17, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0xc0,
	0x0c, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x72, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x52, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x61, 0x62,
	0x54, 0x69, 0x70, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x61, 0x62, 0x54,
	0x69, 0x70, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36,
	0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x72, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x61, 0x62,
	0x54, 0x69, 0x70, 0x73, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x42, 0x79, 0x50,
	0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x67,
	0x75, 0x69, 0x64, 0x65, 0x42, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x67, 0x75, 0x69, 0x64, 0x65, 0x42, 0x61, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x70, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x35, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x35, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x42,
	0x79, 0x50, 0x61, 0x73, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x85, 0x02, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x66, 0x70, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x76, 0x66, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x14, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x64, 0x69, 0x6d, 0x67, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x68, 0x64, 0x69, 0x6d,
	0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x0c, 0x43, 0x64, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a,
	0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x64, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31,
	0x0a, 0x0c, 0x63, 0x64, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x64, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x64, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0x79, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x4b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x70, 0x46, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x61, 0x70, 0x46, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x42,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x42, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x63, 0x42, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x65, 0x6e, 0x63, 0x42, 0x72, 0x4d, 0x69, 0x6e, 0x22, 0x86, 0x06, 0x0a, 0x12, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x70, 0x46, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x70, 0x46, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x63, 0x42, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x63, 0x42,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x71, 0x6f, 0x73, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x6e, 0x65, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x71, 0x6f, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x6e, 0x65, 0x63, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x71, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x71, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x61, 0x70, 0x46, 0x70, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x61, 0x70, 0x46, 0x70, 0x73, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x65,
	0x6e, 0x63, 0x42, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x42, 0x72, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63,
	0x42, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x63,
	0x42, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x65, 0x76, 0x63, 0x45, 0x6e, 0x63,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65,
	0x76, 0x63, 0x45, 0x6e, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x6e, 0x63, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x65, 0x76, 0x63, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x65, 0x76, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x46, 0x70, 0x73, 0x48, 0x65, 0x76,
	0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x46, 0x70, 0x73, 0x48,
	0x65, 0x76, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x42, 0x72, 0x48, 0x65, 0x76, 0x63,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x42, 0x72, 0x48, 0x65, 0x76,
	0x63, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x42, 0x72, 0x48, 0x65, 0x76, 0x63, 0x4d, 0x69,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x42, 0x72, 0x48, 0x65,
	0x76, 0x63, 0x4d, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0b, 0x6d, 0x69, 0x63, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x31, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x4b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x6d, 0x69, 0x63, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x31, 0x31, 0x12, 0x34, 0x0a, 0x0d, 0x6d, 0x69, 0x63, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x31, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x4b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d,
	0x6d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x31, 0x31, 0x12, 0x34, 0x0a,
	0x0d, 0x6d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x31, 0x32, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x4b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x6d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x31, 0x32, 0x22, 0xf3, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x0c, 0x63,
	0x64, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x64,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x64, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x64, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x66, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x64, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x66,
	0x67, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x64, 0x6e,
	0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x64, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x88, 0x02, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x48, 0x6c, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x66, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x76, 0x66, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x47, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x6c,
	0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x07, 0x68, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x6c, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x68, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x64, 0x0a,
	0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x66, 0x52, 0x65, 0x63, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x62, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x22, 0x44, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x64, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x07, 0x68, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x07, 0x68, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x08, 0x0a, 0x0b, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x4c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x64, 0x35, 0x53, 0x75,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x53, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55,
	0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a,
	0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x07, 0x68, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x6c,
	0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07,
	0x68, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x2b, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x52, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x66,
	0x52, 0x65, 0x63, 0x74, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x52, 0x65, 0x63, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55,
	0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55,
	0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x75, 0x6c, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66,
	0x75, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x75,
	0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c,
	0x4d, 0x64, 0x35, 0x53, 0x75, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75,
	0x6c, 0x6c, 0x4d, 0x64, 0x35, 0x53, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x66, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x75, 0x6c, 0x6c, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x68, 0x64, 0x72, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x64,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07,
	0x68, 0x64, 0x72, 0x53, 0x70, 0x65, 0x63, 0x22, 0x26, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xce, 0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f,
	0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f,
	0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x6b, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x37, 0x0a,
	0x0b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x0f,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a,
	0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xeb, 0x02, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x6f, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x79,
	0x4c, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x22, 0x5c, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f,
	0x63, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d,
	0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x6e,
	0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77,
	0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x47,
	0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x42, 0x67, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x61, 0x73, 0x42, 0x67, 0x6d, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x75, 0x69, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x72, 0x0a,
	0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xd2, 0x03, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x6f,
	0x69, 0x6e, 0x69, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68,
	0x6f, 0x77, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x57,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x57,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x94, 0x02, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x22, 0xbc, 0x01,
	0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6f,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x69, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x22, 0x9a, 0x01, 0x0a,
	0x24, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x1f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x43, 0x6c, 0x69, 0x70,
	0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x43, 0x6c, 0x69, 0x70, 0x4d, 0x73, 0x22, 0xbe, 0x05, 0x0a, 0x1a, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x56, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x4d, 0x76, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x4d, 0x76, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x49, 0x6e, 0x4d, 0x76, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x76, 0x4d, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x49, 0x6e, 0x43, 0x6c, 0x69, 0x70, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x43, 0x6c, 0x69, 0x70,
	0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a,
	0x10, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x10, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x37, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x56, 0x53, 0x6f, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4d, 0x56, 0x53, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x22, 0x9b, 0x05, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56,
	0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x53, 0x6f, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x57, 0x65, 0x62, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x57, 0x65, 0x62, 0x75, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x79, 0x72, 0x69, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12,
	0x5e, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d,
	0x56, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x53, 0x6f,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x53,
	0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69,
	0x64, 0x22, 0x65, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x02, 0x0a, 0x0c, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4d, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x49,
	0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x53, 0x6f, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46,
	0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x49,
	0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x43, 0x6c,
	0x69, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x65, 0x78, 0x43, 0x6c, 0x69, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x76, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x64, 0x72, 0x61, 0x66, 0x74, 0x4a, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a,
	0x27, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x61, 0x73,
	0x68, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x16, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x48, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x48, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x49, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0xe5, 0x01,
	0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x69, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6f, 0x73,
	0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x32, 0x0a,
	0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6e, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x64, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x22, 0xb6, 0x08, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x65,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x54, 0x6f,
	0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x78, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x78, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x78, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x78, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x78, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x78, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x08, 0x6a,
	0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68,
	0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68, 0x54,
	0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x54, 0x61, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x4d,
	0x61, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41,
	0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x56, 0x0a, 0x16, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x16, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x4a,
	0x75, 0x6d, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x70, 0x6f, 0x73, 0x74, 0x4a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4e,
	0x0a, 0x0f, 0x74, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x74,
	0x6d, 0x70, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x66,
	0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x61,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6f, 0x73, 0x53, 0x64, 0x6b,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6f,
	0x73, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x69, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x64, 0x6b,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x53, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x22, 0x87,
	0x02, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xda, 0x09, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x0a, 0x65, 0x78, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x3a, 0x0a, 0x0d, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x33, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0f, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x6f, 0x6e,
	0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x44, 0x65, 0x73, 0x63, 0x12, 0x38, 0x0a, 0x0e, 0x69, 0x6d, 0x67, 0x46, 0x65, 0x65, 0x64,
	0x42, 0x67, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x69, 0x6d, 0x67, 0x46, 0x65, 0x65, 0x64, 0x42, 0x67, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3c, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x47, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x12, 0x2f, 0x0a, 0x08, 0x74,
	0x6d, 0x70, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x74, 0x6d, 0x70, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x6d, 0x76,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4d, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x76, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x66, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x6d, 0x70, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x6d, 0x70, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x46, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x11, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc0, 0x08, 0x0a,
	0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x64, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x78, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x73,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22,
	0x43, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x64, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0xe5, 0x03, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x63, 0x68, 0x54, 0x68, 0x69, 0x73, 0x54, 0x61, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x54, 0x68, 0x69, 0x73, 0x54,
	0x61, 0x62, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x4e, 0x65, 0x78,
	0x74, 0x54, 0x61, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x63, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x63, 0x68, 0x50, 0x72, 0x65, 0x54, 0x61, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x50, 0x72, 0x65, 0x54, 0x61, 0x62,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x54, 0x61, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x54,
	0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x54, 0x61, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x62, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x97, 0x03, 0x0a,
	0x0b, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x64, 0x6b, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x64, 0x6b, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x64, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x64, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x64, 0x6b, 0x4c, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x64, 0x6b, 0x4c, 0x69,
	0x76, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x64, 0x6b, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x64, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x64, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x64,
	0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x64, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x64, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x64, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x46, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6d, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6d, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x64,
	0x6e, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65,
	0x43, 0x64, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x12, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x61, 0x75, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x75, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0x71, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x55, 0x72, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x57, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x57, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xbd, 0x04, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x48, 0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x32,
	0x0a, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x67, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x67, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a,
	0x11, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x19, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x0a, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x63, 0x53, 0x64, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x69, 0x63,
	0x53, 0x64, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x76,
	0x65, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69,
	0x76, 0x65, 0x4d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x63, 0x53, 0x65,
	0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x71, 0x22,
	0xa5, 0x02, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x69,
	0x63, 0x50, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x4d,
	0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x76, 0x65,
	0x4d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x71, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x69, 0x63, 0x53, 0x64, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x69, 0x63, 0x53, 0x64, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0a, 0x6d, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a,
	0x0f, 0x6d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x63, 0x53, 0x64, 0x6b, 0x4c, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x63, 0x53, 0x64,
	0x6b, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x57, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x57, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x22, 0xf8, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x40, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x73, 0x22, 0x85, 0x04, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x4d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x4d,
	0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x76, 0x65,
	0x4d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x36, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0f, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x69, 0x63, 0x50, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x50, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x6d, 0x69, 0x63, 0x50, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x69, 0x63, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x69, 0x7a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x62, 0x69, 0x7a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x55, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x55, 0x76, 0x12, 0x22, 0x0a, 0x0c,
	0x6f, 0x72, 0x69, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x66, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x95, 0x0f, 0x0a, 0x0e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c,
	0x69, 0x76, 0x65, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x69,
	0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x12,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x57, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x57, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x17, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x48, 0x65, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x48, 0x65, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x61, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6e, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x65, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2a, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x57, 0x78, 0x61, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x69, 0x73, 0x57, 0x78, 0x61, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x55, 0x72, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x72,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x55, 0x72,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72,
	0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x55,
	0x72, 0x6c, 0x12, 0x34, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x69, 0x76,
	0x65, 0x4d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x76, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x78, 0x61, 0x47, 0x61, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x77, 0x78,
	0x61, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x41, 0x76, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x76, 0x67, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x40, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4a, 0x6f, 0x69,
	0x6e, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4a, 0x6f, 0x69, 0x6e, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x69,
	0x7a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x42, 0x0a, 0x1c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x9c, 0x02, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61,
	0x79, 0x4c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x64, 0x35, 0x53, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x53, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x7a,
	0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x0b, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x76, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x76, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x70, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x70, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x74, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x48, 0x6f, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x22, 0x9a, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x43, 0x0a,
	0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xa2, 0x06, 0x0a, 0x0e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x4c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x64, 0x35, 0x53, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x53, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x4d, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65,
	0x6e, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65, 0x67, 0x61,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x07, 0x68, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x6c,
	0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07,
	0x68, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x6f, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x6f,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x52, 0x65, 0x63,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x48, 0x61, 0x6c, 0x66, 0x52, 0x65, 0x63, 0x74, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x52, 0x65,
	0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55,
	0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x68, 0x64, 0x72, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x64,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07,
	0x68, 0x64, 0x72, 0x53, 0x70, 0x65, 0x63, 0x22, 0xb9, 0x02, 0x0a, 0x11, 0x4d, 0x65, 0x67, 0x61,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x6f, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f,
	0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x6f, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0x44, 0x0a, 0x18, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x0d, 0x4d, 0x65,
	0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d,
	0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x36, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x17, 0x4d, 0x65, 0x67, 0x61, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x22, 0xc3, 0x06, 0x0a, 0x09, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x61, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x66, 0x61, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x61, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x61, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x72, 0x6c, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x75, 0x72, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x06, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x70, 0x61, 0x6d, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x6d, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x61, 0x72, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x77, 0x61, 0x72, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x6e,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x6d, 0x0a, 0x15, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x47, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x10, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x41,
	0x70, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x69, 0x41, 0x70, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x14,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x65, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x6c, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x25, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x48, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x7a, 0x0a, 0x16, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x64, 0x22, 0x47, 0x0a, 0x17, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x69, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x0c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x52, 0x06, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x04, 0x61,
	0x64, 0x48, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x35, 0x52, 0x04, 0x61,
	0x64, 0x48, 0x35, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x52,
	0x09, 0x61, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x64,
	0x4c, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x61, 0x64, 0x4c, 0x65, 0x61, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x69, 0x64, 0x22, 0x95,
	0x02, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x44, 0x65, 0x73, 0x63, 0x52, 0x06, 0x61, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x64, 0x48, 0x35, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x48, 0x35, 0x52, 0x04, 0x61, 0x64, 0x48, 0x35, 0x12, 0x35, 0x0a, 0x09,
	0x61, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4d, 0x69, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x52, 0x09, 0x61, 0x64, 0x4d, 0x69, 0x6e, 0x69,
	0x41, 0x70, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x0a, 0x61, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x27, 0x0a,
	0x07, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x61,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x68, 0x6f, 0x74, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x74, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x74, 0x77, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x6f, 0x74, 0x77, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3a, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x0b,
	0x68, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x68, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x48, 0x6f, 0x74, 0x77, 0x6f,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x6f, 0x62, 0x6a, 0x48, 0x6f, 0x74, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x75, 0x66, 0x66, 0x22, 0x36, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x4b, 0x0a, 0x1d,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x76, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x63, 0x76, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x4b, 0x0a, 0x13, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x59, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x61, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x46, 0x61, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x46, 0x61, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x46, 0x61, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x46, 0x61, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x61, 0x76,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x61, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e, 0x0a,
	0x12, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x61, 0x76, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x61, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a,
	0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x66, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x65, 0x65,
	0x64, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66,
	0x65, 0x65, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9f, 0x02, 0x0a,
	0x1d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x78, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x75,
	0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xab,
	0x03, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x61, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x61, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x66, 0x61, 0x76,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x65, 0x72, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x65, 0x72, 0x70, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x70, 0x79, 0x4d, 0x73, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x43, 0x6f, 0x70, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7c, 0x0a, 0x14,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x53, 0x0a, 0x17, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x67, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a,
	0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x4d, 0x73,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x73, 0x0a, 0x1d, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x22, 0x34, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x70, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xe1, 0x20, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2e,
	0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x75, 0x70, 0x64, 0x4f, 0x6f, 0x62, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x75, 0x70, 0x64, 0x4f, 0x6f, 0x62, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x72, 0x65,
	0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x10, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x73, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x61, 0x76, 0x57, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x46, 0x61, 0x76, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53,
	0x68, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x70, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x70, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x72,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x14, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x14, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x57, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x57,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x61, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x61, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x66, 0x61, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x64, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x64, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x72, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x75, 0x72, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x6f, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x69, 0x6e, 0x63, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f, 0x6e, 0x65, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x6f, 0x6e, 0x65, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x68, 0x6f, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x48, 0x6f, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09,
	0x68, 0x6f, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x6e, 0x73, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x57, 0x65, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77, 0x65, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x53, 0x61,
	0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x73,
	0x50, 0x6f, 0x69, 0x53, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x75, 0x66, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x66, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x77, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x66, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x77, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x77, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x06, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x44, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x68, 0x6f,
	0x74, 0x57, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f,
	0x74, 0x57, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x68, 0x6f, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2b,
	0x0a, 0x08, 0x74, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x74, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x78, 0x61,
	0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x77, 0x78, 0x61, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x69, 0x6e, 0x67,
	0x74, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x77, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x61, 0x76, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x46, 0x61, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x56, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x0f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x57, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x67, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x67, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x46, 0x0a, 0x11,
	0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x11, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x5e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x17, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x58,
	0x0a, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x17, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x70, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x69, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x0c, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x22, 0xb5, 0x06, 0x0a, 0x17, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x16, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x19,
	0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65,
	0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x65,
	0x67, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x65, 0x67, 0x61, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x4d, 0x61, 0x78, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x6d, 0x65, 0x67, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x65, 0x67, 0x61, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x6d, 0x65, 0x67, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x65, 0x67, 0x61, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x65,
	0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6d, 0x69, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x65, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x30, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63,
	0x61, 0x6e, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x22, 0x59, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66,
	0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x62, 0x0a,
	0x20, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x66, 0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0xfe, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x38, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0d, 0x6d, 0x65, 0x67,
	0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x4d, 0x65, 0x67, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x65, 0x67, 0x61, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x70, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x31,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x67, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xc9, 0x05, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66,
	0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x65,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x67, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3a, 0x0a, 0x18, 0x66, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x66, 0x65, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a,
	0x08, 0x74, 0x6d, 0x70, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x6d, 0x70, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x22, 0x46, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12,
	0x37, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x10, 0x50, 0x6f, 0x69, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x64, 0x22, 0xba, 0x05, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72,
	0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xce, 0x03, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x69,
	0x6d, 0x69, 0x6c, 0x61, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0c,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2d, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x50, 0x6f, 0x69, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x68, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x3a, 0x0a, 0x28, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x5f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x29, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x65, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x31, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x5f,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb3, 0x0a, 0x0a, 0x17, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4f, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x10, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x5f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x65, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x70, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x19, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f,
	0x0a, 0x18, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69,
	0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xac, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x11, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0xf6,
	0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x78, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x43,
	0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xa7, 0x09, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72,
	0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x74, 0x54, 0x68, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x41, 0x74, 0x54,
	0x68, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x57,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x15, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x6e, 0x64, 0x54, 0x78, 0x74, 0x43, 0x61, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x78, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x15, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x54, 0x78, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x43, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x53, 0x0a, 0x16, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a,
	0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x41, 0x74, 0x54, 0x68, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x41, 0x74, 0x54, 0x68, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x65, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x42,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x42, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x7b, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x45, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x6a,
	0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x75, 0x6d, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x7d, 0x0a, 0x1a,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x6e, 0x0a, 0x16, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a,
	0x75, 0x6d, 0x70, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x4b, 0x0a, 0x13, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x22, 0x47, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a,
	0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0xfb, 0x03, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x35, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x35, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x6a, 0x75, 0x6d, 0x70, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x75, 0x6d, 0x70, 0x65, 0x72,
	0x52, 0x06, 0x6a, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a,
	0x09, 0x61, 0x64, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x45, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x61, 0x64, 0x45, 0x78, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xbe, 0x01,
	0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x07, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x6c,
	0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x22, 0xad,
	0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c,
	0x69, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x78, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x78, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2f, 0x0a,
	0x07, 0x6d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9d,
	0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x65, 0x42, 0x61,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54,
	0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x64, 0x65, 0x42, 0x61, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x42, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x42, 0x61, 0x72, 0x22, 0x39, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x62, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xca, 0x04, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x25, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x78, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x78, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x07,
	0x74, 0x78, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x50,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa2, 0x04, 0x0a,
	0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x72, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6d, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x44, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x44, 0x61, 0x72, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b,
	0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xcd, 0x11, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4e, 0x0a, 0x22, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64,
	0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x22, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64,
	0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x1f, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75,
	0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1f, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x22, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x52, 0x65, 0x64,
	0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x22, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x24, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x52,
	0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x24, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x24, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x24, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x52,
	0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x21, 0x68,
	0x6f, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x68, 0x6f, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x64,
	0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x24, 0x6e, 0x65, 0x61,
	0x72, 0x62, 0x79, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x24, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4e,
	0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f,
	0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4c, 0x0a,
	0x21, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x21, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x1e, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1e, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x4c, 0x0a, 0x21, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x52, 0x65, 0x64, 0x64, 0x6f,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x6e, 0x65,
	0x61, 0x72, 0x62, 0x79, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x50, 0x0a, 0x23, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x50, 0x0a, 0x23, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x52, 0x65, 0x64,
	0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x20, 0x68, 0x6f, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64,
	0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x68,
	0x6f, 0x74, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x50, 0x0a, 0x23, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x6e, 0x65,
	0x61, 0x72, 0x62, 0x79, 0x4e, 0x6f, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x6f,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x50, 0x0a, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x4c, 0x0a, 0x21, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x21, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x64, 0x64, 0x6f,
	0x74, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x36, 0x0a, 0x16, 0x68, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x68, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x1f, 0x6e, 0x65, 0x77, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1f, 0x6e, 0x65, 0x77, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x64, 0x6f,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x48, 0x0a, 0x1f, 0x6e, 0x65, 0x77, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6e, 0x65, 0x77, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x6e,
	0x65, 0x77, 0x48, 0x6f, 0x74, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1c, 0x6e, 0x65, 0x77, 0x48, 0x6f, 0x74, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x48, 0x0a, 0x1f, 0x6e, 0x65, 0x77, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x52, 0x65, 0x64, 0x64,
	0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6e, 0x65, 0x77, 0x4e, 0x65, 0x61,
	0x72, 0x62, 0x79, 0x52, 0x65, 0x64, 0x64, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x1d, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x75,
	0x74, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x68, 0x6f, 0x74, 0x4f, 0x75,
	0x74, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x4f,
	0x75, 0x74, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6e, 0x65,
	0x61, 0x72, 0x62, 0x79, 0x4f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a,
	0x14, 0x69, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x69, 0x6f, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x22, 0xee, 0x08, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48,
	0x65, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x65, 0x61, 0x64, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45,
	0x6e, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x65,
	0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x77,
	0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x73, 0x74,
	0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x16,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x16, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12, 0x3c, 0x0a,
	0x19, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x6c,
	0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x0b, 0x6c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x15,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x52, 0x15, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6f,
	0x62, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x6f, 0x62, 0x12, 0x40, 0x0a, 0x0f,
	0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6c,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x78, 0x0a, 0x08, 0x42, 0x75, 0x7a, 0x7a, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65,
	0x64, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x62, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x42, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x09, 0x62, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x64, 0x69, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x64, 0x69, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x19,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x42, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x10,
	0x62, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x62, 0x75, 0x7a, 0x7a, 0x77, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71,
	0x12, 0x33, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x50, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x22, 0x9e, 0x03, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x55, 0x69, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x78,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x6f,
	0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61,
	0x77, 0x54, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x77,
	0x54, 0x69, 0x70, 0x73, 0x22, 0x7a, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x70, 0x73, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x62, 0x69,
	0x7a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x82, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6b, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x3d, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22,
	0x9a, 0x04, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x4c, 0x65, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x4c, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0f, 0x68, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x4a, 0x75,
	0x6d, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x68,
	0x6f, 0x74, 0x73, 0x70, 0x6f, 0x74, 0x4a, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x44,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x6c, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a,
	0x17, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x4a,
	0x75, 0x6d, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x4a, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xa8, 0x01, 0x0a,
	0x1a, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc5, 0x02, 0x0a, 0x29, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x70, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x5c, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x78, 0x61, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x78, 0x61, 0x41, 0x70, 0x70, 0x69, 0x64, 0x22, 0xdb, 0x06,
	0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x72, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x6c,
	0x6c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x75,
	0x6c, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x69, 0x6b,
	0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf7, 0x04, 0x0a, 0x1e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x6f,
	0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x42, 0x0a, 0x12, 0x62, 0x61,
	0x72, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x62, 0x61, 0x72, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa0, 0x02, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x72, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb6, 0x02, 0x0a, 0x0c, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x76, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x61, 0x76, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66,
	0x61, 0x76, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x22, 0x42, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x61, 0x76, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x04, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6c, 0x69, 0x6b, 0x65, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x4c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f,
	0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x69, 0x64, 0x22,
	0x8d, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4b, 0x56, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x56, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x49, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4b, 0x56, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x1a, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x42, 0x75, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x42,
	0x75, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95,
	0x05, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6f,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x4f, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xd7, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a,
	0x14, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x53, 0x75, 0x62, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x6e, 0x6f, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x68, 0x6e, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x6e, 0x6c, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0xc4, 0x03, 0x0a, 0x13, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72,
	0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0xc2, 0x01, 0x0a, 0x10, 0x4b, 0x56, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4b, 0x56, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x76,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xac,
	0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x56, 0x52, 0x65,
	0x71, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x16, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x55, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x16, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x55,
	0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x6b, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6c, 0x69,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x56, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6b, 0x67, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x76, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x48, 0x65,
	0x61, 0x76, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x68, 0x65, 0x61, 0x76, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x93, 0x02,
	0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x49,
	0x64, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x49, 0x64, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49,
	0x64, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49,
	0x64, 0x65, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4e, 0x65, 0x77,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x60, 0x0a, 0x1c, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65,
	0x61, 0x76, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0b, 0x68, 0x65, 0x61, 0x76, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a,
	0x11, 0x48, 0x65, 0x61, 0x76, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x4d,
	0x61, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x15, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x04, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4b, 0x56, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x55, 0x69, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x16, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x4f, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x55, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x19, 0x77, 0x68, 0x69, 0x74, 0x65, 0x4f, 0x72,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x55, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x19, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x4f, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x55, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x73, 0x6b, 0x53,
	0x76, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x73, 0x6b, 0x53, 0x76, 0x72,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x38, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x76, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x48, 0x65, 0x61, 0x76, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x68, 0x65, 0x61,
	0x76, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x50, 0x72, 0x65, 0x48, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x72, 0x65, 0x48, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x79, 0x6e,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x16, 0x57, 0x78, 0x61, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x22, 0xa9, 0x03, 0x0a, 0x12, 0x57, 0x78, 0x61, 0x41, 0x74, 0x74, 0x72, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x78, 0x61, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x78, 0x61, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x78, 0x61, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x57, 0x78, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4c, 0x69, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4c, 0x69, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x42, 0x0a,
	0x18, 0x57, 0x78, 0x61, 0x41, 0x74, 0x74, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x5f, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xd7, 0x01, 0x0a, 0x13, 0x57, 0x78, 0x61, 0x41, 0x74, 0x74, 0x72, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x57, 0x78, 0x61, 0x41, 0x74, 0x74, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x5f, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x78, 0x61,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x18,
	0x50, 0x72, 0x65, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c,
	0x64, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x13, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x4c, 0x69, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x62,
	0x22, 0x80, 0x02, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x5a, 0x73, 0x74, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x5a, 0x73, 0x74, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xd5, 0x01, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12,
	0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x46, 0x65,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x72, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xce, 0x02,
	0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4c, 0x69,
	0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64,
	0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x72, 0x72, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc0,
	0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x61, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x61, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e,
	0x69, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x69, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0x61, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x78, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x1b, 0x61,
	0x63, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x61,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x61, 0x63, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x69,
	0x6e, 0x69, 0x61, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x17, 0x61, 0x63, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x69, 0x6e,
	0x69, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x61, 0x63, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69,
	0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0x3f, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x65, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x52, 0x06, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x61, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69,
	0x61, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x69, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x61, 0x70, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x65, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x65, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x62,
	0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x61, 0x70, 0x70, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x61, 0x70, 0x70,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x42, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x63, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x4d, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4d, 0x73, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x6c, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x6f, 0x41, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a,
	0x12, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x54,
	0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x69, 0x70, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22,
	0xf8, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x69,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x73, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x6f, 0x69, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x6f, 0x69, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x6e, 0x0a, 0x22, 0x41, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x5f, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x22, 0x60, 0x0a, 0x15, 0x41, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x6c, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x11,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x73, 0x70, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xd6, 0x01, 0x0a, 0x1c,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x57, 0x78, 0x61, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x74, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x48, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x72, 0x22, 0x7d, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x57, 0x78, 0x61, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x74, 0x72, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x57, 0x78, 0x61, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x74, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x74, 0x72, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x21, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x41,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x61, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x75, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x22, 0x3e,
	0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xca,
	0x10, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x65,
	0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x0b, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32,
	0x0a, 0x14, 0x6e, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x6f,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6e, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x39, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x6c,
	0x69, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61,
	0x76, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a,
	0x0e, 0x77, 0x78, 0x61, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x78,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x77, 0x78, 0x61, 0x53, 0x68, 0x6f, 0x70,
	0x42, 0x69, 0x6e, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x0b, 0x77, 0x78, 0x61, 0x53, 0x68,
	0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x78, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x77, 0x78, 0x61, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x69, 0x76, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x3f, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x41, 0x63, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x10, 0x61, 0x63, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x72,
	0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x4e, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x74, 0x45, 0x78,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x14, 0x61, 0x63, 0x63, 0x74, 0x45, 0x78, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x55, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x19,
	0x6e, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4d, 0x6f, 0x64, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x19, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4d, 0x6f, 0x64, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x44,
	0x0a, 0x1d, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x6f, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x33, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x6f, 0x69,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x15, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x47,
	0x0a, 0x11, 0x73, 0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x57, 0x78, 0x61, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xc1, 0x01, 0x0a, 0x19,
	0x43, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x6b, 0x0a, 0x1a, 0x43, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x01, 0x0a,
	0x0e, 0x57, 0x78, 0x61, 0x41, 0x70, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22,
	0x2d, 0x0a, 0x0d, 0x57, 0x78, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x69, 0x64, 0x22, 0x3a,
	0x0a, 0x10, 0x57, 0x78, 0x61, 0x57, 0x65, 0x62, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x69, 0x0a, 0x0b, 0x57, 0x78,
	0x61, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x0f, 0x57, 0x78, 0x61, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x05, 0x0a,
	0x13, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x57, 0x78, 0x61, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x77, 0x78,
	0x61, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x57, 0x78, 0x61, 0x41, 0x70, 0x70, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x77, 0x78, 0x61, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x57, 0x78, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x57, 0x78, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4c, 0x69, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4c, 0x69, 0x62, 0x12, 0x37, 0x0a, 0x0d, 0x77, 0x65, 0x62, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x57, 0x78,
	0x61, 0x57, 0x65, 0x62, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x77, 0x65, 0x62, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x57, 0x78, 0x61, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6a,
	0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x78, 0x61, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x53, 0x64, 0x6b, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x64,
	0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x57, 0x78, 0x61, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65, 0x65,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x68, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4a, 0x73, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x6a, 0x73,
	0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4a, 0x73, 0x61, 0x70, 0x69, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4a, 0x73, 0x61, 0x70, 0x69, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x62,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65,
	0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x50, 0x6f, 0x70, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x50,
	0x6f, 0x70, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x6f,
	0x70, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x6f,
	0x70, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6a,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb5, 0x03, 0x0a, 0x14, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x57, 0x78, 0x61, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4a, 0x73, 0x41, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x73, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x73, 0x41, 0x70, 0x69, 0x12, 0x3e, 0x0a, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x62,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4c, 0x69, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12,
	0x2c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0xaa, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x10,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3d, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38,
	0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x65, 0x64,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x65, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5a, 0x73,
	0x74, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5a, 0x73,
	0x74, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x55, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x55, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x10,
	0x6e, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x38, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x5a, 0x73,
	0x74, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x5a, 0x73, 0x74, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e,
	0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x85, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x02, 0x0a, 0x16, 0x4a, 0x53, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x57, 0x78, 0x61, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x4f, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4f, 0x70, 0x74, 0x22, 0x45, 0x0a, 0x11, 0x4a, 0x53, 0x41, 0x50, 0x49, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x57, 0x0a, 0x21, 0x4a,
	0x53, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x22, 0x6e, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x75, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x22, 0xe7, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x42, 0x61,
	0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x64, 0x69,
	0x6d, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x64,
	0x0a, 0x10, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65, 0x65,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0xc0, 0x04, 0x0a, 0x17, 0x4a, 0x53, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x57, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x42, 0x61, 0x73, 0x65,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4a, 0x53, 0x41, 0x50, 0x49, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x11, 0x6a, 0x73, 0x61, 0x70, 0x69, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4a, 0x53, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x57, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x48,
	0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x63,
	0x6f, 0x6e, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x75, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65,
	0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x66, 0x0a, 0x18, 0x57, 0x78, 0x61, 0x41, 0x74, 0x74, 0x72,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x02,
	0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x78, 0x61, 0x41, 0x74, 0x74, 0x72, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x71,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x57, 0x78, 0x61, 0x41, 0x74, 0x74, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4c, 0x69, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x57, 0x78, 0x61, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x62, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x19, 0x57, 0x78, 0x61, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x78, 0x61, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x57, 0x78, 0x61, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x78, 0x61, 0x41,
	0x74, 0x74, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x57, 0x78, 0x61, 0x41, 0x74,
	0x74, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x1a,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xd5,
	0x01, 0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xd4, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x69,
	0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x72, 0x22, 0x6e, 0x0a,
	0x10, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x66, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6b, 0x66, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xcc, 0x01,
	0x0a, 0x21, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x57, 0x78, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x35, 0x55, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x35, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x77,
	0x65, 0x63, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x77, 0x65, 0x63, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a,
	0x22, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22,
	0xba, 0x01, 0x0a, 0x25, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0xf3, 0x01, 0x0a,
	0x29, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69,
	0x76, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd8, 0x08, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x5f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x08, 0x68, 0x61, 0x6c,
	0x66, 0x50, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x73, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3a,
	0x0a, 0x06, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x70, 0x75, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0d, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x62,
	0x75, 0x6c, 0x65, 0x31, 0x31, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x62, 0x75, 0x6c, 0x65, 0x31, 0x31, 0x49, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x58, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xfb, 0x01,
	0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x77,
	0x53, 0x68, 0x6f, 0x70, 0x4f, 0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x17,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x56, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0xb5, 0x02, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x1b,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x1d, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x72, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x02, 0x0a, 0x1e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfc, 0x04, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x61, 0x78,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d,
	0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x46, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x46, 0x61, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x7a,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x66, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75,
	0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x40, 0x0a, 0x14, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x60, 0x0a, 0x06, 0x50, 0x6f, 0x69, 0x47, 0x70, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x08, 0x50, 0x6f, 0x69, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22,
	0x33, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x50, 0x6f, 0x69, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcd, 0x03, 0x0a, 0x08, 0x50,
	0x6f, 0x69, 0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x07, 0x6d, 0x61, 0x72, 0x73, 0x47, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x50, 0x6f, 0x69, 0x47, 0x70, 0x73, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x73, 0x47, 0x70, 0x73,
	0x12, 0x27, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x69, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09,
	0x6d, 0x61, 0x72, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x6f,
	0x69, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0e, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6f, 0x69, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x22, 0xc4, 0x03, 0x0a, 0x08, 0x50,
	0x6f, 0x69, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x22, 0x6d, 0x0a, 0x07, 0x50, 0x6f, 0x69, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4e, 0x0a, 0x08, 0x50, 0x6f, 0x69, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c,
	0x22, 0xb1, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x69, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x55, 0x72, 0x6c, 0x22, 0xcd, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x55, 0x72, 0x6c, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x69, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x69, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x48, 0x69, 0x67, 0x68, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x6f, 0x69, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x0f, 0x50, 0x6f, 0x69, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x54,
	0x0a, 0x1a, 0x50, 0x6f, 0x69, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x69, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x6f, 0x69, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x65,
	0x6b, 0x44, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x77, 0x65, 0x65,
	0x6b, 0x44, 0x61, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x69, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x26, 0x0a,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50,
	0x6f, 0x69, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x50, 0x6f, 0x69, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6f, 0x69, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x50,
	0x6f, 0x69, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x77, 0x61,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x6b,
	0x65, 0x41, 0x77, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x77, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x24, 0x0a, 0x0a, 0x50, 0x6f, 0x69,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x22,
	0x39, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x14, 0x50, 0x6f,
	0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x3e, 0x0a, 0x0c, 0x50, 0x6f, 0x69, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x4a, 0x0a, 0x0a, 0x50, 0x6f, 0x69, 0x54, 0x61, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x84, 0x05, 0x0a, 0x0d, 0x50, 0x6f, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x05, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x69, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x05,
	0x62, 0x72, 0x69, 0x65, 0x66, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x69, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x12, 0x1c, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6f, 0x69, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x69, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52,
	0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x64, 0x65, 0x61, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x6f, 0x69, 0x44, 0x65, 0x61, 0x6c,
	0x52, 0x05, 0x64, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x6f, 0x69, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a,
	0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x50, 0x6f, 0x69, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x50, 0x6f, 0x69, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75,
	0x72, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x31, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50,
	0x6f, 0x69, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x61,
	0x6b, 0x65, 0x41, 0x77, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50,
	0x6f, 0x69, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x77, 0x61, 0x79, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65,
	0x41, 0x77, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6f, 0x69, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x50, 0x6f, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x09, 0x68,
	0x65, 0x61, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x50, 0x6f, 0x69, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50,
	0x6f, 0x69, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x6e, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x6f, 0x69, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6f, 0x69, 0x54, 0x61, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x53, 0x6e,
	0x73, 0x50, 0x6f, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x0d, 0x70, 0x6f,
	0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x6f, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x64, 0x63, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x46, 0x0a, 0x11,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x69, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6e, 0x73, 0x50, 0x6f, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6e, 0x73, 0x50, 0x6f, 0x69,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x73, 0x6e, 0x73, 0x50, 0x6f, 0x69, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0x64, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75,
	0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x4a, 0x75, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x4a, 0x75, 0x73, 0x74, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x22, 0xdd, 0x0a, 0x0a, 0x16, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x4d, 0x64, 0x35, 0x12, 0x37, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x39, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x0b, 0x77, 0x78, 0x61, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x57, 0x78, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x77, 0x78,
	0x61, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0e, 0x6c, 0x69, 0x76,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0b, 0x75, 0x73, 0x75, 0x61,
	0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x6c, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x63,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x6f, 0x75, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x6f, 0x75,
	0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x52, 0x07, 0x70,
	0x6f, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x55, 0x72, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x69,
	0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36,
	0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6a, 0x75, 0x73, 0x74, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4a, 0x75, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x09, 0x6a, 0x75, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a,
	0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8c, 0x04, 0x0a, 0x1c, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72,
	0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x46, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x6f, 0x46, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x6f, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x6f, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x6d,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x45, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xed, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x53, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x46, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x6e, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6e,
	0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x6e, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69,
	0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbe,
	0x04, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x72, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6d,
	0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x0f, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x46, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x66, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xad, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0x5b, 0x0a, 0x15, 0x57, 0x78, 0x61, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x0c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x57, 0x78,
	0x61, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x42, 0x0a, 0x0d, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x0a, 0x0a, 0x42, 0x79, 0x70, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xcf, 0x03, 0x0a, 0x0b, 0x42, 0x79, 0x70, 0x4d, 0x73,
	0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x65, 0x73, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x65, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x72, 0x79, 0x70, 0x74, 0x56, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x69, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x69, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x64,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x64,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x64, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x76, 0x63, 0x48, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x76, 0x63, 0x48, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x65, 0x76, 0x63, 0x4d, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x65, 0x76, 0x63, 0x4d, 0x69, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x65, 0x76, 0x63, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x76, 0x63, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x0b, 0x42, 0x79, 0x70,
	0x4d, 0x73, 0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x65, 0x73, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x61, 0x65, 0x73, 0x6b, 0x65, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x41, 0x65, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x41, 0x65, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x6d,
	0x64, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x6d, 0x64, 0x35,
	0x22, 0x85, 0x05, 0x0a, 0x0b, 0x42, 0x79, 0x70, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x6f, 0x6a, 0x69,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x64, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x78, 0x6d, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x74, 0x78, 0x6d, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x64, 0x6e, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x64, 0x6e, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x78, 0x6d, 0x6c,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x78,
	0x6d, 0x6c, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x75,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x75,
	0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x75, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x75,
	0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x65, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x65, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x6d, 0x64, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x6d, 0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x70, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x70, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75,
	0x74, 0x68, 0x6b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74,
	0x68, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x74, 0x65, 0x78, 0x74, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x74, 0x65, 0x78,
	0x74, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x73, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x73, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x61, 0x74, 0x74, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x61, 0x74, 0x74, 0x72, 0x22, 0x8d, 0x03, 0x0a, 0x0a, 0x42, 0x79, 0x70,
	0x4d, 0x73, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x4d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x62, 0x79, 0x70, 0x54, 0x65, 0x78, 0x74, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x42, 0x79, 0x70, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x62, 0x79, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x62, 0x79,
	0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42,
	0x79, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x08, 0x62, 0x79, 0x70, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x79, 0x70, 0x4d, 0x73, 0x67, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x08, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x28,
	0x0a, 0x08, 0x62, 0x79, 0x70, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x42, 0x79, 0x70, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x08,
	0x62, 0x79, 0x70, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x42, 0x79, 0x70,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69,
	0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x50, 0x61, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x42, 0x79, 0x70, 0x4d, 0x73, 0x67, 0x50,
	0x61, 0x63, 0x6b, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x22, 0x60, 0x0a, 0x0f,
	0x42, 0x79, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x22, 0x52,
	0x0a, 0x0e, 0x42, 0x79, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x61, 0x0a, 0x0e, 0x42, 0x79, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79,
	0x42, 0x75, 0x66, 0x66, 0x12, 0x39, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x42, 0x79, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0f,
	0x73, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x42, 0x79, 0x70, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x4b,
	0x65, 0x79, 0x42, 0x75, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42,
	0x79, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0e, 0x63,
	0x6c, 0x69, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x66, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x22, 0x79, 0x0a, 0x0b, 0x42, 0x79, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x75, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0xdd,
	0x01, 0x0a, 0x0f, 0x42, 0x79, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x39, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79,
	0x42, 0x75, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x79, 0x70,
	0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x66, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x70, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x66, 0x12, 0x30, 0x0a, 0x0c,
	0x73, 0x79, 0x6e, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x79, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd8,
	0x03, 0x0a, 0x0c, 0x57, 0x78, 0x61, 0x41, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x6f,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x10, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x1d, 0x57, 0x78, 0x61, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x57, 0x78, 0x61,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73, 0x0a, 0x1e, 0x57, 0x78, 0x61, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x4b, 0x65, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x65, 0x71, 0x22, 0xd6, 0x02, 0x0a, 0x18, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x4c, 0x62, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x70, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x70, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x54,
	0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x62, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x4c, 0x62, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6c, 0x62, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x4d, 0x69,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x54, 0x61,
	0x62, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x54, 0x61, 0x62, 0x50, 0x75, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x50, 0x72,
	0x65, 0x54, 0x61, 0x62, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x50, 0x72, 0x65, 0x54, 0x61,
	0x62, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x63, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x50, 0x75, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x63, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x69, 0x64, 0x65, 0x54,
	0x61, 0x62, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x69, 0x64, 0x65, 0x54,
	0x61, 0x62, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x62,
	0x73, 0x54, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70,
	0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x61,
	0x62, 0x54, 0x69, 0x70, 0x73, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x54,
	0x69, 0x70, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3a, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x43, 0x74, 0x72, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0xf0, 0x07, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x62, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2b,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x14, 0x6d,
	0x61, 0x72, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x14, 0x6d, 0x61,
	0x72, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x3d,
	0x0a, 0x0e, 0x6c, 0x62, 0x73, 0x54, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x62, 0x73, 0x54, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c,
	0x62, 0x73, 0x54, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x73, 0x46, 0x72, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x72, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x43,
	0x74, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x6e,
	0x6c, 0x79, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x18, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x5b, 0x0a, 0x11, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x94, 0x04, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x62, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x34, 0x0a, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x75, 0x6d,
	0x70, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x52, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x4c, 0x69,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68,
	0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x65, 0x65, 0x64, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6b,
	0x69, 0x70, 0x46, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x48, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x64, 0x61, 0x73, 0x53, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x64, 0x61, 0x73, 0x53, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x69, 0x64, 0x61, 0x73, 0x53, 0x64,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x94,
	0x03, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x16, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xe2, 0x03, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67,
	0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x50, 0x61, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x55,
	0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x4d, 0x64, 0x35, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61,
	0x67, 0x4d, 0x64, 0x35, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x67, 0x4d, 0x64, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x4d, 0x64, 0x35, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x74, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x63,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x76, 0x0a, 0x2b, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x67, 0x69, 0x66,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x52, 0x04, 0x67, 0x69, 0x66, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x47, 0x69, 0x66, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x48, 0x65, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x74, 0x22, 0xbd, 0x05, 0x0a, 0x1d,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x38,
	0x0a, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x48, 0x65, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x0b, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x6c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x40, 0x0a, 0x1b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x4d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x4d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x57, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xde, 0x02,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x70, 0x65, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x70, 0x65, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x70, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x66,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3b,
	0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xed, 0x06, 0x0a, 0x1f,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0e, 0x6c, 0x62, 0x73, 0x54, 0x61,
	0x62, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x62, 0x73, 0x54, 0x61, 0x62, 0x54, 0x69,
	0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6c, 0x62, 0x73, 0x54, 0x61, 0x62, 0x54, 0x69,
	0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x43, 0x74, 0x72,
	0x6c, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x42,
	0x79, 0x50, 0x61, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x75,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xac, 0x02, 0x0a, 0x20,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x40,
	0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x73, 0x0a, 0x19, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x54,
	0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x54, 0x69,
	0x70, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x42, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x61,
	0x62, 0x54, 0x69, 0x70, 0x73, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xab, 0x06, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6b, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6b, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x54, 0x69,
	0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x6c, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x5f, 0x0a, 0x18, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x66, 0x0a,
	0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x22, 0x57, 0x0a, 0x2b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xdf,
	0x04, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f,
	0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x4e, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x58, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68,
	0x6f, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x8e, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x66,
	0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x22, 0x45, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0d,
	0x63, 0x68, 0x65, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x65, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x5f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x2b, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x55,
	0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a,
	0x18, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x70,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x36, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x88, 0x01,
	0x0a, 0x1b, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x69, 0x0a,
	0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x13, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x52, 0x0a, 0x15, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x6a, 0x6f,
	0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x65, 0x61, 0x6d, 0x55, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x65, 0x61, 0x6d,
	0x55, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x61,
	0x6d, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x61, 0x6d, 0x75, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x61,
	0x6d, 0x75, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x72, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22,
	0x70, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x75, 0x6c,
	0x6c, 0x65, 0x74, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x68, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x0d, 0x63, 0x68, 0x65, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x65, 0x65, 0x72, 0x49, 0x63, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x65, 0x72, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68,
	0x65, 0x65, 0x72, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x28, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x57, 0x65, 0x61, 0x70, 0x70, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x67,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xd4, 0x01, 0x0a, 0x23, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75,
	0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x75, 0x6d,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a, 0x75, 0x6d,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x75, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12,
	0x4f, 0x0a, 0x0d, 0x77, 0x65, 0x61, 0x70, 0x70, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x57, 0x65, 0x61, 0x70, 0x70, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x77, 0x65, 0x61, 0x70, 0x70, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77,
	0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x27, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0b, 0x69, 0x6f, 0x73, 0x4a, 0x75, 0x6d, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x69, 0x6f, 0x73, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0f,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65,
	0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x26, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a,
	0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x57, 0x78, 0x61, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a,
	0x0b, 0x69, 0x6f, 0x73, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x69, 0x6f, 0x73, 0x4a, 0x75, 0x6d,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4a, 0x75, 0x6d,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x10,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0b, 0x77, 0x78, 0x61, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x57, 0x78, 0x61, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x77, 0x78, 0x61, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x45,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa7, 0x02, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x74, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x69, 0x6d,
	0x61, 0x63, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x61,
	0x63, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x6d,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65, 0x65,
	0x64, 0x47, 0x65, 0x74, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6a, 0x75, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xb4, 0x13, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x69,
	0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x6c,
	0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x34, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x69,
	0x6e, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x70, 0x73, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x12,
	0x43, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x3c, 0x0a, 0x19, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4d, 0x6f, 0x64,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4d, 0x6f,
	0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x66, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x75, 0x66, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x77, 0x78, 0x61, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57,
	0x78, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x77, 0x78, 0x61, 0x53, 0x68, 0x6f,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x42, 0x75, 0x66, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x42, 0x75, 0x66,
	0x66, 0x12, 0x42, 0x0a, 0x1c, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x41, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x41, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x5f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x40, 0x0a, 0x0b, 0x62, 0x67, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x75, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x67, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x6c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x34, 0x0a, 0x0b, 0x62, 0x69, 0x7a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x69,
	0x7a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x69, 0x7a, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x62, 0x75,
	0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69,
	0x6e, 0x52, 0x08, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x6c,
	0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x32, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x68, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x68, 0x65, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65,
	0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x42, 0x0a, 0x1c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x72, 0x6f, 0x6f,
	0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x72, 0x6f, 0x6f, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6d, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6d, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x66, 0x61, 0x6e, 0x43, 0x6c, 0x75,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x46, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x46, 0x61, 0x6e,
	0x43, 0x6c, 0x75, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x41,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x38, 0x0a,
	0x17, 0x6c, 0x69, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x6c, 0x69, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x46, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a,
	0x11, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a, 0x26, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xc5, 0x03, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x72, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x71, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xa2, 0x01, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6d, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6d, 0x64,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x22, 0x9b, 0x01, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x73,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xba, 0x02, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22,
	0xff, 0x01, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x67, 0x69,
	0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x69, 0x66, 0x74, 0x52, 0x08, 0x67,
	0x69, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f,
	0x6d, 0x62, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d,
	0x73, 0x22, 0xe9, 0x03, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x72, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x65, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x69, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xab, 0x03,
	0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x11, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x11, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x13, 0x74, 0x6f, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x13, 0x74, 0x6f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x29,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x74, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5a, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd9, 0x03, 0x0a, 0x10,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67,
	0x12, 0x38, 0x0a, 0x0d, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x14, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x65, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x3c, 0x0a,
	0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xa0, 0x03, 0x0a, 0x28, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x5f, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x20,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x50, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3a,
	0x0a, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x22, 0xfa, 0x0b, 0x0a, 0x14, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0e,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x75, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x6c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x15, 0x6c,
	0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6c, 0x69, 0x76, 0x65,
	0x4d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x45, 0x78,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x40, 0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x75, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x4c, 0x69, 0x6b, 0x65,
	0x43, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x6c, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x5f,
	0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x73,
	0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x73, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64,
	0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x46, 0x61, 0x6e,
	0x43, 0x6c, 0x75, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x73, 0x46, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x0b, 0x66, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x46, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x66, 0x61, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x11, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbb, 0x04, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x68, 0x65,
	0x6c, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x75, 0x6c, 0x6c, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x75, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x75,
	0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x63, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x63, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x44, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x68,
	0x65, 0x6c, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x68, 0x6f, 0x70,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x4c, 0x69, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x22, 0xb1, 0x04, 0x0a, 0x34, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68,
	0x6f, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x70, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4a, 0x75, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x6a, 0x75,
	0x6d, 0x70, 0x57, 0x78, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x78, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x6a, 0x75, 0x6d, 0x70, 0x57, 0x78, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6f,
	0x0a, 0x0f, 0x6a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x74, 0x65, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x68, 0x65, 0x6c, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x4c,
	0x69, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4a, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x6a, 0x75, 0x6d, 0x70, 0x4c, 0x69, 0x74, 0x65, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x68, 0x61, 0x73, 0x52,
	0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xee, 0x08, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x68, 0x65, 0x6c, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x57, 0x78, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x64, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x64, 0x43, 0x73, 0x41, 0x70, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x78, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x64, 0x43,
	0x73, 0x41, 0x70, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x57, 0x78, 0x61, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x78, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x68,
	0x6f, 0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x68,
	0x61, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x6b, 0x0a, 0x15, 0x73,
	0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x68,
	0x65, 0x6c, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x68, 0x6f, 0x70,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x16, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x52, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x12, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2e,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x0e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6d, 0x64, 0x53, 0x65, 0x71, 0x75, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6d, 0x64, 0x53, 0x65, 0x71, 0x75, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6d, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6d, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x3b, 0x0a, 0x14, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e,
	0x63, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x23,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57,
	0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x22, 0x90, 0x03, 0x0a, 0x11, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e,
	0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64,
	0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x18, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x47, 0x65,
	0x74, 0x43, 0x64, 0x6e, 0x55, 0x72, 0x6c, 0x43, 0x67, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x47, 0x65,
	0x74, 0x43, 0x64, 0x6e, 0x55, 0x72, 0x6c, 0x43, 0x67, 0x69, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65,
	0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x57, 0x0a, 0x16, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e,
	0x63, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6d, 0x64,
	0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22,
	0xb6, 0x01, 0x0a, 0x15, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6d, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e,
	0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x57, 0x78, 0x61,
	0x53, 0x79, 0x6e, 0x63, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x4b, 0x65, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x6d, 0x64, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x22, 0x60, 0x0a,
	0x17, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xc8, 0x01, 0x0a, 0x19, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x67, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x23, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x78,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x67, 0x69, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x67, 0x69, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x13, 0x57, 0x78,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6d,
	0x64, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x15, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e,
	0x63, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12,
	0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x18, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6d, 0x64,
	0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x18, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63,
	0x50, 0x75, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x6d,
	0x64, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6d, 0x64,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0xa9, 0x05, 0x0a, 0x0b, 0x57, 0x78, 0x61, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6d, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x57, 0x78, 0x61,
	0x53, 0x79, 0x6e, 0x63, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6d,
	0x64, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x0a,
	0x07, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x43,
	0x6d, 0x64, 0x52, 0x07, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6d, 0x64, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x43, 0x6d, 0x64, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x12, 0x44, 0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x57, 0x78,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x4b, 0x65, 0x79, 0x43, 0x6d, 0x64, 0x52, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6d, 0x64, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x67, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x67, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x52, 0x0f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x67, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x09, 0x70, 0x72, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x65, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x43, 0x6d, 0x64, 0x52, 0x09, 0x70, 0x72, 0x65, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e,
	0x63, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6d, 0x64, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x41, 0x0a, 0x0e, 0x70, 0x75, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e,
	0x63, 0x50, 0x75, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x43,
	0x6d, 0x64, 0x52, 0x0e, 0x70, 0x75, 0x6c, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x77, 0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x57, 0x78, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x73, 0x52, 0x04,
	0x63, 0x6d, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4f, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x64, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x64, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x22, 0xf1, 0x03, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c,
	0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x49, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x49, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x57, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x86, 0x04,
	0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c,
	0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0xa2, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x6e, 0x67, 0x42, 0x61, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x2e,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x67, 0x69, 0x43, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x67, 0x69, 0x43, 0x6d, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x50,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x54, 0x65, 0x78, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x6e, 0x67, 0x42, 0x61, 0x6f,
	0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x67, 0x69, 0x43,
	0x6d, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x63, 0x67, 0x69, 0x43,
	0x6d, 0x64, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x66,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x1e, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x64, 0x35, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x64, 0x35, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x36, 0x0a,
	0x16, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x75,
	0x7a, 0x7a, 0x79, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x4d, 0x64, 0x35, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x75, 0x7a, 0x7a,
	0x79, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x4d, 0x64, 0x35, 0x22, 0xc3, 0x06,
	0x0a, 0x0f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x32, 0x43, 0x55, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x32, 0x43, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x32, 0x43, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x32, 0x43, 0x4d, 0x64, 0x35, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x32, 0x43, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x32, 0x43, 0x55, 0x72,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x32, 0x43,
	0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x43, 0x32, 0x43, 0x4d, 0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x55, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x4d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x4d, 0x64, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4d, 0x64, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x55, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x4d, 0x64, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4d, 0x64, 0x35, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4d, 0x64, 0x35, 0x12, 0x2e, 0x0a,
	0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x32, 0x43, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x55, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x32, 0x43, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a,
	0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x32, 0x43, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x4d, 0x64, 0x35, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x32, 0x43, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4d, 0x64, 0x35, 0x12, 0x32, 0x0a,
	0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x32, 0x43, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x32, 0x43, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x32, 0x43,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x4d, 0x64, 0x35, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x32, 0x43, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x4d, 0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xd1, 0x05, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x4d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x6f, 0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x70, 0x70, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x09,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x55, 0x69,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x55, 0x69,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x75, 0x6d, 0x70, 0x54, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xbf, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x13, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x0f, 0x52, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x54,
	0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x54, 0x73, 0x22, 0x43,
	0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x6e,
	0x0a, 0x26, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x22, 0xb9,
	0x01, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x83, 0x03, 0x0a, 0x13, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65,
	0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x6f,
	0x74, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x68, 0x6f, 0x74, 0x77, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x48, 0x6f, 0x74, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x6f, 0x62,
	0x6a, 0x48, 0x6f, 0x74, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x66, 0x66,
	0x22, 0x98, 0x02, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x15, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xcf, 0x01, 0x0a,
	0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x6f, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68,
	0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36,
	0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x69, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x70, 0x73, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x70, 0x73, 0x54, 0x65, 0x78, 0x74, 0x22, 0x9c, 0x05, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2d, 0x0a,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x3c, 0x0a, 0x0d, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x75, 0x73,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d,
	0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x69, 0x70, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x69, 0x70, 0x73, 0x52,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x69, 0x70, 0x73, 0x12, 0x36, 0x0a,
	0x0b, 0x68, 0x6f, 0x74, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x68, 0x6f, 0x74, 0x77, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x62, 0x75, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x06, 0x6b, 0x65, 0x79, 0x62, 0x75, 0x66, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65,
	0x71, 0x22, 0x51, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x0a, 0x57, 0x58, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x6f,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x54, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x70, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x70, 0x73, 0x57, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x70, 0x73,
	0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x70, 0x73, 0x44,
	0x75, 0x72, 0x69, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x70,
	0x73, 0x44, 0x75, 0x72, 0x69, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x70, 0x73, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x69, 0x70, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x69, 0x70, 0x73, 0x55, 0x69, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x69, 0x70, 0x73, 0x55, 0x69, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x69, 0x0a,
	0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x65, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x74, 0x65, 0x65, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x54, 0x65, 0x65, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x65, 0x65, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x55, 0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x64, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x67, 0x75, 0x69, 0x64, 0x65, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x64, 0x65, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x67, 0x75, 0x69, 0x64, 0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7f, 0x0a, 0x1b, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x78, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x2e, 0x0a, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x22, 0xea, 0x01, 0x0a,
	0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x52, 0x69,
	0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x65, 0x74, 0x52,
	0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc7, 0x08, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x79, 0x61, 0x63, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x06, 0x6d, 0x79, 0x61, 0x63, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x62, 0x75, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x06, 0x6b, 0x65, 0x79, 0x62, 0x75, 0x66, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x48, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x48, 0x35, 0x12,
	0x2e, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x2b, 0x0a, 0x0a, 0x77, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x58, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x0a, 0x77, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x32, 0x0a, 0x09,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x32, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x4d, 0x6f, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x4d, 0x6f, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x74, 0x65, 0x65, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x54, 0x69,
	0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54,
	0x69, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x74, 0x65, 0x65, 0x6e, 0x6d,
	0x6f, 0x64, 0x65, 0x54, 0x69, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a,
	0x12, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x77, 0x78, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x35,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x78, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48, 0x35, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x74, 0x65, 0x65, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x74, 0x65, 0x65, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x55, 0x70,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x55,
	0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x55, 0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x52, 0x0a, 0x15, 0x77, 0x78, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x78, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x77,
	0x78, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xca, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x22, 0x8c, 0x01, 0x0a, 0x23, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x63, 0x6b, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x91, 0x02, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x69, 0x76, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1f, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x22, 0x55, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xc4, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x22, 0x6e, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x74, 0x42, 0x75, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x72, 0x65, 0x74, 0x42, 0x75, 0x66, 0x22, 0x71, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x70, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x17, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6e, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6e, 0x73, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x1b,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a, 0x1d, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x65,
	0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4d,
	0x73, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe6, 0x02, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12,
	0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x73,
	0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3,
	0x01, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x41, 0x70, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x42, 0x79, 0x70, 0x4d,
	0x73, 0x67, 0x12, 0x19, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x78, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6b, 0x66, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x68, 0x61, 0x73, 0x43, 0x68, 0x61, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x43, 0x68, 0x61, 0x74, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66,
	0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d,
	0x4b, 0x65, 0x66, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x4e, 0x65, 0x65, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x62, 0x4e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x68, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x12, 0x37, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x17, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0xe9, 0x03, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b,
	0x65, 0x66, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6b, 0x66, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x67, 0x48, 0x65, 0x61,
	0x64, 0x69, 0x6d, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x48,
	0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x48,
	0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x79, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x79, 0x69, 0x6e,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x70, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x70, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x57,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x38, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x59, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x43, 0x74, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xb1, 0x01, 0x0a, 0x1b,
	0x41, 0x64, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x74, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x43, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x74,
	0x78, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x74, 0x78, 0x22,
	0xc1, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66,
	0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54, 0x69, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x74, 0x69, 0x73, 0x70, 0x61, 0x6d, 0x54,
	0x69, 0x70, 0x73, 0x22, 0x71, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d,
	0x4b, 0x65, 0x66, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x6b, 0x66, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6b, 0x66, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x65, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x4b, 0x65, 0x66, 0x75, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x5a,
	0x0a, 0x2e, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6d, 0x73, 0x67,
}

var (
	file_Finder_proto_rawDescOnce sync.Once
	file_Finder_proto_rawDescData = file_Finder_proto_rawDesc
)

func file_Finder_proto_rawDescGZIP() []byte {
	file_Finder_proto_rawDescOnce.Do(func() {
		file_Finder_proto_rawDescData = protoimpl.X.CompressGZIP(file_Finder_proto_rawDescData)
	})
	return file_Finder_proto_rawDescData
}

var file_Finder_proto_msgTypes = make([]protoimpl.MessageInfo, 568)
var file_Finder_proto_goTypes = []interface{}{
	(*ResourceReq)(nil),                          // 0: ResourceReq
	(*ResourceTypeReq)(nil),                      // 1: ResourceTypeReq
	(*CheckResUpdateRequest)(nil),                // 2: CheckResUpdateRequest
	(*SignatureInfo)(nil),                        // 3: SignatureInfo
	(*ResourceMeta)(nil),                         // 4: ResourceMeta
	(*ResourceKey)(nil),                          // 5: ResourceKey
	(*Resource)(nil),                             // 6: Resource
	(*ResourceType)(nil),                         // 7: ResourceType
	(*CheckResUpdateResponse)(nil),               // 8: CheckResUpdateResponse
	(*FinderAuthInfo)(nil),                       // 9: FinderAuthInfo
	(*FinderContactExtInfo)(nil),                 // 10: FinderContactExtInfo
	(*FinderOriginalInfo)(nil),                   // 11: FinderOriginalInfo
	(*FinderContactMsgInfo)(nil),                 // 12: FinderContactMsgInfo
	(*FinderLiveNoticeInfo)(nil),                 // 13: FinderLiveNoticeInfo
	(*MicSetting)(nil),                           // 14: MicSetting
	(*LiveLotterySetting)(nil),                   // 15: LiveLotterySetting
	(*FinderContactLiveInfo)(nil),                // 16: FinderContactLiveInfo
	(*FinderGuestInfo)(nil),                      // 17: FinderGuestInfo
	(*FinderBizInfo_BizAuthInfo)(nil),            // 18: FinderBizInfo_BizAuthInfo
	(*FinderBizInfo_BizInfo)(nil),                // 19: FinderBizInfo_BizInfo
	(*FinderMiniAppInfo)(nil),                    // 20: FinderMiniAppInfo
	(*FinderBizInfo)(nil),                        // 21: FinderBizInfo
	(*FinderWecomInfo)(nil),                      // 22: FinderWecomInfo
	(*FinderQQMusicInfo)(nil),                    // 23: FinderQQMusicInfo
	(*FinderSticker)(nil),                        // 24: FinderSticker
	(*FinderBindInfo)(nil),                       // 25: FinderBindInfo
	(*AchievementInfo_GameAchievement)(nil),      // 26: AchievementInfo_GameAchievement
	(*AchievementInfo)(nil),                      // 27: AchievementInfo
	(*FinderJumpInfo_MiniAppInfo)(nil),           // 28: FinderJumpInfo_MiniAppInfo
	(*FinderJumpInfo_Html5Info)(nil),             // 29: FinderJumpInfo_Html5Info
	(*FinderJumpInfo_NativeInfo)(nil),            // 30: FinderJumpInfo_NativeInfo
	(*FinderJumpInfo_SchemaInfo)(nil),            // 31: FinderJumpInfo_SchemaInfo
	(*FinderJumpInfoRedDot)(nil),                 // 32: FinderJumpInfoRedDot
	(*FinderJumpInfo)(nil),                       // 33: FinderJumpInfo
	(*FinderContact)(nil),                        // 34: FinderContact
	(*ClientContextInfo)(nil),                    // 35: ClientContextInfo
	(*FinderObjectBaseInfo)(nil),                 // 36: FinderObjectBaseInfo
	(*FinderBaseRequest)(nil),                    // 37: FinderBaseRequest
	(*ClientStatsInfo)(nil),                      // 38: ClientStatsInfo
	(*FinderTipsShowInfo_IconConfig)(nil),        // 39: FinderTipsShowInfo_IconConfig
	(*AttributeTitle_SubContent)(nil),            // 40: AttributeTitle_SubContent
	(*AttributeTitle_Content)(nil),               // 41: AttributeTitle_Content
	(*AttributeTitle)(nil),                       // 42: AttributeTitle
	(*FinderTipsShowInfo)(nil),                   // 43: FinderTipsShowInfo
	(*FinderRedDotCtrlInfo)(nil),                 // 44: FinderRedDotCtrlInfo
	(*FinderSyncClientInfo)(nil),                 // 45: FinderSyncClientInfo
	(*FinderSyncClientStatus)(nil),               // 46: FinderSyncClientStatus
	(*FinderSyncRequest)(nil),                    // 47: FinderSyncRequest
	(*FinderCmdItem)(nil),                        // 48: FinderCmdItem
	(*FinderCheckExpireInfo)(nil),                // 49: FinderCheckExpireInfo
	(*FinderSyncResponse)(nil),                   // 50: FinderSyncResponse
	(*BitFeature)(nil),                           // 51: BitFeature
	(*ValFeature)(nil),                           // 52: ValFeature
	(*OriginVal)(nil),                            // 53: OriginVal
	(*Stats)(nil),                                // 54: Stats
	(*FinderWaitDetail)(nil),                     // 55: FinderWaitDetail
	(*DownloadSpeed)(nil),                        // 56: DownloadSpeed
	(*FinderDownloadInfo)(nil),                   // 57: FinderDownloadInfo
	(*FinderFluencyInfo)(nil),                    // 58: FinderFluencyInfo
	(*FinderClientStatus)(nil),                   // 59: FinderClientStatus
	(*MegaVideoWaitDetail)(nil),                  // 60: MegaVideoWaitDetail
	(*MegaVideoDownloadInfo)(nil),                // 61: MegaVideoDownloadInfo
	(*MegaVideoFluencyInfo)(nil),                 // 62: MegaVideoFluencyInfo
	(*MegaVideoClientStatus)(nil),                // 63: MegaVideoClientStatus
	(*FinderStatsReportRequest)(nil),             // 64: FinderStatsReportRequest
	(*FinderStatsReportResponse)(nil),            // 65: FinderStatsReportResponse
	(*ExtStats)(nil),                             // 66: ExtStats
	(*FinderExtStatsReportRequest)(nil),          // 67: FinderExtStatsReportRequest
	(*FinderExtStatsReportResponse)(nil),         // 68: FinderExtStatsReportResponse
	(*MarkReadStat)(nil),                         // 69: MarkReadStat
	(*FinderUnreadItem)(nil),                     // 70: FinderUnreadItem
	(*FinderLiveWaitDetail)(nil),                 // 71: FinderLiveWaitDetail
	(*FinderLiveQoSInfo)(nil),                    // 72: FinderLiveQoSInfo
	(*FinderLiveClientStatus)(nil),               // 73: FinderLiveClientStatus
	(*FinderSwitch)(nil),                         // 74: FinderSwitch
	(*FinderStreamTopObjectItem_ObjectItem)(nil), // 75: FinderStreamTopObjectItem_ObjectItem
	(*FinderStreamTopObjectItem)(nil),            // 76: FinderStreamTopObjectItem
	(*FinderCommByPass)(nil),                     // 77: FinderCommByPass
	(*FinderStreamSceneStatus)(nil),              // 78: FinderStreamSceneStatus
	(*FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus)(nil), // 79: FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus
	(*FinderLiveBeforeJoinLiveRoomStatus)(nil),                                           // 80: FinderLiveBeforeJoinLiveRoomStatus
	(*FinderStreamRelatedInfo)(nil),                                                      // 81: FinderStreamRelatedInfo
	(*FinderStreamRequest)(nil),                                                          // 82: FinderStreamRequest
	(*FinderMediaSpec)(nil),                                                              // 83: FinderMediaSpec
	(*FinderMediaCodecInfo)(nil),                                                         // 84: FinderMediaCodecInfo
	(*CdnTransInfo)(nil),                                                                 // 85: CdnTransInfo
	(*FinderLiveCdnTransInfo)(nil),                                                       // 86: FinderLiveCdnTransInfo
	(*VideoPKParams)(nil),                                                                // 87: VideoPKParams
	(*LiveSdkVideoParams)(nil),                                                           // 88: LiveSdkVideoParams
	(*FinderLiveMediaSpec)(nil),                                                          // 89: FinderLiveMediaSpec
	(*FinderHlsMediaSpec)(nil),                                                           // 90: FinderHlsMediaSpec
	(*FinderHlsMediaSpecList)(nil),                                                       // 91: FinderHlsMediaSpecList
	(*FinderHalfRect)(nil),                                                               // 92: FinderHalfRect
	(*FinderHdrMediaSpecList)(nil),                                                       // 93: FinderHdrMediaSpecList
	(*FinderMedia)(nil),                                                                  // 94: FinderMedia
	(*FinderMediaExtra)(nil),                                                             // 95: FinderMediaExtra
	(*FinderLocation)(nil),                                                               // 96: FinderLocation
	(*FinderExtendedReading)(nil),                                                        // 97: FinderExtendedReading
	(*FinderTopic)(nil),                                                                  // 98: FinderTopic
	(*FinderMentionedUser)(nil),                                                          // 99: FinderMentionedUser
	(*FinderLiveDesc)(nil),                                                               // 100: FinderLiveDesc
	(*FinderMusicInfo)(nil),                                                              // 101: FinderMusicInfo
	(*FinderMentionedMusic)(nil),                                                         // 102: FinderMentionedMusic
	(*FinderLongVideoDesc)(nil),                                                          // 103: FinderLongVideoDesc
	(*FinderObjectBGMInfo)(nil),                                                          // 104: FinderObjectBGMInfo
	(*FinderFromAppInfo)(nil),                                                            // 105: FinderFromAppInfo
	(*FinderTemplateInfo)(nil),                                                           // 106: FinderTemplateInfo
	(*FinderEventWordingInfo)(nil),                                                       // 107: FinderEventWordingInfo
	(*FinderObjectEventDesc)(nil),                                                        // 108: FinderObjectEventDesc
	(*FinderMVInfo_ClientDraftInfo)(nil),                                                 // 109: FinderMVInfo_ClientDraftInfo
	(*FinderMVInfo_FinderMVTrackReportInfo)(nil),                                         // 110: FinderMVInfo_FinderMVTrackReportInfo
	(*FinderMVInfo_FinderMVTrack)(nil),                                                   // 111: FinderMVInfo_FinderMVTrack
	(*FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo)(nil),                      // 112: FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo
	(*FinderMVInfo_FinderMVSongInfo)(nil),                                                // 113: FinderMVInfo_FinderMVSongInfo
	(*FinderMVInfo_FinderMVOriginalInfo)(nil),                                            // 114: FinderMVInfo_FinderMVOriginalInfo
	(*FinderMVInfo)(nil),                                                                 // 115: FinderMVInfo
	(*FinderTopicHashTagInfo_TopicHashTagInfo)(nil),                                      // 116: FinderTopicHashTagInfo_TopicHashTagInfo
	(*FinderTopicHashTagInfo)(nil),                                                       // 117: FinderTopicHashTagInfo
	(*FinderEventDescriptionContact)(nil),                                                // 118: FinderEventDescriptionContact
	(*FinderEventInfo_TemplateVersionInfo)(nil),                                          // 119: FinderEventInfo_TemplateVersionInfo
	(*FinderEventInfo)(nil),                                                              // 120: FinderEventInfo
	(*FinderClientDraftExtInfo)(nil),                                                     // 121: FinderClientDraftExtInfo
	(*FinderVideoTemplateInfo_VersionInfo)(nil),                                          // 122: FinderVideoTemplateInfo_VersionInfo
	(*FinderVideoTemplateInfo)(nil),                                                      // 123: FinderVideoTemplateInfo
	(*FinderGeneralReportInfo)(nil),                                                      // 124: FinderGeneralReportInfo
	(*OriginalSoundInfo)(nil),                                                            // 125: OriginalSoundInfo
	(*FinderObjectDesc)(nil),                                                             // 126: FinderObjectDesc
	(*FinderCommentInfo)(nil),                                                            // 127: FinderCommentInfo
	(*FinderLiveExtInfo)(nil),                                                            // 128: FinderLiveExtInfo
	(*FinderLiveSdkChannelInfo)(nil),                                                     // 129: FinderLiveSdkChannelInfo
	(*FinderLiveTabInfo)(nil),                                                            // 130: FinderLiveTabInfo
	(*LiveSdkInfo)(nil),                                                                  // 131: LiveSdkInfo
	(*FinderLiveLayerShowInfo)(nil),                                                      // 132: FinderLiveLayerShowInfo
	(*FinderLiveUrlOption)(nil),                                                          // 133: FinderLiveUrlOption
	(*FinderLivePurchaseInfo)(nil),                                                       // 134: FinderLivePurchaseInfo
	(*FinderLiveBadgeInfo)(nil),                                                          // 135: FinderLiveBadgeInfo
	(*FinderLiveContact)(nil),                                                            // 136: FinderLiveContact
	(*FinderLiveRoomData)(nil),                                                           // 137: FinderLiveRoomData
	(*FinderLiveMicAudienceInfo)(nil),                                                    // 138: FinderLiveMicAudienceInfo
	(*FinderLiveMicPkInfo)(nil),                                                          // 139: FinderLiveMicPkInfo
	(*FinderLiveBattleInfo_PlayerInfo)(nil),                                              // 140: FinderLiveBattleInfo_PlayerInfo
	(*FinderLiveBattleInfo)(nil),                                                         // 141: FinderLiveBattleInfo
	(*FinderLiveMicInfo)(nil),                                                            // 142: FinderLiveMicInfo
	(*FinderBizUserInfo)(nil),                                                            // 143: FinderBizUserInfo
	(*FinderLiveReplayInfo)(nil),                                                         // 144: FinderLiveReplayInfo
	(*RelatedEventInfo)(nil),                                                             // 145: RelatedEventInfo
	(*FinderLiveEventInfo)(nil),                                                          // 146: FinderLiveEventInfo
	(*FinderLiveInfo)(nil),                                                               // 147: FinderLiveInfo
	(*FinderFoldedLayout)(nil),                                                           // 148: FinderFoldedLayout
	(*FinderVideoMedia)(nil),                                                             // 149: FinderVideoMedia
	(*FinderVideoDesc)(nil),                                                              // 150: FinderVideoDesc
	(*FinderVideo)(nil),                                                                  // 151: FinderVideo
	(*FinderObjectHotTopic)(nil),                                                         // 152: FinderObjectHotTopic
	(*FinderObjectHotTopicList)(nil),                                                     // 153: FinderObjectHotTopicList
	(*MegaVideoMediaSpec)(nil),                                                           // 154: MegaVideoMediaSpec
	(*FinderMediaSpecList)(nil),                                                          // 155: FinderMediaSpecList
	(*MegaVideoMedia)(nil),                                                               // 156: MegaVideoMedia
	(*MegaVideoLocation)(nil),                                                            // 157: MegaVideoLocation
	(*MegaVideoExtendedReading)(nil),                                                     // 158: MegaVideoExtendedReading
	(*MegaVideoDesc)(nil),                                                                // 159: MegaVideoDesc
	(*MegaVideoFinderBusiness)(nil),                                                      // 160: MegaVideoFinderBusiness
	(*MegaVideo)(nil),                                                                    // 161: MegaVideo
	(*FinderVideoAttachment)(nil),                                                        // 162: FinderVideoAttachment
	(*FinderMiniAppAttachment)(nil),                                                      // 163: FinderMiniAppAttachment
	(*FinderJumpInfoAttachment)(nil),                                                     // 164: FinderJumpInfoAttachment
	(*FinderAttachment)(nil),                                                             // 165: FinderAttachment
	(*FinderAttachmentList)(nil),                                                         // 166: FinderAttachmentList
	(*FinderSnsShareInfo)(nil),                                                           // 167: FinderSnsShareInfo
	(*FinderObjectWebInfo)(nil),                                                          // 168: FinderObjectWebInfo
	(*ObjectAdDesc)(nil),                                                                 // 169: ObjectAdDesc
	(*ObjectAdContentH5)(nil),                                                            // 170: ObjectAdContentH5
	(*ObjectAdContentMiniApp)(nil),                                                       // 171: ObjectAdContentMiniApp
	(*ObjectAdContentLeadLink)(nil),                                                      // 172: ObjectAdContentLeadLink
	(*ObjectAdItem)(nil),                                                                 // 173: ObjectAdItem
	(*FinderObjectAdInfo)(nil),                                                           // 174: FinderObjectAdInfo
	(*FinderSearchHotWord)(nil),                                                          // 175: FinderSearchHotWord
	(*FinderObjectHotWordInfo)(nil),                                                      // 176: FinderObjectHotWordInfo
	(*FinderTipsInfo)(nil),                                                               // 177: FinderTipsInfo
	(*FinderObjectClientLocalBuffer)(nil),                                                // 178: FinderObjectClientLocalBuffer
	(*FinderPublisherInfo)(nil),                                                          // 179: FinderPublisherInfo
	(*FinderObjectPlaceHolderInfo)(nil),                                                  // 180: FinderObjectPlaceHolderInfo
	(*FinderObjectFavInfo)(nil),                                                          // 181: FinderObjectFavInfo
	(*FinderForwardInfo)(nil),                                                            // 182: FinderForwardInfo
	(*FinderCollectionInfo)(nil),                                                         // 183: FinderCollectionInfo
	(*FinderPreloadUserpageInfo)(nil),                                                    // 184: FinderPreloadUserpageInfo
	(*FinderObjectAdvertisementInfo)(nil),                                                // 185: FinderObjectAdvertisementInfo
	(*FinderObjectExtend)(nil),                                                           // 186: FinderObjectExtend
	(*FinderRecommendLabel)(nil),                                                         // 187: FinderRecommendLabel
	(*FinderMusicRealtimeInfo)(nil),                                                      // 188: FinderMusicRealtimeInfo
	(*FinderPlayHistoryInfo)(nil),                                                        // 189: FinderPlayHistoryInfo
	(*FinderPromotionJumpInfo)(nil),                                                      // 190: FinderPromotionJumpInfo
	(*FinderFlowCardRecommendReason)(nil),                                                // 191: FinderFlowCardRecommendReason
	(*FinderIpRegionInfo)(nil),                                                           // 192: FinderIpRegionInfo
	(*FinderObject)(nil),                                                                 // 193: FinderObject
	(*FinderPreloadGlobalInfo)(nil),                                                      // 194: FinderPreloadGlobalInfo
	(*FinderPreloadObjectInfo)(nil),                                                      // 195: FinderPreloadObjectInfo
	(*MegaVideoFinderPreloadObjectInfo)(nil),                                             // 196: MegaVideoFinderPreloadObjectInfo
	(*FinderPreloadInfo)(nil),                                                            // 197: FinderPreloadInfo
	(*FinderContactRecommendItem)(nil),                                                   // 198: FinderContactRecommendItem
	(*FinderContactRecommend)(nil),                                                       // 199: FinderContactRecommend
	(*FinderTopicBgmInfo)(nil),                                                           // 200: FinderTopicBgmInfo
	(*FinderTopicInfo)(nil),                                                              // 201: FinderTopicInfo
	(*FinderTopicRecommend)(nil),                                                         // 202: FinderTopicRecommend
	(*FinderCategoryInfo)(nil),                                                           // 203: FinderCategoryInfo
	(*FinderCategoryRecommend)(nil),                                                      // 204: FinderCategoryRecommend
	(*RelatedTopic)(nil),                                                                 // 205: RelatedTopic
	(*PoiTopicSubTitle)(nil),                                                             // 206: PoiTopicSubTitle
	(*TopicFilter)(nil),                                                                  // 207: TopicFilter
	(*FinderGetTopicListRequest)(nil),                                                    // 208: FinderGetTopicListRequest
	(*FinderGetTopicListResponse)(nil),                                                   // 209: FinderGetTopicListResponse
	(*FinderGetRelatedEntranceInfo)(nil),                                                 // 210: FinderGetRelatedEntranceInfo
	(*FinderGetRelatedListReq_SwitchColumnInfo)(nil),                                     // 211: FinderGetRelatedListReq_SwitchColumnInfo
	(*FinderGetRelatedListReq_GetColumnFeedInfo)(nil),                                    // 212: FinderGetRelatedListReq_GetColumnFeedInfo
	(*FinderGetRelatedListReq_GetRelatedColumnTopicInfo)(nil),                            // 213: FinderGetRelatedListReq_GetRelatedColumnTopicInfo
	(*FinderGetRelatedListReq)(nil),                                                      // 214: FinderGetRelatedListReq
	(*FinderStreamCardActionInfo)(nil),                                                   // 215: FinderStreamCardActionInfo
	(*FinderStreamTxtCard)(nil),                                                          // 216: FinderStreamTxtCard
	(*FinderStreamCard)(nil),                                                             // 217: FinderStreamCard
	(*FinderLivePreloadInfo)(nil),                                                        // 218: FinderLivePreloadInfo
	(*FinderStreamJumpInfo)(nil),                                                         // 219: FinderStreamJumpInfo
	(*FinderStreamDivider)(nil),                                                          // 220: FinderStreamDivider
	(*FinderLiveStreamNoticeCard)(nil),                                                   // 221: FinderLiveStreamNoticeCard
	(*FinderLiveStreamJumper)(nil),                                                       // 222: FinderLiveStreamJumper
	(*FinderBannerExtInfo)(nil),                                                          // 223: FinderBannerExtInfo
	(*FinderLiveRelatedExtInfo)(nil),                                                     // 224: FinderLiveRelatedExtInfo
	(*FinderAdExtInfo)(nil),                                                              // 225: FinderAdExtInfo
	(*FinderLiveStreamCard)(nil),                                                         // 226: FinderLiveStreamCard
	(*FinderStreamLayoutInfo)(nil),                                                       // 227: FinderStreamLayoutInfo
	(*FinderLikeInfo)(nil),                                                               // 228: FinderLikeInfo
	(*FinderGuideBarItem)(nil),                                                           // 229: FinderGuideBarItem
	(*FinderBarItem)(nil),                                                                // 230: FinderBarItem
	(*FinderBarInfo)(nil),                                                                // 231: FinderBarInfo
	(*FinderGetRelatedListResp)(nil),                                                     // 232: FinderGetRelatedListResp
	(*FinderSectionInfo)(nil),                                                            // 233: FinderSectionInfo
	(*FinderStreamPrefechTimeIntervalConf)(nil),                                          // 234: FinderStreamPrefechTimeIntervalConf
	(*FinderStreamResponse)(nil),                                                         // 235: FinderStreamResponse
	(*FinderGetBuzzwordRequest)(nil),                                                     // 236: FinderGetBuzzwordRequest
	(*Buzzword)(nil),                                                                     // 237: Buzzword
	(*BuzzwordInfo)(nil),                                                                 // 238: BuzzwordInfo
	(*FinderGetBuzzwordResponse)(nil),                                                    // 239: FinderGetBuzzwordResponse
	(*FinderCollectUnreadRequest)(nil),                                                   // 240: FinderCollectUnreadRequest
	(*FinderCollectUnreadResponse)(nil),                                                  // 241: FinderCollectUnreadResponse
	(*FinderObjectUidUnit)(nil),                                                          // 242: FinderObjectUidUnit
	(*FinderBatchGetObjectAsyncLoadInfoRequest)(nil),                                     // 243: FinderBatchGetObjectAsyncLoadInfoRequest
	(*FinderJoinLiveTips)(nil),                                                           // 244: FinderJoinLiveTips
	(*FinderLivePreJoinLiveInfo)(nil),                                                    // 245: FinderLivePreJoinLiveInfo
	(*FinderObjectDigestItem)(nil),                                                       // 246: FinderObjectDigestItem
	(*FinderObjectDigest)(nil),                                                           // 247: FinderObjectDigest
	(*FinderPurchaseLivePreviewInfo)(nil),                                                // 248: FinderPurchaseLivePreviewInfo
	(*FinderObjectAsyncLoadInfo)(nil),                                                    // 249: FinderObjectAsyncLoadInfo
	(*FinderContactAsyncLoadInfo)(nil),                                                   // 250: FinderContactAsyncLoadInfo
	(*FinderBatchGetObjectAsyncLoadInfoResponse)(nil),                                    // 251: FinderBatchGetObjectAsyncLoadInfoResponse
	(*FinderLivePermissionVerifyInfo)(nil),                                               // 252: FinderLivePermissionVerifyInfo
	(*FinderGetCommentDetailRequest)(nil),                                                // 253: FinderGetCommentDetailRequest
	(*FinderGetCommentDetailResponse)(nil),                                               // 254: FinderGetCommentDetailResponse
	(*FinderGetHistoryRequest)(nil),                                                      // 255: FinderGetHistoryRequest
	(*FinderGetHistoryResponse)(nil),                                                     // 256: FinderGetHistoryResponse
	(*FinderFavReq)(nil),                                                                 // 257: FinderFavReq
	(*FinderFavResp)(nil),                                                                // 258: FinderFavResp
	(*FinderLikeRequest)(nil),                                                            // 259: FinderLikeRequest
	(*FinderLikeResponse)(nil),                                                           // 260: FinderLikeResponse
	(*RealTimeKVReportReq)(nil),                                                          // 261: RealTimeKVReportReq
	(*RealTimeKVReportResp)(nil),                                                         // 262: RealTimeKVReportResp
	(*FinderCommentMentionedUser)(nil),                                                   // 263: FinderCommentMentionedUser
	(*FinderCommentRequest)(nil),                                                         // 264: FinderCommentRequest
	(*FinderCommentResponse)(nil),                                                        // 265: FinderCommentResponse
	(*FinderLiveReportBaseInfo)(nil),                                                     // 266: FinderLiveReportBaseInfo
	(*FinderFollowRequest)(nil),                                                          // 267: FinderFollowRequest
	(*FinderFollowResponse)(nil),                                                         // 268: FinderFollowResponse
	(*KVCommReportItem)(nil),                                                             // 269: KVCommReportItem
	(*CliReportKVDataPackage)(nil),                                                       // 270: CliReportKVDataPackage
	(*HeavyUserReqInfo)(nil),                                                             // 271: HeavyUserReqInfo
	(*CliReportKVReq)(nil),                                                               // 272: CliReportKVReq
	(*NewStrategyItem)(nil),                                                              // 273: NewStrategyItem
	(*StrategyInterval)(nil),                                                             // 274: StrategyInterval
	(*MonitorIdMapStrategyInterval)(nil),                                                 // 275: MonitorIdMapStrategyInterval
	(*HeavyUserRespInfo)(nil),                                                            // 276: HeavyUserRespInfo
	(*CliReportKVResp)(nil),                                                              // 277: CliReportKVResp
	(*CommRequestSource)(nil),                                                            // 278: CommRequestSource
	(*WxaClientPublicLibInfo)(nil),                                                       // 279: WxaClientPublicLibInfo
	(*WxaAttrSyncRequest)(nil),                                                           // 280: WxaAttrSyncRequest
	(*WxaAttrSyncResp_KeyValue)(nil),                                                     // 281: WxaAttrSyncResp_KeyValue
	(*WxaAttrSyncResponse)(nil),                                                          // 282: WxaAttrSyncResponse
	(*PreGetDownloadUrlRequest)(nil),                                                     // 283: PreGetDownloadUrlRequest
	(*PackageUrlInfo)(nil),                                                               // 284: PackageUrlInfo
	(*PreGetDownloadUrlResponse)(nil),                                                    // 285: PreGetDownloadUrlResponse
	(*FinderGetPurchasedFeedListRequest)(nil),                                            // 286: FinderGetPurchasedFeedListRequest
	(*FinderGetPurchasedFeedListResponse)(nil),                                           // 287: FinderGetPurchasedFeedListResponse
	(*FinderUserPrepareRequest)(nil),                                                     // 288: FinderUserPrepareRequest
	(*FinderNicknameVerifyInfo)(nil),                                                     // 289: FinderNicknameVerifyInfo
	(*DataCenterConfig)(nil),                                                             // 290: DataCenterConfig
	(*FinderWxAppInfo)(nil),                                                              // 291: FinderWxAppInfo
	(*AcctTransferConfig)(nil),                                                           // 292: AcctTransferConfig
	(*PostActionSheet)(nil),                                                              // 293: PostActionSheet
	(*PostActionSheetList)(nil),                                                          // 294: PostActionSheetList
	(*AcctConfig)(nil),                                                                   // 295: AcctConfig
	(*AccountExtraSettingConfig)(nil),                                                    // 296: AccountExtraSettingConfig
	(*FinderLiveAliasInfo)(nil),                                                          // 297: FinderLiveAliasInfo
	(*SettleToAgencyRelateInfo)(nil),                                                     // 298: SettleToAgencyRelateInfo
	(*FinderUserPreparePoiInfo)(nil),                                                     // 299: FinderUserPreparePoiInfo
	(*AgencyCollaborateInfo_EntranceInfo)(nil),                                           // 300: AgencyCollaborateInfo_EntranceInfo
	(*AgencyCollaborateInfo)(nil),                                                        // 301: AgencyCollaborateInfo
	(*PostActionWording)(nil),                                                            // 302: PostActionWording
	(*FinderLiveWxaPreloadCtrlInfo)(nil),                                                 // 303: FinderLiveWxaPreloadCtrlInfo
	(*FinderLiveWxaPreloadInfo)(nil),                                                     // 304: FinderLiveWxaPreloadInfo
	(*GameRankSwitchInfo_GameRankSwitch)(nil),                                            // 305: GameRankSwitchInfo_GameRankSwitch
	(*GameRankSwitchInfo)(nil),                                                           // 306: GameRankSwitchInfo
	(*FinderPrivacySetting)(nil),                                                         // 307: FinderPrivacySetting
	(*FinderUserPrepareResponse)(nil),                                                    // 308: FinderUserPrepareResponse
	(*ColdStartFetchDataRequest)(nil),                                                    // 309: ColdStartFetchDataRequest
	(*ColdStartFetchDataResponse)(nil),                                                   // 310: ColdStartFetchDataResponse
	(*WxaAppBaseInfo)(nil),                                                               // 311: WxaAppBaseInfo
	(*WxaPluginInfo)(nil),                                                                // 312: WxaPluginInfo
	(*WxaWebLaunchInfo)(nil),                                                             // 313: WxaWebLaunchInfo
	(*WxaJumpInfo)(nil),                                                                  // 314: WxaJumpInfo
	(*WxaMaterialInfo)(nil),                                                              // 315: WxaMaterialInfo
	(*LaunchWxaAppRequest)(nil),                                                          // 316: LaunchWxaAppRequest
	(*LaunchAction)(nil),                                                                 // 317: LaunchAction
	(*CheckJsApiInfo)(nil),                                                               // 318: CheckJsApiInfo
	(*PublicLibUpdateInfo)(nil),                                                          // 319: PublicLibUpdateInfo
	(*ActionSheetInfo)(nil),                                                              // 320: ActionSheetInfo
	(*OperationInfo)(nil),                                                                // 321: OperationInfo
	(*LaunchWxaAppResponse)(nil),                                                         // 322: LaunchWxaAppResponse
	(*RequestPackageInfo)(nil),                                                           // 323: RequestPackageInfo
	(*LocalPackageInfo)(nil),                                                             // 324: LocalPackageInfo
	(*GetDownloadUrlReqItem)(nil),                                                        // 325: GetDownloadUrlReqItem
	(*BatchGetDownloadUrlRequest)(nil),                                                   // 326: BatchGetDownloadUrlRequest
	(*GetDownloadUrlRespItem)(nil),                                                       // 327: GetDownloadUrlRespItem
	(*BatchGetDownloadUrlResponse)(nil),                                                  // 328: BatchGetDownloadUrlResponse
	(*JSOperateWxDataRequest)(nil),                                                       // 329: JSOperateWxDataRequest
	(*JSAPIBaseResponse)(nil),                                                            // 330: JSAPIBaseResponse
	(*JSOperateWxDataResponse_DebugInfo)(nil),                                            // 331: JSOperateWxDataResponse_DebugInfo
	(*UserAvatarItem)(nil),                                                               // 332: UserAvatarItem
	(*UserAvatarInfo)(nil),                                                               // 333: UserAvatarInfo
	(*AlertPrivacyInfo)(nil),                                                             // 334: AlertPrivacyInfo
	(*JSOperateWxDataResponse)(nil),                                                      // 335: JSOperateWxDataResponse
	(*VerifyPluginRequest)(nil),                                                          // 336: VerifyPluginRequest
	(*VerifyPluginResponse)(nil),                                                         // 337: VerifyPluginResponse
	(*WxaAttrSyncSingleReqInfo)(nil),                                                     // 338: WxaAttrSyncSingleReqInfo
	(*BatchWxaAttrSyncRequest)(nil),                                                      // 339: BatchWxaAttrSyncRequest
	(*WxaAttrSyncSingleRespInfo)(nil),                                                    // 340: WxaAttrSyncSingleRespInfo
	(*BatchWxaAttrSyncResponse)(nil),                                                     // 341: BatchWxaAttrSyncResponse
	(*FinderLiveUserPageRequest)(nil),                                                    // 342: FinderLiveUserPageRequest
	(*FinderLiveUserPageResponse)(nil),                                                   // 343: FinderLiveUserPageResponse
	(*FinderGetAllWindowProductsRequest)(nil),                                            // 344: FinderGetAllWindowProductsRequest
	(*FinderWindowProductInfo_DetailPage)(nil),                                           // 345: FinderWindowProductInfo_DetailPage
	(*FinderWeChatInfo)(nil),                                                             // 346: FinderWeChatInfo
	(*FinderLiveShopCustomerServiceInfo)(nil),                                            // 347: FinderLiveShopCustomerServiceInfo
	(*FinderWindowProductInfo_CouponInfo)(nil),                                           // 348: FinderWindowProductInfo_CouponInfo
	(*FinderWindowProductInfo_ExclusiveInfo)(nil),                                        // 349: FinderWindowProductInfo_ExclusiveInfo
	(*FinderWindowProductInfo_ProductReplayInfo)(nil),                                    // 350: FinderWindowProductInfo_ProductReplayInfo
	(*FinderWindowProductInfo)(nil),                                                      // 351: FinderWindowProductInfo
	(*FinderGetAllWindowProductsResponse)(nil),                                           // 352: FinderGetAllWindowProductsResponse
	(*FinderMVUserPageRequest)(nil),                                                      // 353: FinderMVUserPageRequest
	(*FinderMVUserPageResponse)(nil),                                                     // 354: FinderMVUserPageResponse
	(*FinderMusicUserPageRequest)(nil),                                                   // 355: FinderMusicUserPageRequest
	(*FinderMusicUserPageResponse)(nil),                                                  // 356: FinderMusicUserPageResponse
	(*FinderGetMentionedListRequest)(nil),                                                // 357: FinderGetMentionedListRequest
	(*FinderGetMentionedListResponse)(nil),                                               // 358: FinderGetMentionedListResponse
	(*FinderUserPageRequest)(nil),                                                        // 359: FinderUserPageRequest
	(*FinderUserInfo)(nil),                                                               // 360: FinderUserInfo
	(*OriginalEntranceInfo)(nil),                                                         // 361: OriginalEntranceInfo
	(*PoiGps)(nil),                                                                       // 362: PoiGps
	(*PoiPoint)(nil),                                                                     // 363: PoiPoint
	(*PoiCategories)(nil),                                                                // 364: PoiCategories
	(*PoiAliases)(nil),                                                                   // 365: PoiAliases
	(*PoiBrief)(nil),                                                                     // 366: PoiBrief
	(*PoiIntro)(nil),                                                                     // 367: PoiIntro
	(*PoiRate)(nil),                                                                      // 368: PoiRate
	(*PoiPhoto)(nil),                                                                     // 369: PoiPhoto
	(*PoiDeal)(nil),                                                                      // 370: PoiDeal
	(*PoiCoupon)(nil),                                                                    // 371: PoiCoupon
	(*PoiReviewContent)(nil),                                                             // 372: PoiReviewContent
	(*PoiReview)(nil),                                                                    // 373: PoiReview
	(*PoiBusinessTime)(nil),                                                              // 374: PoiBusinessTime
	(*PoiFormatBusinessTime_Time)(nil),                                                   // 375: PoiFormatBusinessTime_Time
	(*PoiFormatBusinessTime)(nil),                                                        // 376: PoiFormatBusinessTime
	(*PoiBusinessHour)(nil),                                                              // 377: PoiBusinessHour
	(*PoiReservation)(nil),                                                               // 378: PoiReservation
	(*PoiTakeAway)(nil),                                                                  // 379: PoiTakeAway
	(*PoiAppInfo)(nil),                                                                   // 380: PoiAppInfo
	(*PoiSourceInfo)(nil),                                                                // 381: PoiSourceInfo
	(*PoiRecommendMenuInfo)(nil),                                                         // 382: PoiRecommendMenuInfo
	(*PoiQueueInfo)(nil),                                                                 // 383: PoiQueueInfo
	(*PoiTagInfo)(nil),                                                                   // 384: PoiTagInfo
	(*PoiDetailInfo)(nil),                                                                // 385: PoiDetailInfo
	(*SnsPoiDetail)(nil),                                                                 // 386: SnsPoiDetail
	(*FinderUserPagePoi)(nil),                                                            // 387: FinderUserPagePoi
	(*FinderJustWatchControl)(nil),                                                       // 388: FinderJustWatchControl
	(*FinderUserPageResponse)(nil),                                                       // 389: FinderUserPageResponse
	(*FinderGetMsgSessionIdRequest)(nil),                                                 // 390: FinderGetMsgSessionIdRequest
	(*FinderMsgSessionInfo)(nil),                                                         // 391: FinderMsgSessionInfo
	(*FinderGetMsgSessionIdResponse)(nil),                                                // 392: FinderGetMsgSessionIdResponse
	(*FinderContactFansInfo)(nil),                                                        // 393: FinderContactFansInfo
	(*FinderContactCommentInfo)(nil),                                                     // 394: FinderContactCommentInfo
	(*FinderContactCommentLikeInfo)(nil),                                                 // 395: FinderContactCommentLikeInfo
	(*FinderGetContactListReq)(nil),                                                      // 396: FinderGetContactListReq
	(*FinderGetContactListResp)(nil),                                                     // 397: FinderGetContactListResp
	(*WxaRealTimeReportInfo)(nil),                                                        // 398: WxaRealTimeReportInfo
	(*RouteRequest)(nil),                                                                 // 399: RouteRequest
	(*RouteResponse)(nil),                                                                // 400: RouteResponse
	(*BypMsgText)(nil),                                                                   // 401: BypMsgText
	(*BypMsgImage)(nil),                                                                  // 402: BypMsgImage
	(*BypMsgVideo)(nil),                                                                  // 403: BypMsgVideo
	(*BypMsgEmoji)(nil),                                                                  // 404: BypMsgEmoji
	(*BypMsgPack)(nil),                                                                   // 405: BypMsgPack
	(*BypSendRequest)(nil),                                                               // 406: BypSendRequest
	(*BypSendResponse)(nil),                                                              // 407: BypSendResponse
	(*BypSyncKeyPair)(nil),                                                               // 408: BypSyncKeyPair
	(*BypSyncKeyBuff)(nil),                                                               // 409: BypSyncKeyBuff
	(*BypSyncRequest)(nil),                                                               // 410: BypSyncRequest
	(*BypSyncItem)(nil),                                                                  // 411: BypSyncItem
	(*BypSyncResponse)(nil),                                                              // 412: BypSyncResponse
	(*WxaAppRecord)(nil),                                                                 // 413: WxaAppRecord
	(*ReportDeviceInfo)(nil),                                                             // 414: ReportDeviceInfo
	(*WxaAppIDKeyBatchReportRequest)(nil),                                                // 415: WxaAppIDKeyBatchReportRequest
	(*WxaAppIDKeyBatchReportResponse)(nil),                                               // 416: WxaAppIDKeyBatchReportResponse
	(*FinderGetLiveTabsRequest)(nil),                                                     // 417: FinderGetLiveTabsRequest
	(*FinderLiveLbsInfo)(nil),                                                            // 418: FinderLiveLbsInfo
	(*FinderGetLiveTabsResponse)(nil),                                                    // 419: FinderGetLiveTabsResponse
	(*FinderLbsTabTipsInfo)(nil),                                                         // 420: FinderLbsTabTipsInfo
	(*FinderPressureCtrl)(nil),                                                           // 421: FinderPressureCtrl
	(*FinderLbsLiveStreamRequest)(nil),                                                   // 422: FinderLbsLiveStreamRequest
	(*FinderJumpLiveTab)(nil),                                                            // 423: FinderJumpLiveTab
	(*FinderLbsLiveStreamResponse)(nil),                                                  // 424: FinderLbsLiveStreamResponse
	(*GetMidasSdkInfoRequest)(nil),                                                       // 425: GetMidasSdkInfoRequest
	(*GetMidasSdkInfoResponse)(nil),                                                      // 426: GetMidasSdkInfoResponse
	(*FinderGetLiveOnlineMemberReq)(nil),                                                 // 427: FinderGetLiveOnlineMemberReq
	(*FinderLiveGift)(nil),                                                               // 428: FinderLiveGift
	(*FinderLiveRecentRewardOnlineMember_GiftItem)(nil),                                  // 429: FinderLiveRecentRewardOnlineMember_GiftItem
	(*FinderLiveRecentRewardOnlineMember)(nil),                                           // 430: FinderLiveRecentRewardOnlineMember
	(*FinderGetLiveOnlineMemberResp)(nil),                                                // 431: FinderGetLiveOnlineMemberResp
	(*GetInitDataReq)(nil),                                                               // 432: GetInitDataReq
	(*GetInitDataResp)(nil),                                                              // 433: GetInitDataResp
	(*FinderLiveRelatedListReadStat)(nil),                                                // 434: FinderLiveRelatedListReadStat
	(*FinderGetLiveRelatedListRequest)(nil),                                              // 435: FinderGetLiveRelatedListRequest
	(*FinderGetLiveRelatedListResponse)(nil),                                             // 436: FinderGetLiveRelatedListResponse
	(*FinderJoinLiveTabTipsInfo)(nil),                                                    // 437: FinderJoinLiveTabTipsInfo
	(*FinderJoinLiveReq)(nil),                                                            // 438: FinderJoinLiveReq
	(*FinderLiveUserInfo)(nil),                                                           // 439: FinderLiveUserInfo
	(*FinderLiveShopWindowProductItem_ProductPage)(nil),                                  // 440: FinderLiveShopWindowProductItem_ProductPage
	(*FinderLiveShopWindowProductItem)(nil),                                              // 441: FinderLiveShopWindowProductItem
	(*FinderLiveTemplateInfo)(nil),                                                       // 442: FinderLiveTemplateInfo
	(*CheerIconInfo)(nil),                                                                // 443: CheerIconInfo
	(*FinderLiveAdInfo)(nil),                                                             // 444: FinderLiveAdInfo
	(*FinderJoinLiveResp_PromotingInfo)(nil),                                             // 445: FinderJoinLiveResp_PromotingInfo
	(*FinderLiveBackgroundMusicInfo)(nil),                                                // 446: FinderLiveBackgroundMusicInfo
	(*GameTeamUpPaymentSetting_DefaultPaymentItem)(nil),                                  // 447: GameTeamUpPaymentSetting_DefaultPaymentItem
	(*GameTeamUpPaymentSetting)(nil),                                                     // 448: GameTeamUpPaymentSetting
	(*GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo)(nil),                       // 449: GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo
	(*GameLiveJoinTeamSettingInfo)(nil),                                                  // 450: GameLiveJoinTeamSettingInfo
	(*FinderLiveGameInfo)(nil),                                                           // 451: FinderLiveGameInfo
	(*FinderLiveErrorPage)(nil),                                                          // 452: FinderLiveErrorPage
	(*FinderLiveBulletin)(nil),                                                           // 453: FinderLiveBulletin
	(*FinderLiveGameData)(nil),                                                           // 454: FinderLiveGameData
	(*FinderLiveCheerInfo)(nil),                                                          // 455: FinderLiveCheerInfo
	(*GameLiveJumpInfo_FinderLiveWeappJumpInfo)(nil),                                     // 456: GameLiveJumpInfo_FinderLiveWeappJumpInfo
	(*GameLiveJumpInfo_FinderLiveJumpInfo)(nil),                                          // 457: GameLiveJumpInfo_FinderLiveJumpInfo
	(*GameLiveJumpInfo_FinderLiveFineGameInfo)(nil),                                      // 458: GameLiveJumpInfo_FinderLiveFineGameInfo
	(*GameLiveJumpInfo_FinderLiveWxaGameInfo)(nil),                                       // 459: GameLiveJumpInfo_FinderLiveWxaGameInfo
	(*GameLiveJumpInfo)(nil),                                                             // 460: GameLiveJumpInfo
	(*FinderLiveFanClubInfo)(nil),                                                        // 461: FinderLiveFanClubInfo
	(*FinderLivePromoteMsgInfo)(nil),                                                     // 462: FinderLivePromoteMsgInfo
	(*GeneralGameLiveInfo)(nil),                                                          // 463: GeneralGameLiveInfo
	(*FinderLiveAudienceEventInfo)(nil),                                                  // 464: FinderLiveAudienceEventInfo
	(*FinderJoinLiveResp)(nil),                                                           // 465: FinderJoinLiveResp
	(*FinderLiveSyncExtraInfoRequest_SyncReq)(nil),                                       // 466: FinderLiveSyncExtraInfoRequest_SyncReq
	(*FinderLiveSyncExtraInfoRequest)(nil),                                               // 467: FinderLiveSyncExtraInfoRequest
	(*FinderLiveSyncExtraInfoResponse_SyncResp)(nil),                                     // 468: FinderLiveSyncExtraInfoResponse_SyncResp
	(*FinderLiveSyncExtraInfoResponse)(nil),                                              // 469: FinderLiveSyncExtraInfoResponse
	(*FinderGetLiveRewardGiftListRequest)(nil),                                           // 470: FinderGetLiveRewardGiftListRequest
	(*FinderGetLiveRewardGiftListResponse)(nil),                                          // 471: FinderGetLiveRewardGiftListResponse
	(*FinderGetLiveMsgReq)(nil),                                                          // 472: FinderGetLiveMsgReq
	(*FinderLiveMsg)(nil),                                                                // 473: FinderLiveMsg
	(*FinderLiveAppMsgOption_VersionControlInfo)(nil),                                    // 474: FinderLiveAppMsgOption_VersionControlInfo
	(*FinderLiveAppMsgOption)(nil),                                                       // 475: FinderLiveAppMsgOption
	(*FinderLiveAppMsg)(nil),                                                             // 476: FinderLiveAppMsg
	(*FinderGetLiveMsgResp_LiveMsgClientConfig)(nil),                                     // 477: FinderGetLiveMsgResp_LiveMsgClientConfig
	(*FinderGetLiveMsgResp)(nil),                                                         // 478: FinderGetLiveMsgResp
	(*FinderLiveGetShopShelfRequest)(nil),                                                // 479: FinderLiveGetShopShelfRequest
	(*FinderLiveShopWindowItem)(nil),                                                     // 480: FinderLiveShopWindowItem
	(*FinderReplayRecordSetting)(nil),                                                    // 481: FinderReplayRecordSetting
	(*FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo)(nil), // 482: FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo
	(*FinderLiveGetShopShelfResponse_ShopWindowProfileInfo)(nil),                 // 483: FinderLiveGetShopShelfResponse_ShopWindowProfileInfo
	(*FinderLiveGetShopShelfResponse)(nil),                                       // 484: FinderLiveGetShopShelfResponse
	(*FinderMarkReadRequest)(nil),                                                // 485: FinderMarkReadRequest
	(*FinderMarkReadResponse)(nil),                                               // 486: FinderMarkReadResponse
	(*SyncVersionSingleReqInfo)(nil),                                             // 487: SyncVersionSingleReqInfo
	(*PreDownloadCodeReq)(nil),                                                   // 488: PreDownloadCodeReq
	(*WxaSyncBaseCmd)(nil),                                                       // 489: WxaSyncBaseCmd
	(*WxaSyncGetContactCmd)(nil),                                                 // 490: WxaSyncGetContactCmd
	(*WxaSyncGetCodeCmd)(nil),                                                    // 491: WxaSyncGetCodeCmd
	(*WxaSyncIssueContactCmd)(nil),                                               // 492: WxaSyncIssueContactCmd
	(*WxaSyncIssueLaunchCmd)(nil),                                                // 493: WxaSyncIssueLaunchCmd
	(*WxaSyncIssueDecryptKeyCmd)(nil),                                            // 494: WxaSyncIssueDecryptKeyCmd
	(*WxaSyncUpdateVersionCmd)(nil),                                              // 495: WxaSyncUpdateVersionCmd
	(*WxaSyncBlockCgiRequestCmd)(nil),                                            // 496: WxaSyncBlockCgiRequestCmd
	(*WxaSyncPreLaunchCmd)(nil),                                                  // 497: WxaSyncPreLaunchCmd
	(*WxaSyncInvalidCodeCmd)(nil),                                                // 498: WxaSyncInvalidCodeCmd
	(*WxaSyncInvalidContactCmd)(nil),                                             // 499: WxaSyncInvalidContactCmd
	(*WxaSyncPullGlobalConfCmd)(nil),                                             // 500: WxaSyncPullGlobalConfCmd
	(*WxaSyncCmds)(nil),                                                          // 501: WxaSyncCmds
	(*SyncVersionSingleRespInfo)(nil),                                            // 502: SyncVersionSingleRespInfo
	(*PreDownloadCodeResp)(nil),                                                  // 503: PreDownloadCodeResp
	(*FinderPostLiveMsgReportInfo)(nil),                                          // 504: FinderPostLiveMsgReportInfo
	(*FinderPostLiveMsgReq)(nil),                                                 // 505: FinderPostLiveMsgReq
	(*FinderPostLiveMsgResp)(nil),                                                // 506: FinderPostLiveMsgResp
	(*GetWecoinBalanceRequest)(nil),                                              // 507: GetWecoinBalanceRequest
	(*GetWecoinBalanceResponse)(nil),                                             // 508: GetWecoinBalanceResponse
	(*FinderLikeLiveReq)(nil),                                                    // 509: FinderLikeLiveReq
	(*FinderLikeLiveResp)(nil),                                                   // 510: FinderLikeLiveResp
	(*HongBaoReq)(nil),                                                           // 511: HongBaoReq
	(*HongBaoRes)(nil),                                                           // 512: HongBaoRes
	(*GetRedPacketStoryRequest)(nil),                                             // 513: GetRedPacketStoryRequest
	(*RedPacketStoryInfo_StoryDetail)(nil),                                       // 514: RedPacketStoryInfo_StoryDetail
	(*CoverInfoDetail)(nil),                                                      // 515: CoverInfoDetail
	(*RedPacketStoryInfo)(nil),                                                   // 516: RedPacketStoryInfo
	(*GetRedPacketStoryResponse)(nil),                                            // 517: GetRedPacketStoryResponse
	(*ChatRoomWatchMember)(nil),                                                  // 518: ChatRoomWatchMember
	(*RingBackSetting)(nil),                                                      // 519: RingBackSetting
	(*SendMsgTicket)(nil),                                                        // 520: SendMsgTicket
	(*FinderSearchSuggestRequest)(nil),                                           // 521: FinderSearchSuggestRequest
	(*FinderSearchSuggestResponse_Suggestion)(nil),                               // 522: FinderSearchSuggestResponse_Suggestion
	(*FinderSearchSuggestResponse)(nil),                                          // 523: FinderSearchSuggestResponse
	(*FinderSearchRequest)(nil),                                                  // 524: FinderSearchRequest
	(*FinderSearchInfo)(nil),                                                     // 525: FinderSearchInfo
	(*FinderTopicSearchInfo)(nil),                                                // 526: FinderTopicSearchInfo
	(*FinderMusicSearchInfo)(nil),                                                // 527: FinderMusicSearchInfo
	(*FinderSearchSecurityTips)(nil),                                             // 528: FinderSearchSecurityTips
	(*FinderSearchResponse)(nil),                                                 // 529: FinderSearchResponse
	(*FinderInitRequest)(nil),                                                    // 530: FinderInitRequest
	(*FinderTabInfo)(nil),                                                        // 531: FinderTabInfo
	(*WXUserAttr)(nil),                                                           // 532: WXUserAttr
	(*FinderTeenModeTipsConfig)(nil),                                             // 533: FinderTeenModeTipsConfig
	(*FinderTeenModeSetting)(nil),                                                // 534: FinderTeenModeSetting
	(*FinderSlideUpGuideConfig)(nil),                                             // 535: FinderSlideUpGuideConfig
	(*FinderWxPersonalizedSetting)(nil),                                          // 536: FinderWxPersonalizedSetting
	(*FinderRingtoneConfig)(nil),                                                 // 537: FinderRingtoneConfig
	(*FinderInitResponse)(nil),                                                   // 538: FinderInitResponse
	(*FinderLiveSetSockPuppetAttrRequest)(nil),                                   // 539: FinderLiveSetSockPuppetAttrRequest
	(*FinderLiveSetSockPuppetAttrResponse)(nil),                                  // 540: FinderLiveSetSockPuppetAttrResponse
	(*FinderLiveSwitchIdentityRequest)(nil),                                      // 541: FinderLiveSwitchIdentityRequest
	(*FinderLiveSwitchIdentityResponse)(nil),                                     // 542: FinderLiveSwitchIdentityResponse
	(*FinderLiveClearAliasRoleRequest)(nil),                                      // 543: FinderLiveClearAliasRoleRequest
	(*FinderLiveClearAliasRoleResponse)(nil),                                     // 544: FinderLiveClearAliasRoleResponse
	(*FinderOplogRequest)(nil),                                                   // 545: FinderOplogRequest
	(*FinderCmdRet)(nil),                                                         // 546: FinderCmdRet
	(*FinderOplogResponse)(nil),                                                  // 547: FinderOplogResponse
	(*FinderRemoveFansSetting)(nil),                                              // 548: FinderRemoveFansSetting
	(*FinderModBlockPosterSetting)(nil),                                          // 549: FinderModBlockPosterSetting
	(*FinderModProfileStickySetting)(nil),                                        // 550: FinderModProfileStickySetting
	(*FinderModMsgSessionMuteSetting)(nil),                                       // 551: FinderModMsgSessionMuteSetting
	(*FinderLiveAppMsgLocationInfo)(nil),                                         // 552: FinderLiveAppMsgLocationInfo
	(*FinderPostLiveAppMsgRequest)(nil),                                          // 553: FinderPostLiveAppMsgRequest
	(*FinderPostLiveAppMsgResponse)(nil),                                         // 554: FinderPostLiveAppMsgResponse
	(*AddBypMsg)(nil),                                                            // 555: AddBypMsg
	(*GetOpenIMKefuContactContext)(nil),                                          // 556: GetOpenIMKefuContactContext
	(*GetOpenIMKefuContactClientStatus)(nil),                                     // 557: GetOpenIMKefuContactClientStatus
	(*GetOpenIMKefuContactReq)(nil),                                              // 558: GetOpenIMKefuContactReq
	(*LocationOption)(nil),                                                       // 559: LocationOption
	(*OpenIMKefuPersonalSetting)(nil),                                            // 560: OpenIMKefuPersonalSetting
	(*OpenIMContactCustomInfo)(nil),                                              // 561: OpenIMContactCustomInfo
	(*OpenIMKefuContact)(nil),                                                    // 562: OpenIMKefuContact
	(*OpenIMKefuNotifyCtx)(nil),                                                  // 563: OpenIMKefuNotifyCtx
	(*AddOpenIMKefuContactContext)(nil),                                          // 564: AddOpenIMKefuContactContext
	(*GetOpenIMKefuContactResp)(nil),                                             // 565: GetOpenIMKefuContactResp
	(*AddOpenIMKefuContactReq)(nil),                                              // 566: AddOpenIMKefuContactReq
	(*AddOpenIMKefuContactResp)(nil),                                             // 567: AddOpenIMKefuContactResp
	(*BaseResponse)(nil),                                                         // 568: BaseResponse
	(*BaseRequest)(nil),                                                          // 569: BaseRequest
	(*SKBuiltinBufferT)(nil),                                                     // 570: SKBuiltinBuffer_t
	(*CmdList)(nil),                                                              // 571: CmdList
	(*WxaExternalInfo)(nil),                                                      // 572: WxaExternalInfo
	(*ScopeInfo)(nil),                                                            // 573: ScopeInfo
	(*MidasSdkInfo)(nil),                                                         // 574: MidasSdkInfo
	(*AddMsg)(nil),                                                               // 575: AddMsg
}
var file_Finder_proto_depIdxs = []int32{
	0,   // 0: ResourceTypeReq.subTypeVector:type_name -> ResourceReq
	1,   // 1: CheckResUpdateRequest.resId:type_name -> ResourceTypeReq
	3,   // 2: ResourceMeta.eccmd5SignatureList:type_name -> SignatureInfo
	4,   // 3: Resource.info:type_name -> ResourceMeta
	5,   // 4: Resource.key:type_name -> ResourceKey
	6,   // 5: ResourceType.resources:type_name -> Resource
	568, // 6: CheckResUpdateResponse.baseResponse:type_name -> BaseResponse
	7,   // 7: CheckResUpdateResponse.res:type_name -> ResourceType
	34,  // 8: FinderAuthInfo.authGuarantor:type_name -> FinderContact
	14,  // 9: FinderContactLiveInfo.micSetting:type_name -> MicSetting
	15,  // 10: FinderContactLiveInfo.lotterySetting:type_name -> LiveLotterySetting
	18,  // 11: FinderBizInfo_BizInfo.authInfo:type_name -> FinderBizInfo_BizAuthInfo
	19,  // 12: FinderBizInfo.info:type_name -> FinderBizInfo_BizInfo
	20,  // 13: FinderBizInfo.miniapps:type_name -> FinderMiniAppInfo
	21,  // 14: FinderBindInfo.bizInfo:type_name -> FinderBizInfo
	22,  // 15: FinderBindInfo.wecomInfo:type_name -> FinderWecomInfo
	23,  // 16: FinderBindInfo.qqmusicInfo:type_name -> FinderQQMusicInfo
	21,  // 17: FinderBindInfo.profileBizInfo:type_name -> FinderBizInfo
	24,  // 18: FinderBindInfo.stickerInfo:type_name -> FinderSticker
	26,  // 19: AchievementInfo.gameAchievements:type_name -> AchievementInfo_GameAchievement
	28,  // 20: FinderJumpInfo.miniAppInfo:type_name -> FinderJumpInfo_MiniAppInfo
	29,  // 21: FinderJumpInfo.html5Info:type_name -> FinderJumpInfo_Html5Info
	30,  // 22: FinderJumpInfo.nativeInfo:type_name -> FinderJumpInfo_NativeInfo
	31,  // 23: FinderJumpInfo.schemaInfo:type_name -> FinderJumpInfo_SchemaInfo
	32,  // 24: FinderJumpInfo.redDot:type_name -> FinderJumpInfoRedDot
	9,   // 25: FinderContact.authInfo:type_name -> FinderAuthInfo
	10,  // 26: FinderContact.extInfo:type_name -> FinderContactExtInfo
	11,  // 27: FinderContact.originalInfo:type_name -> FinderOriginalInfo
	12,  // 28: FinderContact.msgInfo:type_name -> FinderContactMsgInfo
	13,  // 29: FinderContact.liveNoticeInfo:type_name -> FinderLiveNoticeInfo
	16,  // 30: FinderContact.liveInfo:type_name -> FinderContactLiveInfo
	17,  // 31: FinderContact.guestInfo:type_name -> FinderGuestInfo
	25,  // 32: FinderContact.bindInfo:type_name -> FinderBindInfo
	27,  // 33: FinderContact.archievementInfo:type_name -> AchievementInfo
	33,  // 34: FinderContact.menu:type_name -> FinderJumpInfo
	35,  // 35: FinderBaseRequest.ctxInfo:type_name -> ClientContextInfo
	36,  // 36: FinderBaseRequest.objectBaseInfos:type_name -> FinderObjectBaseInfo
	40,  // 37: AttributeTitle_Content.subContent:type_name -> AttributeTitle_SubContent
	41,  // 38: AttributeTitle.content:type_name -> AttributeTitle_Content
	38,  // 39: FinderTipsShowInfo.clientStatsInfo:type_name -> ClientStatsInfo
	39,  // 40: FinderTipsShowInfo.iconConfig:type_name -> FinderTipsShowInfo_IconConfig
	42,  // 41: FinderTipsShowInfo.attributeTitle:type_name -> AttributeTitle
	43,  // 42: FinderRedDotCtrlInfo.showInfos:type_name -> FinderTipsShowInfo
	569, // 43: FinderSyncRequest.baseRequest:type_name -> BaseRequest
	570, // 44: FinderSyncRequest.keyBuf:type_name -> SKBuiltinBuffer_t
	34,  // 45: FinderSyncRequest.contacts:type_name -> FinderContact
	34,  // 46: FinderSyncRequest.self:type_name -> FinderContact
	37,  // 47: FinderSyncRequest.finderBasereq:type_name -> FinderBaseRequest
	44,  // 48: FinderSyncRequest.ctrlInfoList:type_name -> FinderRedDotCtrlInfo
	44,  // 49: FinderSyncRequest.nearbyCtrlInfoList:type_name -> FinderRedDotCtrlInfo
	45,  // 50: FinderSyncRequest.clientInfo:type_name -> FinderSyncClientInfo
	46,  // 51: FinderSyncRequest.clientStatus:type_name -> FinderSyncClientStatus
	568, // 52: FinderSyncResponse.baseResponse:type_name -> BaseResponse
	571, // 53: FinderSyncResponse.cmdListDiscarded:type_name -> CmdList
	570, // 54: FinderSyncResponse.keyBuf:type_name -> SKBuiltinBuffer_t
	34,  // 55: FinderSyncResponse.contacts:type_name -> FinderContact
	34,  // 56: FinderSyncResponse.self:type_name -> FinderContact
	48,  // 57: FinderSyncResponse.cmdList:type_name -> FinderCmdItem
	49,  // 58: FinderSyncResponse.checkExpireInfo:type_name -> FinderCheckExpireInfo
	51,  // 59: Stats.bitFeature:type_name -> BitFeature
	52,  // 60: Stats.valFeature:type_name -> ValFeature
	53,  // 61: Stats.orgVal:type_name -> OriginVal
	55,  // 62: FinderDownloadInfo.waitDetails:type_name -> FinderWaitDetail
	56,  // 63: FinderDownloadInfo.downloadSpeed:type_name -> DownloadSpeed
	57,  // 64: FinderClientStatus.lastVideosDownloadInfo:type_name -> FinderDownloadInfo
	58,  // 65: FinderClientStatus.finderFluencyInfo:type_name -> FinderFluencyInfo
	56,  // 66: FinderClientStatus.recentFinderDownloadSpeed:type_name -> DownloadSpeed
	56,  // 67: FinderClientStatus.recentWechatDownloadSpeed:type_name -> DownloadSpeed
	57,  // 68: FinderClientStatus.lastPreloadDownloadInfo:type_name -> FinderDownloadInfo
	60,  // 69: MegaVideoDownloadInfo.waitDetails:type_name -> MegaVideoWaitDetail
	61,  // 70: MegaVideoClientStatus.lastVideosDownloadInfo:type_name -> MegaVideoDownloadInfo
	62,  // 71: MegaVideoClientStatus.finderFluencyInfo:type_name -> MegaVideoFluencyInfo
	569, // 72: FinderStatsReportRequest.baseRequest:type_name -> BaseRequest
	54,  // 73: FinderStatsReportRequest.stats:type_name -> Stats
	37,  // 74: FinderStatsReportRequest.finderBasereq:type_name -> FinderBaseRequest
	59,  // 75: FinderStatsReportRequest.status:type_name -> FinderClientStatus
	63,  // 76: FinderStatsReportRequest.videoStatus:type_name -> MegaVideoClientStatus
	568, // 77: FinderStatsReportResponse.baseResponse:type_name -> BaseResponse
	569, // 78: FinderExtStatsReportRequest.baseRequest:type_name -> BaseRequest
	66,  // 79: FinderExtStatsReportRequest.extStats:type_name -> ExtStats
	37,  // 80: FinderExtStatsReportRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 81: FinderExtStatsReportResponse.baseResponse:type_name -> BaseResponse
	71,  // 82: FinderLiveQoSInfo.waitDetails:type_name -> FinderLiveWaitDetail
	72,  // 83: FinderLiveClientStatus.currentLiveQosInfo:type_name -> FinderLiveQoSInfo
	72,  // 84: FinderLiveClientStatus.lastLiveQosInfo:type_name -> FinderLiveQoSInfo
	75,  // 85: FinderStreamTopObjectItem.objects:type_name -> FinderStreamTopObjectItem_ObjectItem
	79,  // 86: FinderLiveBeforeJoinLiveRoomStatus.networkStatus:type_name -> FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus
	569, // 87: FinderStreamRequest.baseRequest:type_name -> BaseRequest
	37,  // 88: FinderStreamRequest.finderBasereq:type_name -> FinderBaseRequest
	59,  // 89: FinderStreamRequest.status:type_name -> FinderClientStatus
	69,  // 90: FinderStreamRequest.readStats:type_name -> MarkReadStat
	54,  // 91: FinderStreamRequest.stats:type_name -> Stats
	70,  // 92: FinderStreamRequest.markUnreadObjectList:type_name -> FinderUnreadItem
	73,  // 93: FinderStreamRequest.liveStatus:type_name -> FinderLiveClientStatus
	74,  // 94: FinderStreamRequest.finderSwitch:type_name -> FinderSwitch
	76,  // 95: FinderStreamRequest.topObjects:type_name -> FinderStreamTopObjectItem
	77,  // 96: FinderStreamRequest.commByPass:type_name -> FinderCommByPass
	78,  // 97: FinderStreamRequest.sceneStatus:type_name -> FinderStreamSceneStatus
	80,  // 98: FinderStreamRequest.beforeJoinLiveRoomStatus:type_name -> FinderLiveBeforeJoinLiveRoomStatus
	81,  // 99: FinderStreamRequest.relatedInfo:type_name -> FinderStreamRelatedInfo
	85,  // 100: FinderLiveCdnTransInfo.cdnTransInfo:type_name -> CdnTransInfo
	87,  // 101: LiveSdkVideoParams.micAnchor11:type_name -> VideoPKParams
	87,  // 102: LiveSdkVideoParams.micAudience11:type_name -> VideoPKParams
	87,  // 103: LiveSdkVideoParams.micAudience12:type_name -> VideoPKParams
	86,  // 104: FinderLiveMediaSpec.cdnTransInfo:type_name -> FinderLiveCdnTransInfo
	88,  // 105: FinderLiveMediaSpec.anchorVideoParams:type_name -> LiveSdkVideoParams
	90,  // 106: FinderHlsMediaSpecList.hlsList:type_name -> FinderHlsMediaSpec
	83,  // 107: FinderHdrMediaSpecList.hdrList:type_name -> FinderMediaSpec
	83,  // 108: FinderMedia.spec:type_name -> FinderMediaSpec
	84,  // 109: FinderMedia.codecInfo:type_name -> FinderMediaCodecInfo
	89,  // 110: FinderMedia.liveSpec:type_name -> FinderLiveMediaSpec
	91,  // 111: FinderMedia.hlsSpec:type_name -> FinderHlsMediaSpecList
	92,  // 112: FinderMedia.halfRect:type_name -> FinderHalfRect
	93,  // 113: FinderMedia.hdrSpec:type_name -> FinderHdrMediaSpecList
	101, // 114: FinderMentionedMusic.musicInfo:type_name -> FinderMusicInfo
	101, // 115: FinderObjectBGMInfo.musicInfo:type_name -> FinderMusicInfo
	107, // 116: FinderObjectEventDesc.wordingInfo:type_name -> FinderEventWordingInfo
	109, // 117: FinderMVInfo_FinderMVTrack.clientDraftInfo:type_name -> FinderMVInfo_ClientDraftInfo
	34,  // 118: FinderMVInfo_FinderMVTrack.refObjectContact:type_name -> FinderContact
	110, // 119: FinderMVInfo_FinderMVTrack.trackReportInfo:type_name -> FinderMVInfo_FinderMVTrackReportInfo
	112, // 120: FinderMVInfo_FinderMVSongInfo.operationInfo:type_name -> FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo
	111, // 121: FinderMVInfo.orderedTrackList:type_name -> FinderMVInfo_FinderMVTrack
	113, // 122: FinderMVInfo.songInfo:type_name -> FinderMVInfo_FinderMVSongInfo
	114, // 123: FinderMVInfo.originalInfo:type_name -> FinderMVInfo_FinderMVOriginalInfo
	111, // 124: FinderMVInfo.orderedTrackListFlexClip:type_name -> FinderMVInfo_FinderMVTrack
	116, // 125: FinderTopicHashTagInfo.list:type_name -> FinderTopicHashTagInfo_TopicHashTagInfo
	34,  // 126: FinderEventDescriptionContact.contact:type_name -> FinderContact
	34,  // 127: FinderEventInfo.contact:type_name -> FinderContact
	33,  // 128: FinderEventInfo.jumpInfo:type_name -> FinderJumpInfo
	117, // 129: FinderEventInfo.hashTagInfo:type_name -> FinderTopicHashTagInfo
	107, // 130: FinderEventInfo.wordingInfo:type_name -> FinderEventWordingInfo
	33,  // 131: FinderEventInfo.descriptionJumpInfo:type_name -> FinderJumpInfo
	118, // 132: FinderEventInfo.descriptionContactInfo:type_name -> FinderEventDescriptionContact
	33,  // 133: FinderEventInfo.postJumpList:type_name -> FinderJumpInfo
	119, // 134: FinderEventInfo.tmplVersionInfo:type_name -> FinderEventInfo_TemplateVersionInfo
	120, // 135: FinderClientDraftExtInfo.eventInfo:type_name -> FinderEventInfo
	122, // 136: FinderVideoTemplateInfo.versionInfo:type_name -> FinderVideoTemplateInfo_VersionInfo
	94,  // 137: FinderObjectDesc.media:type_name -> FinderMedia
	95,  // 138: FinderObjectDesc.extra:type_name -> FinderMediaExtra
	96,  // 139: FinderObjectDesc.location:type_name -> FinderLocation
	97,  // 140: FinderObjectDesc.extReading:type_name -> FinderExtendedReading
	98,  // 141: FinderObjectDesc.topic:type_name -> FinderTopic
	99,  // 142: FinderObjectDesc.mentionedUser:type_name -> FinderMentionedUser
	100, // 143: FinderObjectDesc.liveDesc:type_name -> FinderLiveDesc
	96,  // 144: FinderObjectDesc.feedLocation:type_name -> FinderLocation
	102, // 145: FinderObjectDesc.mentionedMusics:type_name -> FinderMentionedMusic
	103, // 146: FinderObjectDesc.longVideoDesc:type_name -> FinderLongVideoDesc
	101, // 147: FinderObjectDesc.imgFeedBgmInfo:type_name -> FinderMusicInfo
	104, // 148: FinderObjectDesc.followPostInfo:type_name -> FinderObjectBGMInfo
	105, // 149: FinderObjectDesc.fromApp:type_name -> FinderFromAppInfo
	106, // 150: FinderObjectDesc.tmplInfo:type_name -> FinderTemplateInfo
	108, // 151: FinderObjectDesc.event:type_name -> FinderObjectEventDesc
	115, // 152: FinderObjectDesc.mvInfo:type_name -> FinderMVInfo
	121, // 153: FinderObjectDesc.clientDraftExtInfo:type_name -> FinderClientDraftExtInfo
	101, // 154: FinderObjectDesc.musicInfo:type_name -> FinderMusicInfo
	123, // 155: FinderObjectDesc.videoTmplInfo:type_name -> FinderVideoTemplateInfo
	124, // 156: FinderObjectDesc.generalReportInfo:type_name -> FinderGeneralReportInfo
	125, // 157: FinderObjectDesc.originalsoundInfo:type_name -> OriginalSoundInfo
	127, // 158: FinderCommentInfo.levelTwoComment:type_name -> FinderCommentInfo
	12,  // 159: FinderCommentInfo.msgInfo:type_name -> FinderContactMsgInfo
	34,  // 160: FinderCommentInfo.authorContact:type_name -> FinderContact
	34,  // 161: FinderCommentInfo.replyContact:type_name -> FinderContact
	130, // 162: FinderLiveTabInfo.subTabList:type_name -> FinderLiveTabInfo
	34,  // 163: FinderLiveContact.contact:type_name -> FinderContact
	135, // 164: FinderLiveContact.badgeInfo:type_name -> FinderLiveBadgeInfo
	135, // 165: FinderLiveContact.badgeInfos:type_name -> FinderLiveBadgeInfo
	136, // 166: FinderLiveMicAudienceInfo.micContact:type_name -> FinderLiveContact
	136, // 167: FinderLiveMicPkInfo.micContact:type_name -> FinderLiveContact
	138, // 168: FinderLiveMicPkInfo.micAudienceList:type_name -> FinderLiveMicAudienceInfo
	140, // 169: FinderLiveBattleInfo.playerInfo:type_name -> FinderLiveBattleInfo_PlayerInfo
	136, // 170: FinderLiveMicInfo.applyContact:type_name -> FinderLiveContact
	136, // 171: FinderLiveMicInfo.acceptLiveContact:type_name -> FinderLiveContact
	137, // 172: FinderLiveMicInfo.micLiveRoomData:type_name -> FinderLiveRoomData
	138, // 173: FinderLiveMicInfo.micAudienceList:type_name -> FinderLiveMicAudienceInfo
	139, // 174: FinderLiveMicInfo.micPkInfo:type_name -> FinderLiveMicPkInfo
	141, // 175: FinderLiveMicInfo.battleInfo:type_name -> FinderLiveBattleInfo
	145, // 176: FinderLiveEventInfo.relatedEvents:type_name -> RelatedEventInfo
	128, // 177: FinderLiveInfo.liveExtInfo:type_name -> FinderLiveExtInfo
	89,  // 178: FinderLiveInfo.liveSpec:type_name -> FinderLiveMediaSpec
	129, // 179: FinderLiveInfo.liveSdkChannelInfo:type_name -> FinderLiveSdkChannelInfo
	130, // 180: FinderLiveInfo.tabInfo:type_name -> FinderLiveTabInfo
	131, // 181: FinderLiveInfo.liveSdkInfo:type_name -> LiveSdkInfo
	132, // 182: FinderLiveInfo.layerShowInfo:type_name -> FinderLiveLayerShowInfo
	133, // 183: FinderLiveInfo.trialUrlOption:type_name -> FinderLiveUrlOption
	134, // 184: FinderLiveInfo.purchaseInfo:type_name -> FinderLivePurchaseInfo
	142, // 185: FinderLiveInfo.liveMicInfo:type_name -> FinderLiveMicInfo
	143, // 186: FinderLiveInfo.bizInfo:type_name -> FinderBizUserInfo
	144, // 187: FinderLiveInfo.replayInfo:type_name -> FinderLiveReplayInfo
	146, // 188: FinderLiveInfo.eventInfo:type_name -> FinderLiveEventInfo
	193, // 189: FinderFoldedLayout.objects:type_name -> FinderObject
	149, // 190: FinderVideoDesc.media:type_name -> FinderVideoMedia
	150, // 191: FinderVideo.desc:type_name -> FinderVideoDesc
	152, // 192: FinderObjectHotTopicList.topics:type_name -> FinderObjectHotTopic
	83,  // 193: FinderMediaSpecList.specList:type_name -> FinderMediaSpec
	154, // 194: MegaVideoMedia.spec:type_name -> MegaVideoMediaSpec
	91,  // 195: MegaVideoMedia.hlsSpec:type_name -> FinderHlsMediaSpecList
	155, // 196: MegaVideoMedia.mediaSpec:type_name -> FinderMediaSpecList
	92,  // 197: MegaVideoMedia.halfRect:type_name -> FinderHalfRect
	93,  // 198: MegaVideoMedia.hdrSpec:type_name -> FinderHdrMediaSpecList
	156, // 199: MegaVideoDesc.media:type_name -> MegaVideoMedia
	157, // 200: MegaVideoDesc.location:type_name -> MegaVideoLocation
	158, // 201: MegaVideoDesc.extReading:type_name -> MegaVideoExtendedReading
	157, // 202: MegaVideoDesc.feedLocation:type_name -> MegaVideoLocation
	159, // 203: MegaVideo.desc:type_name -> MegaVideoDesc
	160, // 204: MegaVideo.finder:type_name -> MegaVideoFinderBusiness
	161, // 205: FinderVideoAttachment.video:type_name -> MegaVideo
	33,  // 206: FinderJumpInfoAttachment.jumpInfo:type_name -> FinderJumpInfo
	162, // 207: FinderAttachment.video:type_name -> FinderVideoAttachment
	163, // 208: FinderAttachment.miniApp:type_name -> FinderMiniAppAttachment
	164, // 209: FinderAttachment.jumpInfo:type_name -> FinderJumpInfoAttachment
	165, // 210: FinderAttachmentList.attachments:type_name -> FinderAttachment
	34,  // 211: FinderSnsShareInfo.shareList:type_name -> FinderContact
	169, // 212: ObjectAdItem.adDesc:type_name -> ObjectAdDesc
	170, // 213: ObjectAdItem.adH5:type_name -> ObjectAdContentH5
	171, // 214: ObjectAdItem.adMiniApp:type_name -> ObjectAdContentMiniApp
	172, // 215: ObjectAdItem.adLeadLink:type_name -> ObjectAdContentLeadLink
	169, // 216: FinderObjectAdInfo.adDesc:type_name -> ObjectAdDesc
	170, // 217: FinderObjectAdInfo.adH5:type_name -> ObjectAdContentH5
	171, // 218: FinderObjectAdInfo.adMiniApp:type_name -> ObjectAdContentMiniApp
	172, // 219: FinderObjectAdInfo.adLeadLink:type_name -> ObjectAdContentLeadLink
	173, // 220: FinderObjectAdInfo.adItems:type_name -> ObjectAdItem
	120, // 221: FinderSearchHotWord.eventInfo:type_name -> FinderEventInfo
	175, // 222: FinderObjectHotWordInfo.objectHotWord:type_name -> FinderSearchHotWord
	175, // 223: FinderObjectHotWordInfo.hotWordList:type_name -> FinderSearchHotWord
	33,  // 224: FinderObjectAdvertisementInfo.jumpInfo:type_name -> FinderJumpInfo
	33,  // 225: FinderObjectAdvertisementInfo.accountJumpInfo:type_name -> FinderJumpInfo
	183, // 226: FinderObjectExtend.collectionInfo:type_name -> FinderCollectionInfo
	181, // 227: FinderObjectExtend.favInfo:type_name -> FinderObjectFavInfo
	184, // 228: FinderObjectExtend.preloadUerpage:type_name -> FinderPreloadUserpageInfo
	185, // 229: FinderObjectExtend.advertisementInfo:type_name -> FinderObjectAdvertisementInfo
	182, // 230: FinderObjectExtend.finderForwardInfo:type_name -> FinderForwardInfo
	33,  // 231: FinderPromotionJumpInfo.jumpInfo:type_name -> FinderJumpInfo
	126, // 232: FinderObject.objectDesc:type_name -> FinderObjectDesc
	127, // 233: FinderObject.likeList:type_name -> FinderCommentInfo
	127, // 234: FinderObject.commentList:type_name -> FinderCommentInfo
	34,  // 235: FinderObject.contact:type_name -> FinderContact
	34,  // 236: FinderObject.refObjectContact:type_name -> FinderContact
	34,  // 237: FinderObject.mentionedUserContact:type_name -> FinderContact
	147, // 238: FinderObject.liveInfo:type_name -> FinderLiveInfo
	148, // 239: FinderObject.foldedLayout:type_name -> FinderFoldedLayout
	151, // 240: FinderObject.longVideoNoneed:type_name -> FinderVideo
	153, // 241: FinderObject.hotTopics:type_name -> FinderObjectHotTopicList
	166, // 242: FinderObject.attachmentList:type_name -> FinderAttachmentList
	167, // 243: FinderObject.snsShareInfo:type_name -> FinderSnsShareInfo
	168, // 244: FinderObject.webInfo:type_name -> FinderObjectWebInfo
	174, // 245: FinderObject.adInfo:type_name -> FinderObjectAdInfo
	127, // 246: FinderObject.friendCommentList:type_name -> FinderCommentInfo
	176, // 247: FinderObject.hotWordInfo:type_name -> FinderObjectHotWordInfo
	177, // 248: FinderObject.tipsInfo:type_name -> FinderTipsInfo
	178, // 249: FinderObject.clientLocalBuffer:type_name -> FinderObjectClientLocalBuffer
	179, // 250: FinderObject.publisherInfo:type_name -> FinderPublisherInfo
	180, // 251: FinderObject.placeHolderInfo:type_name -> FinderObjectPlaceHolderInfo
	187, // 252: FinderObject.recommendLabel:type_name -> FinderRecommendLabel
	34,  // 253: FinderObject.originalContact:type_name -> FinderContact
	188, // 254: FinderObject.musicRealtimeInfo:type_name -> FinderMusicRealtimeInfo
	189, // 255: FinderObject.playhistoryInfo:type_name -> FinderPlayHistoryInfo
	190, // 256: FinderObject.finderPromotionJumpinfo:type_name -> FinderPromotionJumpInfo
	191, // 257: FinderObject.flowCardRecommandReason:type_name -> FinderFlowCardRecommendReason
	192, // 258: FinderObject.ipRegionInfo:type_name -> FinderIpRegionInfo
	186, // 259: FinderObject.objectExtend:type_name -> FinderObjectExtend
	194, // 260: FinderPreloadInfo.globalInfo:type_name -> FinderPreloadGlobalInfo
	195, // 261: FinderPreloadInfo.objectInfo:type_name -> FinderPreloadObjectInfo
	196, // 262: FinderPreloadInfo.megavideoInfo:type_name -> MegaVideoFinderPreloadObjectInfo
	34,  // 263: FinderContactRecommendItem.contact:type_name -> FinderContact
	198, // 264: FinderContactRecommend.items:type_name -> FinderContactRecommendItem
	34,  // 265: FinderTopicBgmInfo.contact:type_name -> FinderContact
	101, // 266: FinderTopicBgmInfo.musicInfo:type_name -> FinderMusicInfo
	101, // 267: FinderTopicInfo.musicInfo:type_name -> FinderMusicInfo
	200, // 268: FinderTopicInfo.followFeedInfo:type_name -> FinderTopicBgmInfo
	106, // 269: FinderTopicInfo.tmplInfo:type_name -> FinderTemplateInfo
	120, // 270: FinderTopicInfo.event:type_name -> FinderEventInfo
	201, // 271: FinderTopicRecommend.topicList:type_name -> FinderTopicInfo
	203, // 272: FinderCategoryRecommend.categoryInfo:type_name -> FinderCategoryInfo
	201, // 273: RelatedTopic.topicList:type_name -> FinderTopicInfo
	569, // 274: FinderGetTopicListRequest.baseRequest:type_name -> BaseRequest
	37,  // 275: FinderGetTopicListRequest.finderBasereq:type_name -> FinderBaseRequest
	207, // 276: FinderGetTopicListRequest.topicFilter:type_name -> TopicFilter
	233, // 277: FinderGetTopicListRequest.sectionInfo:type_name -> FinderSectionInfo
	59,  // 278: FinderGetTopicListRequest.status:type_name -> FinderClientStatus
	568, // 279: FinderGetTopicListResponse.baseResponse:type_name -> BaseResponse
	193, // 280: FinderGetTopicListResponse.object:type_name -> FinderObject
	201, // 281: FinderGetTopicListResponse.topic:type_name -> FinderTopicInfo
	205, // 282: FinderGetTopicListResponse.relatedTopic:type_name -> RelatedTopic
	206, // 283: FinderGetTopicListResponse.subTitle:type_name -> PoiTopicSubTitle
	197, // 284: FinderGetTopicListResponse.preloadInfo:type_name -> FinderPreloadInfo
	54,  // 285: FinderGetRelatedEntranceInfo.stats:type_name -> Stats
	569, // 286: FinderGetRelatedListReq.baseRequest:type_name -> BaseRequest
	37,  // 287: FinderGetRelatedListReq.finderBasereq:type_name -> FinderBaseRequest
	233, // 288: FinderGetRelatedListReq.sectionInfo:type_name -> FinderSectionInfo
	203, // 289: FinderGetRelatedListReq.catetoryFilter:type_name -> FinderCategoryInfo
	59,  // 290: FinderGetRelatedListReq.status:type_name -> FinderClientStatus
	210, // 291: FinderGetRelatedListReq.relatedEntranceInfo:type_name -> FinderGetRelatedEntranceInfo
	211, // 292: FinderGetRelatedListReq.switchColumnInfo:type_name -> FinderGetRelatedListReq_SwitchColumnInfo
	212, // 293: FinderGetRelatedListReq.getColumnFeedInfo:type_name -> FinderGetRelatedListReq_GetColumnFeedInfo
	54,  // 294: FinderGetRelatedListReq.stats:type_name -> Stats
	213, // 295: FinderGetRelatedListReq.getRelatedColumnTopicInfo:type_name -> FinderGetRelatedListReq_GetRelatedColumnTopicInfo
	73,  // 296: FinderGetRelatedListReq.liveStatus:type_name -> FinderLiveClientStatus
	80,  // 297: FinderGetRelatedListReq.beforeJoinLiveRoomStatus:type_name -> FinderLiveBeforeJoinLiveRoomStatus
	82,  // 298: FinderStreamCardActionInfo.streamReq:type_name -> FinderStreamRequest
	214, // 299: FinderStreamCardActionInfo.getRelatedListReq:type_name -> FinderGetRelatedListReq
	215, // 300: FinderStreamTxtCard.linkActionInfo:type_name -> FinderStreamCardActionInfo
	193, // 301: FinderStreamCard.object:type_name -> FinderObject
	216, // 302: FinderStreamCard.innerStreamEndTxtCard:type_name -> FinderStreamTxtCard
	215, // 303: FinderStreamCard.linkActionInfo:type_name -> FinderStreamCardActionInfo
	215, // 304: FinderStreamCard.objectActionInfo:type_name -> FinderStreamCardActionInfo
	215, // 305: FinderStreamCard.endActionInfo:type_name -> FinderStreamCardActionInfo
	215, // 306: FinderStreamCard.fetchContentActionInfo:type_name -> FinderStreamCardActionInfo
	215, // 307: FinderStreamCard.refreshActionInfo:type_name -> FinderStreamCardActionInfo
	215, // 308: FinderStreamCard.continueAtTheEndActionInfo:type_name -> FinderStreamCardActionInfo
	193, // 309: FinderStreamJumpInfo.object:type_name -> FinderObject
	219, // 310: FinderStreamDivider.jumpInfo:type_name -> FinderStreamJumpInfo
	13,  // 311: FinderLiveStreamNoticeCard.noticeInfo:type_name -> FinderLiveNoticeInfo
	34,  // 312: FinderLiveStreamNoticeCard.contact:type_name -> FinderContact
	130, // 313: FinderLiveStreamJumper.liveTab:type_name -> FinderLiveTabInfo
	33,  // 314: FinderLiveRelatedExtInfo.jumpInfo:type_name -> FinderJumpInfo
	193, // 315: FinderLiveStreamCard.object:type_name -> FinderObject
	221, // 316: FinderLiveStreamCard.noticeInfo:type_name -> FinderLiveStreamNoticeCard
	193, // 317: FinderLiveStreamCard.relateLiving:type_name -> FinderObject
	222, // 318: FinderLiveStreamCard.jumper:type_name -> FinderLiveStreamJumper
	223, // 319: FinderLiveStreamCard.bannerExtinfo:type_name -> FinderBannerExtInfo
	224, // 320: FinderLiveStreamCard.relatedExtInfo:type_name -> FinderLiveRelatedExtInfo
	225, // 321: FinderLiveStreamCard.adExtinfo:type_name -> FinderAdExtInfo
	220, // 322: FinderStreamLayoutInfo.divider:type_name -> FinderStreamDivider
	217, // 323: FinderStreamLayoutInfo.card:type_name -> FinderStreamCard
	226, // 324: FinderStreamLayoutInfo.liveCard:type_name -> FinderLiveStreamCard
	12,  // 325: FinderLikeInfo.msgInfo:type_name -> FinderContactMsgInfo
	228, // 326: FinderGuideBarItem.likeList:type_name -> FinderLikeInfo
	229, // 327: FinderBarItem.guideBar:type_name -> FinderGuideBarItem
	230, // 328: FinderBarInfo.barList:type_name -> FinderBarItem
	568, // 329: FinderGetRelatedListResp.baseResponse:type_name -> BaseResponse
	193, // 330: FinderGetRelatedListResp.object:type_name -> FinderObject
	197, // 331: FinderGetRelatedListResp.preloadInfo:type_name -> FinderPreloadInfo
	217, // 332: FinderGetRelatedListResp.card:type_name -> FinderStreamCard
	216, // 333: FinderGetRelatedListResp.txtCard:type_name -> FinderStreamTxtCard
	218, // 334: FinderGetRelatedListResp.livePreloadInfo:type_name -> FinderLivePreloadInfo
	227, // 335: FinderGetRelatedListResp.layoutInfo:type_name -> FinderStreamLayoutInfo
	231, // 336: FinderGetRelatedListResp.barInfo:type_name -> FinderBarInfo
	209, // 337: FinderSectionInfo.topicResp:type_name -> FinderGetTopicListResponse
	235, // 338: FinderSectionInfo.streamResp:type_name -> FinderStreamResponse
	232, // 339: FinderSectionInfo.relatedResp:type_name -> FinderGetRelatedListResp
	568, // 340: FinderStreamResponse.baseResponse:type_name -> BaseResponse
	193, // 341: FinderStreamResponse.object:type_name -> FinderObject
	197, // 342: FinderStreamResponse.preloadInfo:type_name -> FinderPreloadInfo
	199, // 343: FinderStreamResponse.finderContactRecommend:type_name -> FinderContactRecommend
	193, // 344: FinderStreamResponse.liveObjects:type_name -> FinderObject
	202, // 345: FinderStreamResponse.finderTopicRecommends:type_name -> FinderTopicRecommend
	204, // 346: FinderStreamResponse.finderCategoryRecommends:type_name -> FinderCategoryRecommend
	233, // 347: FinderStreamResponse.sectionInfo:type_name -> FinderSectionInfo
	234, // 348: FinderStreamResponse.intervalConf:type_name -> FinderStreamPrefechTimeIntervalConf
	227, // 349: FinderStreamResponse.layoutInfo:type_name -> FinderStreamLayoutInfo
	218, // 350: FinderStreamResponse.livePreloadInfo:type_name -> FinderLivePreloadInfo
	569, // 351: FinderGetBuzzwordRequest.baseRequest:type_name -> BaseRequest
	37,  // 352: FinderGetBuzzwordRequest.finderBasereq:type_name -> FinderBaseRequest
	237, // 353: BuzzwordInfo.buzzwords:type_name -> Buzzword
	568, // 354: FinderGetBuzzwordResponse.baseResponse:type_name -> BaseResponse
	238, // 355: FinderGetBuzzwordResponse.buzzwordInfoList:type_name -> BuzzwordInfo
	569, // 356: FinderCollectUnreadRequest.baseRequest:type_name -> BaseRequest
	37,  // 357: FinderCollectUnreadRequest.finderBasereq:type_name -> FinderBaseRequest
	70,  // 358: FinderCollectUnreadRequest.unreadItems:type_name -> FinderUnreadItem
	568, // 359: FinderCollectUnreadResponse.baseResponse:type_name -> BaseResponse
	569, // 360: FinderBatchGetObjectAsyncLoadInfoRequest.baseRequest:type_name -> BaseRequest
	37,  // 361: FinderBatchGetObjectAsyncLoadInfoRequest.finderBasereq:type_name -> FinderBaseRequest
	242, // 362: FinderBatchGetObjectAsyncLoadInfoRequest.objectUidList:type_name -> FinderObjectUidUnit
	244, // 363: FinderLivePreJoinLiveInfo.tips:type_name -> FinderJoinLiveTips
	143, // 364: FinderLivePreJoinLiveInfo.bizUserInfo:type_name -> FinderBizUserInfo
	246, // 365: FinderObjectDigest.items:type_name -> FinderObjectDigestItem
	147, // 366: FinderObjectAsyncLoadInfo.liveInfo:type_name -> FinderLiveInfo
	33,  // 367: FinderObjectAsyncLoadInfo.jumpInfo:type_name -> FinderJumpInfo
	33,  // 368: FinderObjectAsyncLoadInfo.hotspotJumpinfo:type_name -> FinderJumpInfo
	245, // 369: FinderObjectAsyncLoadInfo.preJoinliveInfo:type_name -> FinderLivePreJoinLiveInfo
	247, // 370: FinderObjectAsyncLoadInfo.objectDigest:type_name -> FinderObjectDigest
	248, // 371: FinderObjectAsyncLoadInfo.purchaseLivePreviewInfo:type_name -> FinderPurchaseLivePreviewInfo
	33,  // 372: FinderObjectAsyncLoadInfo.commJumpinfo:type_name -> FinderJumpInfo
	13,  // 373: FinderContactAsyncLoadInfo.noticeInfo:type_name -> FinderLiveNoticeInfo
	147, // 374: FinderContactAsyncLoadInfo.liveInfo:type_name -> FinderLiveInfo
	568, // 375: FinderBatchGetObjectAsyncLoadInfoResponse.baseResponse:type_name -> BaseResponse
	249, // 376: FinderBatchGetObjectAsyncLoadInfoResponse.objectAsyncInfoMap:type_name -> FinderObjectAsyncLoadInfo
	250, // 377: FinderBatchGetObjectAsyncLoadInfoResponse.contactAsyncInfoMap:type_name -> FinderContactAsyncLoadInfo
	569, // 378: FinderGetCommentDetailRequest.baseRequest:type_name -> BaseRequest
	37,  // 379: FinderGetCommentDetailRequest.finderBasereq:type_name -> FinderBaseRequest
	59,  // 380: FinderGetCommentDetailRequest.status:type_name -> FinderClientStatus
	252, // 381: FinderGetCommentDetailRequest.verifyInfo:type_name -> FinderLivePermissionVerifyInfo
	568, // 382: FinderGetCommentDetailResponse.baseResponse:type_name -> BaseResponse
	127, // 383: FinderGetCommentDetailResponse.commentInfo:type_name -> FinderCommentInfo
	193, // 384: FinderGetCommentDetailResponse.object:type_name -> FinderObject
	127, // 385: FinderGetCommentDetailResponse.barrageCommentInfo:type_name -> FinderCommentInfo
	193, // 386: FinderGetCommentDetailResponse.refObjectList:type_name -> FinderObject
	197, // 387: FinderGetCommentDetailResponse.preloadInfo:type_name -> FinderPreloadInfo
	569, // 388: FinderGetHistoryRequest.baseRequest:type_name -> BaseRequest
	37,  // 389: FinderGetHistoryRequest.finderBasereq:type_name -> FinderBaseRequest
	59,  // 390: FinderGetHistoryRequest.status:type_name -> FinderClientStatus
	568, // 391: FinderGetHistoryResponse.baseResponse:type_name -> BaseResponse
	193, // 392: FinderGetHistoryResponse.object:type_name -> FinderObject
	197, // 393: FinderGetHistoryResponse.preloadInfo:type_name -> FinderPreloadInfo
	569, // 394: FinderFavReq.baseRequest:type_name -> BaseRequest
	37,  // 395: FinderFavReq.finderBasereq:type_name -> FinderBaseRequest
	568, // 396: FinderFavResp.baseResponse:type_name -> BaseResponse
	569, // 397: FinderLikeRequest.baseRequest:type_name -> BaseRequest
	37,  // 398: FinderLikeRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 399: FinderLikeResponse.baseResponse:type_name -> BaseResponse
	569, // 400: RealTimeKVReportReq.baseRequest:type_name -> BaseRequest
	568, // 401: RealTimeKVReportResp.baseResponse:type_name -> BaseResponse
	569, // 402: FinderCommentRequest.baseRequest:type_name -> BaseRequest
	37,  // 403: FinderCommentRequest.finderBasereq:type_name -> FinderBaseRequest
	263, // 404: FinderCommentRequest.commentMentionedUser:type_name -> FinderCommentMentionedUser
	568, // 405: FinderCommentResponse.baseResponse:type_name -> BaseResponse
	193, // 406: FinderCommentResponse.object:type_name -> FinderObject
	127, // 407: FinderCommentResponse.exposedComment:type_name -> FinderCommentInfo
	569, // 408: FinderFollowRequest.baseRequest:type_name -> BaseRequest
	37,  // 409: FinderFollowRequest.finderBasereq:type_name -> FinderBaseRequest
	266, // 410: FinderFollowRequest.liveReportBaseInfo:type_name -> FinderLiveReportBaseInfo
	568, // 411: FinderFollowResponse.baseResponse:type_name -> BaseResponse
	34,  // 412: FinderFollowResponse.contact:type_name -> FinderContact
	269, // 413: CliReportKVDataPackage.itemList:type_name -> KVCommReportItem
	270, // 414: CliReportKVReq.dataPkg:type_name -> CliReportKVDataPackage
	271, // 415: CliReportKVReq.heavyUserInfo:type_name -> HeavyUserReqInfo
	273, // 416: StrategyInterval.strategyItem:type_name -> NewStrategyItem
	275, // 417: HeavyUserRespInfo.monitorIdMapStrategys:type_name -> MonitorIdMapStrategyInterval
	274, // 418: CliReportKVResp.generalStrategies:type_name -> StrategyInterval
	274, // 419: CliReportKVResp.specialStrategies:type_name -> StrategyInterval
	274, // 420: CliReportKVResp.whiteOrBlackUinStrategies:type_name -> StrategyInterval
	276, // 421: CliReportKVResp.heavyUserInfo:type_name -> HeavyUserRespInfo
	569, // 422: WxaAttrSyncRequest.baseRequest:type_name -> BaseRequest
	278, // 423: WxaAttrSyncRequest.requestSource:type_name -> CommRequestSource
	279, // 424: WxaAttrSyncRequest.publicLib:type_name -> WxaClientPublicLibInfo
	568, // 425: WxaAttrSyncResponse.baseResponse:type_name -> BaseResponse
	281, // 426: WxaAttrSyncResponse.updateInfoList:type_name -> WxaAttrSyncResp_KeyValue
	569, // 427: PreGetDownloadUrlRequest.baseRequest:type_name -> BaseRequest
	568, // 428: PreGetDownloadUrlResponse.baseResponse:type_name -> BaseResponse
	284, // 429: PreGetDownloadUrlResponse.packageInfoList:type_name -> PackageUrlInfo
	569, // 430: FinderGetPurchasedFeedListRequest.baseRequest:type_name -> BaseRequest
	37,  // 431: FinderGetPurchasedFeedListRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 432: FinderGetPurchasedFeedListResponse.baseResponse:type_name -> BaseResponse
	193, // 433: FinderGetPurchasedFeedListResponse.objects:type_name -> FinderObject
	569, // 434: FinderUserPrepareRequest.baseRequest:type_name -> BaseRequest
	37,  // 435: FinderUserPrepareRequest.finderBasereq:type_name -> FinderBaseRequest
	293, // 436: PostActionSheetList.sheets:type_name -> PostActionSheet
	295, // 437: AccountExtraSettingConfig.configs:type_name -> AcctConfig
	300, // 438: AgencyCollaborateInfo.liveEntrance:type_name -> AgencyCollaborateInfo_EntranceInfo
	303, // 439: FinderLiveWxaPreloadInfo.ctrlInfos:type_name -> FinderLiveWxaPreloadCtrlInfo
	305, // 440: GameRankSwitchInfo.switchList:type_name -> GameRankSwitchInfo_GameRankSwitch
	568, // 441: FinderUserPrepareResponse.baseResponse:type_name -> BaseResponse
	289, // 442: FinderUserPrepareResponse.verifyInfo:type_name -> FinderNicknameVerifyInfo
	34,  // 443: FinderUserPrepareResponse.selfContact:type_name -> FinderContact
	290, // 444: FinderUserPrepareResponse.datacenterConf:type_name -> DataCenterConfig
	291, // 445: FinderUserPrepareResponse.wxaShopBindUrl:type_name -> FinderWxAppInfo
	291, // 446: FinderUserPrepareResponse.wxaShopInfo:type_name -> FinderWxAppInfo
	292, // 447: FinderUserPrepareResponse.acctTransferConf:type_name -> AcctTransferConfig
	294, // 448: FinderUserPrepareResponse.actionList:type_name -> PostActionSheetList
	296, // 449: FinderUserPrepareResponse.acctExtSettingConfig:type_name -> AccountExtraSettingConfig
	297, // 450: FinderUserPrepareResponse.aliasInfo:type_name -> FinderLiveAliasInfo
	298, // 451: FinderUserPrepareResponse.settleInfo:type_name -> SettleToAgencyRelateInfo
	299, // 452: FinderUserPrepareResponse.poiInfo:type_name -> FinderUserPreparePoiInfo
	301, // 453: FinderUserPrepareResponse.agencyCollaborateInfo:type_name -> AgencyCollaborateInfo
	302, // 454: FinderUserPrepareResponse.actionWording:type_name -> PostActionWording
	304, // 455: FinderUserPrepareResponse.shopWindowPreload:type_name -> FinderLiveWxaPreloadInfo
	306, // 456: FinderUserPrepareResponse.gameLiveSwitchInfo:type_name -> GameRankSwitchInfo
	307, // 457: FinderUserPrepareResponse.privacySetting:type_name -> FinderPrivacySetting
	569, // 458: ColdStartFetchDataRequest.baseRequest:type_name -> BaseRequest
	568, // 459: ColdStartFetchDataResponse.baseResponse:type_name -> BaseResponse
	569, // 460: LaunchWxaAppRequest.baseRequest:type_name -> BaseRequest
	311, // 461: LaunchWxaAppRequest.wxaAppInfo:type_name -> WxaAppBaseInfo
	312, // 462: LaunchWxaAppRequest.pluginInfo:type_name -> WxaPluginInfo
	279, // 463: LaunchWxaAppRequest.publicLib:type_name -> WxaClientPublicLibInfo
	313, // 464: LaunchWxaAppRequest.webLaunchInfo:type_name -> WxaWebLaunchInfo
	314, // 465: LaunchWxaAppRequest.jumpInfo:type_name -> WxaJumpInfo
	278, // 466: LaunchWxaAppRequest.requestSource:type_name -> CommRequestSource
	315, // 467: LaunchWxaAppRequest.materialInfo:type_name -> WxaMaterialInfo
	568, // 468: LaunchWxaAppResponse.baseResponse:type_name -> BaseResponse
	317, // 469: LaunchWxaAppResponse.launch:type_name -> LaunchAction
	318, // 470: LaunchWxaAppResponse.checkJsApi:type_name -> CheckJsApiInfo
	319, // 471: LaunchWxaAppResponse.publicLibUpdate:type_name -> PublicLibUpdateInfo
	320, // 472: LaunchWxaAppResponse.actionSheet:type_name -> ActionSheetInfo
	321, // 473: LaunchWxaAppResponse.operation:type_name -> OperationInfo
	323, // 474: GetDownloadUrlReqItem.reqPackageInfo:type_name -> RequestPackageInfo
	324, // 475: GetDownloadUrlReqItem.localPackageInfo:type_name -> LocalPackageInfo
	569, // 476: BatchGetDownloadUrlRequest.baseRequest:type_name -> BaseRequest
	325, // 477: BatchGetDownloadUrlRequest.reqList:type_name -> GetDownloadUrlReqItem
	278, // 478: BatchGetDownloadUrlRequest.requestSource:type_name -> CommRequestSource
	323, // 479: GetDownloadUrlRespItem.reqPackageInfo:type_name -> RequestPackageInfo
	568, // 480: BatchGetDownloadUrlResponse.baseResponse:type_name -> BaseResponse
	327, // 481: BatchGetDownloadUrlResponse.respList:type_name -> GetDownloadUrlRespItem
	569, // 482: JSOperateWxDataRequest.baseRequest:type_name -> BaseRequest
	572, // 483: JSOperateWxDataRequest.extInfo:type_name -> WxaExternalInfo
	332, // 484: UserAvatarInfo.avatarList:type_name -> UserAvatarItem
	568, // 485: JSOperateWxDataResponse.baseResponse:type_name -> BaseResponse
	330, // 486: JSOperateWxDataResponse.jsapiBaseresponse:type_name -> JSAPIBaseResponse
	573, // 487: JSOperateWxDataResponse.scope:type_name -> ScopeInfo
	331, // 488: JSOperateWxDataResponse.debugInfo:type_name -> JSOperateWxDataResponse_DebugInfo
	333, // 489: JSOperateWxDataResponse.avatarInfo:type_name -> UserAvatarInfo
	334, // 490: JSOperateWxDataResponse.privacyInfo:type_name -> AlertPrivacyInfo
	569, // 491: VerifyPluginRequest.baseRequest:type_name -> BaseRequest
	568, // 492: VerifyPluginResponse.baseResponse:type_name -> BaseResponse
	569, // 493: BatchWxaAttrSyncRequest.baseRequest:type_name -> BaseRequest
	338, // 494: BatchWxaAttrSyncRequest.reqInfoList:type_name -> WxaAttrSyncSingleReqInfo
	279, // 495: BatchWxaAttrSyncRequest.publicLib:type_name -> WxaClientPublicLibInfo
	281, // 496: WxaAttrSyncSingleRespInfo.updateInfoList:type_name -> WxaAttrSyncResp_KeyValue
	568, // 497: BatchWxaAttrSyncResponse.baseResponse:type_name -> BaseResponse
	340, // 498: BatchWxaAttrSyncResponse.respInfoList:type_name -> WxaAttrSyncSingleRespInfo
	569, // 499: FinderLiveUserPageRequest.baseRequest:type_name -> BaseRequest
	37,  // 500: FinderLiveUserPageRequest.finderBasereq:type_name -> FinderBaseRequest
	59,  // 501: FinderLiveUserPageRequest.status:type_name -> FinderClientStatus
	568, // 502: FinderLiveUserPageResponse.baseResponse:type_name -> BaseResponse
	193, // 503: FinderLiveUserPageResponse.object:type_name -> FinderObject
	197, // 504: FinderLiveUserPageResponse.preloadInfo:type_name -> FinderPreloadInfo
	569, // 505: FinderGetAllWindowProductsRequest.baseRequest:type_name -> BaseRequest
	37,  // 506: FinderGetAllWindowProductsRequest.finderBasereq:type_name -> FinderBaseRequest
	291, // 507: FinderLiveShopCustomerServiceInfo.appInfo:type_name -> FinderWxAppInfo
	346, // 508: FinderLiveShopCustomerServiceInfo.wecomInfo:type_name -> FinderWeChatInfo
	345, // 509: FinderWindowProductInfo_ExclusiveInfo.exclusivePage:type_name -> FinderWindowProductInfo_DetailPage
	345, // 510: FinderWindowProductInfo.halfPage:type_name -> FinderWindowProductInfo_DetailPage
	345, // 511: FinderWindowProductInfo.fullPage:type_name -> FinderWindowProductInfo_DetailPage
	347, // 512: FinderWindowProductInfo.csInfo:type_name -> FinderLiveShopCustomerServiceInfo
	348, // 513: FinderWindowProductInfo.associatedCoupons:type_name -> FinderWindowProductInfo_CouponInfo
	349, // 514: FinderWindowProductInfo.exclusiveInfo:type_name -> FinderWindowProductInfo_ExclusiveInfo
	350, // 515: FinderWindowProductInfo.productReplayInfo:type_name -> FinderWindowProductInfo_ProductReplayInfo
	568, // 516: FinderGetAllWindowProductsResponse.baseResponse:type_name -> BaseResponse
	351, // 517: FinderGetAllWindowProductsResponse.products:type_name -> FinderWindowProductInfo
	569, // 518: FinderMVUserPageRequest.baseRequest:type_name -> BaseRequest
	37,  // 519: FinderMVUserPageRequest.finderBasereq:type_name -> FinderBaseRequest
	59,  // 520: FinderMVUserPageRequest.status:type_name -> FinderClientStatus
	568, // 521: FinderMVUserPageResponse.baseResponse:type_name -> BaseResponse
	193, // 522: FinderMVUserPageResponse.object:type_name -> FinderObject
	197, // 523: FinderMVUserPageResponse.preloadInfo:type_name -> FinderPreloadInfo
	569, // 524: FinderMusicUserPageRequest.baseRequest:type_name -> BaseRequest
	37,  // 525: FinderMusicUserPageRequest.finderBasereq:type_name -> FinderBaseRequest
	59,  // 526: FinderMusicUserPageRequest.status:type_name -> FinderClientStatus
	568, // 527: FinderMusicUserPageResponse.baseResponse:type_name -> BaseResponse
	193, // 528: FinderMusicUserPageResponse.object:type_name -> FinderObject
	34,  // 529: FinderMusicUserPageResponse.contact:type_name -> FinderContact
	197, // 530: FinderMusicUserPageResponse.preloadInfo:type_name -> FinderPreloadInfo
	569, // 531: FinderGetMentionedListRequest.baseRequest:type_name -> BaseRequest
	37,  // 532: FinderGetMentionedListRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 533: FinderGetMentionedListResponse.baseResponse:type_name -> BaseResponse
	193, // 534: FinderGetMentionedListResponse.object:type_name -> FinderObject
	569, // 535: FinderUserPageRequest.baseRequest:type_name -> BaseRequest
	37,  // 536: FinderUserPageRequest.finderBasereq:type_name -> FinderBaseRequest
	59,  // 537: FinderUserPageRequest.status:type_name -> FinderClientStatus
	9,   // 538: FinderUserInfo.authInfo:type_name -> FinderAuthInfo
	362, // 539: PoiBrief.marsGps:type_name -> PoiGps
	363, // 540: PoiBrief.marsPoint:type_name -> PoiPoint
	364, // 541: PoiBrief.categoriesList:type_name -> PoiCategories
	365, // 542: PoiBrief.aliases:type_name -> PoiAliases
	369, // 543: PoiReviewContent.photos:type_name -> PoiPhoto
	372, // 544: PoiReview.content:type_name -> PoiReviewContent
	375, // 545: PoiFormatBusinessTime.times:type_name -> PoiFormatBusinessTime_Time
	374, // 546: PoiBusinessHour.times:type_name -> PoiBusinessTime
	376, // 547: PoiBusinessHour.formatOpenTimes:type_name -> PoiFormatBusinessTime
	376, // 548: PoiBusinessHour.formatCloseTimes:type_name -> PoiFormatBusinessTime
	366, // 549: PoiDetailInfo.brief:type_name -> PoiBrief
	367, // 550: PoiDetailInfo.intro:type_name -> PoiIntro
	368, // 551: PoiDetailInfo.rate:type_name -> PoiRate
	369, // 552: PoiDetailInfo.photos:type_name -> PoiPhoto
	370, // 553: PoiDetailInfo.deals:type_name -> PoiDeal
	371, // 554: PoiDetailInfo.coupons:type_name -> PoiCoupon
	373, // 555: PoiDetailInfo.review:type_name -> PoiReview
	377, // 556: PoiDetailInfo.hour:type_name -> PoiBusinessHour
	378, // 557: PoiDetailInfo.reservation:type_name -> PoiReservation
	379, // 558: PoiDetailInfo.takeAway:type_name -> PoiTakeAway
	380, // 559: PoiDetailInfo.appInfo:type_name -> PoiAppInfo
	381, // 560: PoiDetailInfo.sourceInfo:type_name -> PoiSourceInfo
	369, // 561: PoiDetailInfo.headPhoto:type_name -> PoiPhoto
	382, // 562: PoiDetailInfo.recommendMenus:type_name -> PoiRecommendMenuInfo
	383, // 563: PoiDetailInfo.queue:type_name -> PoiQueueInfo
	384, // 564: PoiDetailInfo.tags:type_name -> PoiTagInfo
	385, // 565: SnsPoiDetail.poiDetailInfo:type_name -> PoiDetailInfo
	386, // 566: FinderUserPagePoi.snsPoiDetail:type_name -> SnsPoiDetail
	568, // 567: FinderUserPageResponse.baseResponse:type_name -> BaseResponse
	193, // 568: FinderUserPageResponse.object:type_name -> FinderObject
	360, // 569: FinderUserPageResponse.finderUserInfo:type_name -> FinderUserInfo
	34,  // 570: FinderUserPageResponse.contact:type_name -> FinderContact
	289, // 571: FinderUserPageResponse.verifyInfo:type_name -> FinderNicknameVerifyInfo
	361, // 572: FinderUserPageResponse.entranceInfo:type_name -> OriginalEntranceInfo
	197, // 573: FinderUserPageResponse.preloadInfo:type_name -> FinderPreloadInfo
	193, // 574: FinderUserPageResponse.liveObjects:type_name -> FinderObject
	291, // 575: FinderUserPageResponse.wxaShopInfo:type_name -> FinderWxAppInfo
	13,  // 576: FinderUserPageResponse.liveNoticeInfo:type_name -> FinderLiveNoticeInfo
	201, // 577: FinderUserPageResponse.usualTopics:type_name -> FinderTopicInfo
	387, // 578: FinderUserPageResponse.poiInfo:type_name -> FinderUserPagePoi
	21,  // 579: FinderUserPageResponse.bizInfo:type_name -> FinderBizInfo
	120, // 580: FinderUserPageResponse.eventInfoList:type_name -> FinderEventInfo
	388, // 581: FinderUserPageResponse.justWatch:type_name -> FinderJustWatchControl
	33,  // 582: FinderUserPageResponse.jumpInfo:type_name -> FinderJumpInfo
	569, // 583: FinderGetMsgSessionIdRequest.baseRequest:type_name -> BaseRequest
	37,  // 584: FinderGetMsgSessionIdRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 585: FinderGetMsgSessionIdResponse.baseResponse:type_name -> BaseResponse
	391, // 586: FinderGetMsgSessionIdResponse.sessionInfo:type_name -> FinderMsgSessionInfo
	569, // 587: FinderGetContactListReq.baseRequest:type_name -> BaseRequest
	37,  // 588: FinderGetContactListReq.finderBasereq:type_name -> FinderBaseRequest
	12,  // 589: FinderGetContactListReq.msgContactList:type_name -> FinderContactMsgInfo
	393, // 590: FinderGetContactListReq.fansContactList:type_name -> FinderContactFansInfo
	394, // 591: FinderGetContactListReq.commentContactList:type_name -> FinderContactCommentInfo
	395, // 592: FinderGetContactListReq.commentLikeContactList:type_name -> FinderContactCommentLikeInfo
	568, // 593: FinderGetContactListResp.baseResponse:type_name -> BaseResponse
	34,  // 594: FinderGetContactListResp.contactList:type_name -> FinderContact
	569, // 595: RouteRequest.baseRequest:type_name -> BaseRequest
	398, // 596: RouteRequest.infos:type_name -> WxaRealTimeReportInfo
	568, // 597: RouteResponse.baseResponse:type_name -> BaseResponse
	401, // 598: BypMsgPack.bypText:type_name -> BypMsgText
	402, // 599: BypMsgPack.bypImage:type_name -> BypMsgImage
	403, // 600: BypMsgPack.bypVideo:type_name -> BypMsgVideo
	404, // 601: BypMsgPack.bypEmoji:type_name -> BypMsgEmoji
	569, // 602: BypSendRequest.baseRequest:type_name -> BaseRequest
	405, // 603: BypSendRequest.msgPack:type_name -> BypMsgPack
	568, // 604: BypSendResponse.baseResponse:type_name -> BaseResponse
	408, // 605: BypSyncKeyBuff.syncKeyPairList:type_name -> BypSyncKeyPair
	569, // 606: BypSyncRequest.baseRequest:type_name -> BaseRequest
	409, // 607: BypSyncRequest.cliSyncKeyBuff:type_name -> BypSyncKeyBuff
	568, // 608: BypSyncResponse.baseResponse:type_name -> BaseResponse
	409, // 609: BypSyncResponse.respSyncKeyBuff:type_name -> BypSyncKeyBuff
	411, // 610: BypSyncResponse.syncItemList:type_name -> BypSyncItem
	569, // 611: WxaAppIDKeyBatchReportRequest.baseRequest:type_name -> BaseRequest
	413, // 612: WxaAppIDKeyBatchReportRequest.recordList:type_name -> WxaAppRecord
	414, // 613: WxaAppIDKeyBatchReportRequest.reportDeviceInfo:type_name -> ReportDeviceInfo
	568, // 614: WxaAppIDKeyBatchReportResponse.baseResponse:type_name -> BaseResponse
	569, // 615: FinderGetLiveTabsRequest.baseRequest:type_name -> BaseRequest
	37,  // 616: FinderGetLiveTabsRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 617: FinderGetLiveTabsResponse.baseResponse:type_name -> BaseResponse
	130, // 618: FinderGetLiveTabsResponse.tabList:type_name -> FinderLiveTabInfo
	418, // 619: FinderGetLiveTabsResponse.lbsInfo:type_name -> FinderLiveLbsInfo
	569, // 620: FinderLbsLiveStreamRequest.baseRequest:type_name -> BaseRequest
	37,  // 621: FinderLbsLiveStreamRequest.finderBasereq:type_name -> FinderBaseRequest
	59,  // 622: FinderLbsLiveStreamRequest.status:type_name -> FinderClientStatus
	73,  // 623: FinderLbsLiveStreamRequest.liveStatus:type_name -> FinderLiveClientStatus
	74,  // 624: FinderLbsLiveStreamRequest.finderSwitch:type_name -> FinderSwitch
	69,  // 625: FinderLbsLiveStreamRequest.readStats:type_name -> MarkReadStat
	70,  // 626: FinderLbsLiveStreamRequest.markUnreadObjectList:type_name -> FinderUnreadItem
	130, // 627: FinderLbsLiveStreamRequest.liveTab:type_name -> FinderLiveTabInfo
	420, // 628: FinderLbsLiveStreamRequest.lbsTabTipsInfo:type_name -> FinderLbsTabTipsInfo
	421, // 629: FinderLbsLiveStreamRequest.pressureCtrl:type_name -> FinderPressureCtrl
	80,  // 630: FinderLbsLiveStreamRequest.beforeJoinLiveRoomStatus:type_name -> FinderLiveBeforeJoinLiveRoomStatus
	130, // 631: FinderJumpLiveTab.tabInfo:type_name -> FinderLiveTabInfo
	568, // 632: FinderLbsLiveStreamResponse.baseResponse:type_name -> BaseResponse
	193, // 633: FinderLbsLiveStreamResponse.object:type_name -> FinderObject
	218, // 634: FinderLbsLiveStreamResponse.livePreloadInfo:type_name -> FinderLivePreloadInfo
	227, // 635: FinderLbsLiveStreamResponse.layoutInfo:type_name -> FinderStreamLayoutInfo
	423, // 636: FinderLbsLiveStreamResponse.jumpLiveTab:type_name -> FinderJumpLiveTab
	569, // 637: GetMidasSdkInfoRequest.baseRequest:type_name -> BaseRequest
	568, // 638: GetMidasSdkInfoResponse.baseResponse:type_name -> BaseResponse
	574, // 639: GetMidasSdkInfoResponse.sdkInfo:type_name -> MidasSdkInfo
	569, // 640: FinderGetLiveOnlineMemberReq.baseRequest:type_name -> BaseRequest
	37,  // 641: FinderGetLiveOnlineMemberReq.finderBasereq:type_name -> FinderBaseRequest
	428, // 642: FinderLiveRecentRewardOnlineMember_GiftItem.gift:type_name -> FinderLiveGift
	136, // 643: FinderLiveRecentRewardOnlineMember.contact:type_name -> FinderLiveContact
	429, // 644: FinderLiveRecentRewardOnlineMember.items:type_name -> FinderLiveRecentRewardOnlineMember_GiftItem
	568, // 645: FinderGetLiveOnlineMemberResp.baseResponse:type_name -> BaseResponse
	136, // 646: FinderGetLiveOnlineMemberResp.liveContacts:type_name -> FinderLiveContact
	136, // 647: FinderGetLiveOnlineMemberResp.offlineContacts:type_name -> FinderLiveContact
	136, // 648: FinderGetLiveOnlineMemberResp.selfContact:type_name -> FinderLiveContact
	430, // 649: FinderGetLiveOnlineMemberResp.recentRewardContacts:type_name -> FinderLiveRecentRewardOnlineMember
	569, // 650: GetInitDataReq.baseRequest:type_name -> BaseRequest
	568, // 651: GetInitDataResp.baseResponse:type_name -> BaseResponse
	569, // 652: FinderGetLiveRelatedListRequest.baseRequest:type_name -> BaseRequest
	37,  // 653: FinderGetLiveRelatedListRequest.finderBasereq:type_name -> FinderBaseRequest
	59,  // 654: FinderGetLiveRelatedListRequest.status:type_name -> FinderClientStatus
	73,  // 655: FinderGetLiveRelatedListRequest.liveStatus:type_name -> FinderLiveClientStatus
	420, // 656: FinderGetLiveRelatedListRequest.lbsTabTipsInfo:type_name -> FinderLbsTabTipsInfo
	421, // 657: FinderGetLiveRelatedListRequest.pressureCtrl:type_name -> FinderPressureCtrl
	77,  // 658: FinderGetLiveRelatedListRequest.commByPass:type_name -> FinderCommByPass
	80,  // 659: FinderGetLiveRelatedListRequest.beforeJoinLiveRoomStatus:type_name -> FinderLiveBeforeJoinLiveRoomStatus
	434, // 660: FinderGetLiveRelatedListRequest.readStat:type_name -> FinderLiveRelatedListReadStat
	568, // 661: FinderGetLiveRelatedListResponse.baseResponse:type_name -> BaseResponse
	193, // 662: FinderGetLiveRelatedListResponse.object:type_name -> FinderObject
	218, // 663: FinderGetLiveRelatedListResponse.livePreloadInfo:type_name -> FinderLivePreloadInfo
	569, // 664: FinderJoinLiveReq.baseRequest:type_name -> BaseRequest
	37,  // 665: FinderJoinLiveReq.finderBasereq:type_name -> FinderBaseRequest
	437, // 666: FinderJoinLiveReq.joinliveTabTipsInfo:type_name -> FinderJoinLiveTabTipsInfo
	80,  // 667: FinderJoinLiveReq.beforeJoinLiveRoomStatus:type_name -> FinderLiveBeforeJoinLiveRoomStatus
	266, // 668: FinderJoinLiveReq.liveReportBaseInfo:type_name -> FinderLiveReportBaseInfo
	440, // 669: FinderLiveShopWindowProductItem.productPage:type_name -> FinderLiveShopWindowProductItem_ProductPage
	440, // 670: FinderLiveShopWindowProductItem.userPurchasePage:type_name -> FinderLiveShopWindowProductItem_ProductPage
	443, // 671: FinderLiveAdInfo.cheerIconInfo:type_name -> CheerIconInfo
	447, // 672: GameTeamUpPaymentSetting.defaultPaymentList:type_name -> GameTeamUpPaymentSetting_DefaultPaymentItem
	448, // 673: GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo.paymentSetting:type_name -> GameTeamUpPaymentSetting
	449, // 674: GameLiveJoinTeamSettingInfo.qualificationsInfos:type_name -> GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo
	450, // 675: FinderLiveGameInfo.joinTeamUpSettingInfo:type_name -> GameLiveJoinTeamSettingInfo
	443, // 676: FinderLiveCheerInfo.cheerIconInfo:type_name -> CheerIconInfo
	456, // 677: GameLiveJumpInfo_FinderLiveJumpInfo.weappJumpInfo:type_name -> GameLiveJumpInfo_FinderLiveWeappJumpInfo
	457, // 678: GameLiveJumpInfo_FinderLiveFineGameInfo.iosJumpInfo:type_name -> GameLiveJumpInfo_FinderLiveJumpInfo
	457, // 679: GameLiveJumpInfo_FinderLiveFineGameInfo.androidJumpInfo:type_name -> GameLiveJumpInfo_FinderLiveJumpInfo
	457, // 680: GameLiveJumpInfo_FinderLiveWxaGameInfo.iosJumpInfo:type_name -> GameLiveJumpInfo_FinderLiveJumpInfo
	457, // 681: GameLiveJumpInfo_FinderLiveWxaGameInfo.androidJumpInfo:type_name -> GameLiveJumpInfo_FinderLiveJumpInfo
	458, // 682: GameLiveJumpInfo.fineGameInfo:type_name -> GameLiveJumpInfo_FinderLiveFineGameInfo
	459, // 683: GameLiveJumpInfo.wxaGameInfo:type_name -> GameLiveJumpInfo_FinderLiveWxaGameInfo
	568, // 684: FinderJoinLiveResp.baseResponse:type_name -> BaseResponse
	131, // 685: FinderJoinLiveResp.liveSdkInfo:type_name -> LiveSdkInfo
	147, // 686: FinderJoinLiveResp.liveInfo:type_name -> FinderLiveInfo
	142, // 687: FinderJoinLiveResp.liveMicInfo:type_name -> FinderLiveMicInfo
	439, // 688: FinderJoinLiveResp.userInfo:type_name -> FinderLiveUserInfo
	441, // 689: FinderJoinLiveResp.promotingProduct:type_name -> FinderLiveShopWindowProductItem
	136, // 690: FinderJoinLiveResp.selfContact:type_name -> FinderLiveContact
	244, // 691: FinderJoinLiveResp.tips:type_name -> FinderJoinLiveTips
	442, // 692: FinderJoinLiveResp.templateInfoList:type_name -> FinderLiveTemplateInfo
	297, // 693: FinderJoinLiveResp.aliasInfo:type_name -> FinderLiveAliasInfo
	96,  // 694: FinderJoinLiveResp.location:type_name -> FinderLocation
	291, // 695: FinderJoinLiveResp.wxaShopInfo:type_name -> FinderWxAppInfo
	444, // 696: FinderJoinLiveResp.liveAdInfo:type_name -> FinderLiveAdInfo
	445, // 697: FinderJoinLiveResp.promotingInfo:type_name -> FinderJoinLiveResp_PromotingInfo
	446, // 698: FinderJoinLiveResp.bgMusicInfo:type_name -> FinderLiveBackgroundMusicInfo
	451, // 699: FinderJoinLiveResp.liveGameInfo:type_name -> FinderLiveGameInfo
	143, // 700: FinderJoinLiveResp.bizUserInfo:type_name -> FinderBizUserInfo
	452, // 701: FinderJoinLiveResp.errorPage:type_name -> FinderLiveErrorPage
	453, // 702: FinderJoinLiveResp.bulletin:type_name -> FinderLiveBulletin
	454, // 703: FinderJoinLiveResp.liveGameData:type_name -> FinderLiveGameData
	455, // 704: FinderJoinLiveResp.cheerInfo:type_name -> FinderLiveCheerInfo
	460, // 705: FinderJoinLiveResp.gameLiveJumpInfo:type_name -> GameLiveJumpInfo
	306, // 706: FinderJoinLiveResp.gameRankSwitch:type_name -> GameRankSwitchInfo
	461, // 707: FinderJoinLiveResp.fanClubInfo:type_name -> FinderLiveFanClubInfo
	462, // 708: FinderJoinLiveResp.newPromoteInfo:type_name -> FinderLivePromoteMsgInfo
	463, // 709: FinderJoinLiveResp.generalGameLiveInfo:type_name -> GeneralGameLiveInfo
	464, // 710: FinderJoinLiveResp.audienceEventInfo:type_name -> FinderLiveAudienceEventInfo
	569, // 711: FinderLiveSyncExtraInfoRequest.baseRequest:type_name -> BaseRequest
	37,  // 712: FinderLiveSyncExtraInfoRequest.finderBasereq:type_name -> FinderBaseRequest
	466, // 713: FinderLiveSyncExtraInfoRequest.syncReqList:type_name -> FinderLiveSyncExtraInfoRequest_SyncReq
	568, // 714: FinderLiveSyncExtraInfoResponse.baseResponse:type_name -> BaseResponse
	468, // 715: FinderLiveSyncExtraInfoResponse.syncResp:type_name -> FinderLiveSyncExtraInfoResponse_SyncResp
	569, // 716: FinderGetLiveRewardGiftListRequest.baseRequest:type_name -> BaseRequest
	37,  // 717: FinderGetLiveRewardGiftListRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 718: FinderGetLiveRewardGiftListResponse.baseResponse:type_name -> BaseResponse
	428, // 719: FinderGetLiveRewardGiftListResponse.giftList:type_name -> FinderLiveGift
	569, // 720: FinderGetLiveMsgReq.baseRequest:type_name -> BaseRequest
	37,  // 721: FinderGetLiveMsgReq.finderBasereq:type_name -> FinderBaseRequest
	73,  // 722: FinderGetLiveMsgReq.status:type_name -> FinderLiveClientStatus
	266, // 723: FinderGetLiveMsgReq.liveReportBaseInfo:type_name -> FinderLiveReportBaseInfo
	136, // 724: FinderLiveMsg.finderLiveContact:type_name -> FinderLiveContact
	136, // 725: FinderLiveMsg.toFinderLiveContact:type_name -> FinderLiveContact
	474, // 726: FinderLiveAppMsgOption.versionControlInfo:type_name -> FinderLiveAppMsgOption_VersionControlInfo
	136, // 727: FinderLiveAppMsg.toUserContact:type_name -> FinderLiveContact
	475, // 728: FinderLiveAppMsg.option:type_name -> FinderLiveAppMsgOption
	136, // 729: FinderLiveAppMsg.recipientContactList:type_name -> FinderLiveContact
	136, // 730: FinderLiveAppMsg.fromUserContact:type_name -> FinderLiveContact
	568, // 731: FinderGetLiveMsgResp.baseResponse:type_name -> BaseResponse
	34,  // 732: FinderGetLiveMsgResp.onlineContacts:type_name -> FinderContact
	473, // 733: FinderGetLiveMsgResp.msgList:type_name -> FinderLiveMsg
	147, // 734: FinderGetLiveMsgResp.liveInfo:type_name -> FinderLiveInfo
	142, // 735: FinderGetLiveMsgResp.liveMicInfo:type_name -> FinderLiveMicInfo
	218, // 736: FinderGetLiveMsgResp.livePreloadInfo:type_name -> FinderLivePreloadInfo
	476, // 737: FinderGetLiveMsgResp.appMsgList:type_name -> FinderLiveAppMsg
	442, // 738: FinderGetLiveMsgResp.templateInfoList:type_name -> FinderLiveTemplateInfo
	135, // 739: FinderGetLiveMsgResp.badgeInfo:type_name -> FinderLiveBadgeInfo
	135, // 740: FinderGetLiveMsgResp.badgeInfos:type_name -> FinderLiveBadgeInfo
	454, // 741: FinderGetLiveMsgResp.liveGameData:type_name -> FinderLiveGameData
	477, // 742: FinderGetLiveMsgResp.clientConfig:type_name -> FinderGetLiveMsgResp_LiveMsgClientConfig
	461, // 743: FinderGetLiveMsgResp.fanClubInfo:type_name -> FinderLiveFanClubInfo
	464, // 744: FinderGetLiveMsgResp.audienceEventInfo:type_name -> FinderLiveAudienceEventInfo
	569, // 745: FinderLiveGetShopShelfRequest.baseRequest:type_name -> BaseRequest
	37,  // 746: FinderLiveGetShopShelfRequest.finderBasereq:type_name -> FinderBaseRequest
	291, // 747: FinderLiveGetShopShelfResponse_ShopWindowProfileInfo.jumpWxaInfo:type_name -> FinderWxAppInfo
	482, // 748: FinderLiveGetShopShelfResponse_ShopWindowProfileInfo.jumpLiteappInfo:type_name -> FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo
	568, // 749: FinderLiveGetShopShelfResponse.baseResponse:type_name -> BaseResponse
	480, // 750: FinderLiveGetShopShelfResponse.itemList:type_name -> FinderLiveShopWindowItem
	291, // 751: FinderLiveGetShopShelfResponse.addProductUrl:type_name -> FinderWxAppInfo
	291, // 752: FinderLiveGetShopShelfResponse.customedCsApp:type_name -> FinderWxAppInfo
	304, // 753: FinderLiveGetShopShelfResponse.preloadInfo:type_name -> FinderLiveWxaPreloadInfo
	291, // 754: FinderLiveGetShopShelfResponse.orderInfoUrl:type_name -> FinderWxAppInfo
	347, // 755: FinderLiveGetShopShelfResponse.directCsInfo:type_name -> FinderLiveShopCustomerServiceInfo
	481, // 756: FinderLiveGetShopShelfResponse.replayRecordSetting:type_name -> FinderReplayRecordSetting
	483, // 757: FinderLiveGetShopShelfResponse.shopWindowProfileInfo:type_name -> FinderLiveGetShopShelfResponse_ShopWindowProfileInfo
	569, // 758: FinderMarkReadRequest.baseRequest:type_name -> BaseRequest
	37,  // 759: FinderMarkReadRequest.finderBasereq:type_name -> FinderBaseRequest
	69,  // 760: FinderMarkReadRequest.readStats:type_name -> MarkReadStat
	568, // 761: FinderMarkReadResponse.baseResponse:type_name -> BaseResponse
	569, // 762: PreDownloadCodeReq.baseRequest:type_name -> BaseRequest
	487, // 763: PreDownloadCodeReq.req:type_name -> SyncVersionSingleReqInfo
	489, // 764: WxaSyncGetContactCmd.base:type_name -> WxaSyncBaseCmd
	489, // 765: WxaSyncGetCodeCmd.base:type_name -> WxaSyncBaseCmd
	489, // 766: WxaSyncIssueContactCmd.base:type_name -> WxaSyncBaseCmd
	489, // 767: WxaSyncIssueLaunchCmd.base:type_name -> WxaSyncBaseCmd
	489, // 768: WxaSyncIssueDecryptKeyCmd.base:type_name -> WxaSyncBaseCmd
	489, // 769: WxaSyncUpdateVersionCmd.base:type_name -> WxaSyncBaseCmd
	489, // 770: WxaSyncBlockCgiRequestCmd.base:type_name -> WxaSyncBaseCmd
	489, // 771: WxaSyncPreLaunchCmd.base:type_name -> WxaSyncBaseCmd
	489, // 772: WxaSyncInvalidCodeCmd.base:type_name -> WxaSyncBaseCmd
	489, // 773: WxaSyncInvalidContactCmd.base:type_name -> WxaSyncBaseCmd
	489, // 774: WxaSyncPullGlobalConfCmd.base:type_name -> WxaSyncBaseCmd
	490, // 775: WxaSyncCmds.getContact:type_name -> WxaSyncGetContactCmd
	491, // 776: WxaSyncCmds.getCode:type_name -> WxaSyncGetCodeCmd
	492, // 777: WxaSyncCmds.issueContact:type_name -> WxaSyncIssueContactCmd
	493, // 778: WxaSyncCmds.issueLaunch:type_name -> WxaSyncIssueLaunchCmd
	494, // 779: WxaSyncCmds.issueDecryptKey:type_name -> WxaSyncIssueDecryptKeyCmd
	495, // 780: WxaSyncCmds.updateVersion:type_name -> WxaSyncUpdateVersionCmd
	496, // 781: WxaSyncCmds.blockCgiRequest:type_name -> WxaSyncBlockCgiRequestCmd
	497, // 782: WxaSyncCmds.preLaunch:type_name -> WxaSyncPreLaunchCmd
	498, // 783: WxaSyncCmds.invalidCode:type_name -> WxaSyncInvalidCodeCmd
	499, // 784: WxaSyncCmds.invalidContact:type_name -> WxaSyncInvalidContactCmd
	500, // 785: WxaSyncCmds.pullGlobalConf:type_name -> WxaSyncPullGlobalConfCmd
	501, // 786: SyncVersionSingleRespInfo.cmds:type_name -> WxaSyncCmds
	568, // 787: PreDownloadCodeResp.baseResponse:type_name -> BaseResponse
	502, // 788: PreDownloadCodeResp.resp:type_name -> SyncVersionSingleRespInfo
	502, // 789: PreDownloadCodeResp.listResp:type_name -> SyncVersionSingleRespInfo
	569, // 790: FinderPostLiveMsgReq.baseRequest:type_name -> BaseRequest
	37,  // 791: FinderPostLiveMsgReq.finderBasereq:type_name -> FinderBaseRequest
	473, // 792: FinderPostLiveMsgReq.msg:type_name -> FinderLiveMsg
	504, // 793: FinderPostLiveMsgReq.reportInfo:type_name -> FinderPostLiveMsgReportInfo
	266, // 794: FinderPostLiveMsgReq.liveReportBaseInfo:type_name -> FinderLiveReportBaseInfo
	568, // 795: FinderPostLiveMsgResp.baseResponse:type_name -> BaseResponse
	569, // 796: GetWecoinBalanceRequest.baseRequest:type_name -> BaseRequest
	568, // 797: GetWecoinBalanceResponse.baseResponse:type_name -> BaseResponse
	569, // 798: FinderLikeLiveReq.baseRequest:type_name -> BaseRequest
	37,  // 799: FinderLikeLiveReq.finderBasereq:type_name -> FinderBaseRequest
	266, // 800: FinderLikeLiveReq.liveReportBaseInfo:type_name -> FinderLiveReportBaseInfo
	568, // 801: FinderLikeLiveResp.baseResponse:type_name -> BaseResponse
	569, // 802: HongBaoReq.baseRequest:type_name -> BaseRequest
	570, // 803: HongBaoReq.reqText:type_name -> SKBuiltinBuffer_t
	568, // 804: HongBaoRes.baseResponse:type_name -> BaseResponse
	570, // 805: HongBaoRes.retText:type_name -> SKBuiltinBuffer_t
	569, // 806: GetRedPacketStoryRequest.baseRequest:type_name -> BaseRequest
	514, // 807: RedPacketStoryInfo.detailList:type_name -> RedPacketStoryInfo_StoryDetail
	515, // 808: RedPacketStoryInfo.coverInfo:type_name -> CoverInfoDetail
	568, // 809: GetRedPacketStoryResponse.baseResponse:type_name -> BaseResponse
	516, // 810: GetRedPacketStoryResponse.info:type_name -> RedPacketStoryInfo
	569, // 811: FinderSearchSuggestRequest.baseRequest:type_name -> BaseRequest
	37,  // 812: FinderSearchSuggestRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 813: FinderSearchSuggestResponse.baseResponse:type_name -> BaseResponse
	522, // 814: FinderSearchSuggestResponse.suggest:type_name -> FinderSearchSuggestResponse_Suggestion
	569, // 815: FinderSearchRequest.baseRequest:type_name -> BaseRequest
	37,  // 816: FinderSearchRequest.finderBasereq:type_name -> FinderBaseRequest
	34,  // 817: FinderSearchInfo.contact:type_name -> FinderContact
	201, // 818: FinderTopicSearchInfo.topicInfo:type_name -> FinderTopicInfo
	101, // 819: FinderMusicSearchInfo.musicInfo:type_name -> FinderMusicInfo
	568, // 820: FinderSearchResponse.baseResponse:type_name -> BaseResponse
	525, // 821: FinderSearchResponse.infoList:type_name -> FinderSearchInfo
	193, // 822: FinderSearchResponse.objectList:type_name -> FinderObject
	526, // 823: FinderSearchResponse.topicInfoList:type_name -> FinderTopicSearchInfo
	527, // 824: FinderSearchResponse.musicInfoList:type_name -> FinderMusicSearchInfo
	528, // 825: FinderSearchResponse.securityTips:type_name -> FinderSearchSecurityTips
	175, // 826: FinderSearchResponse.hotwordInfo:type_name -> FinderSearchHotWord
	569, // 827: FinderInitRequest.baseRequest:type_name -> BaseRequest
	570, // 828: FinderInitRequest.keybuf:type_name -> SKBuiltinBuffer_t
	37,  // 829: FinderInitRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 830: FinderInitResponse.baseResponse:type_name -> BaseResponse
	34,  // 831: FinderInitResponse.myacct:type_name -> FinderContact
	570, // 832: FinderInitResponse.keybuf:type_name -> SKBuiltinBuffer_t
	48,  // 833: FinderInitResponse.cmdlist:type_name -> FinderCmdItem
	531, // 834: FinderInitResponse.tabInfos:type_name -> FinderTabInfo
	532, // 835: FinderInitResponse.wxUserAttr:type_name -> WXUserAttr
	297, // 836: FinderInitResponse.aliasInfo:type_name -> FinderLiveAliasInfo
	533, // 837: FinderInitResponse.teenmodeTipsConfig:type_name -> FinderTeenModeTipsConfig
	534, // 838: FinderInitResponse.teenmodeSetting:type_name -> FinderTeenModeSetting
	535, // 839: FinderInitResponse.slideUpGuideConfig:type_name -> FinderSlideUpGuideConfig
	536, // 840: FinderInitResponse.wxPersonalizedSetting:type_name -> FinderWxPersonalizedSetting
	537, // 841: FinderInitResponse.ringtoneConfig:type_name -> FinderRingtoneConfig
	569, // 842: FinderLiveSetSockPuppetAttrRequest.baseRequest:type_name -> BaseRequest
	37,  // 843: FinderLiveSetSockPuppetAttrRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 844: FinderLiveSetSockPuppetAttrResponse.baseResponse:type_name -> BaseResponse
	297, // 845: FinderLiveSetSockPuppetAttrResponse.aliasInfo:type_name -> FinderLiveAliasInfo
	569, // 846: FinderLiveSwitchIdentityRequest.baseRequest:type_name -> BaseRequest
	37,  // 847: FinderLiveSwitchIdentityRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 848: FinderLiveSwitchIdentityResponse.baseResponse:type_name -> BaseResponse
	569, // 849: FinderLiveClearAliasRoleRequest.baseRequest:type_name -> BaseRequest
	37,  // 850: FinderLiveClearAliasRoleRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 851: FinderLiveClearAliasRoleResponse.baseResponse:type_name -> BaseResponse
	569, // 852: FinderOplogRequest.baseRequest:type_name -> BaseRequest
	48,  // 853: FinderOplogRequest.cmdList:type_name -> FinderCmdItem
	37,  // 854: FinderOplogRequest.finderBasereq:type_name -> FinderBaseRequest
	568, // 855: FinderOplogResponse.baseResponse:type_name -> BaseResponse
	546, // 856: FinderOplogResponse.retList:type_name -> FinderCmdRet
	96,  // 857: FinderLiveAppMsgLocationInfo.location:type_name -> FinderLocation
	569, // 858: FinderPostLiveAppMsgRequest.baseRequest:type_name -> BaseRequest
	37,  // 859: FinderPostLiveAppMsgRequest.finderBasereq:type_name -> FinderBaseRequest
	476, // 860: FinderPostLiveAppMsgRequest.msg:type_name -> FinderLiveAppMsg
	568, // 861: FinderPostLiveAppMsgResponse.baseResponse:type_name -> BaseResponse
	575, // 862: AddBypMsg.msg:type_name -> AddMsg
	556, // 863: GetOpenIMKefuContactReq.context:type_name -> GetOpenIMKefuContactContext
	557, // 864: GetOpenIMKefuContactReq.clientStatus:type_name -> GetOpenIMKefuContactClientStatus
	559, // 865: OpenIMKefuPersonalSetting.locationOption:type_name -> LocationOption
	561, // 866: OpenIMKefuContact.customInfo:type_name -> OpenIMContactCustomInfo
	560, // 867: OpenIMKefuContact.setting:type_name -> OpenIMKefuPersonalSetting
	563, // 868: AddOpenIMKefuContactContext.newNotifyCtx:type_name -> OpenIMKefuNotifyCtx
	568, // 869: GetOpenIMKefuContactResp.baseResponse:type_name -> BaseResponse
	562, // 870: GetOpenIMKefuContactResp.contact:type_name -> OpenIMKefuContact
	564, // 871: AddOpenIMKefuContactReq.context:type_name -> AddOpenIMKefuContactContext
	568, // 872: AddOpenIMKefuContactResp.baseResponse:type_name -> BaseResponse
	873, // [873:873] is the sub-list for method output_type
	873, // [873:873] is the sub-list for method input_type
	873, // [873:873] is the sub-list for extension type_name
	873, // [873:873] is the sub-list for extension extendee
	0,   // [0:873] is the sub-list for field type_name
}

func init() { file_Finder_proto_init() }
func file_Finder_proto_init() {
	if File_Finder_proto != nil {
		return
	}
	file_MicroMsgBase_proto_init()
	file_AddMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Finder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderOriginalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactMsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveNoticeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MicSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveLotterySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactLiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGuestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBizInfo_BizAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBizInfo_BizInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMiniAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBizInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderWecomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderQQMusicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBindInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementInfo_GameAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchievementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJumpInfo_MiniAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJumpInfo_Html5Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJumpInfo_NativeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJumpInfo_SchemaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJumpInfoRedDot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJumpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientContextInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStatsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTipsShowInfo_IconConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeTitle_SubContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeTitle_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTipsShowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderRedDotCtrlInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSyncClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSyncClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCmdItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCheckExpireInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderWaitDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSpeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderDownloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFluencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoWaitDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoDownloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoFluencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStatsReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStatsReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderExtStatsReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderExtStatsReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkReadStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUnreadItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveWaitDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveQoSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamTopObjectItem_ObjectItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamTopObjectItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCommByPass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamSceneStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveBeforeJoinLiveRoomStatus_FinderLiveBeforeJoinLiveRoomNetWorkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveBeforeJoinLiveRoomStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamRelatedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMediaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMediaCodecInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdnTransInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveCdnTransInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoPKParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSdkVideoParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveMediaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderHlsMediaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderHlsMediaSpecList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderHalfRect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderHdrMediaSpecList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMediaExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderExtendedReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMentionedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMusicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMentionedMusic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLongVideoDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectBGMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFromAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderEventWordingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectEventDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMVInfo_ClientDraftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMVInfo_FinderMVTrackReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMVInfo_FinderMVTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMVInfo_FinderMVSongInfo_FinderMVSongOperationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMVInfo_FinderMVSongInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMVInfo_FinderMVOriginalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMVInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTopicHashTagInfo_TopicHashTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTopicHashTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderEventDescriptionContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderEventInfo_TemplateVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderClientDraftExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderVideoTemplateInfo_VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderVideoTemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGeneralReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginalSoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCommentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveSdkChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveTabInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSdkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveLayerShowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveUrlOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLivePurchaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveBadgeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveRoomData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveMicAudienceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveMicPkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveBattleInfo_PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveBattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveMicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBizUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveReplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFoldedLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderVideoMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderVideoDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectHotTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectHotTopicList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoMediaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMediaSpecList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoExtendedReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoFinderBusiness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderVideoAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMiniAppAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJumpInfoAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderAttachmentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSnsShareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectWebInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAdDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAdContentH5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAdContentMiniApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAdContentLeadLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAdItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectAdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchHotWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectHotWordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTipsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectClientLocalBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPublisherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectPlaceHolderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectFavInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderForwardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCollectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPreloadUserpageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectAdvertisementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectExtend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderRecommendLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMusicRealtimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPlayHistoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPromotionJumpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFlowCardRecommendReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderIpRegionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPreloadGlobalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPreloadObjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MegaVideoFinderPreloadObjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPreloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactRecommendItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactRecommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTopicBgmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTopicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTopicRecommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCategoryRecommend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiTopicSubTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetTopicListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetTopicListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetRelatedEntranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetRelatedListReq_SwitchColumnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetRelatedListReq_GetColumnFeedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetRelatedListReq_GetRelatedColumnTopicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetRelatedListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamCardActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamTxtCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLivePreloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamJumpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamDivider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveStreamNoticeCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveStreamJumper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBannerExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveRelatedExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderAdExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveStreamCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamLayoutInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLikeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGuideBarItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBarItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetRelatedListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamPrefechTimeIntervalConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetBuzzwordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buzzword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuzzwordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetBuzzwordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCollectUnreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCollectUnreadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectUidUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBatchGetObjectAsyncLoadInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJoinLiveTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLivePreJoinLiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectDigestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPurchaseLivePreviewInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectAsyncLoadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactAsyncLoadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBatchGetObjectAsyncLoadInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLivePermissionVerifyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetCommentDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetCommentDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFavReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFavResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLikeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLikeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealTimeKVReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealTimeKVReportResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCommentMentionedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveReportBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFollowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFollowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVCommReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CliReportKVDataPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeavyUserReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CliReportKVReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewStrategyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorIdMapStrategyInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeavyUserRespInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CliReportKVResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommRequestSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaClientPublicLibInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaAttrSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaAttrSyncResp_KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaAttrSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreGetDownloadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageUrlInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreGetDownloadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetPurchasedFeedListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetPurchasedFeedListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPrepareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderNicknameVerifyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCenterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderWxAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctTransferConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostActionSheet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostActionSheetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcctConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountExtraSettingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveAliasInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleToAgencyRelateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPreparePoiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgencyCollaborateInfo_EntranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgencyCollaborateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostActionWording); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveWxaPreloadCtrlInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveWxaPreloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRankSwitchInfo_GameRankSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRankSwitchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPrivacySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPrepareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColdStartFetchDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColdStartFetchDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaAppBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaPluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaWebLaunchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaJumpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaMaterialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchWxaAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckJsApiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicLibUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSheetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchWxaAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPackageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalPackageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDownloadUrlReqItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDownloadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDownloadUrlRespItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetDownloadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSOperateWxDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSAPIBaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSOperateWxDataResponse_DebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAvatarItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAvatarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertPrivacyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSOperateWxDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaAttrSyncSingleReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchWxaAttrSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaAttrSyncSingleRespInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchWxaAttrSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveUserPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveUserPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetAllWindowProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderWindowProductInfo_DetailPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderWeChatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveShopCustomerServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderWindowProductInfo_CouponInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderWindowProductInfo_ExclusiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderWindowProductInfo_ProductReplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderWindowProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetAllWindowProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMVUserPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMVUserPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMusicUserPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMusicUserPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetMentionedListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetMentionedListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginalEntranceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiGps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiCategories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiAliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiIntro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiCoupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiReviewContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiBusinessTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiFormatBusinessTime_Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiFormatBusinessTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiBusinessHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiReservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiTakeAway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiSourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiRecommendMenuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiQueueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoiDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsPoiDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPagePoi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJustWatchControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetMsgSessionIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMsgSessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetMsgSessionIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactFansInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactCommentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactCommentLikeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetContactListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetContactListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaRealTimeReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypMsgText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypMsgImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypMsgVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypMsgEmoji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypMsgPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypSendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypSendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypSyncKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypSyncKeyBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypSyncItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypSyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaAppRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaAppIDKeyBatchReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaAppIDKeyBatchReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveTabsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveLbsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveTabsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLbsTabTipsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPressureCtrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLbsLiveStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJumpLiveTab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLbsLiveStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMidasSdkInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMidasSdkInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveOnlineMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveRecentRewardOnlineMember_GiftItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveRecentRewardOnlineMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveOnlineMemberResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInitDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInitDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveRelatedListReadStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveRelatedListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveRelatedListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJoinLiveTabTipsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJoinLiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveShopWindowProductItem_ProductPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveShopWindowProductItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveTemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheerIconInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveAdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJoinLiveResp_PromotingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveBackgroundMusicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameTeamUpPaymentSetting_DefaultPaymentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameTeamUpPaymentSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLiveJoinTeamSettingInfo_JoinTeamQualificationsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLiveJoinTeamSettingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveErrorPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveBulletin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveCheerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLiveJumpInfo_FinderLiveWeappJumpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLiveJumpInfo_FinderLiveJumpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLiveJumpInfo_FinderLiveFineGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLiveJumpInfo_FinderLiveWxaGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLiveJumpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveFanClubInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLivePromoteMsgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralGameLiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveAudienceEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJoinLiveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveSyncExtraInfoRequest_SyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveSyncExtraInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveSyncExtraInfoResponse_SyncResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveSyncExtraInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveRewardGiftListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveRewardGiftListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveAppMsgOption_VersionControlInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveAppMsgOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveAppMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveMsgResp_LiveMsgClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetLiveMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveGetShopShelfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveShopWindowItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderReplayRecordSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveGetShopShelfResponse_ShopWindowProfileInfo_LiteAppJumpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveGetShopShelfResponse_ShopWindowProfileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveGetShopShelfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMarkReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMarkReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncVersionSingleReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreDownloadCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncBaseCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncGetContactCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncGetCodeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncIssueContactCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncIssueLaunchCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncIssueDecryptKeyCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncUpdateVersionCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncBlockCgiRequestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncPreLaunchCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncInvalidCodeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncInvalidContactCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncPullGlobalConfCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxaSyncCmds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncVersionSingleRespInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreDownloadCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPostLiveMsgReportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPostLiveMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPostLiveMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWecoinBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWecoinBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLikeLiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLikeLiveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HongBaoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HongBaoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRedPacketStoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketStoryInfo_StoryDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverInfoDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketStoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRedPacketStoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRoomWatchMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RingBackSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchSuggestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchSuggestResponse_Suggestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchSuggestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTopicSearchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMusicSearchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchSecurityTips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTabInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WXUserAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTeenModeTipsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTeenModeSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSlideUpGuideConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderWxPersonalizedSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderRingtoneConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveSetSockPuppetAttrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveSetSockPuppetAttrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveSwitchIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveSwitchIdentityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveClearAliasRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveClearAliasRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderOplogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[546].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCmdRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[547].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderOplogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[548].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderRemoveFansSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[549].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderModBlockPosterSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[550].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderModProfileStickySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[551].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderModMsgSessionMuteSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[552].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLiveAppMsgLocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[553].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPostLiveAppMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[554].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPostLiveAppMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[555].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBypMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[556].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenIMKefuContactContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[557].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenIMKefuContactClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[558].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenIMKefuContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[559].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[560].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIMKefuPersonalSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[561].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIMContactCustomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[562].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIMKefuContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[563].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIMKefuNotifyCtx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[564].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOpenIMKefuContactContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[565].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpenIMKefuContactResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[566].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOpenIMKefuContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Finder_proto_msgTypes[567].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOpenIMKefuContactResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Finder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   568,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Finder_proto_goTypes,
		DependencyIndexes: file_Finder_proto_depIdxs,
		MessageInfos:      file_Finder_proto_msgTypes,
	}.Build()
	File_Finder_proto = out.File
	file_Finder_proto_rawDesc = nil
	file_Finder_proto_goTypes = nil
	file_Finder_proto_depIdxs = nil
}
