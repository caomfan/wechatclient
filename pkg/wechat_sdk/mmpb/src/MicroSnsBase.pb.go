// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: MicroSnsBase.proto

package micromsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnsMediaType int32

const (
	SnsMediaType_MMSNS_DATA_OK    SnsMediaType = 0
	SnsMediaType_MMSNS_DATA_TEXT  SnsMediaType = 1
	SnsMediaType_MMSNS_DATA_PHOTO SnsMediaType = 2
	SnsMediaType_MMSNS_DATA_VOICE SnsMediaType = 3
	SnsMediaType_MMSNS_DATA_VIDEO SnsMediaType = 4
	SnsMediaType_MMSNS_DATA_MUSIC SnsMediaType = 5
	SnsMediaType_MMSNS_DATA_SIGHT SnsMediaType = 6
)

// Enum value maps for SnsMediaType.
var (
	SnsMediaType_name = map[int32]string{
		0: "MMSNS_DATA_OK",
		1: "MMSNS_DATA_TEXT",
		2: "MMSNS_DATA_PHOTO",
		3: "MMSNS_DATA_VOICE",
		4: "MMSNS_DATA_VIDEO",
		5: "MMSNS_DATA_MUSIC",
		6: "MMSNS_DATA_SIGHT",
	}
	SnsMediaType_value = map[string]int32{
		"MMSNS_DATA_OK":    0,
		"MMSNS_DATA_TEXT":  1,
		"MMSNS_DATA_PHOTO": 2,
		"MMSNS_DATA_VOICE": 3,
		"MMSNS_DATA_VIDEO": 4,
		"MMSNS_DATA_MUSIC": 5,
		"MMSNS_DATA_SIGHT": 6,
	}
)

func (x SnsMediaType) Enum() *SnsMediaType {
	p := new(SnsMediaType)
	*p = x
	return p
}

func (x SnsMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnsMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_MicroSnsBase_proto_enumTypes[0].Descriptor()
}

func (SnsMediaType) Type() protoreflect.EnumType {
	return &file_MicroSnsBase_proto_enumTypes[0]
}

func (x SnsMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SnsMediaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SnsMediaType(num)
	return nil
}

// Deprecated: Use SnsMediaType.Descriptor instead.
func (SnsMediaType) EnumDescriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{0}
}

type SnsHBUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   *string           `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	CreateTime *uint32           `protobuf:"varint,2,opt,name=createTime" json:"createTime,omitempty"`
	Hbbuffer   *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=hbbuffer" json:"hbbuffer,omitempty"`
}

func (x *SnsHBUserInfo) Reset() {
	*x = SnsHBUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsHBUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsHBUserInfo) ProtoMessage() {}

func (x *SnsHBUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsHBUserInfo.ProtoReflect.Descriptor instead.
func (*SnsHBUserInfo) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{0}
}

func (x *SnsHBUserInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *SnsHBUserInfo) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *SnsHBUserInfo) GetHbbuffer() *SKBuiltinBufferT {
	if x != nil {
		return x.Hbbuffer
	}
	return nil
}

type SnsRedEnvelops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardCount    *uint32          `protobuf:"varint,1,opt,name=rewardCount" json:"rewardCount,omitempty"`
	RewardUserList []*SnsHBUserInfo `protobuf:"bytes,2,rep,name=rewardUserList" json:"rewardUserList,omitempty"`
	ResourceId     *uint32          `protobuf:"varint,3,opt,name=resourceId" json:"resourceId,omitempty"`
	ReportId       *uint32          `protobuf:"varint,4,opt,name=reportId" json:"reportId,omitempty"`
	ReportKey      *uint32          `protobuf:"varint,5,opt,name=reportKey" json:"reportKey,omitempty"`
}

func (x *SnsRedEnvelops) Reset() {
	*x = SnsRedEnvelops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsRedEnvelops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsRedEnvelops) ProtoMessage() {}

func (x *SnsRedEnvelops) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsRedEnvelops.ProtoReflect.Descriptor instead.
func (*SnsRedEnvelops) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{1}
}

func (x *SnsRedEnvelops) GetRewardCount() uint32 {
	if x != nil && x.RewardCount != nil {
		return *x.RewardCount
	}
	return 0
}

func (x *SnsRedEnvelops) GetRewardUserList() []*SnsHBUserInfo {
	if x != nil {
		return x.RewardUserList
	}
	return nil
}

func (x *SnsRedEnvelops) GetResourceId() uint32 {
	if x != nil && x.ResourceId != nil {
		return *x.ResourceId
	}
	return 0
}

func (x *SnsRedEnvelops) GetReportId() uint32 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *SnsRedEnvelops) GetReportKey() uint32 {
	if x != nil && x.ReportKey != nil {
		return *x.ReportKey
	}
	return 0
}

type SnsWeAppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapPoiId    *string `protobuf:"bytes,1,opt,name=mapPoiId" json:"mapPoiId,omitempty"`
	AppId       *uint32 `protobuf:"varint,2,opt,name=appId" json:"appId,omitempty"`
	UserName    *string `protobuf:"bytes,3,opt,name=userName" json:"userName,omitempty"`
	RedirectUrl *string `protobuf:"bytes,4,opt,name=redirectUrl" json:"redirectUrl,omitempty"`
	ShowType    *uint32 `protobuf:"varint,5,opt,name=showType" json:"showType,omitempty"`
	Score       *uint32 `protobuf:"varint,6,opt,name=score" json:"score,omitempty"`
}

func (x *SnsWeAppInfo) Reset() {
	*x = SnsWeAppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsWeAppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsWeAppInfo) ProtoMessage() {}

func (x *SnsWeAppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsWeAppInfo.ProtoReflect.Descriptor instead.
func (*SnsWeAppInfo) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{2}
}

func (x *SnsWeAppInfo) GetMapPoiId() string {
	if x != nil && x.MapPoiId != nil {
		return *x.MapPoiId
	}
	return ""
}

func (x *SnsWeAppInfo) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *SnsWeAppInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *SnsWeAppInfo) GetRedirectUrl() string {
	if x != nil && x.RedirectUrl != nil {
		return *x.RedirectUrl
	}
	return ""
}

func (x *SnsWeAppInfo) GetShowType() uint32 {
	if x != nil && x.ShowType != nil {
		return *x.ShowType
	}
	return 0
}

func (x *SnsWeAppInfo) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type SnsBufferUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Type *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
}

func (x *SnsBufferUrl) Reset() {
	*x = SnsBufferUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsBufferUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsBufferUrl) ProtoMessage() {}

func (x *SnsBufferUrl) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsBufferUrl.ProtoReflect.Descriptor instead.
func (*SnsBufferUrl) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{3}
}

func (x *SnsBufferUrl) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *SnsBufferUrl) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type SnsCommentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username        *string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Nickname        *string `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Source          *uint32 `protobuf:"varint,3,req,name=source" json:"source,omitempty"`
	Type            *uint32 `protobuf:"varint,4,req,name=type" json:"type,omitempty"`
	Content         *string `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
	CreateTime      *uint32 `protobuf:"varint,6,req,name=createTime" json:"createTime,omitempty"`
	CommentId       *int32  `protobuf:"varint,7,opt,name=commentId" json:"commentId,omitempty"`
	ReplyCommentId  *int32  `protobuf:"varint,8,opt,name=replyCommentId" json:"replyCommentId,omitempty"`
	ReplyUsername   *string `protobuf:"bytes,9,opt,name=replyUsername" json:"replyUsername,omitempty"`
	IsNotRichText   *uint32 `protobuf:"varint,10,opt,name=isNotRichText" json:"isNotRichText,omitempty"`
	ReplyCommentId2 *uint64 `protobuf:"varint,11,opt,name=replyCommentId2" json:"replyCommentId2,omitempty"`
	CommentId2      *uint64 `protobuf:"varint,12,opt,name=commentId2" json:"commentId2,omitempty"`
	DeleteFlag      *uint32 `protobuf:"varint,13,opt,name=deleteFlag" json:"deleteFlag,omitempty"`
	CommentFlag     *uint32 `protobuf:"varint,14,opt,name=commentFlag" json:"commentFlag,omitempty"`
}

func (x *SnsCommentInfo) Reset() {
	*x = SnsCommentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsCommentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsCommentInfo) ProtoMessage() {}

func (x *SnsCommentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsCommentInfo.ProtoReflect.Descriptor instead.
func (*SnsCommentInfo) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{4}
}

func (x *SnsCommentInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *SnsCommentInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *SnsCommentInfo) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *SnsCommentInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *SnsCommentInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *SnsCommentInfo) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *SnsCommentInfo) GetCommentId() int32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *SnsCommentInfo) GetReplyCommentId() int32 {
	if x != nil && x.ReplyCommentId != nil {
		return *x.ReplyCommentId
	}
	return 0
}

func (x *SnsCommentInfo) GetReplyUsername() string {
	if x != nil && x.ReplyUsername != nil {
		return *x.ReplyUsername
	}
	return ""
}

func (x *SnsCommentInfo) GetIsNotRichText() uint32 {
	if x != nil && x.IsNotRichText != nil {
		return *x.IsNotRichText
	}
	return 0
}

func (x *SnsCommentInfo) GetReplyCommentId2() uint64 {
	if x != nil && x.ReplyCommentId2 != nil {
		return *x.ReplyCommentId2
	}
	return 0
}

func (x *SnsCommentInfo) GetCommentId2() uint64 {
	if x != nil && x.CommentId2 != nil {
		return *x.CommentId2
	}
	return 0
}

func (x *SnsCommentInfo) GetDeleteFlag() uint32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

func (x *SnsCommentInfo) GetCommentFlag() uint32 {
	if x != nil && x.CommentFlag != nil {
		return *x.CommentFlag
	}
	return 0
}

type SnsGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId *uint64 `protobuf:"varint,1,req,name=groupId" json:"groupId,omitempty"`
}

func (x *SnsGroup) Reset() {
	*x = SnsGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsGroup) ProtoMessage() {}

func (x *SnsGroup) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsGroup.ProtoReflect.Descriptor instead.
func (*SnsGroup) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{5}
}

func (x *SnsGroup) GetGroupId() uint64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type PreDownloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreDownloadPercent *uint32 `protobuf:"varint,1,opt,name=preDownloadPercent" json:"preDownloadPercent,omitempty"`
	PreDownloadNetType *uint32 `protobuf:"varint,2,opt,name=preDownloadNetType" json:"preDownloadNetType,omitempty"`
	NoPreDownloadRange *string `protobuf:"bytes,3,opt,name=noPreDownloadRange" json:"noPreDownloadRange,omitempty"`
}

func (x *PreDownloadInfo) Reset() {
	*x = PreDownloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreDownloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreDownloadInfo) ProtoMessage() {}

func (x *PreDownloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreDownloadInfo.ProtoReflect.Descriptor instead.
func (*PreDownloadInfo) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{6}
}

func (x *PreDownloadInfo) GetPreDownloadPercent() uint32 {
	if x != nil && x.PreDownloadPercent != nil {
		return *x.PreDownloadPercent
	}
	return 0
}

func (x *PreDownloadInfo) GetPreDownloadNetType() uint32 {
	if x != nil && x.PreDownloadNetType != nil {
		return *x.PreDownloadNetType
	}
	return 0
}

func (x *PreDownloadInfo) GetNoPreDownloadRange() string {
	if x != nil && x.NoPreDownloadRange != nil {
		return *x.NoPreDownloadRange
	}
	return ""
}

type SnsObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *uint64             `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Username             *string             `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Nickname             *string             `protobuf:"bytes,3,opt,name=nickname" json:"nickname,omitempty"`
	CreateTime           *uint32             `protobuf:"varint,4,req,name=createTime" json:"createTime,omitempty"`
	ObjectDesc           *SKBuiltinBufferT   `protobuf:"bytes,5,req,name=objectDesc" json:"objectDesc,omitempty"`
	LikeFlag             *uint32             `protobuf:"varint,6,req,name=likeFlag" json:"likeFlag,omitempty"`
	LikeCount            *uint32             `protobuf:"varint,7,req,name=likeCount" json:"likeCount,omitempty"`
	LikeUserListCount    *uint32             `protobuf:"varint,8,req,name=likeUserListCount" json:"likeUserListCount,omitempty"`
	LikeUserList         []*SnsCommentInfo   `protobuf:"bytes,9,rep,name=likeUserList" json:"likeUserList,omitempty"`
	CommentCount         *uint32             `protobuf:"varint,10,req,name=commentCount" json:"commentCount,omitempty"`
	CommentUserListCount *uint32             `protobuf:"varint,11,req,name=commentUserListCount" json:"commentUserListCount,omitempty"`
	CommentUserList      []*SnsCommentInfo   `protobuf:"bytes,12,rep,name=commentUserList" json:"commentUserList,omitempty"`
	WithUserCount        *uint32             `protobuf:"varint,13,req,name=withUserCount" json:"withUserCount,omitempty"`
	WithUserListCount    *uint32             `protobuf:"varint,14,req,name=withUserListCount" json:"withUserListCount,omitempty"`
	WithUserList         []*SnsCommentInfo   `protobuf:"bytes,15,rep,name=withUserList" json:"withUserList,omitempty"`
	ExtFlag              *uint32             `protobuf:"varint,16,opt,name=extFlag" json:"extFlag,omitempty"`
	NoChange             *uint32             `protobuf:"varint,17,opt,name=noChange" json:"noChange,omitempty"`
	GroupCount           *uint32             `protobuf:"varint,18,opt,name=groupCount" json:"groupCount,omitempty"`
	GroupList            []*SnsGroup         `protobuf:"bytes,19,rep,name=groupList" json:"groupList,omitempty"`
	IsNotRichText        *uint32             `protobuf:"varint,20,opt,name=isNotRichText" json:"isNotRichText,omitempty"`
	ReferUsername        *string             `protobuf:"bytes,21,opt,name=referUsername" json:"referUsername,omitempty"`
	ReferId              *uint64             `protobuf:"varint,22,opt,name=referId" json:"referId,omitempty"`
	BlackListCount       *uint32             `protobuf:"varint,23,opt,name=blackListCount" json:"blackListCount,omitempty"`
	BlackList            []*SKBuiltinStringT `protobuf:"bytes,24,rep,name=blackList" json:"blackList,omitempty"`
	DeleteFlag           *uint32             `protobuf:"varint,25,opt,name=deleteFlag" json:"deleteFlag,omitempty"`
	GroupUserCount       *uint32             `protobuf:"varint,26,opt,name=groupUserCount" json:"groupUserCount,omitempty"`
	GroupUser            []*SKBuiltinStringT `protobuf:"bytes,27,rep,name=groupUser" json:"groupUser,omitempty"`
	ObjectOperations     *SKBuiltinBufferT   `protobuf:"bytes,28,opt,name=objectOperations" json:"objectOperations,omitempty"`
	SnsRedEnvelops       *SnsRedEnvelops     `protobuf:"bytes,29,opt,name=snsRedEnvelops" json:"snsRedEnvelops,omitempty"`
	PreDownloadInfo      *PreDownloadInfo    `protobuf:"bytes,30,opt,name=preDownloadInfo" json:"preDownloadInfo,omitempty"`
	WeAppInfo            *SnsWeAppInfo       `protobuf:"bytes,31,opt,name=weAppInfo" json:"weAppInfo,omitempty"`
}

func (x *SnsObject) Reset() {
	*x = SnsObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsObject) ProtoMessage() {}

func (x *SnsObject) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsObject.ProtoReflect.Descriptor instead.
func (*SnsObject) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{7}
}

func (x *SnsObject) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SnsObject) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *SnsObject) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *SnsObject) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *SnsObject) GetObjectDesc() *SKBuiltinBufferT {
	if x != nil {
		return x.ObjectDesc
	}
	return nil
}

func (x *SnsObject) GetLikeFlag() uint32 {
	if x != nil && x.LikeFlag != nil {
		return *x.LikeFlag
	}
	return 0
}

func (x *SnsObject) GetLikeCount() uint32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *SnsObject) GetLikeUserListCount() uint32 {
	if x != nil && x.LikeUserListCount != nil {
		return *x.LikeUserListCount
	}
	return 0
}

func (x *SnsObject) GetLikeUserList() []*SnsCommentInfo {
	if x != nil {
		return x.LikeUserList
	}
	return nil
}

func (x *SnsObject) GetCommentCount() uint32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *SnsObject) GetCommentUserListCount() uint32 {
	if x != nil && x.CommentUserListCount != nil {
		return *x.CommentUserListCount
	}
	return 0
}

func (x *SnsObject) GetCommentUserList() []*SnsCommentInfo {
	if x != nil {
		return x.CommentUserList
	}
	return nil
}

func (x *SnsObject) GetWithUserCount() uint32 {
	if x != nil && x.WithUserCount != nil {
		return *x.WithUserCount
	}
	return 0
}

func (x *SnsObject) GetWithUserListCount() uint32 {
	if x != nil && x.WithUserListCount != nil {
		return *x.WithUserListCount
	}
	return 0
}

func (x *SnsObject) GetWithUserList() []*SnsCommentInfo {
	if x != nil {
		return x.WithUserList
	}
	return nil
}

func (x *SnsObject) GetExtFlag() uint32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *SnsObject) GetNoChange() uint32 {
	if x != nil && x.NoChange != nil {
		return *x.NoChange
	}
	return 0
}

func (x *SnsObject) GetGroupCount() uint32 {
	if x != nil && x.GroupCount != nil {
		return *x.GroupCount
	}
	return 0
}

func (x *SnsObject) GetGroupList() []*SnsGroup {
	if x != nil {
		return x.GroupList
	}
	return nil
}

func (x *SnsObject) GetIsNotRichText() uint32 {
	if x != nil && x.IsNotRichText != nil {
		return *x.IsNotRichText
	}
	return 0
}

func (x *SnsObject) GetReferUsername() string {
	if x != nil && x.ReferUsername != nil {
		return *x.ReferUsername
	}
	return ""
}

func (x *SnsObject) GetReferId() uint64 {
	if x != nil && x.ReferId != nil {
		return *x.ReferId
	}
	return 0
}

func (x *SnsObject) GetBlackListCount() uint32 {
	if x != nil && x.BlackListCount != nil {
		return *x.BlackListCount
	}
	return 0
}

func (x *SnsObject) GetBlackList() []*SKBuiltinStringT {
	if x != nil {
		return x.BlackList
	}
	return nil
}

func (x *SnsObject) GetDeleteFlag() uint32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

func (x *SnsObject) GetGroupUserCount() uint32 {
	if x != nil && x.GroupUserCount != nil {
		return *x.GroupUserCount
	}
	return 0
}

func (x *SnsObject) GetGroupUser() []*SKBuiltinStringT {
	if x != nil {
		return x.GroupUser
	}
	return nil
}

func (x *SnsObject) GetObjectOperations() *SKBuiltinBufferT {
	if x != nil {
		return x.ObjectOperations
	}
	return nil
}

func (x *SnsObject) GetSnsRedEnvelops() *SnsRedEnvelops {
	if x != nil {
		return x.SnsRedEnvelops
	}
	return nil
}

func (x *SnsObject) GetPreDownloadInfo() *PreDownloadInfo {
	if x != nil {
		return x.PreDownloadInfo
	}
	return nil
}

func (x *SnsObject) GetWeAppInfo() *SnsWeAppInfo {
	if x != nil {
		return x.WeAppInfo
	}
	return nil
}

type SnsAdObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnsObject *SnsObject        `protobuf:"bytes,1,req,name=snsObject" json:"snsObject,omitempty"`
	AdXml     *SKBuiltinStringT `protobuf:"bytes,2,opt,name=adXml" json:"adXml,omitempty"`
}

func (x *SnsAdObject) Reset() {
	*x = SnsAdObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsAdObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsAdObject) ProtoMessage() {}

func (x *SnsAdObject) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsAdObject.ProtoReflect.Descriptor instead.
func (*SnsAdObject) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{8}
}

func (x *SnsAdObject) GetSnsObject() *SnsObject {
	if x != nil {
		return x.SnsObject
	}
	return nil
}

func (x *SnsAdObject) GetAdXml() *SKBuiltinStringT {
	if x != nil {
		return x.AdXml
	}
	return nil
}

type AdvertiseObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnsAdObject *SnsAdObject      `protobuf:"bytes,1,req,name=snsAdObject" json:"snsAdObject,omitempty"`
	AdInfo      *SKBuiltinStringT `protobuf:"bytes,2,opt,name=adInfo" json:"adInfo,omitempty"`
}

func (x *AdvertiseObject) Reset() {
	*x = AdvertiseObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvertiseObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertiseObject) ProtoMessage() {}

func (x *AdvertiseObject) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertiseObject.ProtoReflect.Descriptor instead.
func (*AdvertiseObject) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{9}
}

func (x *AdvertiseObject) GetSnsAdObject() *SnsAdObject {
	if x != nil {
		return x.SnsAdObject
	}
	return nil
}

func (x *AdvertiseObject) GetAdInfo() *SKBuiltinStringT {
	if x != nil {
		return x.AdInfo
	}
	return nil
}

type SnsServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostMentionLimit      *int32 `protobuf:"varint,1,opt,name=postMentionLimit" json:"postMentionLimit,omitempty"`
	CopyAndPasteWordLimit *int32 `protobuf:"varint,2,opt,name=copyAndPasteWordLimit" json:"copyAndPasteWordLimit,omitempty"`
}

func (x *SnsServerConfig) Reset() {
	*x = SnsServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsServerConfig) ProtoMessage() {}

func (x *SnsServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsServerConfig.ProtoReflect.Descriptor instead.
func (*SnsServerConfig) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{10}
}

func (x *SnsServerConfig) GetPostMentionLimit() int32 {
	if x != nil && x.PostMentionLimit != nil {
		return *x.PostMentionLimit
	}
	return 0
}

func (x *SnsServerConfig) GetCopyAndPasteWordLimit() int32 {
	if x != nil && x.CopyAndPasteWordLimit != nil {
		return *x.CopyAndPasteWordLimit
	}
	return 0
}

type SnsPostCtocUploadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag       *uint32 `protobuf:"varint,1,req,name=flag" json:"flag,omitempty"`
	PhotoCount *uint32 `protobuf:"varint,2,req,name=photoCount" json:"photoCount,omitempty"`
}

func (x *SnsPostCtocUploadInfo) Reset() {
	*x = SnsPostCtocUploadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsPostCtocUploadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsPostCtocUploadInfo) ProtoMessage() {}

func (x *SnsPostCtocUploadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsPostCtocUploadInfo.ProtoReflect.Descriptor instead.
func (*SnsPostCtocUploadInfo) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{11}
}

func (x *SnsPostCtocUploadInfo) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *SnsPostCtocUploadInfo) GetPhotoCount() uint32 {
	if x != nil && x.PhotoCount != nil {
		return *x.PhotoCount
	}
	return 0
}

type TwitterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OauthToken       *string `protobuf:"bytes,1,opt,name=oauthToken" json:"oauthToken,omitempty"`
	OauthTokenSecret *string `protobuf:"bytes,2,opt,name=oauthTokenSecret" json:"oauthTokenSecret,omitempty"`
}

func (x *TwitterInfo) Reset() {
	*x = TwitterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwitterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwitterInfo) ProtoMessage() {}

func (x *TwitterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwitterInfo.ProtoReflect.Descriptor instead.
func (*TwitterInfo) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{12}
}

func (x *TwitterInfo) GetOauthToken() string {
	if x != nil && x.OauthToken != nil {
		return *x.OauthToken
	}
	return ""
}

func (x *TwitterInfo) GetOauthTokenSecret() string {
	if x != nil && x.OauthTokenSecret != nil {
		return *x.OauthTokenSecret
	}
	return ""
}

type SnsAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromUsername    *string `protobuf:"bytes,1,opt,name=fromUsername" json:"fromUsername,omitempty"`
	ToUsername      *string `protobuf:"bytes,2,opt,name=toUsername" json:"toUsername,omitempty"`
	FromNickname    *string `protobuf:"bytes,3,opt,name=fromNickname" json:"fromNickname,omitempty"`
	ToNickname      *string `protobuf:"bytes,4,opt,name=toNickname" json:"toNickname,omitempty"`
	Type            *uint32 `protobuf:"varint,5,req,name=type" json:"type,omitempty"`
	Source          *uint32 `protobuf:"varint,6,req,name=source" json:"source,omitempty"`
	CreateTime      *uint32 `protobuf:"varint,7,opt,name=createTime" json:"createTime,omitempty"`
	Content         *string `protobuf:"bytes,8,opt,name=content" json:"content,omitempty"`
	ReplyCommentId  *int32  `protobuf:"varint,9,opt,name=replyCommentId" json:"replyCommentId,omitempty"`
	CommentId       *int32  `protobuf:"varint,10,opt,name=commentId" json:"commentId,omitempty"`
	IsNotRichText   *uint32 `protobuf:"varint,11,opt,name=isNotRichText" json:"isNotRichText,omitempty"`
	ReplyCommentId2 *uint64 `protobuf:"varint,12,opt,name=replyCommentId2" json:"replyCommentId2,omitempty"`
	CommentId2      *uint64 `protobuf:"varint,13,opt,name=commentId2" json:"commentId2,omitempty"`
}

func (x *SnsAction) Reset() {
	*x = SnsAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsAction) ProtoMessage() {}

func (x *SnsAction) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsAction.ProtoReflect.Descriptor instead.
func (*SnsAction) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{13}
}

func (x *SnsAction) GetFromUsername() string {
	if x != nil && x.FromUsername != nil {
		return *x.FromUsername
	}
	return ""
}

func (x *SnsAction) GetToUsername() string {
	if x != nil && x.ToUsername != nil {
		return *x.ToUsername
	}
	return ""
}

func (x *SnsAction) GetFromNickname() string {
	if x != nil && x.FromNickname != nil {
		return *x.FromNickname
	}
	return ""
}

func (x *SnsAction) GetToNickname() string {
	if x != nil && x.ToNickname != nil {
		return *x.ToNickname
	}
	return ""
}

func (x *SnsAction) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *SnsAction) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *SnsAction) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *SnsAction) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *SnsAction) GetReplyCommentId() int32 {
	if x != nil && x.ReplyCommentId != nil {
		return *x.ReplyCommentId
	}
	return 0
}

func (x *SnsAction) GetCommentId() int32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *SnsAction) GetIsNotRichText() uint32 {
	if x != nil && x.IsNotRichText != nil {
		return *x.IsNotRichText
	}
	return 0
}

func (x *SnsAction) GetReplyCommentId2() uint64 {
	if x != nil && x.ReplyCommentId2 != nil {
		return *x.ReplyCommentId2
	}
	return 0
}

func (x *SnsAction) GetCommentId2() uint64 {
	if x != nil && x.CommentId2 != nil {
		return *x.CommentId2
	}
	return 0
}

type SnsActionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *uint64    `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	ParentId         *uint64    `protobuf:"varint,2,opt,name=parentId" json:"parentId,omitempty"`
	CurrentAction    *SnsAction `protobuf:"bytes,3,req,name=currentAction" json:"currentAction,omitempty"`
	ReferAction      *SnsAction `protobuf:"bytes,4,opt,name=referAction" json:"referAction,omitempty"`
	ClientId         *string    `protobuf:"bytes,5,opt,name=clientId" json:"clientId,omitempty"`
	ObjectCreateTime *uint32    `protobuf:"varint,6,opt,name=objectCreateTime" json:"objectCreateTime,omitempty"`
}

func (x *SnsActionGroup) Reset() {
	*x = SnsActionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsActionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsActionGroup) ProtoMessage() {}

func (x *SnsActionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsActionGroup.ProtoReflect.Descriptor instead.
func (*SnsActionGroup) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{14}
}

func (x *SnsActionGroup) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SnsActionGroup) GetParentId() uint64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *SnsActionGroup) GetCurrentAction() *SnsAction {
	if x != nil {
		return x.CurrentAction
	}
	return nil
}

func (x *SnsActionGroup) GetReferAction() *SnsAction {
	if x != nil {
		return x.ReferAction
	}
	return nil
}

func (x *SnsActionGroup) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *SnsActionGroup) GetObjectCreateTime() uint32 {
	if x != nil && x.ObjectCreateTime != nil {
		return *x.ObjectCreateTime
	}
	return 0
}

type SnsObjectOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint64           `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	OpType *uint32           `protobuf:"varint,2,req,name=opType" json:"opType,omitempty"`
	Ext    *SKBuiltinBufferT `protobuf:"bytes,3,opt,name=ext" json:"ext,omitempty"`
}

func (x *SnsObjectOp) Reset() {
	*x = SnsObjectOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsObjectOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsObjectOp) ProtoMessage() {}

func (x *SnsObjectOp) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsObjectOp.ProtoReflect.Descriptor instead.
func (*SnsObjectOp) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{15}
}

func (x *SnsObjectOp) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SnsObjectOp) GetOpType() uint32 {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return 0
}

func (x *SnsObjectOp) GetExt() *SKBuiltinBufferT {
	if x != nil {
		return x.Ext
	}
	return nil
}

type SnsObjectOpDeleteComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId *int32 `protobuf:"varint,1,req,name=CommentId" json:"CommentId,omitempty"`
}

func (x *SnsObjectOpDeleteComment) Reset() {
	*x = SnsObjectOpDeleteComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsObjectOpDeleteComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsObjectOpDeleteComment) ProtoMessage() {}

func (x *SnsObjectOpDeleteComment) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsObjectOpDeleteComment.ProtoReflect.Descriptor instead.
func (*SnsObjectOpDeleteComment) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{16}
}

func (x *SnsObjectOpDeleteComment) GetCommentId() int32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

type SnsAdObjectOpDeleteComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId *uint64 `protobuf:"varint,1,req,name=CommentId" json:"CommentId,omitempty"`
}

func (x *SnsAdObjectOpDeleteComment) Reset() {
	*x = SnsAdObjectOpDeleteComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsAdObjectOpDeleteComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsAdObjectOpDeleteComment) ProtoMessage() {}

func (x *SnsAdObjectOpDeleteComment) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsAdObjectOpDeleteComment.ProtoReflect.Descriptor instead.
func (*SnsAdObjectOpDeleteComment) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{17}
}

func (x *SnsAdObjectOpDeleteComment) GetCommentId() uint64 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

type SnsLbsContactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName *string `protobuf:"bytes,1,opt,name=UserName" json:"UserName,omitempty"`
}

func (x *SnsLbsContactInfo) Reset() {
	*x = SnsLbsContactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsLbsContactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsLbsContactInfo) ProtoMessage() {}

func (x *SnsLbsContactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsLbsContactInfo.ProtoReflect.Descriptor instead.
func (*SnsLbsContactInfo) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{18}
}

func (x *SnsLbsContactInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type SnsPostOperationFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareUrlOriginal *string `protobuf:"bytes,1,opt,name=shareUrlOriginal" json:"shareUrlOriginal,omitempty"`
	ShareUrlOpen     *string `protobuf:"bytes,2,opt,name=shareUrlOpen" json:"shareUrlOpen,omitempty"`
	JsAppid          *string `protobuf:"bytes,3,opt,name=jsAppid" json:"jsAppid,omitempty"`
	ContactTagCount  *uint32 `protobuf:"varint,4,opt,name=contactTagCount" json:"contactTagCount,omitempty"`
	TempUserCount    *uint32 `protobuf:"varint,5,opt,name=tempUserCount" json:"tempUserCount,omitempty"`
}

func (x *SnsPostOperationFields) Reset() {
	*x = SnsPostOperationFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsPostOperationFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsPostOperationFields) ProtoMessage() {}

func (x *SnsPostOperationFields) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsPostOperationFields.ProtoReflect.Descriptor instead.
func (*SnsPostOperationFields) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{19}
}

func (x *SnsPostOperationFields) GetShareUrlOriginal() string {
	if x != nil && x.ShareUrlOriginal != nil {
		return *x.ShareUrlOriginal
	}
	return ""
}

func (x *SnsPostOperationFields) GetShareUrlOpen() string {
	if x != nil && x.ShareUrlOpen != nil {
		return *x.ShareUrlOpen
	}
	return ""
}

func (x *SnsPostOperationFields) GetJsAppid() string {
	if x != nil && x.JsAppid != nil {
		return *x.JsAppid
	}
	return ""
}

func (x *SnsPostOperationFields) GetContactTagCount() uint32 {
	if x != nil && x.ContactTagCount != nil {
		return *x.ContactTagCount
	}
	return 0
}

func (x *SnsPostOperationFields) GetTempUserCount() uint32 {
	if x != nil && x.TempUserCount != nil {
		return *x.TempUserCount
	}
	return 0
}

type MediaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source          *uint32       `protobuf:"varint,1,opt,name=source" json:"source,omitempty"`
	MediaType       *SnsMediaType `protobuf:"varint,2,opt,name=mediaType,enum=SnsMediaType" json:"mediaType,omitempty"`
	VideoPlayLength *uint32       `protobuf:"varint,3,opt,name=videoPlayLength" json:"videoPlayLength,omitempty"`
	SessionId       *string       `protobuf:"bytes,4,opt,name=sessionId" json:"sessionId,omitempty"`
	StartTime       *uint32       `protobuf:"varint,5,opt,name=startTime" json:"startTime,omitempty"`
}

func (x *MediaInfo) Reset() {
	*x = MediaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaInfo) ProtoMessage() {}

func (x *MediaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaInfo.ProtoReflect.Descriptor instead.
func (*MediaInfo) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{20}
}

func (x *MediaInfo) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *MediaInfo) GetMediaType() SnsMediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return SnsMediaType_MMSNS_DATA_OK
}

func (x *MediaInfo) GetVideoPlayLength() uint32 {
	if x != nil && x.VideoPlayLength != nil {
		return *x.VideoPlayLength
	}
	return 0
}

func (x *MediaInfo) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *MediaInfo) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

type CanvasInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataBuffer *string `protobuf:"bytes,1,opt,name=dataBuffer" json:"dataBuffer,omitempty"`
}

func (x *CanvasInfo) Reset() {
	*x = CanvasInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanvasInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanvasInfo) ProtoMessage() {}

func (x *CanvasInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanvasInfo.ProtoReflect.Descriptor instead.
func (*CanvasInfo) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{21}
}

func (x *CanvasInfo) GetDataBuffer() string {
	if x != nil && x.DataBuffer != nil {
		return *x.DataBuffer
	}
	return ""
}

type SnsRecommendObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnsObject    *SnsObject        `protobuf:"bytes,1,opt,name=snsObject" json:"snsObject,omitempty"`
	RecommendXml *SKBuiltinStringT `protobuf:"bytes,2,opt,name=recommendXml" json:"recommendXml,omitempty"`
}

func (x *SnsRecommendObject) Reset() {
	*x = SnsRecommendObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsRecommendObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsRecommendObject) ProtoMessage() {}

func (x *SnsRecommendObject) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsRecommendObject.ProtoReflect.Descriptor instead.
func (*SnsRecommendObject) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{22}
}

func (x *SnsRecommendObject) GetSnsObject() *SnsObject {
	if x != nil {
		return x.SnsObject
	}
	return nil
}

func (x *SnsRecommendObject) GetRecommendXml() *SKBuiltinStringT {
	if x != nil {
		return x.RecommendXml
	}
	return nil
}

type RecObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnsRecommendObject *SnsRecommendObject `protobuf:"bytes,1,opt,name=snsRecommendObject" json:"snsRecommendObject,omitempty"`
	RecommendInfo      *SKBuiltinStringT   `protobuf:"bytes,2,opt,name=recommendInfo" json:"recommendInfo,omitempty"`
}

func (x *RecObject) Reset() {
	*x = RecObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecObject) ProtoMessage() {}

func (x *RecObject) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecObject.ProtoReflect.Descriptor instead.
func (*RecObject) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{23}
}

func (x *RecObject) GetSnsRecommendObject() *SnsRecommendObject {
	if x != nil {
		return x.SnsRecommendObject
	}
	return nil
}

func (x *RecObject) GetRecommendInfo() *SKBuiltinStringT {
	if x != nil {
		return x.RecommendInfo
	}
	return nil
}

type DelAdvertiseObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *DelAdvertiseObject) Reset() {
	*x = DelAdvertiseObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelAdvertiseObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelAdvertiseObject) ProtoMessage() {}

func (x *DelAdvertiseObject) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelAdvertiseObject.ProtoReflect.Descriptor instead.
func (*DelAdvertiseObject) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{24}
}

func (x *DelAdvertiseObject) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type SnsAdExpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HateFeedid    *uint64 `protobuf:"varint,1,opt,name=hateFeedid" json:"hateFeedid,omitempty"`
	HateTimestamp *uint32 `protobuf:"varint,2,opt,name=hateTimestamp" json:"hateTimestamp,omitempty"`
}

func (x *SnsAdExpInfo) Reset() {
	*x = SnsAdExpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MicroSnsBase_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnsAdExpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnsAdExpInfo) ProtoMessage() {}

func (x *SnsAdExpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MicroSnsBase_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnsAdExpInfo.ProtoReflect.Descriptor instead.
func (*SnsAdExpInfo) Descriptor() ([]byte, []int) {
	return file_MicroSnsBase_proto_rawDescGZIP(), []int{25}
}

func (x *SnsAdExpInfo) GetHateFeedid() uint64 {
	if x != nil && x.HateFeedid != nil {
		return *x.HateFeedid
	}
	return 0
}

func (x *SnsAdExpInfo) GetHateTimestamp() uint32 {
	if x != nil && x.HateTimestamp != nil {
		return *x.HateTimestamp
	}
	return 0
}

var File_MicroSnsBase_proto protoreflect.FileDescriptor

var file_MicroSnsBase_proto_rawDesc = []byte{
	0x0a, 0x12, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x6e, 0x73, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x0d, 0x53, 0x6e, 0x73, 0x48,
	0x42, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x68, 0x62, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x08, 0x68, 0x62, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x53, 0x6e, 0x73, 0x52, 0x65, 0x64,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x6e, 0x73, 0x48, 0x42, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xb0, 0x01, 0x0a,
	0x0c, 0x53, 0x6e, 0x73, 0x57, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x70, 0x50, 0x6f, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x70, 0x50, 0x6f, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x34, 0x0a, 0x0c, 0x53, 0x6e, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcc, 0x03, 0x0a, 0x0e, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x69, 0x63, 0x68, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x73, 0x4e, 0x6f, 0x74,
	0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0x24, 0x0a, 0x08, 0x53, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x50,
	0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x6e, 0x6f, 0x50, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x50, 0x72,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xfb,
	0x09, 0x0a, 0x09, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x6c,
	0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x0c, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0d, 0x77, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x6e, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x69,
	0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x10, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x73, 0x6e,
	0x73, 0x52, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6e, 0x73, 0x52, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x73, 0x52, 0x0e, 0x73, 0x6e, 0x73, 0x52, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50,
	0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2b, 0x0a, 0x09, 0x77, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6e, 0x73, 0x57, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x77, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x0b,
	0x53, 0x6e, 0x73, 0x41, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x73,
	0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x61, 0x64, 0x58, 0x6d, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x05, 0x61, 0x64, 0x58, 0x6d, 0x6c, 0x22,
	0x6d, 0x0a, 0x0f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x6e, 0x73, 0x41, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x6e, 0x73, 0x41, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x6e, 0x73, 0x41, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x06, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73,
	0x0a, 0x0f, 0x53, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6f, 0x73,
	0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x15, 0x63, 0x6f, 0x70, 0x79, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f,
	0x70, 0x79, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x4b, 0x0a, 0x15, 0x53, 0x6e, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x74,
	0x6f, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x59, 0x0a, 0x0b, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xaf, 0x03, 0x0a, 0x09,
	0x53, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x69, 0x63, 0x68, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x22, 0xe4, 0x01,
	0x0a, 0x0e, 0x53, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x0b, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x03, 0x65, 0x78,
	0x74, 0x22, 0x38, 0x0a, 0x18, 0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1a, 0x53,
	0x6e, 0x73, 0x41, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x11, 0x53, 0x6e, 0x73, 0x4c, 0x62,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x16, 0x53, 0x6e, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x73, 0x41, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54,
	0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x65, 0x6d, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb6, 0x01,
	0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x12, 0x53, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x6e,
	0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x53, 0x6e, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x73, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x58, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x58, 0x6d, 0x6c, 0x22, 0x8a, 0x01, 0x0a,
	0x09, 0x52, 0x65, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x73, 0x6e,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x12, 0x73, 0x6e, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x38, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x54, 0x0a, 0x0c, 0x53, 0x6e, 0x73, 0x41, 0x64, 0x45, 0x78, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x68, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x64, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x68, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0xa4, 0x01, 0x0a, 0x0c, 0x53, 0x6e, 0x73, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4d, 0x53,
	0x4e, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x48, 0x4f,
	0x54, 0x4f, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4d,
	0x53, 0x4e, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d,
	0x55, 0x53, 0x49, 0x43, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4d, 0x53, 0x4e, 0x53, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x49, 0x47, 0x48, 0x54, 0x10, 0x06, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x6d, 0x73, 0x67,
}

var (
	file_MicroSnsBase_proto_rawDescOnce sync.Once
	file_MicroSnsBase_proto_rawDescData = file_MicroSnsBase_proto_rawDesc
)

func file_MicroSnsBase_proto_rawDescGZIP() []byte {
	file_MicroSnsBase_proto_rawDescOnce.Do(func() {
		file_MicroSnsBase_proto_rawDescData = protoimpl.X.CompressGZIP(file_MicroSnsBase_proto_rawDescData)
	})
	return file_MicroSnsBase_proto_rawDescData
}

var file_MicroSnsBase_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_MicroSnsBase_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_MicroSnsBase_proto_goTypes = []interface{}{
	(SnsMediaType)(0),                  // 0: SnsMediaType
	(*SnsHBUserInfo)(nil),              // 1: SnsHBUserInfo
	(*SnsRedEnvelops)(nil),             // 2: SnsRedEnvelops
	(*SnsWeAppInfo)(nil),               // 3: SnsWeAppInfo
	(*SnsBufferUrl)(nil),               // 4: SnsBufferUrl
	(*SnsCommentInfo)(nil),             // 5: SnsCommentInfo
	(*SnsGroup)(nil),                   // 6: SnsGroup
	(*PreDownloadInfo)(nil),            // 7: PreDownloadInfo
	(*SnsObject)(nil),                  // 8: SnsObject
	(*SnsAdObject)(nil),                // 9: SnsAdObject
	(*AdvertiseObject)(nil),            // 10: AdvertiseObject
	(*SnsServerConfig)(nil),            // 11: SnsServerConfig
	(*SnsPostCtocUploadInfo)(nil),      // 12: SnsPostCtocUploadInfo
	(*TwitterInfo)(nil),                // 13: TwitterInfo
	(*SnsAction)(nil),                  // 14: SnsAction
	(*SnsActionGroup)(nil),             // 15: SnsActionGroup
	(*SnsObjectOp)(nil),                // 16: SnsObjectOp
	(*SnsObjectOpDeleteComment)(nil),   // 17: SnsObjectOpDeleteComment
	(*SnsAdObjectOpDeleteComment)(nil), // 18: SnsAdObjectOpDeleteComment
	(*SnsLbsContactInfo)(nil),          // 19: SnsLbsContactInfo
	(*SnsPostOperationFields)(nil),     // 20: SnsPostOperationFields
	(*MediaInfo)(nil),                  // 21: MediaInfo
	(*CanvasInfo)(nil),                 // 22: CanvasInfo
	(*SnsRecommendObject)(nil),         // 23: SnsRecommendObject
	(*RecObject)(nil),                  // 24: RecObject
	(*DelAdvertiseObject)(nil),         // 25: DelAdvertiseObject
	(*SnsAdExpInfo)(nil),               // 26: SnsAdExpInfo
	(*SKBuiltinBufferT)(nil),           // 27: SKBuiltinBuffer_t
	(*SKBuiltinStringT)(nil),           // 28: SKBuiltinString_t
}
var file_MicroSnsBase_proto_depIdxs = []int32{
	27, // 0: SnsHBUserInfo.hbbuffer:type_name -> SKBuiltinBuffer_t
	1,  // 1: SnsRedEnvelops.rewardUserList:type_name -> SnsHBUserInfo
	27, // 2: SnsObject.objectDesc:type_name -> SKBuiltinBuffer_t
	5,  // 3: SnsObject.likeUserList:type_name -> SnsCommentInfo
	5,  // 4: SnsObject.commentUserList:type_name -> SnsCommentInfo
	5,  // 5: SnsObject.withUserList:type_name -> SnsCommentInfo
	6,  // 6: SnsObject.groupList:type_name -> SnsGroup
	28, // 7: SnsObject.blackList:type_name -> SKBuiltinString_t
	28, // 8: SnsObject.groupUser:type_name -> SKBuiltinString_t
	27, // 9: SnsObject.objectOperations:type_name -> SKBuiltinBuffer_t
	2,  // 10: SnsObject.snsRedEnvelops:type_name -> SnsRedEnvelops
	7,  // 11: SnsObject.preDownloadInfo:type_name -> PreDownloadInfo
	3,  // 12: SnsObject.weAppInfo:type_name -> SnsWeAppInfo
	8,  // 13: SnsAdObject.snsObject:type_name -> SnsObject
	28, // 14: SnsAdObject.adXml:type_name -> SKBuiltinString_t
	9,  // 15: AdvertiseObject.snsAdObject:type_name -> SnsAdObject
	28, // 16: AdvertiseObject.adInfo:type_name -> SKBuiltinString_t
	14, // 17: SnsActionGroup.currentAction:type_name -> SnsAction
	14, // 18: SnsActionGroup.referAction:type_name -> SnsAction
	27, // 19: SnsObjectOp.ext:type_name -> SKBuiltinBuffer_t
	0,  // 20: MediaInfo.mediaType:type_name -> SnsMediaType
	8,  // 21: SnsRecommendObject.snsObject:type_name -> SnsObject
	28, // 22: SnsRecommendObject.recommendXml:type_name -> SKBuiltinString_t
	23, // 23: RecObject.snsRecommendObject:type_name -> SnsRecommendObject
	28, // 24: RecObject.recommendInfo:type_name -> SKBuiltinString_t
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_MicroSnsBase_proto_init() }
func file_MicroSnsBase_proto_init() {
	if File_MicroSnsBase_proto != nil {
		return
	}
	file_MicroMsgBase_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_MicroSnsBase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsHBUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsRedEnvelops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsWeAppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsBufferUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsCommentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreDownloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsAdObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvertiseObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsPostCtocUploadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwitterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsActionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsObjectOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsObjectOpDeleteComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsAdObjectOpDeleteComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsLbsContactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsPostOperationFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanvasInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsRecommendObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelAdvertiseObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MicroSnsBase_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnsAdExpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MicroSnsBase_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MicroSnsBase_proto_goTypes,
		DependencyIndexes: file_MicroSnsBase_proto_depIdxs,
		EnumInfos:         file_MicroSnsBase_proto_enumTypes,
		MessageInfos:      file_MicroSnsBase_proto_msgTypes,
	}.Build()
	File_MicroSnsBase_proto = out.File
	file_MicroSnsBase_proto_rawDesc = nil
	file_MicroSnsBase_proto_goTypes = nil
	file_MicroSnsBase_proto_depIdxs = nil
}
